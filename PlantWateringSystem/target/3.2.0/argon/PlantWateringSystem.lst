
c:/Users/reed_/Documents/IoT/PredictivePlantWatering/PlantWateringSystem/target/3.2.0/argon/PlantWateringSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008eb0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000bced0  000bced0  0000ced0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bced8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000484  2003da9c  000bcedc  0001da9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008d0  2003df20  2003df20  0002df20  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bd360  000bd360  0002d360  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bd388  000bd388  0002d388  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001b0126  00000000  00000000  0002d38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001f6ce  00000000  00000000  001dd4b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004cd38  00000000  00000000  001fcb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000038e8  00000000  00000000  002498b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000c8d8  00000000  00000000  0024d1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004c796  00000000  00000000  00259a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0006853d  00000000  00000000  002a620e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00135b64  00000000  00000000  0030e74b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000ac9c  00000000  00000000  004442b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f007 fd63 	bl	bbafc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f007 fd85 	bl	bbb4c <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003da9c 	.word	0x2003da9c
   b404c:	000bcedc 	.word	0x000bcedc
   b4050:	2003df20 	.word	0x2003df20
   b4054:	2003df20 	.word	0x2003df20
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f004 fc95 	bl	b8990 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bcea0 	.word	0x000bcea0
   b4080:	000bcec8 	.word	0x000bcec8

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b8d8 	b.w	b4238 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 faa5 	bl	b45d8 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f004 bc35 	b.w	b8900 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 bf93 	b.w	b7fc0 <malloc>

000b409a <_Znaj>:
   b409a:	f003 bf91 	b.w	b7fc0 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f003 bf97 	b.w	b7fd0 <free>
	...

000b40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	2100      	movs	r1, #0
   b40aa:	200c      	movs	r0, #12
   b40ac:	f003 febc 	bl	b7e28 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b7ab9 	.word	0x000b7ab9

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40c8:	4770      	bx	lr

000b40ca <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40ca:	7c03      	ldrb	r3, [r0, #16]
   b40cc:	f013 0308 	ands.w	r3, r3, #8
   b40d0:	bf1e      	ittt	ne
   b40d2:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40d4:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40d6:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40d8:	2b00      	cmp	r3, #0
  }
   b40da:	bfac      	ite	ge
   b40dc:	4618      	movge	r0, r3
   b40de:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40e2:	4770      	bx	lr

000b40e4 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40e4:	4770      	bx	lr

000b40e6 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b40e6:	b510      	push	{r4, lr}
  }
   b40e8:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b40ea:	4604      	mov	r4, r0
  }
   b40ec:	f7ff ffd7 	bl	b409e <_ZdlPvj>
   b40f0:	4620      	mov	r0, r4
   b40f2:	bd10      	pop	{r4, pc}

000b40f4 <_ZN4FileD0Ev>:
   b40f4:	b510      	push	{r4, lr}
   b40f6:	2134      	movs	r1, #52	; 0x34
   b40f8:	4604      	mov	r4, r0
   b40fa:	f7ff ffd0 	bl	b409e <_ZdlPvj>
   b40fe:	4620      	mov	r0, r4
   b4100:	bd10      	pop	{r4, pc}

000b4102 <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b4102:	3010      	adds	r0, #16
   b4104:	f002 beb2 	b.w	b6e6c <_ZN7FatFile4syncEv>

000b4108 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b4108:	3010      	adds	r0, #16
   b410a:	f002 be58 	b.w	b6dbe <_ZN7FatFile4peekEv>

000b410e <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b410e:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b4110:	2201      	movs	r2, #1
   b4112:	f10d 0107 	add.w	r1, sp, #7
   b4116:	3010      	adds	r0, #16
   b4118:	f002 fda3 	bl	b6c62 <_ZN7FatFile4readEPvj>
   b411c:	2801      	cmp	r0, #1
   b411e:	bf0c      	ite	eq
   b4120:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b4124:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   b4128:	b003      	add	sp, #12
   b412a:	f85d fb04 	ldr.w	pc, [sp], #4

000b412e <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b412e:	3010      	adds	r0, #16
   b4130:	f002 beda 	b.w	b6ee8 <_ZN7FatFile5writeEPKvj>

000b4134 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b4134:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4136:	2201      	movs	r2, #1
   b4138:	f88d 1007 	strb.w	r1, [sp, #7]
   b413c:	3010      	adds	r0, #16
   b413e:	f10d 0107 	add.w	r1, sp, #7
   b4142:	f002 fed1 	bl	b6ee8 <_ZN7FatFile5writeEPKvj>
  }
   b4146:	b003      	add	sp, #12
   b4148:	f85d fb04 	ldr.w	pc, [sp], #4

000b414c <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b414c:	b40e      	push	{r1, r2, r3}
   b414e:	b503      	push	{r0, r1, lr}
   b4150:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4152:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4154:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4158:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b415a:	f004 faae 	bl	b86ba <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b415e:	b002      	add	sp, #8
   b4160:	f85d eb04 	ldr.w	lr, [sp], #4
   b4164:	b003      	add	sp, #12
   b4166:	4770      	bx	lr

000b4168 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4168:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b416a:	4604      	mov	r4, r0
   b416c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b416e:	7922      	ldrb	r2, [r4, #4]
   b4170:	68a3      	ldr	r3, [r4, #8]
   b4172:	b132      	cbz	r2, b4182 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4174:	b9a3      	cbnz	r3, b41a0 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4176:	490b      	ldr	r1, [pc, #44]	; (b41a4 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4178:	b002      	add	sp, #8
   b417a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b417e:	f004 ba61 	b.w	b8644 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4182:	4a09      	ldr	r2, [pc, #36]	; (b41a8 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4184:	7b26      	ldrb	r6, [r4, #12]
   b4186:	4d09      	ldr	r5, [pc, #36]	; (b41ac <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4188:	4909      	ldr	r1, [pc, #36]	; (b41b0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b418a:	7b64      	ldrb	r4, [r4, #13]
   b418c:	2e01      	cmp	r6, #1
   b418e:	bf18      	it	ne
   b4190:	4629      	movne	r1, r5
   b4192:	e9cd 1400 	strd	r1, r4, [sp]
   b4196:	4907      	ldr	r1, [pc, #28]	; (b41b4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4198:	f7ff ffd8 	bl	b414c <_ZN5Print6printfEPKcz>
  }
   b419c:	b002      	add	sp, #8
   b419e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b41a0:	4a05      	ldr	r2, [pc, #20]	; (b41b8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b41a2:	e7ef      	b.n	b4184 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b41a4:	000bbe61 	.word	0x000bbe61
   b41a8:	000bc04d 	.word	0x000bc04d
   b41ac:	000bbe5d 	.word	0x000bbe5d
   b41b0:	000bbe59 	.word	0x000bbe59
   b41b4:	000bbe77 	.word	0x000bbe77
   b41b8:	000bbe50 	.word	0x000bbe50

000b41bc <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b41bc:	b530      	push	{r4, r5, lr}
   b41be:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b41c0:	4b1b      	ldr	r3, [pc, #108]	; (b4230 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b41c2:	9300      	str	r3, [sp, #0]
   b41c4:	7913      	ldrb	r3, [r2, #4]
   b41c6:	f88d 3004 	strb.w	r3, [sp, #4]
   b41ca:	6893      	ldr	r3, [r2, #8]
   b41cc:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b41ce:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b41d2:	8993      	ldrh	r3, [r2, #12]
   b41d4:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b41d8:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b41da:	460a      	mov	r2, r1
   b41dc:	466b      	mov	r3, sp
   b41de:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b41e2:	4628      	mov	r0, r5
   b41e4:	f003 f99e 	bl	b7524 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b41e8:	b910      	cbnz	r0, b41f0 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b41ea:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b41ec:	b005      	add	sp, #20
   b41ee:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b41f0:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b41f2:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b41f6:	4628      	mov	r0, r5
   b41f8:	f002 fe6e 	bl	b6ed8 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b41fc:	2101      	movs	r1, #1
   b41fe:	4620      	mov	r0, r4
   b4200:	f003 f83b 	bl	b727a <_ZN9FatVolume4initEh>
   b4204:	4601      	mov	r1, r0
   b4206:	b168      	cbz	r0, b4224 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b4208:	4621      	mov	r1, r4
   b420a:	4628      	mov	r0, r5
   b420c:	f002 fd23 	bl	b6c56 <_ZN7FatFile8openRootEP9FatVolume>
   b4210:	2800      	cmp	r0, #0
   b4212:	d0ea      	beq.n	b41ea <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b4214:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b4218:	f013 0f70 	tst.w	r3, #112	; 0x70
   b421c:	d0e5      	beq.n	b41ea <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b421e:	4b05      	ldr	r3, [pc, #20]	; (b4234 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b4220:	601d      	str	r5, [r3, #0]
    return true;
   b4222:	e7e3      	b.n	b41ec <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b4224:	4620      	mov	r0, r4
   b4226:	f003 f828 	bl	b727a <_ZN9FatVolume4initEh>
   b422a:	2800      	cmp	r0, #0
   b422c:	d1ec      	bne.n	b4208 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b422e:	e7dc      	b.n	b41ea <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b4230:	000bc198 	.word	0x000bc198
   b4234:	2003e6a8 	.word	0x2003e6a8

000b4238 <setup>:
//********************************************************
//********************************************************
//      SETUP
//********************************************************
//********************************************************  
void setup() {
   b4238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(9600);
   b423a:	f004 fccd 	bl	b8bd8 <_Z16_fetch_usbserialv>
   b423e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4242:	f004 fcb7 	bl	b8bb4 <_ZN9USBSerial5beginEl>
  while(!Serial) {}
   b4246:	f004 fcc7 	bl	b8bd8 <_Z16_fetch_usbserialv>
   b424a:	f004 fcba 	bl	b8bc2 <_ZN9USBSerialcvbEv>
   b424e:	2800      	cmp	r0, #0
   b4250:	d0f9      	beq.n	b4246 <setup+0xe>
//  Initialize NeoPixel
  waterPixel.begin();
   b4252:	484f      	ldr	r0, [pc, #316]	; (b4390 <setup+0x158>)
  waterPixel.show();               // Initialize all pixels to 'off'

//  Initialize the BME280 
  status = bmeOne.begin(BMEADDRESS);
   b4254:	4c4f      	ldr	r4, [pc, #316]	; (b4394 <setup+0x15c>)
  waterPixel.begin();
   b4256:	f001 f9b2 	bl	b55be <_ZN17Adafruit_NeoPixel5beginEv>
  waterPixel.show();               // Initialize all pixels to 'off'
   b425a:	484d      	ldr	r0, [pc, #308]	; (b4390 <setup+0x158>)
   b425c:	f001 f9e8 	bl	b5630 <_ZN17Adafruit_NeoPixel4showEv>
  status = bmeOne.begin(BMEADDRESS);
   b4260:	4b4d      	ldr	r3, [pc, #308]	; (b4398 <setup+0x160>)
   b4262:	484e      	ldr	r0, [pc, #312]	; (b439c <setup+0x164>)
   b4264:	7819      	ldrb	r1, [r3, #0]
   b4266:	f001 f982 	bl	b556e <_ZN15Adafruit_BME2805beginEh>
   b426a:	6020      	str	r0, [r4, #0]
  if(!status){
   b426c:	b928      	cbnz	r0, b427a <setup+0x42>
    Serial.printf("BME 280 did not initialize correctly.  Please reset.\n");
   b426e:	f004 fcb3 	bl	b8bd8 <_Z16_fetch_usbserialv>
   b4272:	494b      	ldr	r1, [pc, #300]	; (b43a0 <setup+0x168>)
   b4274:	f7ff ff6a 	bl	b414c <_ZN5Print6printfEPKcz>
    while(1);  //  You shall not pass 
   b4278:	e7fe      	b.n	b4278 <setup+0x40>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b427a:	f003 fc2d 	bl	b7ad8 <HAL_Timer_Get_Milli_Seconds>
  }
  BMEStart = millis();
   b427e:	4b49      	ldr	r3, [pc, #292]	; (b43a4 <setup+0x16c>)
   b4280:	6018      	str	r0, [r3, #0]
  Serial.printf("BME 280 running\n");
   b4282:	f004 fca9 	bl	b8bd8 <_Z16_fetch_usbserialv>
   b4286:	4948      	ldr	r1, [pc, #288]	; (b43a8 <setup+0x170>)
   b4288:	f7ff ff60 	bl	b414c <_ZN5Print6printfEPKcz>


//  Initialize the uSD Card
  // initialize uSD card module CS to off
  pinMode     (SD_CS_PIN,OUTPUT); 
   b428c:	2101      	movs	r1, #1
   b428e:	200e      	movs	r0, #14
   b4290:	f005 f98c 	bl	b95ac <pinMode>
  digitalWrite(SD_CS_PIN,HIGH);
   b4294:	2101      	movs	r1, #1
   b4296:	200e      	movs	r0, #14
   b4298:	f005 f999 	bl	b95ce <digitalWrite>
      dataMode_{dataMode}
   b429c:	4b43      	ldr	r3, [pc, #268]	; (b43ac <setup+0x174>)
   b429e:	9300      	str	r3, [sp, #0]
   b42a0:	2300      	movs	r3, #0
   b42a2:	f88d 3004 	strb.w	r3, [sp, #4]
   b42a6:	4b42      	ldr	r3, [pc, #264]	; (b43b0 <setup+0x178>)
   b42a8:	9302      	str	r3, [sp, #8]
    status = SD.begin(SD_CS_PIN);
   b42aa:	4842      	ldr	r0, [pc, #264]	; (b43b4 <setup+0x17c>)
   b42ac:	2301      	movs	r3, #1
   b42ae:	466a      	mov	r2, sp
   b42b0:	210e      	movs	r1, #14
   b42b2:	f8ad 300c 	strh.w	r3, [sp, #12]
   b42b6:	f7ff ff81 	bl	b41bc <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b42ba:	6020      	str	r0, [r4, #0]
    if (status == 0) {  // if status is false
   b42bc:	2800      	cmp	r0, #0
   b42be:	d162      	bne.n	b4386 <setup+0x14e>
      Serial.printf("Card failed, or not present\n");
   b42c0:	f004 fc8a 	bl	b8bd8 <_Z16_fetch_usbserialv>
   b42c4:	493c      	ldr	r1, [pc, #240]	; (b43b8 <setup+0x180>)
    }
    else {
      Serial.printf("uSD card initialized.\n");
   b42c6:	f7ff ff41 	bl	b414c <_ZN5Print6printfEPKcz>
    //   testFile.close();
    //   Serial.printf("Time, Temp, Pres, MoistH, MoistL \n");
    // }

  //  Setup TIME
  Time.zone(-6);                  //  Set time zone to MDT -6 from UTC
   b42ca:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
   b42ce:	f004 fa41 	bl	b8754 <_ZN9TimeClass4zoneEf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b42d2:	f003 fe55 	bl	b7f80 <spark_cloud_flag_connected>
        if (!connected()) {
   b42d6:	b110      	cbz	r0, b42de <setup+0xa6>
        return spark_sync_time(NULL);
   b42d8:	2000      	movs	r0, #0
   b42da:	f003 fe59 	bl	b7f90 <spark_sync_time>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b42de:	f004 fab2 	bl	b8846 <_ZN9TimeClass3nowEv>
   b42e2:	4602      	mov	r2, r0
   b42e4:	17c3      	asrs	r3, r0, #31
   b42e6:	4668      	mov	r0, sp
   b42e8:	f004 fa54 	bl	b8794 <_ZN9TimeClass7timeStrEx>
  Particle.syncTime();
  dateTime    = Time.timeStr();                          //  get current value of date and time
   b42ec:	4669      	mov	r1, sp
   b42ee:	4833      	ldr	r0, [pc, #204]	; (b43bc <setup+0x184>)
   b42f0:	f004 f926 	bl	b8540 <_ZN6StringaSEOS_>
   b42f4:	4668      	mov	r0, sp
   b42f6:	f004 f88d 	bl	b8414 <_ZN6StringD1Ev>
  timeOnlyOld = dateTime.substring(11,19);               //  Extract value of time from dateTime
   b42fa:	2313      	movs	r3, #19
   b42fc:	220b      	movs	r2, #11
   b42fe:	4668      	mov	r0, sp
   b4300:	492e      	ldr	r1, [pc, #184]	; (b43bc <setup+0x184>)
   b4302:	f004 f94d 	bl	b85a0 <_ZNK6String9substringEjj>
   b4306:	4669      	mov	r1, sp
   b4308:	482d      	ldr	r0, [pc, #180]	; (b43c0 <setup+0x188>)
   b430a:	f004 f919 	bl	b8540 <_ZN6StringaSEOS_>
   b430e:	4668      	mov	r0, sp
   b4310:	f004 f880 	bl	b8414 <_ZN6StringD1Ev>

  //  Setup Moisture Sensor
  pinMode(MOISTPIN, INPUT);       //  Moisture pin is an input
   b4314:	2100      	movs	r1, #0
   b4316:	2012      	movs	r0, #18
   b4318:	f005 f948 	bl	b95ac <pinMode>
  
  //  Setup OLED
  displayOne.begin(SSD1306_SWITCHCAPVCC, OLEDADDRESS);  // initialize with the I2C addr above
   b431c:	4b29      	ldr	r3, [pc, #164]	; (b43c4 <setup+0x18c>)
   b431e:	482a      	ldr	r0, [pc, #168]	; (b43c8 <setup+0x190>)
   b4320:	781a      	ldrb	r2, [r3, #0]
   b4322:	2102      	movs	r1, #2
   b4324:	f001 fe0a 	bl	b5f3c <_ZN16Adafruit_SSD13065beginEhh>
  displayOne.setTextSize(1);
   b4328:	4827      	ldr	r0, [pc, #156]	; (b43c8 <setup+0x190>)
   b432a:	2101      	movs	r1, #1
   b432c:	f002 f887 	bl	b643e <_ZN12Adafruit_GFX11setTextSizeEh>
  displayOne.setTextColor(WHITE);
   b4330:	2101      	movs	r1, #1
   b4332:	4825      	ldr	r0, [pc, #148]	; (b43c8 <setup+0x190>)
   b4334:	f002 f888 	bl	b6448 <_ZN12Adafruit_GFX12setTextColorEt>
  displayOne.clearDisplay();//  Clear the display before going further
   b4338:	4823      	ldr	r0, [pc, #140]	; (b43c8 <setup+0x190>)
   b433a:	f001 fd33 	bl	b5da4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  displayOne.display(); // Force display
   b433e:	4822      	ldr	r0, [pc, #136]	; (b43c8 <setup+0x190>)
   b4340:	f001 fd8c 	bl	b5e5c <_ZN16Adafruit_SSD13067displayEv>

  //  Setup Dust Sensor
  pinMode(DUSTPIN, INPUT);
   b4344:	2100      	movs	r1, #0
   b4346:	2005      	movs	r0, #5
   b4348:	f005 f930 	bl	b95ac <pinMode>
  lowPulseOccupancy = 0;        //  Initialize all variables
   b434c:	4b1f      	ldr	r3, [pc, #124]	; (b43cc <setup+0x194>)
   b434e:	2200      	movs	r2, #0
   b4350:	601a      	str	r2, [r3, #0]
  ratio             = 0;
   b4352:	4a1f      	ldr	r2, [pc, #124]	; (b43d0 <setup+0x198>)
   b4354:	2300      	movs	r3, #0
   b4356:	6013      	str	r3, [r2, #0]
  concentration     = 0;  
   b4358:	4a1e      	ldr	r2, [pc, #120]	; (b43d4 <setup+0x19c>)
   b435a:	6013      	str	r3, [r2, #0]
   b435c:	f003 fbbc 	bl	b7ad8 <HAL_Timer_Get_Milli_Seconds>
  sampleStart = millis();
   b4360:	4b1d      	ldr	r3, [pc, #116]	; (b43d8 <setup+0x1a0>)
   b4362:	6018      	str	r0, [r3, #0]

  //  Setup Air Quality Sensor
  currentQuality =-1;
   b4364:	4b1d      	ldr	r3, [pc, #116]	; (b43dc <setup+0x1a4>)
  airQualitySensor.init();
   b4366:	481e      	ldr	r0, [pc, #120]	; (b43e0 <setup+0x1a8>)
  currentQuality =-1;
   b4368:	f04f 32ff 	mov.w	r2, #4294967295
   b436c:	601a      	str	r2, [r3, #0]
  airQualitySensor.init();
   b436e:	f003 faf0 	bl	b7952 <_ZN16AirQualitySensor4initEv>

  // Setup MQTT subscription for manual water button feed.
  mqtt.subscribe(&mqttObj8);
   b4372:	491c      	ldr	r1, [pc, #112]	; (b43e4 <setup+0x1ac>)
   b4374:	481c      	ldr	r0, [pc, #112]	; (b43e8 <setup+0x1b0>)
   b4376:	f002 f9d3 	bl	b6720 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>
   b437a:	f003 fbad 	bl	b7ad8 <HAL_Timer_Get_Milli_Seconds>



  endTime = millis();
   b437e:	4b1b      	ldr	r3, [pc, #108]	; (b43ec <setup+0x1b4>)
   b4380:	6018      	str	r0, [r3, #0]
}
   b4382:	b004      	add	sp, #16
   b4384:	bd10      	pop	{r4, pc}
      Serial.printf("uSD card initialized.\n");
   b4386:	f004 fc27 	bl	b8bd8 <_Z16_fetch_usbserialv>
   b438a:	4919      	ldr	r1, [pc, #100]	; (b43f0 <setup+0x1b8>)
   b438c:	e79b      	b.n	b42c6 <setup+0x8e>
   b438e:	bf00      	nop
   b4390:	2003e688 	.word	0x2003e688
   b4394:	2003e61c 	.word	0x2003e61c
   b4398:	2003da9c 	.word	0x2003da9c
   b439c:	2003e3fc 	.word	0x2003e3fc
   b43a0:	000bbe94 	.word	0x000bbe94
   b43a4:	2003df3c 	.word	0x2003df3c
   b43a8:	000bbeca 	.word	0x000bbeca
   b43ac:	000bc198 	.word	0x000bc198
   b43b0:	02faf080 	.word	0x02faf080
   b43b4:	2003df40 	.word	0x2003df40
   b43b8:	000bbedb 	.word	0x000bbedb
   b43bc:	2003e44c 	.word	0x2003e44c
   b43c0:	2003e674 	.word	0x2003e674
   b43c4:	2003da9d 	.word	0x2003da9d
   b43c8:	2003e45c 	.word	0x2003e45c
   b43cc:	2003e498 	.word	0x2003e498
   b43d0:	2003e614 	.word	0x2003e614
   b43d4:	2003e444 	.word	0x2003e444
   b43d8:	2003e618 	.word	0x2003e618
   b43dc:	2003e448 	.word	0x2003e448
   b43e0:	2003e3e0 	.word	0x2003e3e0
   b43e4:	2003e5cc 	.word	0x2003e5cc
   b43e8:	2003e4a4 	.word	0x2003e4a4
   b43ec:	2003e490 	.word	0x2003e490
   b43f0:	000bbef8 	.word	0x000bbef8

000b43f4 <_Z18write_SFFIS_ToOLED6StringffiS_>:
// ********************************************************
// ********************************************************
//      write_SFFIS_ToOLED
// ********************************************************
// ********************************************************
void write_SFFIS_ToOLED(String item1, float item2, float item3, int item4, String item5) {
   b43f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Write to the OLED display
    displayOne.clearDisplay();//  Clear the display before going further
   b43f8:	4c2a      	ldr	r4, [pc, #168]	; (b44a4 <_Z18write_SFFIS_ToOLED6StringffiS_+0xb0>)
void write_SFFIS_ToOLED(String item1, float item2, float item3, int item4, String item5) {
   b43fa:	4681      	mov	r9, r0
    displayOne.clearDisplay();//  Clear the display before going further
   b43fc:	4620      	mov	r0, r4
void write_SFFIS_ToOLED(String item1, float item2, float item3, int item4, String item5) {
   b43fe:	ee10 8a10 	vmov	r8, s0
   b4402:	ee10 7a90 	vmov	r7, s1
   b4406:	460e      	mov	r6, r1
   b4408:	4615      	mov	r5, r2
    displayOne.clearDisplay();//  Clear the display before going further
   b440a:	f001 fccb 	bl	b5da4 <_ZN16Adafruit_SSD130612clearDisplayEv>
    displayOne.drawRect(0,0,SCREENWIDTH,SCREENHEIGHT,WHITE);
   b440e:	2340      	movs	r3, #64	; 0x40
   b4410:	2201      	movs	r2, #1
   b4412:	e9cd 3200 	strd	r3, r2, [sp]
   b4416:	2200      	movs	r2, #0
   b4418:	2380      	movs	r3, #128	; 0x80
   b441a:	4611      	mov	r1, r2
   b441c:	4620      	mov	r0, r4
   b441e:	f001 fec4 	bl	b61aa <_ZN12Adafruit_GFX8drawRectEsssst>
    displayOne.setCursor(7,3);
   b4422:	4620      	mov	r0, r4
   b4424:	2203      	movs	r2, #3
   b4426:	2107      	movs	r1, #7
   b4428:	f002 f806 	bl	b6438 <_ZN12Adafruit_GFX9setCursorEss>
    displayOne.printf(" Time is: %s\n", item1.c_str());
   b442c:	f8d9 2000 	ldr.w	r2, [r9]
   b4430:	491d      	ldr	r1, [pc, #116]	; (b44a8 <_Z18write_SFFIS_ToOLED6StringffiS_+0xb4>)
   b4432:	4620      	mov	r0, r4
   b4434:	f7ff fe8a 	bl	b414c <_ZN5Print6printfEPKcz>
    displayOne.setCursor(7,13);
   b4438:	220d      	movs	r2, #13
   b443a:	4620      	mov	r0, r4
   b443c:	2107      	movs	r1, #7
   b443e:	f001 fffb 	bl	b6438 <_ZN12Adafruit_GFX9setCursorEss>
    displayOne.printf("    Temp: %0.2f\n", item2);
   b4442:	4640      	mov	r0, r8
   b4444:	f006 fca2 	bl	bad8c <__aeabi_f2d>
   b4448:	460b      	mov	r3, r1
   b444a:	4602      	mov	r2, r0
   b444c:	4917      	ldr	r1, [pc, #92]	; (b44ac <_Z18write_SFFIS_ToOLED6StringffiS_+0xb8>)
   b444e:	4620      	mov	r0, r4
   b4450:	f7ff fe7c 	bl	b414c <_ZN5Print6printfEPKcz>
    displayOne.setCursor(7,23);
   b4454:	2217      	movs	r2, #23
   b4456:	4620      	mov	r0, r4
   b4458:	2107      	movs	r1, #7
   b445a:	f001 ffed 	bl	b6438 <_ZN12Adafruit_GFX9setCursorEss>
    displayOne.printf("Humidity: %0.2f\n", item3);
   b445e:	4638      	mov	r0, r7
   b4460:	f006 fc94 	bl	bad8c <__aeabi_f2d>
   b4464:	460b      	mov	r3, r1
   b4466:	4602      	mov	r2, r0
   b4468:	4911      	ldr	r1, [pc, #68]	; (b44b0 <_Z18write_SFFIS_ToOLED6StringffiS_+0xbc>)
   b446a:	4620      	mov	r0, r4
   b446c:	f7ff fe6e 	bl	b414c <_ZN5Print6printfEPKcz>
    displayOne.setCursor(7,33);
   b4470:	4620      	mov	r0, r4
   b4472:	2221      	movs	r2, #33	; 0x21
   b4474:	2107      	movs	r1, #7
   b4476:	f001 ffdf 	bl	b6438 <_ZN12Adafruit_GFX9setCursorEss>
    displayOne.printf("Moisture: %i\n", item4);
   b447a:	4632      	mov	r2, r6
   b447c:	490d      	ldr	r1, [pc, #52]	; (b44b4 <_Z18write_SFFIS_ToOLED6StringffiS_+0xc0>)
   b447e:	4620      	mov	r0, r4
   b4480:	f7ff fe64 	bl	b414c <_ZN5Print6printfEPKcz>
    displayOne.setCursor(7,43);
   b4484:	4620      	mov	r0, r4
   b4486:	222b      	movs	r2, #43	; 0x2b
   b4488:	2107      	movs	r1, #7
   b448a:	f001 ffd5 	bl	b6438 <_ZN12Adafruit_GFX9setCursorEss>
    displayOne.printf("Air Quality: \n  %s", item5.c_str());
   b448e:	682a      	ldr	r2, [r5, #0]
   b4490:	4909      	ldr	r1, [pc, #36]	; (b44b8 <_Z18write_SFFIS_ToOLED6StringffiS_+0xc4>)
   b4492:	4620      	mov	r0, r4
   b4494:	f7ff fe5a 	bl	b414c <_ZN5Print6printfEPKcz>
    displayOne.display(); // Force display
   b4498:	4620      	mov	r0, r4
}
   b449a:	b003      	add	sp, #12
   b449c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    displayOne.display(); // Force display
   b44a0:	f001 bcdc 	b.w	b5e5c <_ZN16Adafruit_SSD13067displayEv>
   b44a4:	2003e45c 	.word	0x2003e45c
   b44a8:	000bbf0f 	.word	0x000bbf0f
   b44ac:	000bbf1d 	.word	0x000bbf1d
   b44b0:	000bbf2e 	.word	0x000bbf2e
   b44b4:	000bbf3f 	.word	0x000bbf3f
   b44b8:	000bbf4d 	.word	0x000bbf4d

000b44bc <_Z16changeWaterLevelb>:
//********************************************************
//********************************************************
//      changeWaterLevel
//********************************************************
//********************************************************
int changeWaterLevel (bool motorRun) {
   b44bc:	b510      	push	{r4, lr}
  const int MOTORPIN     = D8;       //  Motor relay on digital pin D8
  const int H2OLEVELPWR  = D7;       //  Water Level Sensor Power on digital Pin D7
  int h2oLvl;
  
  //  Initialize Water level sensor
  pinMode(H2OLEVELPIN, INPUT);
   b44be:	2100      	movs	r1, #0
int changeWaterLevel (bool motorRun) {
   b44c0:	4604      	mov	r4, r0
  pinMode(H2OLEVELPIN, INPUT);
   b44c2:	2011      	movs	r0, #17
   b44c4:	f005 f872 	bl	b95ac <pinMode>
  pinMode(H2OLEVELPWR, OUTPUT);
   b44c8:	2101      	movs	r1, #1
   b44ca:	2007      	movs	r0, #7
   b44cc:	f005 f86e 	bl	b95ac <pinMode>
  digitalWrite(H2OLEVELPWR, HIGH);   // Drive water level sensor power to zero to limit corrosion
   b44d0:	2101      	movs	r1, #1
   b44d2:	2007      	movs	r0, #7
   b44d4:	f005 f87b 	bl	b95ce <digitalWrite>
 
//  Initialize Water Pump
  pinMode(MOTORPIN, OUTPUT);
   b44d8:	2101      	movs	r1, #1
   b44da:	2008      	movs	r0, #8
   b44dc:	f005 f866 	bl	b95ac <pinMode>
  digitalWrite(MOTORPIN, LOW);      //  Drive motor pin low to ensure motor does not run accidentally
   b44e0:	2100      	movs	r1, #0
   b44e2:	2008      	movs	r0, #8
   b44e4:	f005 f873 	bl	b95ce <digitalWrite>

if (motorRun) {
   b44e8:	b1ac      	cbz	r4, b4516 <_Z16changeWaterLevelb+0x5a>
    digitalWrite(MOTORPIN,  HIGH);  // Turn on water pump
   b44ea:	2101      	movs	r1, #1
   b44ec:	2008      	movs	r0, #8
   b44ee:	f005 f86e 	bl	b95ce <digitalWrite>
    delay(500);                        //  DELAY here on purpose to PRECISELY control water delivery
   b44f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b44f6:	f004 f9c1 	bl	b887c <delay>
    digitalWrite(MOTORPIN,  LOW);     // Turn off water pump
   b44fa:	2100      	movs	r1, #0
   b44fc:	2008      	movs	r0, #8
   b44fe:	f005 f866 	bl	b95ce <digitalWrite>
  } else {
    delay(10);
  }
//  digitalWrite(H2OLEVELPWR, HIGH);    // Turn on water level sensor power
  h2oLvl = analogRead(H2OLEVELPIN);      //  Read water level
   b4502:	2011      	movs	r0, #17
   b4504:	f005 f88f 	bl	b9626 <analogRead>
  digitalWrite(H2OLEVELPWR, LOW);     //  Turn off water levell sensor power to reduce galvanic corrosion
   b4508:	2100      	movs	r1, #0
  h2oLvl = analogRead(H2OLEVELPIN);      //  Read water level
   b450a:	4604      	mov	r4, r0
  digitalWrite(H2OLEVELPWR, LOW);     //  Turn off water levell sensor power to reduce galvanic corrosion
   b450c:	2007      	movs	r0, #7
   b450e:	f005 f85e 	bl	b95ce <digitalWrite>
  return h2oLvl;                     //  Return water level value  
}
   b4512:	4620      	mov	r0, r4
   b4514:	bd10      	pop	{r4, pc}
    delay(10);
   b4516:	200a      	movs	r0, #10
   b4518:	f004 f9b0 	bl	b887c <delay>
   b451c:	e7f1      	b.n	b4502 <_Z16changeWaterLevelb+0x46>
	...

000b4520 <_Z15waterPixelBlinki>:
  //   bright = callSin (31, 31, 10000);               //  Set brightness to flash at 10S interval
  //   waterPixel.setPixelColor(0,0,bright,0);         //  Set pixel color GREEN
  // } if (levelWater > 2500) {                        //  water level full
  //   waterPixel.setPixelColor(0,0,63,0);             //  Set pixel color GREEN
  // }
   if (levelWater < REFILLWATER) {                         //  water level empty
   b4520:	f240 53db 	movw	r3, #1499	; 0x5db
   b4524:	4298      	cmp	r0, r3
void waterPixelBlink (int levelWater) {
   b4526:	b507      	push	{r0, r1, r2, lr}
   if (levelWater < REFILLWATER) {                         //  water level empty
   b4528:	dc0c      	bgt.n	b4544 <_Z15waterPixelBlinki+0x24>
    waterPixel.setPixelColor(0,255,0,0);         //  Set pixel color RED
   b452a:	2300      	movs	r3, #0
   b452c:	9300      	str	r3, [sp, #0]
   b452e:	22ff      	movs	r2, #255	; 0xff
   b4530:	4619      	mov	r1, r3
  } else if (levelWater > REFILLWATER) {                        //  water level full
    waterPixel.setPixelColor(0,0,63,0);             //  Set pixel color GREEN
   b4532:	4809      	ldr	r0, [pc, #36]	; (b4558 <_Z15waterPixelBlinki+0x38>)
   b4534:	f001 fa28 	bl	b5988 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
  }
    waterPixel.show();
   b4538:	4807      	ldr	r0, [pc, #28]	; (b4558 <_Z15waterPixelBlinki+0x38>)
}
   b453a:	b003      	add	sp, #12
   b453c:	f85d eb04 	ldr.w	lr, [sp], #4
    waterPixel.show();
   b4540:	f001 b876 	b.w	b5630 <_ZN17Adafruit_NeoPixel4showEv>
  } else if (levelWater > REFILLWATER) {                        //  water level full
   b4544:	f240 53dc 	movw	r3, #1500	; 0x5dc
   b4548:	4298      	cmp	r0, r3
   b454a:	d0f5      	beq.n	b4538 <_Z15waterPixelBlinki+0x18>
    waterPixel.setPixelColor(0,0,63,0);             //  Set pixel color GREEN
   b454c:	2200      	movs	r2, #0
   b454e:	9200      	str	r2, [sp, #0]
   b4550:	233f      	movs	r3, #63	; 0x3f
   b4552:	4611      	mov	r1, r2
   b4554:	e7ed      	b.n	b4532 <_Z15waterPixelBlinki+0x12>
   b4556:	bf00      	nop
   b4558:	2003e688 	.word	0x2003e688

000b455c <_Z12MQTT_connectv>:
//********************************************************
//      MQTT_connect
//********************************************************
//********************************************************
// Function to connect and reconnect as necessary to the MQTT server.
void MQTT_connect() {
   b455c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int8_t ret;
 
  // Stop if already connected.
  if (mqtt.connected()) {
   b4560:	4818      	ldr	r0, [pc, #96]	; (b45c4 <_Z12MQTT_connectv+0x68>)
   b4562:	f001 ff7c 	bl	b645e <_ZN19Adafruit_MQTT_SPARK9connectedEv>
   b4566:	bb58      	cbnz	r0, b45c0 <_Z12MQTT_connectv+0x64>
    return;
  }
 
  Serial.print("Connecting to MQTT... ");
   b4568:	f004 fb36 	bl	b8bd8 <_Z16_fetch_usbserialv>
   b456c:	4916      	ldr	r1, [pc, #88]	; (b45c8 <_Z12MQTT_connectv+0x6c>)
 
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   b456e:	4e15      	ldr	r6, [pc, #84]	; (b45c4 <_Z12MQTT_connectv+0x68>)
       Serial.printf("%s\n",(char *)mqtt.connectErrorString(ret));
   b4570:	f8df 8060 	ldr.w	r8, [pc, #96]	; b45d4 <_Z12MQTT_connectv+0x78>
       Serial.printf("Retrying MQTT connection in 5 seconds..\n");
   b4574:	4f15      	ldr	r7, [pc, #84]	; (b45cc <_Z12MQTT_connectv+0x70>)
  Serial.print("Connecting to MQTT... ");
   b4576:	f004 f865 	bl	b8644 <_ZN5Print5printEPKc>
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   b457a:	4812      	ldr	r0, [pc, #72]	; (b45c4 <_Z12MQTT_connectv+0x68>)
   b457c:	f002 fa95 	bl	b6aaa <_ZN13Adafruit_MQTT7connectEv>
   b4580:	4604      	mov	r4, r0
   b4582:	b1c0      	cbz	r0, b45b6 <_Z12MQTT_connectv+0x5a>
       Serial.printf("%s\n",(char *)mqtt.connectErrorString(ret));
   b4584:	f004 fb28 	bl	b8bd8 <_Z16_fetch_usbserialv>
   b4588:	4621      	mov	r1, r4
   b458a:	4605      	mov	r5, r0
   b458c:	4630      	mov	r0, r6
   b458e:	f002 f8a5 	bl	b66dc <_ZN13Adafruit_MQTT18connectErrorStringEa>
   b4592:	4641      	mov	r1, r8
   b4594:	4602      	mov	r2, r0
   b4596:	4628      	mov	r0, r5
   b4598:	f7ff fdd8 	bl	b414c <_ZN5Print6printfEPKcz>
       Serial.printf("Retrying MQTT connection in 5 seconds..\n");
   b459c:	f004 fb1c 	bl	b8bd8 <_Z16_fetch_usbserialv>
   b45a0:	4639      	mov	r1, r7
   b45a2:	f7ff fdd3 	bl	b414c <_ZN5Print6printfEPKcz>
       mqtt.disconnect();
   b45a6:	4630      	mov	r0, r6
   b45a8:	f002 f8a6 	bl	b66f8 <_ZN13Adafruit_MQTT10disconnectEv>
       delay(5000);  // wait 5 seconds
   b45ac:	f241 3088 	movw	r0, #5000	; 0x1388
   b45b0:	f004 f964 	bl	b887c <delay>
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   b45b4:	e7e1      	b.n	b457a <_Z12MQTT_connectv+0x1e>
  }
  Serial.printf("MQTT Connected!\n");
   b45b6:	f004 fb0f 	bl	b8bd8 <_Z16_fetch_usbserialv>
   b45ba:	4905      	ldr	r1, [pc, #20]	; (b45d0 <_Z12MQTT_connectv+0x74>)
   b45bc:	f7ff fdc6 	bl	b414c <_ZN5Print6printfEPKcz>
}
   b45c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b45c4:	2003e4a4 	.word	0x2003e4a4
   b45c8:	000bbf60 	.word	0x000bbf60
   b45cc:	000bbf77 	.word	0x000bbf77
   b45d0:	000bbfa0 	.word	0x000bbfa0
   b45d4:	000bbf19 	.word	0x000bbf19

000b45d8 <loop>:
void loop() {
   b45d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b45dc:	b08f      	sub	sp, #60	; 0x3c
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b45de:	f003 fa73 	bl	b7ac8 <HAL_Timer_Get_Micro_Seconds>
codeTime = micros();
   b45e2:	4b9f      	ldr	r3, [pc, #636]	; (b4860 <loop+0x288>)
  if (millis() - BMEStart > SAMPLETIME) {         //  Once the air has been samples for 30 sec
   b45e4:	4c9f      	ldr	r4, [pc, #636]	; (b4864 <loop+0x28c>)
codeTime = micros();
   b45e6:	6018      	str	r0, [r3, #0]
   b45e8:	f004 f92d 	bl	b8846 <_ZN9TimeClass3nowEv>
   b45ec:	4602      	mov	r2, r0
   b45ee:	17c3      	asrs	r3, r0, #31
   b45f0:	a80a      	add	r0, sp, #40	; 0x28
   b45f2:	f004 f8cf 	bl	b8794 <_ZN9TimeClass7timeStrEx>
  dateTime = Time.timeStr();                          //  get current value of date and time
   b45f6:	a90a      	add	r1, sp, #40	; 0x28
   b45f8:	489b      	ldr	r0, [pc, #620]	; (b4868 <loop+0x290>)
   b45fa:	f003 ffa1 	bl	b8540 <_ZN6StringaSEOS_>
   b45fe:	a80a      	add	r0, sp, #40	; 0x28
   b4600:	f003 ff08 	bl	b8414 <_ZN6StringD1Ev>
  timeOnly = dateTime.substring(11,19);               //  Extract value of time from dateTime
   b4604:	2313      	movs	r3, #19
   b4606:	220b      	movs	r2, #11
   b4608:	4997      	ldr	r1, [pc, #604]	; (b4868 <loop+0x290>)
   b460a:	a80a      	add	r0, sp, #40	; 0x28
   b460c:	f003 ffc8 	bl	b85a0 <_ZNK6String9substringEjj>
   b4610:	a90a      	add	r1, sp, #40	; 0x28
   b4612:	4896      	ldr	r0, [pc, #600]	; (b486c <loop+0x294>)
   b4614:	f003 ff94 	bl	b8540 <_ZN6StringaSEOS_>
   b4618:	a80a      	add	r0, sp, #40	; 0x28
   b461a:	f003 fefb 	bl	b8414 <_ZN6StringD1Ev>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b461e:	f003 fa5b 	bl	b7ad8 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - BMEStart > SAMPLETIME) {         //  Once the air has been samples for 30 sec
   b4622:	6823      	ldr	r3, [r4, #0]
   b4624:	1ac0      	subs	r0, r0, r3
   b4626:	f247 5330 	movw	r3, #30000	; 0x7530
   b462a:	4298      	cmp	r0, r3
   b462c:	d935      	bls.n	b469a <loop+0xc2>
    tempC     = bmeOne.readTemperature();            //  Read temperature in Celcius
   b462e:	4890      	ldr	r0, [pc, #576]	; (b4870 <loop+0x298>)
   b4630:	f000 fdfa 	bl	b5228 <_ZN15Adafruit_BME28015readTemperatureEv>
    tempF     = (tempC *9 / 5.0) + 32;               //  Convert temperature to Farenheight
   b4634:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   b4638:	ee60 7a27 	vmul.f32	s15, s0, s15
    tempC     = bmeOne.readTemperature();            //  Read temperature in Celcius
   b463c:	4b8d      	ldr	r3, [pc, #564]	; (b4874 <loop+0x29c>)
    tempF     = (tempC *9 / 5.0) + 32;               //  Convert temperature to Farenheight
   b463e:	ee17 0a90 	vmov	r0, s15
    tempC     = bmeOne.readTemperature();            //  Read temperature in Celcius
   b4642:	ed83 0a00 	vstr	s0, [r3]
    tempF     = (tempC *9 / 5.0) + 32;               //  Convert temperature to Farenheight
   b4646:	f006 fba1 	bl	bad8c <__aeabi_f2d>
   b464a:	4b8b      	ldr	r3, [pc, #556]	; (b4878 <loop+0x2a0>)
   b464c:	2200      	movs	r2, #0
   b464e:	f006 fd1f 	bl	bb090 <__aeabi_ddiv>
   b4652:	2200      	movs	r2, #0
   b4654:	4b89      	ldr	r3, [pc, #548]	; (b487c <loop+0x2a4>)
   b4656:	f006 fa3b 	bl	baad0 <__adddf3>
   b465a:	f006 febf 	bl	bb3dc <__aeabi_d2f>
   b465e:	4b88      	ldr	r3, [pc, #544]	; (b4880 <loop+0x2a8>)
   b4660:	6018      	str	r0, [r3, #0]
    humidRH   = bmeOne.readHumidity();               //  Read relative humidity
   b4662:	4883      	ldr	r0, [pc, #524]	; (b4870 <loop+0x298>)
   b4664:	f000 fe10 	bl	b5288 <_ZN15Adafruit_BME28012readHumidityEv>
   b4668:	4b86      	ldr	r3, [pc, #536]	; (b4884 <loop+0x2ac>)
    pressPA   = bmeOne.readPressure();               //  Read atmospheric pressure in Pascals
   b466a:	4881      	ldr	r0, [pc, #516]	; (b4870 <loop+0x298>)
    humidRH   = bmeOne.readHumidity();               //  Read relative humidity
   b466c:	ed83 0a00 	vstr	s0, [r3]
    pressPA   = bmeOne.readPressure();               //  Read atmospheric pressure in Pascals
   b4670:	f000 fe54 	bl	b531c <_ZN15Adafruit_BME28012readPressureEv>
   b4674:	4b84      	ldr	r3, [pc, #528]	; (b4888 <loop+0x2b0>)
   b4676:	ee10 0a10 	vmov	r0, s0
   b467a:	ed83 0a00 	vstr	s0, [r3]
    pressInHg = pressPA * 0.00029530;                //  Convert pressure to inches of mercury
   b467e:	f006 fb85 	bl	bad8c <__aeabi_f2d>
   b4682:	a36b      	add	r3, pc, #428	; (adr r3, b4830 <loop+0x258>)
   b4684:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4688:	f006 fbd8 	bl	bae3c <__aeabi_dmul>
   b468c:	f006 fea6 	bl	bb3dc <__aeabi_d2f>
   b4690:	4b7e      	ldr	r3, [pc, #504]	; (b488c <loop+0x2b4>)
   b4692:	6018      	str	r0, [r3, #0]
   b4694:	f003 fa20 	bl	b7ad8 <HAL_Timer_Get_Milli_Seconds>
    BMEStart  = millis();                            // Reset the timer
   b4698:	6020      	str	r0, [r4, #0]
  moisture = analogRead(MOISTPIN);
   b469a:	2012      	movs	r0, #18
   b469c:	f004 ffc3 	bl	b9626 <analogRead>
   b46a0:	4d7b      	ldr	r5, [pc, #492]	; (b4890 <loop+0x2b8>)
  duration     = 0;                                    //  Reset duration timer
   b46a2:	4e7c      	ldr	r6, [pc, #496]	; (b4894 <loop+0x2bc>)
  dustFlag     = 0;                                    //  Pulse has not started
   b46a4:	4c7c      	ldr	r4, [pc, #496]	; (b4898 <loop+0x2c0>)
  dustTime     = 0;                                    //  Time the current pulse started
   b46a6:	f8df 8218 	ldr.w	r8, [pc, #536]	; b48c0 <loop+0x2e8>
  moisture = analogRead(MOISTPIN);
   b46aa:	6028      	str	r0, [r5, #0]
  duration     = 0;                                    //  Reset duration timer
   b46ac:	2300      	movs	r3, #0
  throwAwayOld = digitalRead(DUSTPIN);                 //  Set edge detection
   b46ae:	2005      	movs	r0, #5
  duration     = 0;                                    //  Reset duration timer
   b46b0:	6033      	str	r3, [r6, #0]
  dustFlag     = 0;                                    //  Pulse has not started
   b46b2:	7023      	strb	r3, [r4, #0]
  dustTime     = 0;                                    //  Time the current pulse started
   b46b4:	f8c8 3000 	str.w	r3, [r8]
  throwAwayOld = digitalRead(DUSTPIN);                 //  Set edge detection
   b46b8:	f004 ffa2 	bl	b9600 <digitalRead>
   b46bc:	f8df a204 	ldr.w	sl, [pc, #516]	; b48c4 <loop+0x2ec>
  dustStart    = micros();                             //  Start the wait-for-pulse timer
   b46c0:	f8df 9204 	ldr.w	r9, [pc, #516]	; b48c8 <loop+0x2f0>
  throwAwayOld = digitalRead(DUSTPIN);                 //  Set edge detection
   b46c4:	f8ca 0000 	str.w	r0, [sl]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b46c8:	f003 f9fe 	bl	b7ac8 <HAL_Timer_Get_Micro_Seconds>
   b46cc:	4f73      	ldr	r7, [pc, #460]	; (b489c <loop+0x2c4>)
  dustStart    = micros();                             //  Start the wait-for-pulse timer
   b46ce:	f8c9 0000 	str.w	r0, [r9]
       dustFlag = 1;                                   //  Pulse has started set flag
   b46d2:	f04f 0b01 	mov.w	fp, #1
   b46d6:	f003 f9f7 	bl	b7ac8 <HAL_Timer_Get_Micro_Seconds>
  while(micros() - dustStart < DUSTTO && !dustFlag) {  //  Start looking for pulse. timeout after 1000uS
   b46da:	f8d9 3000 	ldr.w	r3, [r9]
   b46de:	1ac0      	subs	r0, r0, r3
   b46e0:	2831      	cmp	r0, #49	; 0x31
   b46e2:	d817      	bhi.n	b4714 <loop+0x13c>
   b46e4:	7823      	ldrb	r3, [r4, #0]
   b46e6:	b9ab      	cbnz	r3, b4714 <loop+0x13c>
    throwAway = digitalRead(DUSTPIN);                  //  Read the Dust Sensor in put pin. value irrelevant at this time
   b46e8:	2005      	movs	r0, #5
   b46ea:	f004 ff89 	bl	b9600 <digitalRead>
   b46ee:	6038      	str	r0, [r7, #0]
    if (throwAway == 0 && throwAway != throwAwayOld){  //  Low pulse detected and edge detected.
   b46f0:	b948      	cbnz	r0, b4706 <loop+0x12e>
   b46f2:	f8da 3000 	ldr.w	r3, [sl]
   b46f6:	b133      	cbz	r3, b4706 <loop+0x12e>
       dustFlag = 1;                                   //  Pulse has started set flag
   b46f8:	f884 b000 	strb.w	fp, [r4]
   b46fc:	f003 f9e4 	bl	b7ac8 <HAL_Timer_Get_Micro_Seconds>
       dustTime = micros();                            //  Set Time the current pulse started
   b4700:	f8c8 0000 	str.w	r0, [r8]
   b4704:	e7e7      	b.n	b46d6 <loop+0xfe>
       throwAwayOld = throwAway;                       //  Update edge detector
   b4706:	f8ca 0000 	str.w	r0, [sl]
   b470a:	f003 f9dd 	bl	b7ac8 <HAL_Timer_Get_Micro_Seconds>
       dustStart = micros();                           //  Increment timeout timer
   b470e:	f8c9 0000 	str.w	r0, [r9]
   b4712:	e7e0      	b.n	b46d6 <loop+0xfe>
  while(throwAway == 0 && dustFlag) {                  //  Measure length of low pulse ONLY IF pulse was discovered during timeout interval
   b4714:	683b      	ldr	r3, [r7, #0]
   b4716:	b963      	cbnz	r3, b4732 <loop+0x15a>
   b4718:	7823      	ldrb	r3, [r4, #0]
   b471a:	b153      	cbz	r3, b4732 <loop+0x15a>
   b471c:	f003 f9d4 	bl	b7ac8 <HAL_Timer_Get_Micro_Seconds>
    duration = micros() - dustTime;                    //  Measure length of pulse through time difference
   b4720:	f8d8 3000 	ldr.w	r3, [r8]
   b4724:	1ac0      	subs	r0, r0, r3
   b4726:	6030      	str	r0, [r6, #0]
    throwAway = digitalRead(DUSTPIN);                  //  ReCheck for end of pulse
   b4728:	2005      	movs	r0, #5
   b472a:	f004 ff69 	bl	b9600 <digitalRead>
   b472e:	6038      	str	r0, [r7, #0]
  while(throwAway == 0 && dustFlag) {                  //  Measure length of low pulse ONLY IF pulse was discovered during timeout interval
   b4730:	e7f0      	b.n	b4714 <loop+0x13c>
  lowPulseOccupancy += duration;                       //  summ the total amount of low time
   b4732:	4c5b      	ldr	r4, [pc, #364]	; (b48a0 <loop+0x2c8>)
   b4734:	6832      	ldr	r2, [r6, #0]
   b4736:	6823      	ldr	r3, [r4, #0]
   b4738:	4413      	add	r3, r2
   b473a:	6023      	str	r3, [r4, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b473c:	f003 f9cc 	bl	b7ad8 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - sampleStart > SAMPLETIME) {           //  Once the air has been samples for 30 sec
   b4740:	4b58      	ldr	r3, [pc, #352]	; (b48a4 <loop+0x2cc>)
   b4742:	681b      	ldr	r3, [r3, #0]
   b4744:	1ac0      	subs	r0, r0, r3
   b4746:	f247 5330 	movw	r3, #30000	; 0x7530
   b474a:	4298      	cmp	r0, r3
   b474c:	d963      	bls.n	b4816 <loop+0x23e>
    ratio = lowPulseOccupancy / (SAMPLETIME * 10.0);   // calculate the ratio
   b474e:	6820      	ldr	r0, [r4, #0]
   b4750:	4e55      	ldr	r6, [pc, #340]	; (b48a8 <loop+0x2d0>)
    concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) +520.0 * ratio + 0.62;  //  Calculate the concentration
   b4752:	4f56      	ldr	r7, [pc, #344]	; (b48ac <loop+0x2d4>)
    ratio = lowPulseOccupancy / (SAMPLETIME * 10.0);   // calculate the ratio
   b4754:	f006 fb08 	bl	bad68 <__aeabi_i2d>
   b4758:	a337      	add	r3, pc, #220	; (adr r3, b4838 <loop+0x260>)
   b475a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b475e:	f006 fc97 	bl	bb090 <__aeabi_ddiv>
   b4762:	f006 fe3b 	bl	bb3dc <__aeabi_d2f>
   b4766:	6030      	str	r0, [r6, #0]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b4768:	f006 fb10 	bl	bad8c <__aeabi_f2d>
   b476c:	ed9f 1b34 	vldr	d1, [pc, #208]	; b4840 <loop+0x268>
   b4770:	ec41 0b10 	vmov	d0, r0, r1
   b4774:	f005 f920 	bl	b99b8 <pow>
   b4778:	6830      	ldr	r0, [r6, #0]
   b477a:	ec59 8b10 	vmov	r8, r9, d0
   b477e:	f006 fb05 	bl	bad8c <__aeabi_f2d>
    concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) +520.0 * ratio + 0.62;  //  Calculate the concentration
   b4782:	a331      	add	r3, pc, #196	; (adr r3, b4848 <loop+0x270>)
   b4784:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4788:	4682      	mov	sl, r0
   b478a:	468b      	mov	fp, r1
   b478c:	4640      	mov	r0, r8
   b478e:	4649      	mov	r1, r9
   b4790:	f006 fb54 	bl	bae3c <__aeabi_dmul>
   b4794:	4652      	mov	r2, sl
   b4796:	4680      	mov	r8, r0
   b4798:	4689      	mov	r9, r1
   b479a:	465b      	mov	r3, fp
   b479c:	4650      	mov	r0, sl
   b479e:	4659      	mov	r1, fp
   b47a0:	f006 fb4c 	bl	bae3c <__aeabi_dmul>
   b47a4:	a32a      	add	r3, pc, #168	; (adr r3, b4850 <loop+0x278>)
   b47a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b47aa:	f006 fb47 	bl	bae3c <__aeabi_dmul>
   b47ae:	4602      	mov	r2, r0
   b47b0:	460b      	mov	r3, r1
   b47b2:	4640      	mov	r0, r8
   b47b4:	4649      	mov	r1, r9
   b47b6:	f006 f989 	bl	baacc <__aeabi_dsub>
   b47ba:	4b3d      	ldr	r3, [pc, #244]	; (b48b0 <loop+0x2d8>)
   b47bc:	4680      	mov	r8, r0
   b47be:	4689      	mov	r9, r1
   b47c0:	2200      	movs	r2, #0
   b47c2:	4650      	mov	r0, sl
   b47c4:	4659      	mov	r1, fp
   b47c6:	f006 fb39 	bl	bae3c <__aeabi_dmul>
   b47ca:	4602      	mov	r2, r0
   b47cc:	460b      	mov	r3, r1
   b47ce:	4640      	mov	r0, r8
   b47d0:	4649      	mov	r1, r9
   b47d2:	f006 f97d 	bl	baad0 <__adddf3>
   b47d6:	a320      	add	r3, pc, #128	; (adr r3, b4858 <loop+0x280>)
   b47d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b47dc:	f006 f978 	bl	baad0 <__adddf3>
   b47e0:	f006 fdfc 	bl	bb3dc <__aeabi_d2f>
   b47e4:	6038      	str	r0, [r7, #0]
    Serial.printf("LPO %i, concen %0.2f, ratio %0.2f\n", lowPulseOccupancy, concentration, ratio);
   b47e6:	f004 f9f7 	bl	b8bd8 <_Z16_fetch_usbserialv>
   b47ea:	4680      	mov	r8, r0
   b47ec:	6830      	ldr	r0, [r6, #0]
   b47ee:	f006 facd 	bl	bad8c <__aeabi_f2d>
   b47f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b47f6:	6838      	ldr	r0, [r7, #0]
   b47f8:	f006 fac8 	bl	bad8c <__aeabi_f2d>
   b47fc:	e9cd 0100 	strd	r0, r1, [sp]
   b4800:	492c      	ldr	r1, [pc, #176]	; (b48b4 <loop+0x2dc>)
   b4802:	6822      	ldr	r2, [r4, #0]
   b4804:	4640      	mov	r0, r8
   b4806:	f7ff fca1 	bl	b414c <_ZN5Print6printfEPKcz>
    lowPulseOccupancy = 0;                             // reset the LPO
   b480a:	2300      	movs	r3, #0
   b480c:	6023      	str	r3, [r4, #0]
   b480e:	f003 f963 	bl	b7ad8 <HAL_Timer_Get_Milli_Seconds>
    sampleStart = millis();                            // Reset the timer
   b4812:	4b24      	ldr	r3, [pc, #144]	; (b48a4 <loop+0x2cc>)
   b4814:	6018      	str	r0, [r3, #0]
    currentQuality=airQualitySensor.slope();
   b4816:	4828      	ldr	r0, [pc, #160]	; (b48b8 <loop+0x2e0>)
   b4818:	f003 f8c8 	bl	b79ac <_ZN16AirQualitySensor5slopeEv>
   b481c:	4b27      	ldr	r3, [pc, #156]	; (b48bc <loop+0x2e4>)
   b481e:	6018      	str	r0, [r3, #0]
    switch (currentQuality) {
   b4820:	2803      	cmp	r0, #3
   b4822:	d857      	bhi.n	b48d4 <loop+0x2fc>
   b4824:	e8df f010 	tbh	[pc, r0, lsl #1]
   b4828:	01230052 	.word	0x01230052
   b482c:	01270125 	.word	0x01270125
   b4830:	d7aea81f 	.word	0xd7aea81f
   b4834:	3f335a4f 	.word	0x3f335a4f
   b4838:	00000000 	.word	0x00000000
   b483c:	41124f80 	.word	0x41124f80
   b4840:	00000000 	.word	0x00000000
   b4844:	40080000 	.word	0x40080000
   b4848:	9999999a 	.word	0x9999999a
   b484c:	3ff19999 	.word	0x3ff19999
   b4850:	66666666 	.word	0x66666666
   b4854:	400e6666 	.word	0x400e6666
   b4858:	3d70a3d7 	.word	0x3d70a3d7
   b485c:	3fe3d70a 	.word	0x3fe3d70a
   b4860:	2003e440 	.word	0x2003e440
   b4864:	2003df3c 	.word	0x2003df3c
   b4868:	2003e44c 	.word	0x2003e44c
   b486c:	2003e664 	.word	0x2003e664
   b4870:	2003e3fc 	.word	0x2003e3fc
   b4874:	2003e620 	.word	0x2003e620
   b4878:	40140000 	.word	0x40140000
   b487c:	40400000 	.word	0x40400000
   b4880:	2003e624 	.word	0x2003e624
   b4884:	2003e494 	.word	0x2003e494
   b4888:	2003e60c 	.word	0x2003e60c
   b488c:	2003e608 	.word	0x2003e608
   b4890:	2003e4a0 	.word	0x2003e4a0
   b4894:	2003e480 	.word	0x2003e480
   b4898:	2003e484 	.word	0x2003e484
   b489c:	2003e65c 	.word	0x2003e65c
   b48a0:	2003e498 	.word	0x2003e498
   b48a4:	2003e618 	.word	0x2003e618
   b48a8:	2003e614 	.word	0x2003e614
   b48ac:	2003e444 	.word	0x2003e444
   b48b0:	40804000 	.word	0x40804000
   b48b4:	000bbfb1 	.word	0x000bbfb1
   b48b8:	2003e3e0 	.word	0x2003e3e0
   b48bc:	2003e448 	.word	0x2003e448
   b48c0:	2003e48c 	.word	0x2003e48c
   b48c4:	2003e660 	.word	0x2003e660
   b48c8:	2003e488 	.word	0x2003e488
            AQString = "**DON'T BREATHE**";
   b48cc:	4971      	ldr	r1, [pc, #452]	; (b4a94 <loop+0x4bc>)
            AQString = "!!  Fresh air  !!";
   b48ce:	4872      	ldr	r0, [pc, #456]	; (b4a98 <loop+0x4c0>)
   b48d0:	f003 fe3e 	bl	b8550 <_ZN6StringaSEPKc>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b48d4:	4e70      	ldr	r6, [pc, #448]	; (b4a98 <loop+0x4c0>)
  if (timeOnly.compareTo(timeOnlyOld)) {  //  When the seconds change, reprint the OLED
   b48d6:	4c71      	ldr	r4, [pc, #452]	; (b4a9c <loop+0x4c4>)
    Serial.printf("%s\n", AQString.c_str());
   b48d8:	f004 f97e 	bl	b8bd8 <_Z16_fetch_usbserialv>
   b48dc:	4970      	ldr	r1, [pc, #448]	; (b4aa0 <loop+0x4c8>)
   b48de:	6832      	ldr	r2, [r6, #0]
   b48e0:	f7ff fc34 	bl	b414c <_ZN5Print6printfEPKcz>
  if (timeOnly.compareTo(timeOnlyOld)) {  //  When the seconds change, reprint the OLED
   b48e4:	496f      	ldr	r1, [pc, #444]	; (b4aa4 <loop+0x4cc>)
   b48e6:	4620      	mov	r0, r4
   b48e8:	f003 fe44 	bl	b8574 <_ZNK6String9compareToERKS_>
   b48ec:	b328      	cbz	r0, b493a <loop+0x362>
   write_SFFIS_ToOLED(timeOnly.c_str(), tempF, humidRH, moisture, AQString);
   b48ee:	6821      	ldr	r1, [r4, #0]
   b48f0:	a806      	add	r0, sp, #24
   b48f2:	f003 fdda 	bl	b84aa <_ZN6StringC1EPK19__FlashStringHelper>
   b48f6:	4b6c      	ldr	r3, [pc, #432]	; (b4aa8 <loop+0x4d0>)
   b48f8:	682f      	ldr	r7, [r5, #0]
   b48fa:	ed93 0a00 	vldr	s0, [r3]
   b48fe:	4b6b      	ldr	r3, [pc, #428]	; (b4aac <loop+0x4d4>)
   b4900:	ed8d 0a05 	vstr	s0, [sp, #20]
   b4904:	edd3 0a00 	vldr	s1, [r3]
   b4908:	4631      	mov	r1, r6
   b490a:	a80a      	add	r0, sp, #40	; 0x28
   b490c:	edcd 0a04 	vstr	s1, [sp, #16]
   b4910:	f003 fe0b 	bl	b852a <_ZN6StringC1ERKS_>
   b4914:	4639      	mov	r1, r7
   b4916:	eddd 0a04 	vldr	s1, [sp, #16]
   b491a:	ed9d 0a05 	vldr	s0, [sp, #20]
   b491e:	aa0a      	add	r2, sp, #40	; 0x28
   b4920:	a806      	add	r0, sp, #24
   b4922:	f7ff fd67 	bl	b43f4 <_Z18write_SFFIS_ToOLED6StringffiS_>
   b4926:	a80a      	add	r0, sp, #40	; 0x28
   b4928:	f003 fd74 	bl	b8414 <_ZN6StringD1Ev>
   b492c:	a806      	add	r0, sp, #24
   b492e:	f003 fd71 	bl	b8414 <_ZN6StringD1Ev>
   timeOnlyOld = timeOnly;                //  reset timeOnlyOld
   b4932:	485c      	ldr	r0, [pc, #368]	; (b4aa4 <loop+0x4cc>)
   b4934:	4621      	mov	r1, r4
   b4936:	f003 fde9 	bl	b850c <_ZN6StringaSERKS_>
  if ((moisture > MOISTSET && (millis() - waterTime) > WATERTIME) || manualButton == 1) {  //  Plant is dry and it's watering time
   b493a:	682a      	ldr	r2, [r5, #0]
   b493c:	4c5c      	ldr	r4, [pc, #368]	; (b4ab0 <loop+0x4d8>)
   b493e:	f640 13c4 	movw	r3, #2500	; 0x9c4
   b4942:	429a      	cmp	r2, r3
   b4944:	f300 8099 	bgt.w	b4a7a <loop+0x4a2>
   b4948:	4b5a      	ldr	r3, [pc, #360]	; (b4ab4 <loop+0x4dc>)
   b494a:	681b      	ldr	r3, [r3, #0]
   b494c:	2b01      	cmp	r3, #1
   b494e:	d109      	bne.n	b4964 <loop+0x38c>
    waterLevel = changeWaterLevel(true);  //  run motor and check reservoir water level
   b4950:	2001      	movs	r0, #1
   b4952:	f7ff fdb3 	bl	b44bc <_Z16changeWaterLevelb>
   b4956:	6020      	str	r0, [r4, #0]
    Serial.printf("Water level: %i \n",waterLevel);
   b4958:	f004 f93e 	bl	b8bd8 <_Z16_fetch_usbserialv>
   b495c:	6822      	ldr	r2, [r4, #0]
   b495e:	4956      	ldr	r1, [pc, #344]	; (b4ab8 <loop+0x4e0>)
   b4960:	f7ff fbf4 	bl	b414c <_ZN5Print6printfEPKcz>
  waterLevel = changeWaterLevel(false);  //  Dont run motor and check reservoir water level
   b4964:	2000      	movs	r0, #0
   b4966:	f7ff fda9 	bl	b44bc <_Z16changeWaterLevelb>
  if ((millis()-pingTime)>PINGTIME) {
   b496a:	4f54      	ldr	r7, [pc, #336]	; (b4abc <loop+0x4e4>)
  waterLevel = changeWaterLevel(false);  //  Dont run motor and check reservoir water level
   b496c:	6020      	str	r0, [r4, #0]
  waterPixelBlink(waterLevel);                                          //  Update the water level pixel
   b496e:	f7ff fdd7 	bl	b4520 <_Z15waterPixelBlinki>
 Serial.printf("Water Level %i \n", waterLevel);
   b4972:	f004 f931 	bl	b8bd8 <_Z16_fetch_usbserialv>
   b4976:	6822      	ldr	r2, [r4, #0]
   b4978:	4951      	ldr	r1, [pc, #324]	; (b4ac0 <loop+0x4e8>)
   b497a:	f7ff fbe7 	bl	b414c <_ZN5Print6printfEPKcz>
  MQTT_connect();
   b497e:	f7ff fded 	bl	b455c <_Z12MQTT_connectv>
   b4982:	f003 f8a9 	bl	b7ad8 <HAL_Timer_Get_Milli_Seconds>
  if ((millis()-pingTime)>PINGTIME) {
   b4986:	683b      	ldr	r3, [r7, #0]
   b4988:	1ac0      	subs	r0, r0, r3
   b498a:	4b4e      	ldr	r3, [pc, #312]	; (b4ac4 <loop+0x4ec>)
   b498c:	4298      	cmp	r0, r3
   b498e:	d914      	bls.n	b49ba <loop+0x3e2>
      Serial.printf("Pinging MQTT \n");
   b4990:	f004 f922 	bl	b8bd8 <_Z16_fetch_usbserialv>
   b4994:	494c      	ldr	r1, [pc, #304]	; (b4ac8 <loop+0x4f0>)
   b4996:	f7ff fbd9 	bl	b414c <_ZN5Print6printfEPKcz>
      if(! mqtt.ping()) {
   b499a:	484c      	ldr	r0, [pc, #304]	; (b4acc <loop+0x4f4>)
   b499c:	2101      	movs	r1, #1
   b499e:	f001 ff54 	bl	b684a <_ZN13Adafruit_MQTT4pingEh>
   b49a2:	b938      	cbnz	r0, b49b4 <loop+0x3dc>
        Serial.printf("Disconnecting \n");
   b49a4:	f004 f918 	bl	b8bd8 <_Z16_fetch_usbserialv>
   b49a8:	4949      	ldr	r1, [pc, #292]	; (b4ad0 <loop+0x4f8>)
   b49aa:	f7ff fbcf 	bl	b414c <_ZN5Print6printfEPKcz>
        mqtt.disconnect();
   b49ae:	4847      	ldr	r0, [pc, #284]	; (b4acc <loop+0x4f4>)
   b49b0:	f001 fea2 	bl	b66f8 <_ZN13Adafruit_MQTT10disconnectEv>
   b49b4:	f003 f890 	bl	b7ad8 <HAL_Timer_Get_Milli_Seconds>
      pingTime = millis();
   b49b8:	6038      	str	r0, [r7, #0]
  if((millis()-publishTime > PUBLISHTIME)) {
   b49ba:	4f46      	ldr	r7, [pc, #280]	; (b4ad4 <loop+0x4fc>)
   b49bc:	f003 f88c 	bl	b7ad8 <HAL_Timer_Get_Milli_Seconds>
   b49c0:	683b      	ldr	r3, [r7, #0]
   b49c2:	1ac0      	subs	r0, r0, r3
   b49c4:	f247 5330 	movw	r3, #30000	; 0x7530
   b49c8:	4298      	cmp	r0, r3
   b49ca:	d93b      	bls.n	b4a44 <loop+0x46c>
    if(mqtt.Update()) {
   b49cc:	483f      	ldr	r0, [pc, #252]	; (b4acc <loop+0x4f4>)
   b49ce:	f001 fdcc 	bl	b656a <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   b49d2:	2800      	cmp	r0, #0
   b49d4:	d033      	beq.n	b4a3e <loop+0x466>
      mqttObj1.publish(tempF);
   b49d6:	4b34      	ldr	r3, [pc, #208]	; (b4aa8 <loop+0x4d0>)
   b49d8:	6818      	ldr	r0, [r3, #0]
   b49da:	f006 f9d7 	bl	bad8c <__aeabi_f2d>
   b49de:	ec41 0b10 	vmov	d0, r0, r1
   b49e2:	2102      	movs	r1, #2
   b49e4:	483c      	ldr	r0, [pc, #240]	; (b4ad8 <loop+0x500>)
   b49e6:	f002 f8cb 	bl	b6b80 <_ZN21Adafruit_MQTT_Publish7publishEdh>
      mqttObj2.publish(humidRH);
   b49ea:	4b30      	ldr	r3, [pc, #192]	; (b4aac <loop+0x4d4>)
   b49ec:	6818      	ldr	r0, [r3, #0]
   b49ee:	f006 f9cd 	bl	bad8c <__aeabi_f2d>
   b49f2:	ec41 0b10 	vmov	d0, r0, r1
   b49f6:	2102      	movs	r1, #2
   b49f8:	4838      	ldr	r0, [pc, #224]	; (b4adc <loop+0x504>)
   b49fa:	f002 f8c1 	bl	b6b80 <_ZN21Adafruit_MQTT_Publish7publishEdh>
      mqttObj3.publish(pressInHg);
   b49fe:	4b38      	ldr	r3, [pc, #224]	; (b4ae0 <loop+0x508>)
   b4a00:	6818      	ldr	r0, [r3, #0]
   b4a02:	f006 f9c3 	bl	bad8c <__aeabi_f2d>
   b4a06:	ec41 0b10 	vmov	d0, r0, r1
   b4a0a:	2102      	movs	r1, #2
   b4a0c:	4835      	ldr	r0, [pc, #212]	; (b4ae4 <loop+0x50c>)
   b4a0e:	f002 f8b7 	bl	b6b80 <_ZN21Adafruit_MQTT_Publish7publishEdh>
      mqttObj4.publish(moisture);
   b4a12:	6829      	ldr	r1, [r5, #0]
   b4a14:	4834      	ldr	r0, [pc, #208]	; (b4ae8 <loop+0x510>)
   b4a16:	f002 f8a4 	bl	b6b62 <_ZN21Adafruit_MQTT_Publish7publishEi>
      mqttObj5.publish(waterLevel);
   b4a1a:	6821      	ldr	r1, [r4, #0]
   b4a1c:	4833      	ldr	r0, [pc, #204]	; (b4aec <loop+0x514>)
   b4a1e:	f002 f8a0 	bl	b6b62 <_ZN21Adafruit_MQTT_Publish7publishEi>
      mqttObj6.publish(AQString);
   b4a22:	6831      	ldr	r1, [r6, #0]
   b4a24:	4832      	ldr	r0, [pc, #200]	; (b4af0 <loop+0x518>)
   b4a26:	f002 f8c7 	bl	b6bb8 <_ZN21Adafruit_MQTT_Publish7publishEPKc>
      mqttObj7.publish(concentration);
   b4a2a:	4b32      	ldr	r3, [pc, #200]	; (b4af4 <loop+0x51c>)
   b4a2c:	6818      	ldr	r0, [r3, #0]
   b4a2e:	f006 f9ad 	bl	bad8c <__aeabi_f2d>
   b4a32:	ec41 0b10 	vmov	d0, r0, r1
   b4a36:	4830      	ldr	r0, [pc, #192]	; (b4af8 <loop+0x520>)
   b4a38:	2102      	movs	r1, #2
   b4a3a:	f002 f8a1 	bl	b6b80 <_ZN21Adafruit_MQTT_Publish7publishEdh>
   b4a3e:	f003 f84b 	bl	b7ad8 <HAL_Timer_Get_Milli_Seconds>
    publishTime = millis();
   b4a42:	6038      	str	r0, [r7, #0]
  while ((subscription = mqtt.readSubscription(10))) {
   b4a44:	4e21      	ldr	r6, [pc, #132]	; (b4acc <loop+0x4f4>)
    if (subscription == &mqttObj8) {
   b4a46:	4d2d      	ldr	r5, [pc, #180]	; (b4afc <loop+0x524>)
  while ((subscription = mqtt.readSubscription(10))) {
   b4a48:	210a      	movs	r1, #10
   b4a4a:	4630      	mov	r0, r6
   b4a4c:	f001 fe83 	bl	b6756 <_ZN13Adafruit_MQTT16readSubscriptionEs>
   b4a50:	b1e8      	cbz	r0, b4a8e <loop+0x4b6>
    if (subscription == &mqttObj8) {
   b4a52:	42a8      	cmp	r0, r5
   b4a54:	d1f8      	bne.n	b4a48 <loop+0x470>
      manualButton = atoi((char *)mqttObj8.lastread);
   b4a56:	1d68      	adds	r0, r5, #5
   b4a58:	f007 f838 	bl	bbacc <atoi>
   b4a5c:	4c15      	ldr	r4, [pc, #84]	; (b4ab4 <loop+0x4dc>)
   b4a5e:	6020      	str	r0, [r4, #0]
      Serial.printf("Received %i from Adafruit.io feed Water \n",manualButton);
   b4a60:	f004 f8ba 	bl	b8bd8 <_Z16_fetch_usbserialv>
   b4a64:	6822      	ldr	r2, [r4, #0]
   b4a66:	4926      	ldr	r1, [pc, #152]	; (b4b00 <loop+0x528>)
   b4a68:	f7ff fb70 	bl	b414c <_ZN5Print6printfEPKcz>
   b4a6c:	e7ec      	b.n	b4a48 <loop+0x470>
            AQString = " High pollution! ";
   b4a6e:	4925      	ldr	r1, [pc, #148]	; (b4b04 <loop+0x52c>)
   b4a70:	e72d      	b.n	b48ce <loop+0x2f6>
            AQString = " Low pollution!  ";
   b4a72:	4925      	ldr	r1, [pc, #148]	; (b4b08 <loop+0x530>)
   b4a74:	e72b      	b.n	b48ce <loop+0x2f6>
            AQString = "!!  Fresh air  !!";
   b4a76:	4925      	ldr	r1, [pc, #148]	; (b4b0c <loop+0x534>)
   b4a78:	e729      	b.n	b48ce <loop+0x2f6>
   b4a7a:	f003 f82d 	bl	b7ad8 <HAL_Timer_Get_Milli_Seconds>
  if ((moisture > MOISTSET && (millis() - waterTime) > WATERTIME) || manualButton == 1) {  //  Plant is dry and it's watering time
   b4a7e:	4b24      	ldr	r3, [pc, #144]	; (b4b10 <loop+0x538>)
   b4a80:	681b      	ldr	r3, [r3, #0]
   b4a82:	1ac0      	subs	r0, r0, r3
   b4a84:	4b23      	ldr	r3, [pc, #140]	; (b4b14 <loop+0x53c>)
   b4a86:	4298      	cmp	r0, r3
   b4a88:	f67f af5e 	bls.w	b4948 <loop+0x370>
   b4a8c:	e760      	b.n	b4950 <loop+0x378>
}
   b4a8e:	b00f      	add	sp, #60	; 0x3c
   b4a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4a94:	000bbfd4 	.word	0x000bbfd4
   b4a98:	2003df2c 	.word	0x2003df2c
   b4a9c:	2003e664 	.word	0x2003e664
   b4aa0:	000bbf19 	.word	0x000bbf19
   b4aa4:	2003e674 	.word	0x2003e674
   b4aa8:	2003e624 	.word	0x2003e624
   b4aac:	2003e494 	.word	0x2003e494
   b4ab0:	2003e684 	.word	0x2003e684
   b4ab4:	2003e49c 	.word	0x2003e49c
   b4ab8:	000bc01c 	.word	0x000bc01c
   b4abc:	2003e604 	.word	0x2003e604
   b4ac0:	000bc02e 	.word	0x000bc02e
   b4ac4:	0001d4c0 	.word	0x0001d4c0
   b4ac8:	000bc03f 	.word	0x000bc03f
   b4acc:	2003e4a4 	.word	0x2003e4a4
   b4ad0:	000bc04e 	.word	0x000bc04e
   b4ad4:	2003e610 	.word	0x2003e610
   b4ad8:	2003e578 	.word	0x2003e578
   b4adc:	2003e584 	.word	0x2003e584
   b4ae0:	2003e608 	.word	0x2003e608
   b4ae4:	2003e590 	.word	0x2003e590
   b4ae8:	2003e59c 	.word	0x2003e59c
   b4aec:	2003e5a8 	.word	0x2003e5a8
   b4af0:	2003e5b4 	.word	0x2003e5b4
   b4af4:	2003e444 	.word	0x2003e444
   b4af8:	2003e5c0 	.word	0x2003e5c0
   b4afc:	2003e5cc 	.word	0x2003e5cc
   b4b00:	000bc05e 	.word	0x000bc05e
   b4b04:	000bbfe6 	.word	0x000bbfe6
   b4b08:	000bbff8 	.word	0x000bbff8
   b4b0c:	000bc00a 	.word	0x000bc00a
   b4b10:	2003e69c 	.word	0x2003e69c
   b4b14:	001b7740 	.word	0x001b7740

000b4b18 <_GLOBAL__sub_I_TheClient>:
}
   b4b18:	b530      	push	{r4, r5, lr}
TCPClient TheClient; 
   b4b1a:	484c      	ldr	r0, [pc, #304]	; (b4c4c <_GLOBAL__sub_I_TheClient+0x134>)
  SdFat() {
   b4b1c:	4c4c      	ldr	r4, [pc, #304]	; (b4c50 <_GLOBAL__sub_I_TheClient+0x138>)
}
   b4b1e:	b085      	sub	sp, #20
TCPClient TheClient; 
   b4b20:	f004 fc08 	bl	b9334 <_ZN9TCPClientC1Ev>
  String     dateTime, timeOnly, timeOnlyOld;   
   b4b24:	494b      	ldr	r1, [pc, #300]	; (b4c54 <_GLOBAL__sub_I_TheClient+0x13c>)
   b4b26:	484c      	ldr	r0, [pc, #304]	; (b4c58 <_GLOBAL__sub_I_TheClient+0x140>)
   b4b28:	f003 fcbf 	bl	b84aa <_ZN6StringC1EPK19__FlashStringHelper>
   b4b2c:	4949      	ldr	r1, [pc, #292]	; (b4c54 <_GLOBAL__sub_I_TheClient+0x13c>)
   b4b2e:	484b      	ldr	r0, [pc, #300]	; (b4c5c <_GLOBAL__sub_I_TheClient+0x144>)
   b4b30:	f003 fcbb 	bl	b84aa <_ZN6StringC1EPK19__FlashStringHelper>
   b4b34:	4947      	ldr	r1, [pc, #284]	; (b4c54 <_GLOBAL__sub_I_TheClient+0x13c>)
   b4b36:	484a      	ldr	r0, [pc, #296]	; (b4c60 <_GLOBAL__sub_I_TheClient+0x148>)
   b4b38:	f003 fcb7 	bl	b84aa <_ZN6StringC1EPK19__FlashStringHelper>
    Print() : write_error(0) {}
   b4b3c:	4b49      	ldr	r3, [pc, #292]	; (b4c64 <_GLOBAL__sub_I_TheClient+0x14c>)
  String     AQString;
   b4b3e:	4945      	ldr	r1, [pc, #276]	; (b4c54 <_GLOBAL__sub_I_TheClient+0x13c>)
   b4b40:	4849      	ldr	r0, [pc, #292]	; (b4c68 <_GLOBAL__sub_I_TheClient+0x150>)
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4b42:	2500      	movs	r5, #0
   b4b44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4b48:	e9c3 5201 	strd	r5, r2, [r3, #4]
  File() {}
   b4b4c:	4a47      	ldr	r2, [pc, #284]	; (b4c6c <_GLOBAL__sub_I_TheClient+0x154>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4b4e:	611d      	str	r5, [r3, #16]
   b4b50:	601a      	str	r2, [r3, #0]
   b4b52:	f003 fcaa 	bl	b84aa <_ZN6StringC1EPK19__FlashStringHelper>
  Adafruit_SSD1306    displayOne(OLEDRESET);
   b4b56:	f04f 31ff 	mov.w	r1, #4294967295
   b4b5a:	4845      	ldr	r0, [pc, #276]	; (b4c70 <_GLOBAL__sub_I_TheClient+0x158>)
   b4b5c:	f001 f90c 	bl	b5d78 <_ZN16Adafruit_SSD1306C1Ea>
  Adafruit_BME280     bmeOne;
   b4b60:	4844      	ldr	r0, [pc, #272]	; (b4c74 <_GLOBAL__sub_I_TheClient+0x15c>)
   b4b62:	f000 f8bd 	bl	b4ce0 <_ZN15Adafruit_BME280C1Ev>
   b4b66:	2364      	movs	r3, #100	; 0x64
   b4b68:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
  {
   b4b6c:	4b42      	ldr	r3, [pc, #264]	; (b4c78 <_GLOBAL__sub_I_TheClient+0x160>)
   b4b6e:	6065      	str	r5, [r4, #4]
   b4b70:	f8c4 543c 	str.w	r5, [r4, #1084]	; 0x43c
   b4b74:	f8c4 5468 	str.w	r5, [r4, #1128]	; 0x468
   b4b78:	f8c4 3470 	str.w	r3, [r4, #1136]	; 0x470
   b4b7c:	f8c4 5478 	str.w	r5, [r4, #1144]	; 0x478
   b4b80:	f8a4 547c 	strh.w	r5, [r4, #1148]	; 0x47c
   b4b84:	2301      	movs	r3, #1

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4b86:	4d3d      	ldr	r5, [pc, #244]	; (b4c7c <_GLOBAL__sub_I_TheClient+0x164>)
   b4b88:	f884 3474 	strb.w	r3, [r4, #1140]	; 0x474
   b4b8c:	7829      	ldrb	r1, [r5, #0]
   b4b8e:	f3bf 8f5b 	dmb	ish
   b4b92:	4019      	ands	r1, r3
   b4b94:	d10b      	bne.n	b4bae <_GLOBAL__sub_I_TheClient+0x96>
   b4b96:	4628      	mov	r0, r5
   b4b98:	9103      	str	r1, [sp, #12]
   b4b9a:	f7ff fa8d 	bl	b40b8 <__cxa_guard_acquire>
   b4b9e:	9903      	ldr	r1, [sp, #12]
   b4ba0:	b128      	cbz	r0, b4bae <_GLOBAL__sub_I_TheClient+0x96>
   b4ba2:	4837      	ldr	r0, [pc, #220]	; (b4c80 <_GLOBAL__sub_I_TheClient+0x168>)
   b4ba4:	f003 faa0 	bl	b80e8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4ba8:	4628      	mov	r0, r5
   b4baa:	f7ff fa8a 	bl	b40c2 <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b4bae:	4b34      	ldr	r3, [pc, #208]	; (b4c80 <_GLOBAL__sub_I_TheClient+0x168>)
   b4bb0:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
  Adafruit_NeoPixel   waterPixel(PIXELNUM, PIXELPIN, WS2812B);
   b4bb4:	2206      	movs	r2, #6
   b4bb6:	2302      	movs	r3, #2
   b4bb8:	2101      	movs	r1, #1
   b4bba:	4832      	ldr	r0, [pc, #200]	; (b4c84 <_GLOBAL__sub_I_TheClient+0x16c>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   b4bbc:	4c32      	ldr	r4, [pc, #200]	; (b4c88 <_GLOBAL__sub_I_TheClient+0x170>)
   b4bbe:	f000 fd25 	bl	b560c <_ZN17Adafruit_NeoPixelC1Ethh>
  AirQualitySensor    airQualitySensor(AQSPIN);
   b4bc2:	2113      	movs	r1, #19
   b4bc4:	4831      	ldr	r0, [pc, #196]	; (b4c8c <_GLOBAL__sub_I_TheClient+0x174>)
   b4bc6:	f002 febf 	bl	b7948 <_ZN16AirQualitySensorC1Ei>
   b4bca:	4b31      	ldr	r3, [pc, #196]	; (b4c90 <_GLOBAL__sub_I_TheClient+0x178>)
   b4bcc:	9300      	str	r3, [sp, #0]
   b4bce:	4931      	ldr	r1, [pc, #196]	; (b4c94 <_GLOBAL__sub_I_TheClient+0x17c>)
   b4bd0:	4b31      	ldr	r3, [pc, #196]	; (b4c98 <_GLOBAL__sub_I_TheClient+0x180>)
   b4bd2:	f240 725b 	movw	r2, #1883	; 0x75b
   b4bd6:	4620      	mov	r0, r4
   b4bd8:	f001 fcfc 	bl	b65d4 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   b4bdc:	4b2f      	ldr	r3, [pc, #188]	; (b4c9c <_GLOBAL__sub_I_TheClient+0x184>)
   b4bde:	6023      	str	r3, [r4, #0]
   b4be0:	4b1a      	ldr	r3, [pc, #104]	; (b4c4c <_GLOBAL__sub_I_TheClient+0x134>)
   b4be2:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  Adafruit_MQTT_Publish    mqttObj1 = Adafruit_MQTT_Publish   (&mqtt, AIO_USERNAME "/feeds/Temp");
   b4be6:	4621      	mov	r1, r4
   b4be8:	4a2d      	ldr	r2, [pc, #180]	; (b4ca0 <_GLOBAL__sub_I_TheClient+0x188>)
   b4bea:	482e      	ldr	r0, [pc, #184]	; (b4ca4 <_GLOBAL__sub_I_TheClient+0x18c>)
   b4bec:	2300      	movs	r3, #0
   b4bee:	f001 ffb3 	bl	b6b58 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
  Adafruit_MQTT_Publish    mqttObj2 = Adafruit_MQTT_Publish   (&mqtt, AIO_USERNAME "/feeds/Humidity");
   b4bf2:	4621      	mov	r1, r4
   b4bf4:	4a2c      	ldr	r2, [pc, #176]	; (b4ca8 <_GLOBAL__sub_I_TheClient+0x190>)
   b4bf6:	482d      	ldr	r0, [pc, #180]	; (b4cac <_GLOBAL__sub_I_TheClient+0x194>)
   b4bf8:	2300      	movs	r3, #0
   b4bfa:	f001 ffad 	bl	b6b58 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
  Adafruit_MQTT_Publish    mqttObj3 = Adafruit_MQTT_Publish   (&mqtt, AIO_USERNAME "/feeds/Pressure");
   b4bfe:	4621      	mov	r1, r4
   b4c00:	4a2b      	ldr	r2, [pc, #172]	; (b4cb0 <_GLOBAL__sub_I_TheClient+0x198>)
   b4c02:	482c      	ldr	r0, [pc, #176]	; (b4cb4 <_GLOBAL__sub_I_TheClient+0x19c>)
   b4c04:	2300      	movs	r3, #0
   b4c06:	f001 ffa7 	bl	b6b58 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
  Adafruit_MQTT_Publish    mqttObj4 = Adafruit_MQTT_Publish   (&mqtt, AIO_USERNAME "/feeds/Moisture");
   b4c0a:	4621      	mov	r1, r4
   b4c0c:	4a2a      	ldr	r2, [pc, #168]	; (b4cb8 <_GLOBAL__sub_I_TheClient+0x1a0>)
   b4c0e:	482b      	ldr	r0, [pc, #172]	; (b4cbc <_GLOBAL__sub_I_TheClient+0x1a4>)
   b4c10:	2300      	movs	r3, #0
   b4c12:	f001 ffa1 	bl	b6b58 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
  Adafruit_MQTT_Publish    mqttObj5 = Adafruit_MQTT_Publish   (&mqtt, AIO_USERNAME "/feeds/WaterLevel");
   b4c16:	4621      	mov	r1, r4
   b4c18:	4a29      	ldr	r2, [pc, #164]	; (b4cc0 <_GLOBAL__sub_I_TheClient+0x1a8>)
   b4c1a:	482a      	ldr	r0, [pc, #168]	; (b4cc4 <_GLOBAL__sub_I_TheClient+0x1ac>)
   b4c1c:	2300      	movs	r3, #0
   b4c1e:	f001 ff9b 	bl	b6b58 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
  Adafruit_MQTT_Publish    mqttObj6 = Adafruit_MQTT_Publish   (&mqtt, AIO_USERNAME "/feeds/AirQuality");
   b4c22:	4621      	mov	r1, r4
   b4c24:	4a28      	ldr	r2, [pc, #160]	; (b4cc8 <_GLOBAL__sub_I_TheClient+0x1b0>)
   b4c26:	4829      	ldr	r0, [pc, #164]	; (b4ccc <_GLOBAL__sub_I_TheClient+0x1b4>)
   b4c28:	2300      	movs	r3, #0
   b4c2a:	f001 ff95 	bl	b6b58 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
  Adafruit_MQTT_Publish    mqttObj7 = Adafruit_MQTT_Publish   (&mqtt, AIO_USERNAME "/feeds/Dust");
   b4c2e:	4621      	mov	r1, r4
   b4c30:	4a27      	ldr	r2, [pc, #156]	; (b4cd0 <_GLOBAL__sub_I_TheClient+0x1b8>)
   b4c32:	4828      	ldr	r0, [pc, #160]	; (b4cd4 <_GLOBAL__sub_I_TheClient+0x1bc>)
   b4c34:	2300      	movs	r3, #0
   b4c36:	f001 ff8f 	bl	b6b58 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
  Adafruit_MQTT_Subscribe  mqttObj8 = Adafruit_MQTT_Subscribe (&mqtt, AIO_USERNAME "/feeds/Water");
   b4c3a:	4a27      	ldr	r2, [pc, #156]	; (b4cd8 <_GLOBAL__sub_I_TheClient+0x1c0>)
   b4c3c:	4827      	ldr	r0, [pc, #156]	; (b4cdc <_GLOBAL__sub_I_TheClient+0x1c4>)
   b4c3e:	2300      	movs	r3, #0
   b4c40:	4621      	mov	r1, r4
}
   b4c42:	b005      	add	sp, #20
   b4c44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  Adafruit_MQTT_Subscribe  mqttObj8 = Adafruit_MQTT_Subscribe (&mqtt, AIO_USERNAME "/feeds/Water");
   b4c48:	f001 bfbc 	b.w	b6bc4 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
   b4c4c:	2003e3c4 	.word	0x2003e3c4
   b4c50:	2003df40 	.word	0x2003df40
   b4c54:	000bc04d 	.word	0x000bc04d
   b4c58:	2003e44c 	.word	0x2003e44c
   b4c5c:	2003e664 	.word	0x2003e664
   b4c60:	2003e674 	.word	0x2003e674
   b4c64:	2003e628 	.word	0x2003e628
   b4c68:	2003df2c 	.word	0x2003df2c
   b4c6c:	000bc1ac 	.word	0x000bc1ac
   b4c70:	2003e45c 	.word	0x2003e45c
   b4c74:	2003e3fc 	.word	0x2003e3fc
   b4c78:	000bc198 	.word	0x000bc198
   b4c7c:	2003df20 	.word	0x2003df20
   b4c80:	2003df24 	.word	0x2003df24
   b4c84:	2003e688 	.word	0x2003e688
   b4c88:	2003e4a4 	.word	0x2003e4a4
   b4c8c:	2003e3e0 	.word	0x2003e3e0
   b4c90:	000bc0a3 	.word	0x000bc0a3
   b4c94:	000bc093 	.word	0x000bc093
   b4c98:	000bc088 	.word	0x000bc088
   b4c9c:	000bc754 	.word	0x000bc754
   b4ca0:	000bc0c4 	.word	0x000bc0c4
   b4ca4:	2003e578 	.word	0x2003e578
   b4ca8:	000bc0da 	.word	0x000bc0da
   b4cac:	2003e584 	.word	0x2003e584
   b4cb0:	000bc0f4 	.word	0x000bc0f4
   b4cb4:	2003e590 	.word	0x2003e590
   b4cb8:	000bc10e 	.word	0x000bc10e
   b4cbc:	2003e59c 	.word	0x2003e59c
   b4cc0:	000bc128 	.word	0x000bc128
   b4cc4:	2003e5a8 	.word	0x2003e5a8
   b4cc8:	000bc144 	.word	0x000bc144
   b4ccc:	2003e5b4 	.word	0x2003e5b4
   b4cd0:	000bc160 	.word	0x000bc160
   b4cd4:	2003e5c0 	.word	0x2003e5c0
   b4cd8:	000bc176 	.word	0x000bc176
   b4cdc:	2003e5cc 	.word	0x2003e5cc

000b4ce0 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b4ce0:	f04f 33ff 	mov.w	r3, #4294967295
   b4ce4:	6103      	str	r3, [r0, #16]
{ }
   b4ce6:	4770      	bx	lr

000b4ce8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   b4ce8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b4cea:	4c0b      	ldr	r4, [pc, #44]	; (b4d18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b4cec:	7821      	ldrb	r1, [r4, #0]
   b4cee:	f3bf 8f5b 	dmb	ish
   b4cf2:	f011 0101 	ands.w	r1, r1, #1
   b4cf6:	d10b      	bne.n	b4d10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4cf8:	4620      	mov	r0, r4
   b4cfa:	9101      	str	r1, [sp, #4]
   b4cfc:	f7ff f9dc 	bl	b40b8 <__cxa_guard_acquire>
   b4d00:	9901      	ldr	r1, [sp, #4]
   b4d02:	b128      	cbz	r0, b4d10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4d04:	4805      	ldr	r0, [pc, #20]	; (b4d1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4d06:	f003 f9ef 	bl	b80e8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4d0a:	4620      	mov	r0, r4
   b4d0c:	f7ff f9d9 	bl	b40c2 <__cxa_guard_release>
        return instance;
    }
   b4d10:	4802      	ldr	r0, [pc, #8]	; (b4d1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4d12:	b002      	add	sp, #8
   b4d14:	bd10      	pop	{r4, pc}
   b4d16:	bf00      	nop
   b4d18:	2003df20 	.word	0x2003df20
   b4d1c:	2003df24 	.word	0x2003df24

000b4d20 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   b4d20:	b508      	push	{r3, lr}
        instance().endTransaction();
   b4d22:	f7ff ffe1 	bl	b4ce8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b4d26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b4d2a:	f003 ba23 	b.w	b8174 <_ZN8SPIClass14endTransactionEv>

000b4d2e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b4d2e:	b507      	push	{r0, r1, r2, lr}
   b4d30:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b4d32:	f7ff ffd9 	bl	b4ce8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4d36:	9901      	ldr	r1, [sp, #4]
    }
   b4d38:	b003      	add	sp, #12
   b4d3a:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b4d3e:	f003 ba33 	b.w	b81a8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b4d42 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b4d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   b4d46:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4d4a:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b4d4c:	4605      	mov	r5, r0
   b4d4e:	460f      	mov	r7, r1
    if (_sck == -1)
   b4d50:	d106      	bne.n	b4d60 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b4d52:	f7ff ffc9 	bl	b4ce8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4d56:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   b4d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b4d5c:	f003 baea 	b.w	b8334 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   b4d60:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   b4d62:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   b4d64:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   b4d68:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b4d6c:	2100      	movs	r1, #0
   b4d6e:	b280      	uxth	r0, r0
   b4d70:	f004 fc2d 	bl	b95ce <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   b4d74:	f995 0011 	ldrsb.w	r0, [r5, #17]
   b4d78:	fa08 f106 	lsl.w	r1, r8, r6
   b4d7c:	4039      	ands	r1, r7
   b4d7e:	b280      	uxth	r0, r0
   b4d80:	f004 fc25 	bl	b95ce <digitalWrite>
        digitalWrite(_sck, HIGH);
   b4d84:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b4d88:	2101      	movs	r1, #1
   b4d8a:	b280      	uxth	r0, r0
   b4d8c:	f004 fc1f 	bl	b95ce <digitalWrite>
        if (digitalRead(_miso))
   b4d90:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   b4d94:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   b4d96:	b280      	uxth	r0, r0
        reply <<= 1;
   b4d98:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   b4d9a:	f004 fc31 	bl	b9600 <digitalRead>
   b4d9e:	b108      	cbz	r0, b4da4 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   b4da0:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   b4da4:	3e01      	subs	r6, #1
   b4da6:	d2df      	bcs.n	b4d68 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   b4da8:	4620      	mov	r0, r4
   b4daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4db0 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   b4db0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   b4db2:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4db6:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   b4db8:	4604      	mov	r4, r0
   b4dba:	460e      	mov	r6, r1
   b4dbc:	4615      	mov	r5, r2
    if (_cs == -1) {
   b4dbe:	d113      	bne.n	b4de8 <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4dc0:	7901      	ldrb	r1, [r0, #4]
   b4dc2:	6800      	ldr	r0, [r0, #0]
   b4dc4:	f003 fff0 	bl	b8da8 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4dc8:	6820      	ldr	r0, [r4, #0]
   b4dca:	6803      	ldr	r3, [r0, #0]
   b4dcc:	4631      	mov	r1, r6
   b4dce:	689b      	ldr	r3, [r3, #8]
   b4dd0:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   b4dd2:	6820      	ldr	r0, [r4, #0]
   b4dd4:	6803      	ldr	r3, [r0, #0]
   b4dd6:	4629      	mov	r1, r5
   b4dd8:	689b      	ldr	r3, [r3, #8]
   b4dda:	4798      	blx	r3
        _wire -> endTransmission();
   b4ddc:	6820      	ldr	r0, [r4, #0]
        spixfer(value);
        digitalWrite(_cs, HIGH);
    if (_sck == -1)
        SPI.endTransaction(); // release the SPI bus
    }
}
   b4dde:	b004      	add	sp, #16
   b4de0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
   b4de4:	f003 bfeb 	b.w	b8dbe <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
   b4de8:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4dec:	3301      	adds	r3, #1
   b4dee:	d10c      	bne.n	b4e0a <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
   b4df0:	4b16      	ldr	r3, [pc, #88]	; (b4e4c <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   b4df2:	9300      	str	r3, [sp, #0]
   b4df4:	2300      	movs	r3, #0
   b4df6:	f88d 3004 	strb.w	r3, [sp, #4]
   b4dfa:	4b15      	ldr	r3, [pc, #84]	; (b4e50 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   b4dfc:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4dfe:	4668      	mov	r0, sp
   b4e00:	2301      	movs	r3, #1
   b4e02:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4e06:	f7ff ff92 	bl	b4d2e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4e0a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4e0e:	2100      	movs	r1, #0
   b4e10:	b280      	uxth	r0, r0
   b4e12:	f004 fbdc 	bl	b95ce <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   b4e16:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b4e1a:	4620      	mov	r0, r4
   b4e1c:	f7ff ff91 	bl	b4d42 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   b4e20:	4629      	mov	r1, r5
   b4e22:	4620      	mov	r0, r4
   b4e24:	f7ff ff8d 	bl	b4d42 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   b4e28:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4e2c:	2101      	movs	r1, #1
   b4e2e:	b280      	uxth	r0, r0
   b4e30:	f004 fbcd 	bl	b95ce <digitalWrite>
    if (_sck == -1)
   b4e34:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4e38:	3301      	adds	r3, #1
   b4e3a:	d104      	bne.n	b4e46 <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
   b4e3c:	b004      	add	sp, #16
   b4e3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
   b4e42:	f7ff bf6d 	b.w	b4d20 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b4e46:	b004      	add	sp, #16
   b4e48:	bd70      	pop	{r4, r5, r6, pc}
   b4e4a:	bf00      	nop
   b4e4c:	000bc198 	.word	0x000bc198
   b4e50:	0007a120 	.word	0x0007a120

000b4e54 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   b4e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   b4e56:	00db      	lsls	r3, r3, #3
   b4e58:	f002 0207 	and.w	r2, r2, #7
   b4e5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
   b4e60:	4313      	orrs	r3, r2
   b4e62:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   b4e66:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   b4e6a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   b4e6e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   b4e72:	f89d 501c 	ldrb.w	r5, [sp, #28]
   b4e76:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   b4e7a:	f366 1347 	bfi	r3, r6, #5, #3
   b4e7e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   b4e82:	00ed      	lsls	r5, r5, #3
   b4e84:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b4e88:	f007 0707 	and.w	r7, r7, #7
   b4e8c:	f005 0538 	and.w	r5, r5, #56	; 0x38
   b4e90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   b4e94:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   b4e96:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   b4e98:	431d      	orrs	r5, r3
   b4e9a:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   b4e9e:	f006 0207 	and.w	r2, r6, #7
   b4ea2:	21f2      	movs	r1, #242	; 0xf2
   b4ea4:	f7ff ff84 	bl	b4db0 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   b4ea8:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   b4eac:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b4eb0:	f002 0107 	and.w	r1, r2, #7
   b4eb4:	009b      	lsls	r3, r3, #2
   b4eb6:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   b4eba:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   b4ebe:	4620      	mov	r0, r4
   b4ec0:	21f5      	movs	r1, #245	; 0xf5
   b4ec2:	f7ff ff75 	bl	b4db0 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   b4ec6:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b4eca:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b4ece:	f002 0107 	and.w	r1, r2, #7
   b4ed2:	009b      	lsls	r3, r3, #2
   b4ed4:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4ed8:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   b4edc:	4620      	mov	r0, r4
   b4ede:	21f4      	movs	r1, #244	; 0xf4
}
   b4ee0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4ee4:	f7ff bf64 	b.w	b4db0 <_ZN15Adafruit_BME2806write8Ehh>

000b4ee8 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   b4ee8:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   b4eea:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4eee:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   b4ef0:	b085      	sub	sp, #20
   b4ef2:	4604      	mov	r4, r0
   b4ef4:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4ef6:	d118      	bne.n	b4f2a <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4ef8:	7901      	ldrb	r1, [r0, #4]
   b4efa:	6800      	ldr	r0, [r0, #0]
   b4efc:	f003 ff54 	bl	b8da8 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4f00:	6820      	ldr	r0, [r4, #0]
   b4f02:	6803      	ldr	r3, [r0, #0]
   b4f04:	4629      	mov	r1, r5
   b4f06:	689b      	ldr	r3, [r3, #8]
   b4f08:	4798      	blx	r3
        _wire -> endTransmission();
   b4f0a:	6820      	ldr	r0, [r4, #0]
   b4f0c:	f003 ff57 	bl	b8dbe <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   b4f10:	7921      	ldrb	r1, [r4, #4]
   b4f12:	6820      	ldr	r0, [r4, #0]
   b4f14:	2201      	movs	r2, #1
   b4f16:	f003 ff44 	bl	b8da2 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b4f1a:	6820      	ldr	r0, [r4, #0]
   b4f1c:	6803      	ldr	r3, [r0, #0]
   b4f1e:	695b      	ldr	r3, [r3, #20]
   b4f20:	4798      	blx	r3
   b4f22:	b2c5      	uxtb	r5, r0
        digitalWrite(_cs, HIGH);
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }
    return value;
}
   b4f24:	4628      	mov	r0, r5
   b4f26:	b005      	add	sp, #20
   b4f28:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4f2a:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4f2e:	3301      	adds	r3, #1
   b4f30:	d10c      	bne.n	b4f4c <_ZN15Adafruit_BME2805read8Eh+0x64>
   b4f32:	4b15      	ldr	r3, [pc, #84]	; (b4f88 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   b4f34:	9300      	str	r3, [sp, #0]
   b4f36:	2300      	movs	r3, #0
   b4f38:	f88d 3004 	strb.w	r3, [sp, #4]
   b4f3c:	4b13      	ldr	r3, [pc, #76]	; (b4f8c <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   b4f3e:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4f40:	4668      	mov	r0, sp
   b4f42:	2301      	movs	r3, #1
   b4f44:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4f48:	f7ff fef1 	bl	b4d2e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4f4c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4f50:	2100      	movs	r1, #0
   b4f52:	b280      	uxth	r0, r0
   b4f54:	f004 fb3b 	bl	b95ce <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4f58:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4f5c:	4620      	mov	r0, r4
   b4f5e:	f7ff fef0 	bl	b4d42 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4f62:	2100      	movs	r1, #0
   b4f64:	4620      	mov	r0, r4
   b4f66:	f7ff feec 	bl	b4d42 <_ZN15Adafruit_BME2807spixferEh>
   b4f6a:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   b4f6c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4f70:	2101      	movs	r1, #1
   b4f72:	b280      	uxth	r0, r0
   b4f74:	f004 fb2b 	bl	b95ce <digitalWrite>
        if (_sck == -1)
   b4f78:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4f7c:	3301      	adds	r3, #1
   b4f7e:	d1d1      	bne.n	b4f24 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   b4f80:	f7ff fece 	bl	b4d20 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4f84:	e7ce      	b.n	b4f24 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   b4f86:	bf00      	nop
   b4f88:	000bc198 	.word	0x000bc198
   b4f8c:	0007a120 	.word	0x0007a120

000b4f90 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   b4f90:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   b4f92:	21f3      	movs	r1, #243	; 0xf3
   b4f94:	f7ff ffa8 	bl	b4ee8 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   b4f98:	f000 0001 	and.w	r0, r0, #1
   b4f9c:	bd08      	pop	{r3, pc}
	...

000b4fa0 <_ZN15Adafruit_BME2806read16Eh>:
{
   b4fa0:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4fa2:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4fa6:	3301      	adds	r3, #1
{
   b4fa8:	b085      	sub	sp, #20
   b4faa:	4604      	mov	r4, r0
   b4fac:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4fae:	d11f      	bne.n	b4ff0 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4fb0:	7901      	ldrb	r1, [r0, #4]
   b4fb2:	6800      	ldr	r0, [r0, #0]
   b4fb4:	f003 fef8 	bl	b8da8 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4fb8:	6820      	ldr	r0, [r4, #0]
   b4fba:	6803      	ldr	r3, [r0, #0]
   b4fbc:	4629      	mov	r1, r5
   b4fbe:	689b      	ldr	r3, [r3, #8]
   b4fc0:	4798      	blx	r3
        _wire -> endTransmission();
   b4fc2:	6820      	ldr	r0, [r4, #0]
   b4fc4:	f003 fefb 	bl	b8dbe <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   b4fc8:	7921      	ldrb	r1, [r4, #4]
   b4fca:	6820      	ldr	r0, [r4, #0]
   b4fcc:	2202      	movs	r2, #2
   b4fce:	f003 fee8 	bl	b8da2 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   b4fd2:	6820      	ldr	r0, [r4, #0]
   b4fd4:	6803      	ldr	r3, [r0, #0]
   b4fd6:	695b      	ldr	r3, [r3, #20]
   b4fd8:	4798      	blx	r3
   b4fda:	4605      	mov	r5, r0
   b4fdc:	6820      	ldr	r0, [r4, #0]
   b4fde:	6803      	ldr	r3, [r0, #0]
   b4fe0:	695b      	ldr	r3, [r3, #20]
   b4fe2:	4798      	blx	r3
   b4fe4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4fe8:	b285      	uxth	r5, r0
}
   b4fea:	4628      	mov	r0, r5
   b4fec:	b005      	add	sp, #20
   b4fee:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4ff0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4ff4:	3301      	adds	r3, #1
   b4ff6:	d10c      	bne.n	b5012 <_ZN15Adafruit_BME2806read16Eh+0x72>
   b4ff8:	4b18      	ldr	r3, [pc, #96]	; (b505c <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   b4ffa:	9300      	str	r3, [sp, #0]
   b4ffc:	2300      	movs	r3, #0
   b4ffe:	f88d 3004 	strb.w	r3, [sp, #4]
   b5002:	4b17      	ldr	r3, [pc, #92]	; (b5060 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   b5004:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b5006:	4668      	mov	r0, sp
   b5008:	2301      	movs	r3, #1
   b500a:	f8ad 300c 	strh.w	r3, [sp, #12]
   b500e:	f7ff fe8e 	bl	b4d2e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b5012:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5016:	2100      	movs	r1, #0
   b5018:	b280      	uxth	r0, r0
   b501a:	f004 fad8 	bl	b95ce <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b501e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b5022:	4620      	mov	r0, r4
   b5024:	f7ff fe8d 	bl	b4d42 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   b5028:	2100      	movs	r1, #0
   b502a:	4620      	mov	r0, r4
   b502c:	f7ff fe89 	bl	b4d42 <_ZN15Adafruit_BME2807spixferEh>
   b5030:	2100      	movs	r1, #0
   b5032:	4605      	mov	r5, r0
   b5034:	4620      	mov	r0, r4
   b5036:	f7ff fe84 	bl	b4d42 <_ZN15Adafruit_BME2807spixferEh>
   b503a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b503e:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   b5040:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5044:	2101      	movs	r1, #1
   b5046:	b280      	uxth	r0, r0
   b5048:	f004 fac1 	bl	b95ce <digitalWrite>
        if (_sck == -1)
   b504c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b5050:	3301      	adds	r3, #1
   b5052:	d1ca      	bne.n	b4fea <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   b5054:	f7ff fe64 	bl	b4d20 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b5058:	e7c7      	b.n	b4fea <_ZN15Adafruit_BME2806read16Eh+0x4a>
   b505a:	bf00      	nop
   b505c:	000bc198 	.word	0x000bc198
   b5060:	0007a120 	.word	0x0007a120

000b5064 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   b5064:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   b5066:	f7ff ff9b 	bl	b4fa0 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   b506a:	ba40      	rev16	r0, r0
}
   b506c:	b280      	uxth	r0, r0
   b506e:	bd08      	pop	{r3, pc}

000b5070 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   b5070:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b5072:	2188      	movs	r1, #136	; 0x88
{
   b5074:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b5076:	f7ff fff5 	bl	b5064 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b507a:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b507c:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   b507e:	4620      	mov	r0, r4
   b5080:	f7ff fff0 	bl	b5064 <_ZN15Adafruit_BME2809read16_LEEh>
   b5084:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   b5086:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   b5088:	4620      	mov	r0, r4
   b508a:	f7ff ffeb 	bl	b5064 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b508e:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   b5090:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b5092:	4620      	mov	r0, r4
   b5094:	f7ff ffe6 	bl	b5064 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b5098:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b509a:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   b509c:	4620      	mov	r0, r4
   b509e:	f7ff ffe1 	bl	b5064 <_ZN15Adafruit_BME2809read16_LEEh>
   b50a2:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   b50a4:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   b50a6:	4620      	mov	r0, r4
   b50a8:	f7ff ffdc 	bl	b5064 <_ZN15Adafruit_BME2809read16_LEEh>
   b50ac:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   b50ae:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   b50b0:	4620      	mov	r0, r4
   b50b2:	f7ff ffd7 	bl	b5064 <_ZN15Adafruit_BME2809read16_LEEh>
   b50b6:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   b50b8:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   b50ba:	4620      	mov	r0, r4
   b50bc:	f7ff ffd2 	bl	b5064 <_ZN15Adafruit_BME2809read16_LEEh>
   b50c0:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   b50c2:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   b50c4:	4620      	mov	r0, r4
   b50c6:	f7ff ffcd 	bl	b5064 <_ZN15Adafruit_BME2809read16_LEEh>
   b50ca:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   b50cc:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   b50ce:	4620      	mov	r0, r4
   b50d0:	f7ff ffc8 	bl	b5064 <_ZN15Adafruit_BME2809read16_LEEh>
   b50d4:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   b50d6:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   b50d8:	4620      	mov	r0, r4
   b50da:	f7ff ffc3 	bl	b5064 <_ZN15Adafruit_BME2809read16_LEEh>
   b50de:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   b50e0:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   b50e2:	4620      	mov	r0, r4
   b50e4:	f7ff ffbe 	bl	b5064 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b50e8:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   b50ea:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b50ec:	4620      	mov	r0, r4
   b50ee:	f7ff fefb 	bl	b4ee8 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   b50f2:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b50f4:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   b50f8:	4620      	mov	r0, r4
   b50fa:	f7ff ffb3 	bl	b5064 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b50fe:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   b5100:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b5102:	4620      	mov	r0, r4
   b5104:	f7ff fef0 	bl	b4ee8 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b5108:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b510a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b510e:	4620      	mov	r0, r4
   b5110:	f7ff feea 	bl	b4ee8 <_ZN15Adafruit_BME2805read8Eh>
   b5114:	21e5      	movs	r1, #229	; 0xe5
   b5116:	4605      	mov	r5, r0
   b5118:	4620      	mov	r0, r4
   b511a:	f7ff fee5 	bl	b4ee8 <_ZN15Adafruit_BME2805read8Eh>
   b511e:	f000 030f 	and.w	r3, r0, #15
   b5122:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b5126:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   b5128:	21e6      	movs	r1, #230	; 0xe6
   b512a:	4620      	mov	r0, r4
   b512c:	f7ff fedc 	bl	b4ee8 <_ZN15Adafruit_BME2805read8Eh>
   b5130:	21e5      	movs	r1, #229	; 0xe5
   b5132:	4605      	mov	r5, r0
   b5134:	4620      	mov	r0, r4
   b5136:	f7ff fed7 	bl	b4ee8 <_ZN15Adafruit_BME2805read8Eh>
   b513a:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b513e:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b5142:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   b5144:	21e7      	movs	r1, #231	; 0xe7
   b5146:	4620      	mov	r0, r4
   b5148:	f7ff fece 	bl	b4ee8 <_ZN15Adafruit_BME2805read8Eh>
   b514c:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   b5150:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5154 <_ZN15Adafruit_BME2806read24Eh>:
{
   b5154:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b5156:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b515a:	3301      	adds	r3, #1
{
   b515c:	b085      	sub	sp, #20
   b515e:	4604      	mov	r4, r0
   b5160:	460d      	mov	r5, r1
    if (_cs == -1) {
   b5162:	d123      	bne.n	b51ac <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b5164:	7901      	ldrb	r1, [r0, #4]
   b5166:	6800      	ldr	r0, [r0, #0]
   b5168:	f003 fe1e 	bl	b8da8 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b516c:	6820      	ldr	r0, [r4, #0]
   b516e:	6803      	ldr	r3, [r0, #0]
   b5170:	4629      	mov	r1, r5
   b5172:	689b      	ldr	r3, [r3, #8]
   b5174:	4798      	blx	r3
        _wire -> endTransmission();
   b5176:	6820      	ldr	r0, [r4, #0]
   b5178:	f003 fe21 	bl	b8dbe <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   b517c:	7921      	ldrb	r1, [r4, #4]
   b517e:	6820      	ldr	r0, [r4, #0]
   b5180:	2203      	movs	r2, #3
   b5182:	f003 fe0e 	bl	b8da2 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b5186:	6820      	ldr	r0, [r4, #0]
   b5188:	6803      	ldr	r3, [r0, #0]
   b518a:	695b      	ldr	r3, [r3, #20]
   b518c:	4798      	blx	r3
        value <<= 8;
   b518e:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b5190:	6820      	ldr	r0, [r4, #0]
   b5192:	6803      	ldr	r3, [r0, #0]
   b5194:	695b      	ldr	r3, [r3, #20]
   b5196:	4798      	blx	r3
   b5198:	4328      	orrs	r0, r5
        value <<= 8;
   b519a:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b519c:	6820      	ldr	r0, [r4, #0]
   b519e:	6803      	ldr	r3, [r0, #0]
   b51a0:	695b      	ldr	r3, [r3, #20]
   b51a2:	4798      	blx	r3
   b51a4:	4305      	orrs	r5, r0
}
   b51a6:	4628      	mov	r0, r5
   b51a8:	b005      	add	sp, #20
   b51aa:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b51ac:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b51b0:	3301      	adds	r3, #1
   b51b2:	d10c      	bne.n	b51ce <_ZN15Adafruit_BME2806read24Eh+0x7a>
   b51b4:	4b1a      	ldr	r3, [pc, #104]	; (b5220 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   b51b6:	9300      	str	r3, [sp, #0]
   b51b8:	2300      	movs	r3, #0
   b51ba:	f88d 3004 	strb.w	r3, [sp, #4]
   b51be:	4b19      	ldr	r3, [pc, #100]	; (b5224 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   b51c0:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b51c2:	4668      	mov	r0, sp
   b51c4:	2301      	movs	r3, #1
   b51c6:	f8ad 300c 	strh.w	r3, [sp, #12]
   b51ca:	f7ff fdb0 	bl	b4d2e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b51ce:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b51d2:	2100      	movs	r1, #0
   b51d4:	b280      	uxth	r0, r0
   b51d6:	f004 f9fa 	bl	b95ce <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b51da:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b51de:	4620      	mov	r0, r4
   b51e0:	f7ff fdaf 	bl	b4d42 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b51e4:	2100      	movs	r1, #0
   b51e6:	4620      	mov	r0, r4
   b51e8:	f7ff fdab 	bl	b4d42 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   b51ec:	2100      	movs	r1, #0
        value <<= 8;
   b51ee:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b51f0:	4620      	mov	r0, r4
   b51f2:	f7ff fda6 	bl	b4d42 <_ZN15Adafruit_BME2807spixferEh>
   b51f6:	4328      	orrs	r0, r5
        value <<= 8;
   b51f8:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b51fa:	2100      	movs	r1, #0
   b51fc:	4620      	mov	r0, r4
   b51fe:	f7ff fda0 	bl	b4d42 <_ZN15Adafruit_BME2807spixferEh>
   b5202:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   b5204:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5208:	2101      	movs	r1, #1
   b520a:	b280      	uxth	r0, r0
   b520c:	f004 f9df 	bl	b95ce <digitalWrite>
        if (_sck == -1)
   b5210:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b5214:	3301      	adds	r3, #1
   b5216:	d1c6      	bne.n	b51a6 <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   b5218:	f7ff fd82 	bl	b4d20 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   b521c:	e7c3      	b.n	b51a6 <_ZN15Adafruit_BME2806read24Eh+0x52>
   b521e:	bf00      	nop
   b5220:	000bc198 	.word	0x000bc198
   b5224:	0007a120 	.word	0x0007a120

000b5228 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   b5228:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b522a:	21fa      	movs	r1, #250	; 0xfa
{
   b522c:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b522e:	f7ff ff91 	bl	b5154 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   b5232:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b5236:	d01f      	beq.n	b5278 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b5238:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   b523a:	ed9f 7a11 	vldr	s14, [pc, #68]	; b5280 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b523e:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b5240:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b5244:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   b5248:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b524c:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b524e:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   b5252:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   b5256:	131b      	asrs	r3, r3, #12
   b5258:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b525a:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   b525c:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b5260:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   b5262:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b5266:	3380      	adds	r3, #128	; 0x80
   b5268:	121b      	asrs	r3, r3, #8
   b526a:	ee07 3a90 	vmov	s15, r3
   b526e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   b5272:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b5276:	bd10      	pop	{r4, pc}
        return NAN;
   b5278:	ed9f 0a02 	vldr	s0, [pc, #8]	; b5284 <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
   b527c:	e7fb      	b.n	b5276 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
   b527e:	bf00      	nop
   b5280:	42c80000 	.word	0x42c80000
   b5284:	7fc00000 	.word	0x7fc00000

000b5288 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   b5288:	b538      	push	{r3, r4, r5, lr}
   b528a:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   b528c:	f7ff ffcc 	bl	b5228 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   b5290:	21fd      	movs	r1, #253	; 0xfd
   b5292:	4620      	mov	r0, r4
   b5294:	f7ff fe84 	bl	b4fa0 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   b5298:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   b529c:	d038      	beq.n	b5310 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   b529e:	68e1      	ldr	r1, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b52a0:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b52a4:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b52a8:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
   b52ac:	0509      	lsls	r1, r1, #20
   b52ae:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b52b2:	fb05 3312 	mls	r3, r5, r2, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b52b6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   b52ba:	13da      	asrs	r2, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b52bc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b52c0:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b52c4:	436b      	muls	r3, r5
   b52c6:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b52c8:	4369      	muls	r1, r5
   b52ca:	1289      	asrs	r1, r1, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b52cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b52d0:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b52d2:	129b      	asrs	r3, r3, #10
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b52d4:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b52d8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b52dc:	434b      	muls	r3, r1
   b52de:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b52e2:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b52e4:	4353      	muls	r3, r2

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b52e6:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   b52e8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b52ec:	4352      	muls	r2, r2
   b52ee:	11d2      	asrs	r2, r2, #7
   b52f0:	434a      	muls	r2, r1
   b52f2:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   b52f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   b52fa:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b52fe:	bfa8      	it	ge
   b5300:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   b5304:	131b      	asrs	r3, r3, #12
   b5306:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   b530a:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b530e:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   b5310:	ed9f 0a01 	vldr	s0, [pc, #4]	; b5318 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   b5314:	e7fb      	b.n	b530e <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   b5316:	bf00      	nop
   b5318:	7fc00000 	.word	0x7fc00000

000b531c <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   b531c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5320:	4605      	mov	r5, r0
    readTemperature(); // must be done first to get t_fine
   b5322:	f7ff ff81 	bl	b5228 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   b5326:	21f7      	movs	r1, #247	; 0xf7
   b5328:	4628      	mov	r0, r5
   b532a:	f7ff ff13 	bl	b5154 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   b532e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b5332:	f000 80b6 	beq.w	b54a2 <_ZN15Adafruit_BME28012readPressureEv+0x186>
    var1 = ((int64_t)t_fine) - 128000;
   b5336:	68e9      	ldr	r1, [r5, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b5338:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
    var1 = ((int64_t)t_fine) - 128000;
   b533c:	ea4f 7ee1 	mov.w	lr, r1, asr #31
   b5340:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
   b5344:	f14e 3eff 	adc.w	lr, lr, #4294967295
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b5348:	17dc      	asrs	r4, r3, #31
   b534a:	fb03 f20e 	mul.w	r2, r3, lr
   b534e:	fb01 2204 	mla	r2, r1, r4, r2
   b5352:	fba3 3401 	umull	r3, r4, r3, r1
   b5356:	4422      	add	r2, r4
   b5358:	0312      	lsls	r2, r2, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b535a:	fba1 7801 	umull	r7, r8, r1, r1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b535e:	031c      	lsls	r4, r3, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b5360:	fb01 f60e 	mul.w	r6, r1, lr
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b5364:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b5368:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b536c:	eb08 0846 	add.w	r8, r8, r6, lsl #1
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b5370:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   b5374:	fb03 f608 	mul.w	r6, r3, r8
   b5378:	fb07 660c 	mla	r6, r7, ip, r6
   b537c:	fba3 3c07 	umull	r3, ip, r3, r7
   b5380:	4466      	add	r6, ip
   b5382:	0a1b      	lsrs	r3, r3, #8
   b5384:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   b5388:	191b      	adds	r3, r3, r4
   b538a:	eb42 2226 	adc.w	r2, r2, r6, asr #8
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b538e:	8b6e      	ldrh	r6, [r5, #26]
   b5390:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   b5394:	fba3 3406 	umull	r3, r4, r3, r6
   b5398:	fb06 4402 	mla	r4, r6, r2, r4
   b539c:	17e3      	asrs	r3, r4, #31
   b539e:	1062      	asrs	r2, r4, #1
    if (var1 == 0) {
   b53a0:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b53a4:	f04f 0c00 	mov.w	ip, #0
    if (var1 == 0) {
   b53a8:	d07e      	beq.n	b54a8 <_ZN15Adafruit_BME28012readPressureEv+0x18c>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b53aa:	f9b5 4024 	ldrsh.w	r4, [r5, #36]	; 0x24
   b53ae:	fb04 f608 	mul.w	r6, r4, r8
   b53b2:	ea4f 79e4 	mov.w	r9, r4, asr #31
   b53b6:	fb07 6609 	mla	r6, r7, r9, r6
   b53ba:	fba4 4707 	umull	r4, r7, r4, r7
   b53be:	443e      	add	r6, r7
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b53c0:	f9b5 7022 	ldrsh.w	r7, [r5, #34]	; 0x22
   b53c4:	ea4f 78e7 	mov.w	r8, r7, asr #31
   b53c8:	fb07 fe0e 	mul.w	lr, r7, lr
   b53cc:	fb01 ee08 	mla	lr, r1, r8, lr
   b53d0:	fba7 7101 	umull	r7, r1, r7, r1
   b53d4:	4471      	add	r1, lr
   b53d6:	0449      	lsls	r1, r1, #17
   b53d8:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
    adc_P >>= 4;
   b53dc:	1100      	asrs	r0, r0, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b53de:	047f      	lsls	r7, r7, #17
   b53e0:	193f      	adds	r7, r7, r4
    p = 1048576 - adc_P;
   b53e2:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b53e6:	eb46 0601 	adc.w	r6, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b53ea:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b53ee:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
   b53f2:	eb1c 0707 	adds.w	r7, ip, r7
    p = (((p<<31) - var2)*3125) / var1;
   b53f6:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
   b53fa:	07e4      	lsls	r4, r4, #31
   b53fc:	1be4      	subs	r4, r4, r7
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b53fe:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    p = (((p<<31) - var2)*3125) / var1;
   b5402:	f640 4135 	movw	r1, #3125	; 0xc35
   b5406:	eb60 0606 	sbc.w	r6, r0, r6
   b540a:	fba4 0401 	umull	r0, r4, r4, r1
   b540e:	fb01 4106 	mla	r1, r1, r6, r4
   b5412:	f006 f941 	bl	bb698 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b5416:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b541a:	f9b5 6028 	ldrsh.w	r6, [r5, #40]	; 0x28
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b541e:	ea4f 3c61 	mov.w	ip, r1, asr #13
   b5422:	0b43      	lsrs	r3, r0, #13
   b5424:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
   b5428:	fb02 f70c 	mul.w	r7, r2, ip
   b542c:	17d4      	asrs	r4, r2, #31
   b542e:	fb03 7704 	mla	r7, r3, r4, r7
   b5432:	fba2 2403 	umull	r2, r4, r2, r3
   b5436:	443c      	add	r4, r7
   b5438:	fb02 f70c 	mul.w	r7, r2, ip
   b543c:	fb03 7704 	mla	r7, r3, r4, r7
   b5440:	fba2 2303 	umull	r2, r3, r2, r3
   b5444:	441f      	add	r7, r3
   b5446:	0e53      	lsrs	r3, r2, #25
   b5448:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b544c:	181b      	adds	r3, r3, r0
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b544e:	ea4f 72e6 	mov.w	r2, r6, asr #31
   b5452:	fb06 f401 	mul.w	r4, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b5456:	4686      	mov	lr, r0
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b5458:	eb41 6767 	adc.w	r7, r1, r7, asr #25
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b545c:	fb02 4100 	mla	r1, r2, r0, r4
   b5460:	fba6 060e 	umull	r0, r6, r6, lr
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b5464:	f9b5 4026 	ldrsh.w	r4, [r5, #38]	; 0x26
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b5468:	4431      	add	r1, r6
   b546a:	0cc0      	lsrs	r0, r0, #19
   b546c:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b5470:	1818      	adds	r0, r3, r0
   b5472:	ea4f 75e4 	mov.w	r5, r4, asr #31
   b5476:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
   b547a:	0a00      	lsrs	r0, r0, #8
   b547c:	012d      	lsls	r5, r5, #4
   b547e:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   b5482:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
   b5486:	0124      	lsls	r4, r4, #4
   b5488:	1820      	adds	r0, r4, r0
    return (float)p/256;
   b548a:	eb45 2121 	adc.w	r1, r5, r1, asr #8
   b548e:	f006 f8c5 	bl	bb61c <__aeabi_l2f>
   b5492:	ed9f 0a07 	vldr	s0, [pc, #28]	; b54b0 <_ZN15Adafruit_BME28012readPressureEv+0x194>
   b5496:	ee07 0a90 	vmov	s15, r0
   b549a:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   b549e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   b54a2:	ed9f 0a04 	vldr	s0, [pc, #16]	; b54b4 <_ZN15Adafruit_BME28012readPressureEv+0x198>
   b54a6:	e7fa      	b.n	b549e <_ZN15Adafruit_BME28012readPressureEv+0x182>
        return 0; // avoid exception caused by division by zero
   b54a8:	ed9f 0a03 	vldr	s0, [pc, #12]	; b54b8 <_ZN15Adafruit_BME28012readPressureEv+0x19c>
   b54ac:	e7f7      	b.n	b549e <_ZN15Adafruit_BME28012readPressureEv+0x182>
   b54ae:	bf00      	nop
   b54b0:	3b800000 	.word	0x3b800000
   b54b4:	7fc00000 	.word	0x7fc00000
   b54b8:	00000000 	.word	0x00000000

000b54bc <_ZN15Adafruit_BME2804initEv>:
{
   b54bc:	b530      	push	{r4, r5, lr}
   b54be:	4604      	mov	r4, r0
    if (_cs == -1) {
   b54c0:	f990 0010 	ldrsb.w	r0, [r0, #16]
   b54c4:	1c42      	adds	r2, r0, #1
{
   b54c6:	b085      	sub	sp, #20
    if (_cs == -1) {
   b54c8:	d119      	bne.n	b54fe <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   b54ca:	6820      	ldr	r0, [r4, #0]
   b54cc:	f003 fc3a 	bl	b8d44 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b54d0:	21d0      	movs	r1, #208	; 0xd0
   b54d2:	4620      	mov	r0, r4
   b54d4:	f7ff fd08 	bl	b4ee8 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   b54d8:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b54da:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   b54dc:	d145      	bne.n	b556a <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   b54de:	4620      	mov	r0, r4
   b54e0:	22b6      	movs	r2, #182	; 0xb6
   b54e2:	21e0      	movs	r1, #224	; 0xe0
   b54e4:	f7ff fc64 	bl	b4db0 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   b54e8:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b54ec:	f003 f9c6 	bl	b887c <delay>
    while (isReadingCalibration())
   b54f0:	4620      	mov	r0, r4
   b54f2:	f7ff fd4d 	bl	b4f90 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   b54f6:	4605      	mov	r5, r0
   b54f8:	b328      	cbz	r0, b5546 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   b54fa:	2064      	movs	r0, #100	; 0x64
   b54fc:	e7f6      	b.n	b54ec <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   b54fe:	2101      	movs	r1, #1
   b5500:	b280      	uxth	r0, r0
   b5502:	f004 f864 	bl	b95ce <digitalWrite>
        pinMode(_cs, OUTPUT);
   b5506:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b550a:	2101      	movs	r1, #1
   b550c:	b280      	uxth	r0, r0
   b550e:	f004 f84d 	bl	b95ac <pinMode>
        if (_sck == -1) {
   b5512:	f994 0013 	ldrsb.w	r0, [r4, #19]
   b5516:	1c43      	adds	r3, r0, #1
   b5518:	d104      	bne.n	b5524 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   b551a:	f7ff fbe5 	bl	b4ce8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b551e:	f002 fded 	bl	b80fc <_ZN8SPIClass5beginEv>
    }
   b5522:	e7d5      	b.n	b54d0 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   b5524:	2101      	movs	r1, #1
   b5526:	b280      	uxth	r0, r0
   b5528:	f004 f840 	bl	b95ac <pinMode>
            pinMode(_mosi, OUTPUT);
   b552c:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b5530:	2101      	movs	r1, #1
   b5532:	b280      	uxth	r0, r0
   b5534:	f004 f83a 	bl	b95ac <pinMode>
            pinMode(_miso, INPUT);
   b5538:	f994 0012 	ldrsb.w	r0, [r4, #18]
   b553c:	2100      	movs	r1, #0
   b553e:	b280      	uxth	r0, r0
   b5540:	f004 f834 	bl	b95ac <pinMode>
   b5544:	e7c4      	b.n	b54d0 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   b5546:	4620      	mov	r0, r4
   b5548:	f7ff fd92 	bl	b5070 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   b554c:	2305      	movs	r3, #5
   b554e:	9300      	str	r3, [sp, #0]
   b5550:	461a      	mov	r2, r3
   b5552:	2103      	movs	r1, #3
   b5554:	4620      	mov	r0, r4
   b5556:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b555a:	f7ff fc7b 	bl	b4e54 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   b555e:	2064      	movs	r0, #100	; 0x64
   b5560:	f003 f98c 	bl	b887c <delay>
    return true;
   b5564:	2001      	movs	r0, #1
}
   b5566:	b005      	add	sp, #20
   b5568:	bd30      	pop	{r4, r5, pc}
        return false;
   b556a:	2000      	movs	r0, #0
   b556c:	e7fb      	b.n	b5566 <_ZN15Adafruit_BME2804initEv+0xaa>

000b556e <_ZN15Adafruit_BME2805beginEh>:
{
   b556e:	b510      	push	{r4, lr}
	_i2caddr = addr;
   b5570:	7101      	strb	r1, [r0, #4]
{
   b5572:	4604      	mov	r4, r0
	_wire = &Wire;
   b5574:	f004 f8e8 	bl	b9748 <_Z19__fetch_global_Wirev>
   b5578:	6020      	str	r0, [r4, #0]
	return init();
   b557a:	4620      	mov	r0, r4
}
   b557c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return init();
   b5580:	f7ff bf9c 	b.w	b54bc <_ZN15Adafruit_BME2804initEv>

000b5584 <_ZN17Adafruit_NeoPixel12updateLengthEt>:
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b5584:	b538      	push	{r3, r4, r5, lr}
   b5586:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b5588:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b558a:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b558c:	b108      	cbz	r0, b5592 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b558e:	f002 fd1f 	bl	b7fd0 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b5592:	79a3      	ldrb	r3, [r4, #6]
   b5594:	2b06      	cmp	r3, #6
   b5596:	bf0c      	ite	eq
   b5598:	2004      	moveq	r0, #4
   b559a:	2003      	movne	r0, #3
   b559c:	fb10 f005 	smulbb	r0, r0, r5
   b55a0:	b280      	uxth	r0, r0
   b55a2:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b55a4:	f002 fd0c 	bl	b7fc0 <malloc>
   b55a8:	60e0      	str	r0, [r4, #12]
   b55aa:	b128      	cbz	r0, b55b8 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b55ac:	88a2      	ldrh	r2, [r4, #4]
   b55ae:	2100      	movs	r1, #0
   b55b0:	f006 facc 	bl	bbb4c <memset>
    numLEDs = n;
   b55b4:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b55b6:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b55b8:	80a0      	strh	r0, [r4, #4]
   b55ba:	8060      	strh	r0, [r4, #2]
}
   b55bc:	e7fb      	b.n	b55b6 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b55be <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b55be:	b510      	push	{r4, lr}
   b55c0:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   b55c2:	2101      	movs	r1, #1
   b55c4:	79c0      	ldrb	r0, [r0, #7]
   b55c6:	f003 fff1 	bl	b95ac <pinMode>
  digitalWrite(pin, LOW);
   b55ca:	79e0      	ldrb	r0, [r4, #7]
   b55cc:	2100      	movs	r1, #0
   b55ce:	f003 fffe 	bl	b95ce <digitalWrite>
  begun = true;
   b55d2:	2301      	movs	r3, #1
   b55d4:	7023      	strb	r3, [r4, #0]
}
   b55d6:	bd10      	pop	{r4, pc}

000b55d8 <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b55d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b55da:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b55dc:	4605      	mov	r5, r0
   b55de:	460c      	mov	r4, r1
    if (begun) {
   b55e0:	b11b      	cbz	r3, b55ea <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b55e2:	79c0      	ldrb	r0, [r0, #7]
   b55e4:	2100      	movs	r1, #0
   b55e6:	f003 ffe1 	bl	b95ac <pinMode>
    }
    pin = p;
    if (begun) {
   b55ea:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b55ec:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b55ee:	b15b      	cbz	r3, b5608 <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b55f0:	b2a0      	uxth	r0, r4
   b55f2:	2101      	movs	r1, #1
   b55f4:	9001      	str	r0, [sp, #4]
   b55f6:	f003 ffd9 	bl	b95ac <pinMode>
        digitalWrite(p, LOW);
   b55fa:	9801      	ldr	r0, [sp, #4]
   b55fc:	2100      	movs	r1, #0
    }
}
   b55fe:	b003      	add	sp, #12
   b5600:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b5604:	f003 bfe3 	b.w	b95ce <digitalWrite>
}
   b5608:	b003      	add	sp, #12
   b560a:	bd30      	pop	{r4, r5, pc}

000b560c <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b560c:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b560e:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b5610:	4604      	mov	r4, r0
   b5612:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b5614:	7183      	strb	r3, [r0, #6]
   b5616:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b561a:	7005      	strb	r5, [r0, #0]
   b561c:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b561e:	f7ff ffb1 	bl	b5584 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b5622:	4620      	mov	r0, r4
   b5624:	4631      	mov	r1, r6
   b5626:	f7ff ffd7 	bl	b55d8 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b562a:	4620      	mov	r0, r4
   b562c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5630 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b5630:	68c3      	ldr	r3, [r0, #12]
   b5632:	2b00      	cmp	r3, #0
   b5634:	f000 81a4 	beq.w	b5980 <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b5638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b563c:	7983      	ldrb	r3, [r0, #6]
   b563e:	3b02      	subs	r3, #2
   b5640:	b2db      	uxtb	r3, r3
   b5642:	2b04      	cmp	r3, #4
   b5644:	bf9c      	itt	ls
   b5646:	4abf      	ldrls	r2, [pc, #764]	; (b5944 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b5648:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b564c:	b085      	sub	sp, #20
   b564e:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b5650:	bf88      	it	hi
   b5652:	2432      	movhi	r4, #50	; 0x32
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b5654:	f002 fa38 	bl	b7ac8 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b5658:	692b      	ldr	r3, [r5, #16]
   b565a:	1ac0      	subs	r0, r0, r3
   b565c:	42a0      	cmp	r0, r4
   b565e:	d3f9      	bcc.n	b5654 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b5660:	4cb9      	ldr	r4, [pc, #740]	; (b5948 <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b5662:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b5664:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5668:	b91b      	cbnz	r3, b5672 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b566a:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b566e:	2b00      	cmp	r3, #0
   b5670:	db7e      	blt.n	b5770 <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b5672:	4cb6      	ldr	r4, [pc, #728]	; (b594c <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b5674:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5678:	b923      	cbnz	r3, b5684 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b567a:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b567e:	2b00      	cmp	r3, #0
   b5680:	f2c0 816e 	blt.w	b5960 <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b5684:	4cb2      	ldr	r4, [pc, #712]	; (b5950 <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b5686:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b568a:	2b00      	cmp	r3, #0
   b568c:	f000 8144 	beq.w	b5918 <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5690:	79eb      	ldrb	r3, [r5, #7]
   b5692:	4ab0      	ldr	r2, [pc, #704]	; (b5954 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b5694:	4cb0      	ldr	r4, [pc, #704]	; (b5958 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5696:	6812      	ldr	r2, [r2, #0]
   b5698:	0119      	lsls	r1, r3, #4
   b569a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b569e:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b56a0:	49ae      	ldr	r1, [pc, #696]	; (b595c <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b56a2:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b56a4:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b56a8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b56ac:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b56b0:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b56b2:	f003 031f 	and.w	r3, r3, #31
   b56b6:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b56ba:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b56bc:	433a      	orrs	r2, r7
   b56be:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b56c0:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b56c2:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b56c6:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b56ca:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b56cc:	2900      	cmp	r1, #0
   b56ce:	d044      	beq.n	b575a <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b56d0:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b56d4:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b56d6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b56da:	f818 cb01 	ldrb.w	ip, [r8], #1
   b56de:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b56e0:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b56e2:	6863      	ldr	r3, [r4, #4]
   b56e4:	1a9b      	subs	r3, r3, r2
   b56e6:	2b46      	cmp	r3, #70	; 0x46
   b56e8:	d9fb      	bls.n	b56e2 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b56ea:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b56ec:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b56f0:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b56f4:	ea43 0307 	orr.w	r3, r3, r7
   b56f8:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b56fc:	d02f      	beq.n	b575e <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b56fe:	6863      	ldr	r3, [r4, #4]
   b5700:	1a9b      	subs	r3, r3, r2
   b5702:	2b28      	cmp	r3, #40	; 0x28
   b5704:	d9fb      	bls.n	b56fe <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b5706:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b570a:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b570c:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b5710:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b5714:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b5718:	d1e3      	bne.n	b56e2 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b571a:	88ab      	ldrh	r3, [r5, #4]
   b571c:	f10e 0e01 	add.w	lr, lr, #1
   b5720:	fa1f fe8e 	uxth.w	lr, lr
   b5724:	4573      	cmp	r3, lr
   b5726:	d8d8      	bhi.n	b56da <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b5728:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b572c:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b5730:	6863      	ldr	r3, [r4, #4]
   b5732:	1a9b      	subs	r3, r3, r2
   b5734:	2b46      	cmp	r3, #70	; 0x46
   b5736:	d9fb      	bls.n	b5730 <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b5738:	6863      	ldr	r3, [r4, #4]
   b573a:	eba3 0909 	sub.w	r9, r3, r9
   b573e:	4589      	cmp	r9, r1
   b5740:	f0c0 80e4 	bcc.w	b590c <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b5744:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b5748:	f002 f9b6 	bl	b7ab8 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b574c:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b574e:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b5752:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b5756:	2900      	cmp	r1, #0
   b5758:	d1ba      	bne.n	b56d0 <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b575a:	460a      	mov	r2, r1
   b575c:	e7e8      	b.n	b5730 <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b575e:	6863      	ldr	r3, [r4, #4]
   b5760:	1a9b      	subs	r3, r3, r2
   b5762:	2b11      	cmp	r3, #17
   b5764:	d8cf      	bhi.n	b5706 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b5766:	6863      	ldr	r3, [r4, #4]
   b5768:	1a9b      	subs	r3, r3, r2
   b576a:	2b11      	cmp	r3, #17
   b576c:	d9f7      	bls.n	b575e <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b576e:	e7ca      	b.n	b5706 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5770:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5774:	2b00      	cmp	r3, #0
   b5776:	f6bf af7c 	bge.w	b5672 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b577a:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b577e:	2b00      	cmp	r3, #0
   b5780:	f6bf af77 	bge.w	b5672 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b5784:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5788:	2b00      	cmp	r3, #0
   b578a:	f6bf af72 	bge.w	b5672 <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b578e:	0136      	lsls	r6, r6, #4
   b5790:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b5792:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b5794:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b5796:	f002 fc13 	bl	b7fc0 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b579a:	2800      	cmp	r0, #0
   b579c:	f43f af78 	beq.w	b5690 <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b57a0:	88ab      	ldrh	r3, [r5, #4]
   b57a2:	2b00      	cmp	r3, #0
   b57a4:	f000 80ed 	beq.w	b5982 <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b57a8:	68ea      	ldr	r2, [r5, #12]
   b57aa:	3b01      	subs	r3, #1
   b57ac:	fa12 f783 	uxtah	r7, r2, r3
   b57b0:	f102 3eff 	add.w	lr, r2, #4294967295
    uint16_t pos = 0; // bit position
   b57b4:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b57b6:	f248 0206 	movw	r2, #32774	; 0x8006
   b57ba:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b57be:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b57c2:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b57c6:	bf0c      	ite	eq
   b57c8:	4693      	moveq	fp, r2
   b57ca:	468b      	movne	fp, r1
   b57cc:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b57d0:	bf0c      	ite	eq
   b57d2:	4616      	moveq	r6, r2
   b57d4:	460e      	movne	r6, r1
   b57d6:	f01c 0f20 	tst.w	ip, #32
   b57da:	bf0c      	ite	eq
   b57dc:	4690      	moveq	r8, r2
   b57de:	4688      	movne	r8, r1
        pos++;
   b57e0:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b57e4:	f8cd 8008 	str.w	r8, [sp, #8]
   b57e8:	9601      	str	r6, [sp, #4]
        pos++;
   b57ea:	f103 0802 	add.w	r8, r3, #2
   b57ee:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b57f2:	9e01      	ldr	r6, [sp, #4]
   b57f4:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b57f8:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b57fc:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b5800:	9e02      	ldr	r6, [sp, #8]
   b5802:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b5806:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b580a:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b580e:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5812:	bf0c      	ite	eq
   b5814:	4693      	moveq	fp, r2
   b5816:	468b      	movne	fp, r1
   b5818:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b581c:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5820:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b5824:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5828:	bf0c      	ite	eq
   b582a:	4693      	moveq	fp, r2
   b582c:	468b      	movne	fp, r1
   b582e:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b5832:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5836:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b583a:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b583e:	bf0c      	ite	eq
   b5840:	4693      	moveq	fp, r2
   b5842:	468b      	movne	fp, r1
   b5844:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b5848:	f103 0a08 	add.w	sl, r3, #8
   b584c:	f103 0806 	add.w	r8, r3, #6
   b5850:	3307      	adds	r3, #7
   b5852:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5854:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b5858:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b585c:	bf0c      	ite	eq
   b585e:	4693      	moveq	fp, r2
   b5860:	468b      	movne	fp, r1
        pos++;
   b5862:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5866:	f01c 0f01 	tst.w	ip, #1
   b586a:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b586e:	bf15      	itete	ne
   b5870:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b5874:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b5878:	fa1f f38a 	uxthne.w	r3, sl
   b587c:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b5880:	4577      	cmp	r7, lr
   b5882:	d19c      	bne.n	b57be <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5884:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5886:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5888:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b588a:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b588c:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b588e:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5890:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b5894:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b5896:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5898:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b589a:	4b2e      	ldr	r3, [pc, #184]	; (b5954 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b589c:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b589e:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b58a0:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b58a2:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b58a4:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b58a8:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b58ac:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b58b0:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b58b4:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b58b8:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b58bc:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b58c0:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b58c4:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b58c8:	79eb      	ldrb	r3, [r5, #7]
   b58ca:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b58ce:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b58d0:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b58d2:	5cfe      	ldrb	r6, [r7, r3]
   b58d4:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b58d8:	f003 031f 	and.w	r3, r3, #31
   b58dc:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b58e0:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b58e4:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b58e8:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b58ec:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b58ee:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b58f2:	2b00      	cmp	r3, #0
   b58f4:	d0fb      	beq.n	b58ee <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b58f6:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b58f8:	f04f 32ff 	mov.w	r2, #4294967295
    pwm->EVENTS_SEQEND[0] = 0;
   b58fc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b5900:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b5904:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b5908:	f002 fb62 	bl	b7fd0 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b590c:	f002 f8dc 	bl	b7ac8 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b5910:	6128      	str	r0, [r5, #16]
}
   b5912:	b005      	add	sp, #20
   b5914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5918:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b591c:	2b00      	cmp	r3, #0
   b591e:	f6bf aeb7 	bge.w	b5690 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5922:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5926:	2b00      	cmp	r3, #0
   b5928:	f6bf aeb2 	bge.w	b5690 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b592c:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5930:	2b00      	cmp	r3, #0
   b5932:	f6bf aead 	bge.w	b5690 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b5936:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b593a:	2b00      	cmp	r3, #0
   b593c:	f6bf aea8 	bge.w	b5690 <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b5940:	e725      	b.n	b578e <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b5942:	bf00      	nop
   b5944:	000bc1cc 	.word	0x000bc1cc
   b5948:	4001c000 	.word	0x4001c000
   b594c:	40021000 	.word	0x40021000
   b5950:	40022000 	.word	0x40022000
   b5954:	2003e6a0 	.word	0x2003e6a0
   b5958:	e0001000 	.word	0xe0001000
   b595c:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5960:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5964:	2b00      	cmp	r3, #0
   b5966:	f6bf ae8d 	bge.w	b5684 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b596a:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b596e:	2b00      	cmp	r3, #0
   b5970:	f6bf ae88 	bge.w	b5684 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b5974:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5978:	2b00      	cmp	r3, #0
   b597a:	f6bf ae83 	bge.w	b5684 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b597e:	e706      	b.n	b578e <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b5980:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b5982:	2304      	movs	r3, #4
   b5984:	2102      	movs	r1, #2
   b5986:	e783      	b.n	b5890 <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b5988 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   b5988:	b570      	push	{r4, r5, r6, lr}
  if(n < numLEDs) {
   b598a:	8844      	ldrh	r4, [r0, #2]
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   b598c:	f89d 5010 	ldrb.w	r5, [sp, #16]
  if(n < numLEDs) {
   b5990:	428c      	cmp	r4, r1
   b5992:	d922      	bls.n	b59da <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x52>
    if(brightness) { // See notes in setBrightness()
   b5994:	7a04      	ldrb	r4, [r0, #8]
   b5996:	b144      	cbz	r4, b59aa <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x22>
      r = (r * brightness) >> 8;
   b5998:	fb12 f204 	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
   b599c:	fb14 f303 	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
   b59a0:	fb14 f405 	smulbb	r4, r4, r5
      r = (r * brightness) >> 8;
   b59a4:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
   b59a6:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
   b59a8:	0a25      	lsrs	r5, r4, #8
    }
    uint8_t *p = &pixels[n * 3];
   b59aa:	68c6      	ldr	r6, [r0, #12]
   b59ac:	7980      	ldrb	r0, [r0, #6]
   b59ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   b59b2:	3802      	subs	r0, #2
   b59b4:	1874      	adds	r4, r6, r1
    switch(type) {
   b59b6:	2806      	cmp	r0, #6
   b59b8:	d810      	bhi.n	b59dc <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x54>
   b59ba:	e8df f000 	tbb	[pc, r0]
   b59be:	0f04      	.short	0x0f04
   b59c0:	040f0408 	.word	0x040f0408
   b59c4:	04          	.byte	0x04
   b59c5:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b59c6:	5473      	strb	r3, [r6, r1]
          *p++ = r;
   b59c8:	7062      	strb	r2, [r4, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b59ca:	70a5      	strb	r5, [r4, #2]
        } break;
    }
  }
}
   b59cc:	e005      	b.n	b59da <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x52>
          *p++ = r;
   b59ce:	2afe      	cmp	r2, #254	; 0xfe
   b59d0:	bf28      	it	cs
   b59d2:	22fe      	movcs	r2, #254	; 0xfe
   b59d4:	5472      	strb	r2, [r6, r1]
          *p++ = b;
   b59d6:	7065      	strb	r5, [r4, #1]
          *p = g;
   b59d8:	70a3      	strb	r3, [r4, #2]
}
   b59da:	bd70      	pop	{r4, r5, r6, pc}
          *p++ = r;
   b59dc:	5472      	strb	r2, [r6, r1]
          *p++ = g;
   b59de:	7063      	strb	r3, [r4, #1]
   b59e0:	e7f3      	b.n	b59ca <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x42>
	...

000b59e4 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b59e4:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b59e6:	f002 f81f 	bl	b7a28 <HAL_Pin_Map>
   b59ea:	4b01      	ldr	r3, [pc, #4]	; (b59f0 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b59ec:	6018      	str	r0, [r3, #0]
}
   b59ee:	bd08      	pop	{r3, pc}
   b59f0:	2003e6a0 	.word	0x2003e6a0

000b59f4 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b59f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b59f6:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b59f8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b59fc:	2d02      	cmp	r5, #2
   b59fe:	d069      	beq.n	b5ad4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b5a00:	2d03      	cmp	r5, #3
   b5a02:	f000 8099 	beq.w	b5b38 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b5a06:	2d01      	cmp	r5, #1
   b5a08:	d16c      	bne.n	b5ae4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b5a0a:	8905      	ldrh	r5, [r0, #8]
   b5a0c:	43d2      	mvns	r2, r2
   b5a0e:	442a      	add	r2, r5
   b5a10:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b5a12:	2a00      	cmp	r2, #0
   b5a14:	db5d      	blt.n	b5ad2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5a16:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b5a1a:	4295      	cmp	r5, r2
   b5a1c:	dd59      	ble.n	b5ad2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b5a1e:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b5a20:	bfbe      	ittt	lt
   b5a22:	185b      	addlt	r3, r3, r1
   b5a24:	b21b      	sxthlt	r3, r3
    __y = 0;
   b5a26:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b5a28:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b5a2c:	18cd      	adds	r5, r1, r3
   b5a2e:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b5a30:	bfc4      	itt	gt
   b5a32:	1a43      	subgt	r3, r0, r1
   b5a34:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b5a36:	2b00      	cmp	r3, #0
   b5a38:	dd4b      	ble.n	b5ad2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b5a3a:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b5a3e:	f8df c120 	ldr.w	ip, [pc, #288]	; b5b60 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b5a42:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b5a46:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b5a4a:	b2db      	uxtb	r3, r3
  pBuf += x;
   b5a4c:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b5a50:	d01a      	beq.n	b5a88 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b5a52:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b5a56:	4e40      	ldr	r6, [pc, #256]	; (b5b58 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b5a58:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b5a5a:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b5a5c:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b5a5e:	bf3f      	itttt	cc
   b5a60:	eba5 0e03 	subcc.w	lr, r5, r3
   b5a64:	26ff      	movcc	r6, #255	; 0xff
   b5a66:	fa46 f60e 	asrcc.w	r6, r6, lr
   b5a6a:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b5a6c:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b5a70:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5a72:	bf0c      	ite	eq
   b5a74:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b5a76:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b5a78:	42ab      	cmp	r3, r5
   b5a7a:	f80c 6002 	strb.w	r6, [ip, r2]
   b5a7e:	d328      	bcc.n	b5ad2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b5a80:	3908      	subs	r1, #8
   b5a82:	440b      	add	r3, r1
   b5a84:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b5a86:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b5a88:	2b07      	cmp	r3, #7
   b5a8a:	d919      	bls.n	b5ac0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b5a8c:	2c01      	cmp	r4, #1
   b5a8e:	f04f 35ff 	mov.w	r5, #4294967295
   b5a92:	bf18      	it	ne
   b5a94:	2500      	movne	r5, #0
   b5a96:	b2ed      	uxtb	r5, r5
   b5a98:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b5a9c:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b5a9e:	3a08      	subs	r2, #8
   b5aa0:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b5aa2:	2a07      	cmp	r2, #7
      *pBuf = val;
   b5aa4:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b5aa8:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b5aac:	d8f7      	bhi.n	b5a9e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b5aae:	f1a3 0208 	sub.w	r2, r3, #8
   b5ab2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b5ab6:	3201      	adds	r2, #1
   b5ab8:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b5abc:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b5ac0:	b13b      	cbz	r3, b5ad2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b5ac2:	4a26      	ldr	r2, [pc, #152]	; (b5b5c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b5ac4:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b5ac6:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b5ac8:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5aca:	bf0c      	ite	eq
   b5acc:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b5ace:	4393      	bicne	r3, r2
   b5ad0:	7003      	strb	r3, [r0, #0]
}
   b5ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b5ad4:	8945      	ldrh	r5, [r0, #10]
   b5ad6:	43d2      	mvns	r2, r2
   b5ad8:	442a      	add	r2, r5
      x -= (w-1);
   b5ada:	18cd      	adds	r5, r1, r3
   b5adc:	8901      	ldrh	r1, [r0, #8]
   b5ade:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b5ae0:	b212      	sxth	r2, r2
      x -= (w-1);
   b5ae2:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b5ae4:	2a00      	cmp	r2, #0
   b5ae6:	dbf4      	blt.n	b5ad2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5ae8:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b5aec:	4295      	cmp	r5, r2
   b5aee:	ddf0      	ble.n	b5ad2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b5af0:	2900      	cmp	r1, #0
    w += x;
   b5af2:	bfbe      	ittt	lt
   b5af4:	185b      	addlt	r3, r3, r1
   b5af6:	b21b      	sxthlt	r3, r3
    x = 0;
   b5af8:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b5afa:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b5afe:	18ce      	adds	r6, r1, r3
   b5b00:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b5b02:	bfc4      	itt	gt
   b5b04:	1a6b      	subgt	r3, r5, r1
   b5b06:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b5b08:	2b00      	cmp	r3, #0
   b5b0a:	dde2      	ble.n	b5ad2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b5b0c:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b5b0e:	2580      	movs	r5, #128	; 0x80
   b5b10:	fb10 1105 	smlabb	r1, r0, r5, r1
   b5b14:	4812      	ldr	r0, [pc, #72]	; (b5b60 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b5b16:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b5b18:	f002 0007 	and.w	r0, r2, #7
   b5b1c:	2201      	movs	r2, #1
   b5b1e:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b5b20:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b5b22:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b5b24:	440b      	add	r3, r1
   b5b26:	d10c      	bne.n	b5b42 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b5b28:	428b      	cmp	r3, r1
   b5b2a:	d0d2      	beq.n	b5ad2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5b2c:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5b30:	4310      	orrs	r0, r2
   b5b32:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5b36:	e7f7      	b.n	b5b28 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b5b38:	18cd      	adds	r5, r1, r3
   b5b3a:	8941      	ldrh	r1, [r0, #10]
   b5b3c:	1b49      	subs	r1, r1, r5
   b5b3e:	b209      	sxth	r1, r1
      break;
   b5b40:	e767      	b.n	b5a12 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b5b42:	43d2      	mvns	r2, r2
   b5b44:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b5b46:	428b      	cmp	r3, r1
   b5b48:	d0c3      	beq.n	b5ad2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5b4a:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5b4e:	4010      	ands	r0, r2
   b5b50:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5b54:	e7f7      	b.n	b5b46 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b5b56:	bf00      	nop
   b5b58:	2003daa6 	.word	0x2003daa6
   b5b5c:	2003da9e 	.word	0x2003da9e
   b5b60:	2003daae 	.word	0x2003daae

000b5b64 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5b64:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b5b66:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5b68:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b5b6c:	2d02      	cmp	r5, #2
   b5b6e:	d034      	beq.n	b5bda <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b5b70:	2d03      	cmp	r5, #3
   b5b72:	f000 809b 	beq.w	b5cac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b5b76:	2d01      	cmp	r5, #1
   b5b78:	d137      	bne.n	b5bea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b5b7a:	18d5      	adds	r5, r2, r3
   b5b7c:	8902      	ldrh	r2, [r0, #8]
   b5b7e:	1b52      	subs	r2, r2, r5
   b5b80:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b5b82:	2900      	cmp	r1, #0
   b5b84:	f2c0 8091 	blt.w	b5caa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5b88:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b5b8c:	428d      	cmp	r5, r1
   b5b8e:	f340 808c 	ble.w	b5caa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b5b92:	2a00      	cmp	r2, #0
    w += x;
   b5b94:	bfbe      	ittt	lt
   b5b96:	189b      	addlt	r3, r3, r2
   b5b98:	b21b      	sxthlt	r3, r3
    x = 0;
   b5b9a:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b5b9c:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b5ba0:	18d6      	adds	r6, r2, r3
   b5ba2:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b5ba4:	bfc4      	itt	gt
   b5ba6:	1aab      	subgt	r3, r5, r2
   b5ba8:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b5baa:	2b00      	cmp	r3, #0
   b5bac:	dd7d      	ble.n	b5caa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b5bae:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b5bb0:	2580      	movs	r5, #128	; 0x80
   b5bb2:	fb10 2205 	smlabb	r2, r0, r5, r2
   b5bb6:	4845      	ldr	r0, [pc, #276]	; (b5ccc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b5bb8:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b5bba:	f001 0007 	and.w	r0, r1, #7
   b5bbe:	2101      	movs	r1, #1
   b5bc0:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b5bc2:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b5bc4:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b5bc6:	4413      	add	r3, r2
   b5bc8:	d175      	bne.n	b5cb6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b5bca:	429a      	cmp	r2, r3
   b5bcc:	d06d      	beq.n	b5caa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5bce:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5bd2:	4308      	orrs	r0, r1
   b5bd4:	f802 0c01 	strb.w	r0, [r2, #-1]
   b5bd8:	e7f7      	b.n	b5bca <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b5bda:	8905      	ldrh	r5, [r0, #8]
   b5bdc:	43c9      	mvns	r1, r1
   b5bde:	4429      	add	r1, r5
      y -= (h-1);
   b5be0:	18d5      	adds	r5, r2, r3
   b5be2:	8942      	ldrh	r2, [r0, #10]
   b5be4:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b5be6:	b209      	sxth	r1, r1
      y -= (h-1);
   b5be8:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b5bea:	2900      	cmp	r1, #0
   b5bec:	db5d      	blt.n	b5caa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5bee:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b5bf2:	428d      	cmp	r5, r1
   b5bf4:	dd59      	ble.n	b5caa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b5bf6:	2a00      	cmp	r2, #0
    __h += __y;
   b5bf8:	bfbe      	ittt	lt
   b5bfa:	189b      	addlt	r3, r3, r2
   b5bfc:	b21b      	sxthlt	r3, r3
    __y = 0;
   b5bfe:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b5c00:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b5c04:	18d5      	adds	r5, r2, r3
   b5c06:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b5c08:	bfc4      	itt	gt
   b5c0a:	1a83      	subgt	r3, r0, r2
   b5c0c:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b5c0e:	2b00      	cmp	r3, #0
   b5c10:	dd4b      	ble.n	b5caa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b5c12:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b5c16:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b5ccc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b5c1a:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b5c1e:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b5c22:	b2db      	uxtb	r3, r3
  pBuf += x;
   b5c24:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b5c28:	d01a      	beq.n	b5c60 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b5c2a:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b5c2e:	4e28      	ldr	r6, [pc, #160]	; (b5cd0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b5c30:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b5c32:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b5c34:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b5c36:	bf3f      	itttt	cc
   b5c38:	eba5 0e03 	subcc.w	lr, r5, r3
   b5c3c:	26ff      	movcc	r6, #255	; 0xff
   b5c3e:	fa46 f60e 	asrcc.w	r6, r6, lr
   b5c42:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b5c44:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b5c48:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5c4a:	bf0c      	ite	eq
   b5c4c:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b5c4e:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b5c50:	42ab      	cmp	r3, r5
   b5c52:	f80c 6001 	strb.w	r6, [ip, r1]
   b5c56:	d328      	bcc.n	b5caa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b5c58:	3a08      	subs	r2, #8
   b5c5a:	4413      	add	r3, r2
   b5c5c:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b5c5e:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b5c60:	2b07      	cmp	r3, #7
   b5c62:	d919      	bls.n	b5c98 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b5c64:	2c01      	cmp	r4, #1
   b5c66:	f04f 35ff 	mov.w	r5, #4294967295
   b5c6a:	bf18      	it	ne
   b5c6c:	2500      	movne	r5, #0
   b5c6e:	b2ed      	uxtb	r5, r5
   b5c70:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b5c74:	461a      	mov	r2, r3
      h -= 8;
   b5c76:	3a08      	subs	r2, #8
   b5c78:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b5c7a:	2a07      	cmp	r2, #7
      *pBuf = val;
   b5c7c:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b5c80:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b5c84:	d8f7      	bhi.n	b5c76 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b5c86:	f1a3 0208 	sub.w	r2, r3, #8
   b5c8a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b5c8e:	3201      	adds	r2, #1
   b5c90:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b5c94:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b5c98:	b13b      	cbz	r3, b5caa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b5c9a:	4a0e      	ldr	r2, [pc, #56]	; (b5cd4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b5c9c:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b5c9e:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b5ca0:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5ca2:	bf0c      	ite	eq
   b5ca4:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b5ca6:	4393      	bicne	r3, r2
   b5ca8:	7003      	strb	r3, [r0, #0]
}
   b5caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b5cac:	8945      	ldrh	r5, [r0, #10]
   b5cae:	43c9      	mvns	r1, r1
   b5cb0:	4429      	add	r1, r5
   b5cb2:	b209      	sxth	r1, r1
      break;
   b5cb4:	e765      	b.n	b5b82 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b5cb6:	43c9      	mvns	r1, r1
   b5cb8:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b5cba:	429a      	cmp	r2, r3
   b5cbc:	d0f5      	beq.n	b5caa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5cbe:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5cc2:	4008      	ands	r0, r1
   b5cc4:	f802 0c01 	strb.w	r0, [r2, #-1]
   b5cc8:	e7f7      	b.n	b5cba <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b5cca:	bf00      	nop
   b5ccc:	2003daae 	.word	0x2003daae
   b5cd0:	2003daa6 	.word	0x2003daa6
   b5cd4:	2003da9e 	.word	0x2003da9e

000b5cd8 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b5cd8:	4770      	bx	lr
	...

000b5cdc <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b5cde:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5ce0:	4606      	mov	r6, r0
   b5ce2:	4614      	mov	r4, r2
   b5ce4:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b5ce6:	db2d      	blt.n	b5d44 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5ce8:	f000 fbb3 	bl	b6452 <_ZN12Adafruit_GFX5widthEv>
   b5cec:	42a8      	cmp	r0, r5
   b5cee:	dd29      	ble.n	b5d44 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5cf0:	2c00      	cmp	r4, #0
   b5cf2:	db27      	blt.n	b5d44 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5cf4:	4630      	mov	r0, r6
   b5cf6:	f000 fbaf 	bl	b6458 <_ZN12Adafruit_GFX6heightEv>
   b5cfa:	42a0      	cmp	r0, r4
   b5cfc:	dd22      	ble.n	b5d44 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b5cfe:	4630      	mov	r0, r6
   b5d00:	f000 fba5 	bl	b644e <_ZN12Adafruit_GFX11getRotationEv>
   b5d04:	2802      	cmp	r0, #2
   b5d06:	d01e      	beq.n	b5d46 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b5d08:	2803      	cmp	r0, #3
   b5d0a:	d025      	beq.n	b5d58 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b5d0c:	2801      	cmp	r0, #1
   b5d0e:	d104      	bne.n	b5d1a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b5d10:	8933      	ldrh	r3, [r6, #8]
   b5d12:	43e2      	mvns	r2, r4
   b5d14:	441a      	add	r2, r3
    break;
   b5d16:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b5d18:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b5d1a:	2c00      	cmp	r4, #0
   b5d1c:	4622      	mov	r2, r4
   b5d1e:	bfb8      	it	lt
   b5d20:	1de2      	addlt	r2, r4, #7
   b5d22:	10d2      	asrs	r2, r2, #3
   b5d24:	2180      	movs	r1, #128	; 0x80
   b5d26:	fb12 5501 	smlabb	r5, r2, r1, r5
   b5d2a:	490e      	ldr	r1, [pc, #56]	; (b5d64 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b5d2c:	2201      	movs	r2, #1
   b5d2e:	f004 0407 	and.w	r4, r4, #7
   b5d32:	574b      	ldrsb	r3, [r1, r5]
   b5d34:	fa02 f404 	lsl.w	r4, r2, r4
   b5d38:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b5d3a:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b5d3c:	bf0c      	ite	eq
   b5d3e:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b5d40:	43a3      	bicne	r3, r4
   b5d42:	554b      	strb	r3, [r1, r5]
}
   b5d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b5d46:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b5d48:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b5d4a:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b5d4c:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b5d4e:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b5d50:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b5d52:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b5d54:	b224      	sxth	r4, r4
    break;
   b5d56:	e7e0      	b.n	b5d1a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b5d58:	8973      	ldrh	r3, [r6, #10]
   b5d5a:	3b01      	subs	r3, #1
   b5d5c:	1b5b      	subs	r3, r3, r5
    break;
   b5d5e:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b5d60:	b21c      	sxth	r4, r3
    break;
   b5d62:	e7da      	b.n	b5d1a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b5d64:	2003daae 	.word	0x2003daae

000b5d68 <_ZN16Adafruit_SSD1306D0Ev>:
   b5d68:	b510      	push	{r4, lr}
   b5d6a:	2124      	movs	r1, #36	; 0x24
   b5d6c:	4604      	mov	r4, r0
   b5d6e:	f7fe f996 	bl	b409e <_ZdlPvj>
   b5d72:	4620      	mov	r0, r4
   b5d74:	bd10      	pop	{r4, pc}
	...

000b5d78 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b5d78:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b5d7a:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b5d7c:	4604      	mov	r4, r0
   b5d7e:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b5d80:	2180      	movs	r1, #128	; 0x80
   b5d82:	f000 fa8b 	bl	b629c <_ZN12Adafruit_GFXC1Ess>
   b5d86:	4b06      	ldr	r3, [pc, #24]	; (b5da0 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b5d88:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b5d8a:	23ff      	movs	r3, #255	; 0xff
   b5d8c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b5d90:	7763      	strb	r3, [r4, #29]
   b5d92:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5d96:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b5d98:	f884 5020 	strb.w	r5, [r4, #32]
}
   b5d9c:	4620      	mov	r0, r4
   b5d9e:	bd38      	pop	{r3, r4, r5, pc}
   b5da0:	000bc1e8 	.word	0x000bc1e8

000b5da4 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b5da4:	4802      	ldr	r0, [pc, #8]	; (b5db0 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b5da6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b5daa:	2100      	movs	r1, #0
   b5dac:	f005 bece 	b.w	bbb4c <memset>
   b5db0:	2003daae 	.word	0x2003daae

000b5db4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b5db4:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b5db6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b5dba:	b143      	cbz	r3, b5dce <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b5dbc:	9101      	str	r1, [sp, #4]
        return instance().transfer(data);
   b5dbe:	f7fe ff93 	bl	b4ce8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5dc2:	9901      	ldr	r1, [sp, #4]
}
   b5dc4:	b003      	add	sp, #12
   b5dc6:	f85d eb04 	ldr.w	lr, [sp], #4
   b5dca:	f002 bab3 	b.w	b8334 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b5dce:	460b      	mov	r3, r1
   b5dd0:	7f81      	ldrb	r1, [r0, #30]
   b5dd2:	7f40      	ldrb	r0, [r0, #29]
   b5dd4:	2201      	movs	r2, #1
}
   b5dd6:	b003      	add	sp, #12
   b5dd8:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b5ddc:	f003 bc3a 	b.w	b9654 <shiftOut>

000b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b5de0:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b5de2:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b5de6:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b5de8:	4604      	mov	r4, r0
   b5dea:	460d      	mov	r5, r1
  if (sid != -1)
   b5dec:	d01d      	beq.n	b5e2a <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b5dee:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b5df2:	2101      	movs	r1, #1
   b5df4:	b280      	uxth	r0, r0
   b5df6:	f003 fbea 	bl	b95ce <digitalWrite>
    digitalWrite(dc, LOW);
   b5dfa:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5dfe:	2100      	movs	r1, #0
   b5e00:	b280      	uxth	r0, r0
   b5e02:	f003 fbe4 	bl	b95ce <digitalWrite>
    digitalWrite(cs, LOW);
   b5e06:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5e0a:	2100      	movs	r1, #0
   b5e0c:	b280      	uxth	r0, r0
   b5e0e:	f003 fbde 	bl	b95ce <digitalWrite>
    fastSPIwrite(c);
   b5e12:	4629      	mov	r1, r5
   b5e14:	4620      	mov	r0, r4
   b5e16:	f7ff ffcd 	bl	b5db4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b5e1a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5e1e:	2101      	movs	r1, #1
}
   b5e20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b5e24:	b280      	uxth	r0, r0
   b5e26:	f003 bbd2 	b.w	b95ce <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b5e2a:	f003 fc8d 	bl	b9748 <_Z19__fetch_global_Wirev>
   b5e2e:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b5e32:	f002 ffbd 	bl	b8db0 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b5e36:	f003 fc87 	bl	b9748 <_Z19__fetch_global_Wirev>
   b5e3a:	6803      	ldr	r3, [r0, #0]
   b5e3c:	2100      	movs	r1, #0
   b5e3e:	689b      	ldr	r3, [r3, #8]
   b5e40:	4798      	blx	r3
    Wire.write(c);
   b5e42:	f003 fc81 	bl	b9748 <_Z19__fetch_global_Wirev>
   b5e46:	6803      	ldr	r3, [r0, #0]
   b5e48:	4629      	mov	r1, r5
   b5e4a:	689b      	ldr	r3, [r3, #8]
   b5e4c:	4798      	blx	r3
    Wire.endTransmission();
   b5e4e:	f003 fc7b 	bl	b9748 <_Z19__fetch_global_Wirev>
}
   b5e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b5e56:	f002 bfb2 	b.w	b8dbe <_ZN7TwoWire15endTransmissionEv>
	...

000b5e5c <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b5e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b5e5e:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b5e60:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b5e62:	f7ff ffbd 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b5e66:	2100      	movs	r1, #0
   b5e68:	4620      	mov	r0, r4
   b5e6a:	f7ff ffb9 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b5e6e:	217f      	movs	r1, #127	; 0x7f
   b5e70:	4620      	mov	r0, r4
   b5e72:	f7ff ffb5 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b5e76:	2122      	movs	r1, #34	; 0x22
   b5e78:	4620      	mov	r0, r4
   b5e7a:	f7ff ffb1 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b5e7e:	2100      	movs	r1, #0
   b5e80:	4620      	mov	r0, r4
   b5e82:	f7ff ffad 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b5e86:	2107      	movs	r1, #7
   b5e88:	4620      	mov	r0, r4
   b5e8a:	f7ff ffa9 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b5e8e:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b5e92:	4f29      	ldr	r7, [pc, #164]	; (b5f38 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b5e94:	3301      	adds	r3, #1
   b5e96:	d02a      	beq.n	b5eee <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b5e98:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5e9c:	2101      	movs	r1, #1
   b5e9e:	b280      	uxth	r0, r0
   b5ea0:	f003 fb95 	bl	b95ce <digitalWrite>
    digitalWrite(dc, HIGH);
   b5ea4:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5ea8:	2101      	movs	r1, #1
   b5eaa:	b280      	uxth	r0, r0
   b5eac:	f003 fb8f 	bl	b95ce <digitalWrite>
    digitalWrite(cs, LOW);
   b5eb0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5eb4:	2100      	movs	r1, #0
   b5eb6:	b280      	uxth	r0, r0
   b5eb8:	f003 fb89 	bl	b95ce <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b5ebc:	2001      	movs	r0, #1
   b5ebe:	f001 fdfb 	bl	b7ab8 <HAL_Delay_Microseconds>
   b5ec2:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5ec6:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b5ec8:	f817 1b01 	ldrb.w	r1, [r7], #1
   b5ecc:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5ece:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b5ed0:	f7ff ff70 	bl	b5db4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5ed4:	2d00      	cmp	r5, #0
   b5ed6:	d1f6      	bne.n	b5ec6 <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b5ed8:	2001      	movs	r0, #1
   b5eda:	f001 fded 	bl	b7ab8 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b5ede:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5ee2:	2101      	movs	r1, #1
}
   b5ee4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b5ee8:	b280      	uxth	r0, r0
   b5eea:	f003 bb70 	b.w	b95ce <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5eee:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b5ef0:	f003 fc2a 	bl	b9748 <_Z19__fetch_global_Wirev>
   b5ef4:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b5ef8:	f002 ff5a 	bl	b8db0 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b5efc:	f003 fc24 	bl	b9748 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5f00:	6803      	ldr	r3, [r0, #0]
   b5f02:	2140      	movs	r1, #64	; 0x40
   b5f04:	689b      	ldr	r3, [r3, #8]
   b5f06:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b5f08:	f105 0610 	add.w	r6, r5, #16
   b5f0c:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b5f0e:	f003 fc1b 	bl	b9748 <_Z19__fetch_global_Wirev>
   b5f12:	6803      	ldr	r3, [r0, #0]
   b5f14:	5d79      	ldrb	r1, [r7, r5]
   b5f16:	689b      	ldr	r3, [r3, #8]
   b5f18:	4798      	blx	r3
		i++;
   b5f1a:	1c6b      	adds	r3, r5, #1
   b5f1c:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b5f1e:	42ae      	cmp	r6, r5
   b5f20:	d1f5      	bne.n	b5f0e <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b5f22:	f003 fc11 	bl	b9748 <_Z19__fetch_global_Wirev>
   b5f26:	f002 ff4a 	bl	b8dbe <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5f2a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b5f2e:	d100      	bne.n	b5f32 <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b5f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5f32:	4635      	mov	r5, r6
   b5f34:	e7dc      	b.n	b5ef0 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b5f36:	bf00      	nop
   b5f38:	2003daae 	.word	0x2003daae

000b5f3c <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b5f3c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b5f3e:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b5f42:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b5f44:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b5f46:	4604      	mov	r4, r0
   b5f48:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b5f4a:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b5f4c:	f000 80c9 	beq.w	b60e2 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b5f50:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b5f54:	2101      	movs	r1, #1
   b5f56:	b280      	uxth	r0, r0
   b5f58:	f003 fb28 	bl	b95ac <pinMode>
    pinMode(cs, OUTPUT);
   b5f5c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5f60:	2101      	movs	r1, #1
   b5f62:	b280      	uxth	r0, r0
   b5f64:	f003 fb22 	bl	b95ac <pinMode>
    if (!hwSPI){
   b5f68:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b5f6c:	2b00      	cmp	r3, #0
   b5f6e:	f000 80a6 	beq.w	b60be <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b5f72:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5f76:	2101      	movs	r1, #1
   b5f78:	b280      	uxth	r0, r0
   b5f7a:	f003 fb28 	bl	b95ce <digitalWrite>
        instance().setBitOrder(order);
   b5f7e:	f7fe feb3 	bl	b4ce8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5f82:	2101      	movs	r1, #1
   b5f84:	f002 f8ce 	bl	b8124 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b5f88:	f7fe feae 	bl	b4ce8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5f8c:	2110      	movs	r1, #16
   b5f8e:	f002 f9ab 	bl	b82e8 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b5f92:	f7fe fea9 	bl	b4ce8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5f96:	2100      	movs	r1, #0
   b5f98:	f002 f8d8 	bl	b814c <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b5f9c:	f7fe fea4 	bl	b4ce8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5fa0:	f002 f8ac 	bl	b80fc <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b5fa4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5fa8:	2101      	movs	r1, #1
   b5faa:	b280      	uxth	r0, r0
   b5fac:	f003 fafe 	bl	b95ac <pinMode>
  digitalWrite(rst, HIGH);
   b5fb0:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5fb4:	2101      	movs	r1, #1
   b5fb6:	b280      	uxth	r0, r0
   b5fb8:	f003 fb09 	bl	b95ce <digitalWrite>
  delay(1);
   b5fbc:	2001      	movs	r0, #1
   b5fbe:	f002 fc5d 	bl	b887c <delay>
  digitalWrite(rst, LOW);
   b5fc2:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5fc6:	2100      	movs	r1, #0
   b5fc8:	b280      	uxth	r0, r0
   b5fca:	f003 fb00 	bl	b95ce <digitalWrite>
  delay(10);
   b5fce:	200a      	movs	r0, #10
   b5fd0:	f002 fc54 	bl	b887c <delay>
  digitalWrite(rst, HIGH);
   b5fd4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5fd8:	2101      	movs	r1, #1
   b5fda:	b280      	uxth	r0, r0
   b5fdc:	f003 faf7 	bl	b95ce <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b5fe0:	4620      	mov	r0, r4
   b5fe2:	21ae      	movs	r1, #174	; 0xae
   b5fe4:	f7ff fefc 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b5fe8:	4620      	mov	r0, r4
   b5fea:	21d5      	movs	r1, #213	; 0xd5
   b5fec:	f7ff fef8 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b5ff0:	4620      	mov	r0, r4
   b5ff2:	2180      	movs	r1, #128	; 0x80
   b5ff4:	f7ff fef4 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b5ff8:	4620      	mov	r0, r4
   b5ffa:	21a8      	movs	r1, #168	; 0xa8
   b5ffc:	f7ff fef0 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b6000:	4620      	mov	r0, r4
   b6002:	213f      	movs	r1, #63	; 0x3f
   b6004:	f7ff feec 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b6008:	4620      	mov	r0, r4
   b600a:	21d3      	movs	r1, #211	; 0xd3
   b600c:	f7ff fee8 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b6010:	4620      	mov	r0, r4
   b6012:	2100      	movs	r1, #0
   b6014:	f7ff fee4 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b6018:	4620      	mov	r0, r4
   b601a:	2140      	movs	r1, #64	; 0x40
   b601c:	f7ff fee0 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b6020:	218d      	movs	r1, #141	; 0x8d
   b6022:	4620      	mov	r0, r4
   b6024:	f7ff fedc 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b6028:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b602a:	bf0c      	ite	eq
   b602c:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b602e:	2114      	movne	r1, #20
   b6030:	4620      	mov	r0, r4
   b6032:	f7ff fed5 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b6036:	4620      	mov	r0, r4
   b6038:	2120      	movs	r1, #32
   b603a:	f7ff fed1 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b603e:	4620      	mov	r0, r4
   b6040:	2100      	movs	r1, #0
   b6042:	f7ff fecd 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b6046:	4620      	mov	r0, r4
   b6048:	21a1      	movs	r1, #161	; 0xa1
   b604a:	f7ff fec9 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b604e:	4620      	mov	r0, r4
   b6050:	21c8      	movs	r1, #200	; 0xc8
   b6052:	f7ff fec5 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b6056:	4620      	mov	r0, r4
   b6058:	21da      	movs	r1, #218	; 0xda
   b605a:	f7ff fec1 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b605e:	4620      	mov	r0, r4
   b6060:	2112      	movs	r1, #18
   b6062:	f7ff febd 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b6066:	2181      	movs	r1, #129	; 0x81
   b6068:	4620      	mov	r0, r4
   b606a:	f7ff feb9 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b606e:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b6070:	bf0c      	ite	eq
   b6072:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b6074:	21cf      	movne	r1, #207	; 0xcf
   b6076:	4620      	mov	r0, r4
   b6078:	f7ff feb2 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b607c:	21d9      	movs	r1, #217	; 0xd9
   b607e:	4620      	mov	r0, r4
   b6080:	f7ff feae 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b6084:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b6086:	bf0c      	ite	eq
   b6088:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b608a:	21f1      	movne	r1, #241	; 0xf1
   b608c:	4620      	mov	r0, r4
   b608e:	f7ff fea7 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b6092:	4620      	mov	r0, r4
   b6094:	21db      	movs	r1, #219	; 0xdb
   b6096:	f7ff fea3 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b609a:	4620      	mov	r0, r4
   b609c:	2140      	movs	r1, #64	; 0x40
   b609e:	f7ff fe9f 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b60a2:	4620      	mov	r0, r4
   b60a4:	21a4      	movs	r1, #164	; 0xa4
   b60a6:	f7ff fe9b 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b60aa:	4620      	mov	r0, r4
   b60ac:	21a6      	movs	r1, #166	; 0xa6
   b60ae:	f7ff fe97 	bl	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b60b2:	4620      	mov	r0, r4
   b60b4:	21af      	movs	r1, #175	; 0xaf
}
   b60b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b60ba:	f7ff be91 	b.w	b5de0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b60be:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b60c2:	2101      	movs	r1, #1
   b60c4:	b280      	uxth	r0, r0
   b60c6:	f003 fa71 	bl	b95ac <pinMode>
    	pinMode(sclk, OUTPUT);
   b60ca:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b60ce:	2101      	movs	r1, #1
   b60d0:	b280      	uxth	r0, r0
   b60d2:	f003 fa6b 	bl	b95ac <pinMode>
    if (hwSPI){
   b60d6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b60da:	2b00      	cmp	r3, #0
   b60dc:	f43f af62 	beq.w	b5fa4 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b60e0:	e747      	b.n	b5f72 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b60e2:	f003 fb31 	bl	b9748 <_Z19__fetch_global_Wirev>
   b60e6:	f002 fe2d 	bl	b8d44 <_ZN7TwoWire5beginEv>
   b60ea:	e75b      	b.n	b5fa4 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b60ec <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b60ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b60f0:	b085      	sub	sp, #20
   b60f2:	461f      	mov	r7, r3
   b60f4:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b60f8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b60fc:	eba8 0902 	sub.w	r9, r8, r2
   b6100:	eba7 0a01 	sub.w	sl, r7, r1
   b6104:	f1b9 0f00 	cmp.w	r9, #0
   b6108:	bfb8      	it	lt
   b610a:	f1c9 0900 	rsblt	r9, r9, #0
   b610e:	f1ba 0f00 	cmp.w	sl, #0
   b6112:	bfb8      	it	lt
   b6114:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b6118:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b611a:	4683      	mov	fp, r0
   b611c:	460c      	mov	r4, r1
   b611e:	4615      	mov	r5, r2
  if (steep) {
   b6120:	dd04      	ble.n	b612c <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b6122:	463a      	mov	r2, r7
    swap(x0, y0);
   b6124:	462c      	mov	r4, r5
    swap(x1, y1);
   b6126:	4647      	mov	r7, r8
    swap(x0, y0);
   b6128:	460d      	mov	r5, r1
    swap(x1, y1);
   b612a:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b612c:	42bc      	cmp	r4, r7
   b612e:	dd05      	ble.n	b613c <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b6130:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b6132:	4645      	mov	r5, r8
   b6134:	4690      	mov	r8, r2
  if (x0 > x1) {
   b6136:	4622      	mov	r2, r4
   b6138:	463c      	mov	r4, r7
   b613a:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b613c:	1b3e      	subs	r6, r7, r4
   b613e:	b2b2      	uxth	r2, r6
   b6140:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b6142:	eba8 0205 	sub.w	r2, r8, r5
   b6146:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b614a:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b614e:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b6152:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b6156:	4545      	cmp	r5, r8
   b6158:	bfb4      	ite	lt
   b615a:	2201      	movlt	r2, #1
   b615c:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
   b6160:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b6162:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b6164:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b6166:	42bc      	cmp	r4, r7
   b6168:	dc1c      	bgt.n	b61a4 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b616a:	f8db 2000 	ldr.w	r2, [fp]
   b616e:	9303      	str	r3, [sp, #12]
    if (steep) {
   b6170:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b6172:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b6176:	bfc7      	ittee	gt
   b6178:	4629      	movgt	r1, r5
   b617a:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b617c:	462a      	movle	r2, r5
   b617e:	4621      	movle	r1, r4
   b6180:	4658      	mov	r0, fp
   b6182:	47c0      	blx	r8
    }
    err -= dy;
   b6184:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b6186:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b6188:	1ab6      	subs	r6, r6, r2
   b618a:	b2b1      	uxth	r1, r6
   b618c:	b236      	sxth	r6, r6
    if (err < 0) {
   b618e:	2e00      	cmp	r6, #0
   b6190:	da05      	bge.n	b619e <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b6192:	9a02      	ldr	r2, [sp, #8]
   b6194:	4415      	add	r5, r2
      err += dx;
   b6196:	9a00      	ldr	r2, [sp, #0]
   b6198:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b619a:	b22d      	sxth	r5, r5
      err += dx;
   b619c:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b619e:	3401      	adds	r4, #1
   b61a0:	b224      	sxth	r4, r4
   b61a2:	e7e0      	b.n	b6166 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b61a4:	b005      	add	sp, #20
   b61a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b61aa <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b61aa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b61ae:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b61b2:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b61b4:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b61b8:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b61bc:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b61be:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b61c0:	4616      	mov	r6, r2
   b61c2:	468a      	mov	sl, r1
   b61c4:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b61c6:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b61c8:	6823      	ldr	r3, [r4, #0]
   b61ca:	f8cd 8000 	str.w	r8, [sp]
   b61ce:	f109 32ff 	add.w	r2, r9, #4294967295
   b61d2:	4432      	add	r2, r6
   b61d4:	69df      	ldr	r7, [r3, #28]
   b61d6:	4651      	mov	r1, sl
   b61d8:	462b      	mov	r3, r5
   b61da:	4620      	mov	r0, r4
   b61dc:	b212      	sxth	r2, r2
   b61de:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b61e0:	6823      	ldr	r3, [r4, #0]
   b61e2:	f8cd 8000 	str.w	r8, [sp]
   b61e6:	699f      	ldr	r7, [r3, #24]
   b61e8:	4632      	mov	r2, r6
   b61ea:	464b      	mov	r3, r9
   b61ec:	4651      	mov	r1, sl
   b61ee:	4620      	mov	r0, r4
   b61f0:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b61f2:	1e6b      	subs	r3, r5, #1
   b61f4:	eb03 010a 	add.w	r1, r3, sl
   b61f8:	6823      	ldr	r3, [r4, #0]
   b61fa:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b61fe:	699d      	ldr	r5, [r3, #24]
   b6200:	4632      	mov	r2, r6
   b6202:	464b      	mov	r3, r9
   b6204:	b209      	sxth	r1, r1
   b6206:	4620      	mov	r0, r4
   b6208:	46ac      	mov	ip, r5
}
   b620a:	b002      	add	sp, #8
   b620c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b6210:	4760      	bx	ip

000b6212 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b6212:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b6214:	3b01      	subs	r3, #1
   b6216:	4413      	add	r3, r2
   b6218:	6804      	ldr	r4, [r0, #0]
   b621a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b621e:	9501      	str	r5, [sp, #4]
   b6220:	b21b      	sxth	r3, r3
   b6222:	9300      	str	r3, [sp, #0]
   b6224:	6964      	ldr	r4, [r4, #20]
   b6226:	460b      	mov	r3, r1
   b6228:	47a0      	blx	r4
}
   b622a:	b003      	add	sp, #12
   b622c:	bd30      	pop	{r4, r5, pc}

000b622e <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b622e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b6230:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b6234:	6804      	ldr	r4, [r0, #0]
   b6236:	e9cd 2500 	strd	r2, r5, [sp]
   b623a:	3b01      	subs	r3, #1
   b623c:	440b      	add	r3, r1
   b623e:	6964      	ldr	r4, [r4, #20]
   b6240:	b21b      	sxth	r3, r3
   b6242:	47a0      	blx	r4
}
   b6244:	b003      	add	sp, #12
   b6246:	bd30      	pop	{r4, r5, pc}

000b6248 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b6248:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b624c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b6250:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b6254:	4605      	mov	r5, r0
   b6256:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b6258:	460c      	mov	r4, r1
   b625a:	18ce      	adds	r6, r1, r3
   b625c:	42b4      	cmp	r4, r6
   b625e:	da0b      	bge.n	b6278 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b6260:	682b      	ldr	r3, [r5, #0]
   b6262:	f8cd 8000 	str.w	r8, [sp]
   b6266:	699f      	ldr	r7, [r3, #24]
   b6268:	4621      	mov	r1, r4
   b626a:	464b      	mov	r3, r9
   b626c:	4652      	mov	r2, sl
   b626e:	4628      	mov	r0, r5
   b6270:	3401      	adds	r4, #1
   b6272:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b6274:	b224      	sxth	r4, r4
   b6276:	e7f1      	b.n	b625c <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b6278:	b002      	add	sp, #8
   b627a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b627e <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b627e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b6280:	6802      	ldr	r2, [r0, #0]
   b6282:	9101      	str	r1, [sp, #4]
   b6284:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b6288:	9100      	str	r1, [sp, #0]
   b628a:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b628c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b6290:	2200      	movs	r2, #0
   b6292:	4611      	mov	r1, r2
   b6294:	47a0      	blx	r4
}
   b6296:	b002      	add	sp, #8
   b6298:	bd10      	pop	{r4, pc}

000b629a <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b629a:	4770      	bx	lr

000b629c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b629c:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b629e:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b62a0:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b62a2:	f04f 32ff 	mov.w	r2, #4294967295
   b62a6:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b62a8:	4d05      	ldr	r5, [pc, #20]	; (b62c0 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b62aa:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b62ac:	2201      	movs	r2, #1
   b62ae:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b62b0:	6005      	str	r5, [r0, #0]
   b62b2:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b62b4:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b62b6:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b62b8:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b62ba:	7682      	strb	r2, [r0, #26]
}
   b62bc:	bd30      	pop	{r4, r5, pc}
   b62be:	bf00      	nop
   b62c0:	000bc71c 	.word	0x000bc71c

000b62c4 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b62c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b62c8:	ed2d 8b02 	vpush	{d8}
   b62cc:	b08d      	sub	sp, #52	; 0x34
   b62ce:	4607      	mov	r7, r0
   b62d0:	9104      	str	r1, [sp, #16]
   b62d2:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b62d6:	9105      	str	r1, [sp, #20]
   b62d8:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b62dc:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b62de:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b62e2:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b62e4:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b62e8:	4281      	cmp	r1, r0
   b62ea:	dd52      	ble.n	b6392 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b62ec:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b62f0:	4291      	cmp	r1, r2
   b62f2:	dd4e      	ble.n	b6392 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b62f4:	2106      	movs	r1, #6
   b62f6:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b62fa:	2c00      	cmp	r4, #0
   b62fc:	dd49      	ble.n	b6392 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b62fe:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b6302:	2c00      	cmp	r4, #0
   b6304:	dd45      	ble.n	b6392 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b6306:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b630a:	930b      	str	r3, [sp, #44]	; 0x2c
   b630c:	b293      	uxth	r3, r2
   b630e:	9307      	str	r3, [sp, #28]
   b6310:	3308      	adds	r3, #8
   b6312:	b29b      	uxth	r3, r3
   b6314:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b6316:	2400      	movs	r4, #0
   b6318:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b631a:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b631c:	bf1c      	itt	ne
   b631e:	4b2c      	ldrne	r3, [pc, #176]	; (b63d0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b6320:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b6322:	9e07      	ldr	r6, [sp, #28]
   b6324:	bf16      	itet	ne
   b6326:	191b      	addne	r3, r3, r4
      line = 0x0;
   b6328:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b632a:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b632c:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b632e:	9a04      	ldr	r2, [sp, #16]
   b6330:	b2ab      	uxth	r3, r5
   b6332:	930a      	str	r3, [sp, #40]	; 0x28
   b6334:	fb04 f305 	mul.w	r3, r4, r5
   b6338:	fa13 f382 	uxtah	r3, r3, r2
   b633c:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b633e:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b6342:	ee08 3a10 	vmov	s16, r3
   b6346:	46b0      	mov	r8, r6
   b6348:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b634c:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b6350:	9b03      	ldr	r3, [sp, #12]
   b6352:	07db      	lsls	r3, r3, #31
   b6354:	d52f      	bpl.n	b63b6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b6356:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b6358:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b635a:	d11f      	bne.n	b639c <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b635c:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b6360:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b6362:	b232      	sxth	r2, r6
   b6364:	4651      	mov	r1, sl
   b6366:	4638      	mov	r0, r7
   b6368:	47d8      	blx	fp
      line >>= 1;
   b636a:	9b03      	ldr	r3, [sp, #12]
   b636c:	085b      	lsrs	r3, r3, #1
   b636e:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b6370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6372:	3601      	adds	r6, #1
   b6374:	4498      	add	r8, r3
   b6376:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6378:	b2b6      	uxth	r6, r6
   b637a:	42b3      	cmp	r3, r6
   b637c:	fa1f f888 	uxth.w	r8, r8
   b6380:	d1e6      	bne.n	b6350 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b6382:	9b08      	ldr	r3, [sp, #32]
   b6384:	3b01      	subs	r3, #1
   b6386:	3401      	adds	r4, #1
   b6388:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b638c:	b264      	sxtb	r4, r4
   b638e:	9308      	str	r3, [sp, #32]
   b6390:	d1c3      	bne.n	b631a <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b6392:	b00d      	add	sp, #52	; 0x34
   b6394:	ecbd 8b02 	vpop	{d8}
   b6398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b639c:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b639e:	e9cd 9200 	strd	r9, r2, [sp]
   b63a2:	ee18 1a10 	vmov	r1, s16
   b63a6:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b63aa:	fa0f f288 	sxth.w	r2, r8
   b63ae:	464b      	mov	r3, r9
   b63b0:	4638      	mov	r0, r7
   b63b2:	47d8      	blx	fp
   b63b4:	e7d9      	b.n	b636a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b63b6:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b63ba:	4293      	cmp	r3, r2
   b63bc:	d0d5      	beq.n	b636a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b63be:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b63c0:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b63c2:	d103      	bne.n	b63cc <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b63c4:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b63c8:	9b06      	ldr	r3, [sp, #24]
   b63ca:	e7ca      	b.n	b6362 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b63cc:	9a06      	ldr	r2, [sp, #24]
   b63ce:	e7e6      	b.n	b639e <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b63d0:	000bc218 	.word	0x000bc218

000b63d4 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b63d4:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b63d6:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b63d8:	b085      	sub	sp, #20
   b63da:	4604      	mov	r4, r0
  if (c == '\n') {
   b63dc:	d107      	bne.n	b63ee <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b63de:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b63e0:	8a63      	ldrh	r3, [r4, #18]
   b63e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b63e6:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b63e8:	2300      	movs	r3, #0
   b63ea:	8223      	strh	r3, [r4, #16]
   b63ec:	e021      	b.n	b6432 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b63ee:	290d      	cmp	r1, #13
   b63f0:	d01f      	beq.n	b6432 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b63f2:	7e03      	ldrb	r3, [r0, #24]
   b63f4:	9302      	str	r3, [sp, #8]
   b63f6:	8ac3      	ldrh	r3, [r0, #22]
   b63f8:	9301      	str	r3, [sp, #4]
   b63fa:	8a83      	ldrh	r3, [r0, #20]
   b63fc:	9300      	str	r3, [sp, #0]
   b63fe:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b6402:	460b      	mov	r3, r1
   b6404:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b6408:	f7ff ff5c 	bl	b62c4 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b640c:	7e20      	ldrb	r0, [r4, #24]
   b640e:	8a23      	ldrh	r3, [r4, #16]
   b6410:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b6414:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b6418:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b641a:	b21b      	sxth	r3, r3
   b641c:	4602      	mov	r2, r0
   b641e:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b6420:	b139      	cbz	r1, b6432 <_ZN12Adafruit_GFX5writeEh+0x5e>
   b6422:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b6426:	f06f 0505 	mvn.w	r5, #5
   b642a:	fb05 1100 	mla	r1, r5, r0, r1
   b642e:	428b      	cmp	r3, r1
   b6430:	dcd6      	bgt.n	b63e0 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b6432:	2001      	movs	r0, #1
   b6434:	b005      	add	sp, #20
   b6436:	bd30      	pop	{r4, r5, pc}

000b6438 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b6438:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b643a:	8242      	strh	r2, [r0, #18]
}
   b643c:	4770      	bx	lr

000b643e <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b643e:	2901      	cmp	r1, #1
   b6440:	bf38      	it	cc
   b6442:	2101      	movcc	r1, #1
   b6444:	7601      	strb	r1, [r0, #24]
}
   b6446:	4770      	bx	lr

000b6448 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b6448:	82c1      	strh	r1, [r0, #22]
   b644a:	8281      	strh	r1, [r0, #20]
}
   b644c:	4770      	bx	lr

000b644e <_ZN12Adafruit_GFX11getRotationEv>:
}
   b644e:	7e40      	ldrb	r0, [r0, #25]
   b6450:	4770      	bx	lr

000b6452 <_ZN12Adafruit_GFX5widthEv>:
}
   b6452:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b6456:	4770      	bx	lr

000b6458 <_ZN12Adafruit_GFX6heightEv>:
}
   b6458:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b645c:	4770      	bx	lr

000b645e <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   b645e:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   b6460:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b6464:	6803      	ldr	r3, [r0, #0]
   b6466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6468:	4798      	blx	r3
}
   b646a:	3800      	subs	r0, #0
   b646c:	bf18      	it	ne
   b646e:	2001      	movne	r0, #1
   b6470:	bd08      	pop	{r3, pc}

000b6472 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   b6472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6474:	4606      	mov	r6, r0
   b6476:	460f      	mov	r7, r1
   b6478:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   b647a:	b1c4      	cbz	r4, b64ae <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   b647c:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b6480:	6803      	ldr	r3, [r0, #0]
   b6482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6484:	4798      	blx	r3
   b6486:	b908      	cbnz	r0, b648c <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   b6488:	2000      	movs	r0, #0
    }
  }
  return true;
}
   b648a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ret = client->write(buffer, sendlen);
   b648c:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   b6490:	2cfa      	cmp	r4, #250	; 0xfa
   b6492:	6803      	ldr	r3, [r0, #0]
   b6494:	4625      	mov	r5, r4
   b6496:	bfa8      	it	ge
   b6498:	25fa      	movge	r5, #250	; 0xfa
   b649a:	68db      	ldr	r3, [r3, #12]
   b649c:	462a      	mov	r2, r5
   b649e:	4639      	mov	r1, r7
   b64a0:	4798      	blx	r3
   b64a2:	b283      	uxth	r3, r0
      len -= ret;
   b64a4:	1ae4      	subs	r4, r4, r3
      if (ret != sendlen) {
   b64a6:	429d      	cmp	r5, r3
      len -= ret;
   b64a8:	b2a4      	uxth	r4, r4
      if (ret != sendlen) {
   b64aa:	d0e6      	beq.n	b647a <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   b64ac:	e7ec      	b.n	b6488 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
  return true;
   b64ae:	2001      	movs	r0, #1
   b64b0:	e7eb      	b.n	b648a <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x18>

000b64b2 <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   b64b2:	4770      	bx	lr

000b64b4 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
                                          int16_t timeout) {
   b64b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b64b8:	4606      	mov	r6, r0
   b64ba:	4688      	mov	r8, r1
   b64bc:	4691      	mov	r9, r2
   b64be:	461f      	mov	r7, r3
   b64c0:	461d      	mov	r5, r3
  uint16_t len = 0;
   b64c2:	2400      	movs	r4, #0
  while (client->connected() && (timeout >= 0)) {
   b64c4:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b64c8:	6803      	ldr	r3, [r0, #0]
   b64ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b64cc:	4798      	blx	r3
   b64ce:	b1d0      	cbz	r0, b6506 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   b64d0:	2d00      	cmp	r5, #0
   b64d2:	db18      	blt.n	b6506 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    while (client->available()) {
   b64d4:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b64d8:	6803      	ldr	r3, [r0, #0]
   b64da:	691b      	ldr	r3, [r3, #16]
   b64dc:	4798      	blx	r3
   b64de:	b160      	cbz	r0, b64fa <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      char c = client->read();
   b64e0:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b64e4:	6803      	ldr	r3, [r0, #0]
   b64e6:	695b      	ldr	r3, [r3, #20]
   b64e8:	4798      	blx	r3
   b64ea:	f808 0004 	strb.w	r0, [r8, r4]
      len++;
   b64ee:	3401      	adds	r4, #1
   b64f0:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   b64f2:	454c      	cmp	r4, r9
   b64f4:	d007      	beq.n	b6506 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
      timeout = t;  // reset the timeout
   b64f6:	463d      	mov	r5, r7
   b64f8:	e7ec      	b.n	b64d4 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   b64fa:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   b64fc:	200a      	movs	r0, #10
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   b64fe:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   b6500:	f002 f9bc 	bl	b887c <delay>
  while (client->connected() && (timeout >= 0)) {
   b6504:	e7de      	b.n	b64c4 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
}
   b6506:	4620      	mov	r0, r4
   b6508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b650c <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
bool Adafruit_MQTT_SPARK::connectServer(){
   b650c:	b570      	push	{r4, r5, r6, lr}
   b650e:	4604      	mov	r4, r0
  memset(buffer, 0, sizeof(buffer));
   b6510:	f100 0522 	add.w	r5, r0, #34	; 0x22
   b6514:	2296      	movs	r2, #150	; 0x96
   b6516:	2100      	movs	r1, #0
   b6518:	4628      	mov	r0, r5
   b651a:	f005 fb17 	bl	bbb4c <memset>
  strcpy((char *)buffer, servername);
   b651e:	6861      	ldr	r1, [r4, #4]
   b6520:	4628      	mov	r0, r5
   b6522:	f005 fb53 	bl	bbbcc <strcpy>
  int r = client->connect((char *)buffer, portnum);
   b6526:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   b652a:	8922      	ldrh	r2, [r4, #8]
   b652c:	6803      	ldr	r3, [r0, #0]
   b652e:	4629      	mov	r1, r5
   b6530:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   b6532:	2300      	movs	r3, #0
   b6534:	47b0      	blx	r6
}
   b6536:	3800      	subs	r0, #0
   b6538:	bf18      	it	ne
   b653a:	2001      	movne	r0, #1
   b653c:	bd70      	pop	{r4, r5, r6, pc}

000b653e <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   b653e:	b510      	push	{r4, lr}
   b6540:	21d4      	movs	r1, #212	; 0xd4
   b6542:	4604      	mov	r4, r0
   b6544:	f7fd fdab 	bl	b409e <_ZdlPvj>
   b6548:	4620      	mov	r0, r4
   b654a:	bd10      	pop	{r4, pc}

000b654c <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:
bool Adafruit_MQTT_SPARK::disconnectServer() {
   b654c:	b510      	push	{r4, lr}
   b654e:	4604      	mov	r4, r0
  if (client->connected()) {
   b6550:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b6554:	6803      	ldr	r3, [r0, #0]
   b6556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6558:	4798      	blx	r3
   b655a:	b120      	cbz	r0, b6566 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   b655c:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   b6560:	6803      	ldr	r3, [r0, #0]
   b6562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6564:	4798      	blx	r3
}
   b6566:	2001      	movs	r0, #1
   b6568:	bd10      	pop	{r4, pc}

000b656a <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
{
   b656a:	b570      	push	{r4, r5, r6, lr}
    if (!connected())
   b656c:	6803      	ldr	r3, [r0, #0]
   b656e:	689b      	ldr	r3, [r3, #8]
{
   b6570:	4604      	mov	r4, r0
    if (!connected())
   b6572:	4798      	blx	r3
   b6574:	b9c8      	cbnz	r0, b65aa <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   b6576:	4620      	mov	r0, r4
   b6578:	f000 fa97 	bl	b6aaa <_ZN13Adafruit_MQTT7connectEv>
   b657c:	2504      	movs	r5, #4
   b657e:	b170      	cbz	r0, b659e <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   b6580:	3d01      	subs	r5, #1
   b6582:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b6586:	d00a      	beq.n	b659e <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
            disconnect();
   b6588:	4620      	mov	r0, r4
   b658a:	f000 f8b5 	bl	b66f8 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   b658e:	f241 3088 	movw	r0, #5000	; 0x1388
   b6592:	f002 f973 	bl	b887c <delay>
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   b6596:	4620      	mov	r0, r4
   b6598:	f000 fa87 	bl	b6aaa <_ZN13Adafruit_MQTT7connectEv>
   b659c:	e7ef      	b.n	b657e <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
        if( connected() )
   b659e:	6823      	ldr	r3, [r4, #0]
   b65a0:	4620      	mov	r0, r4
   b65a2:	689b      	ldr	r3, [r3, #8]
}
   b65a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if( connected() )
   b65a8:	4718      	bx	r3
}
   b65aa:	bd70      	pop	{r4, r5, r6, pc}

000b65ac <_ZL11stringprintPhPKct.constprop.0>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   b65ac:	b513      	push	{r0, r1, r4, lr}
   b65ae:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   b65b0:	4608      	mov	r0, r1
   b65b2:	9101      	str	r1, [sp, #4]
   b65b4:	f005 fb12 	bl	bbbdc <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   b65b8:	f3c0 2307 	ubfx	r3, r0, #8, #8
   b65bc:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   b65be:	7060      	strb	r0, [r4, #1]
   b65c0:	1ca3      	adds	r3, r4, #2
  strncpy((char *)p, s, len);
   b65c2:	b284      	uxth	r4, r0
   b65c4:	9901      	ldr	r1, [sp, #4]
   b65c6:	4622      	mov	r2, r4
   b65c8:	4618      	mov	r0, r3
   b65ca:	f005 fb31 	bl	bbc30 <strncpy>
  return p+len;
}
   b65ce:	4420      	add	r0, r4
   b65d0:	b002      	add	sp, #8
   b65d2:	bd10      	pop	{r4, pc}

000b65d4 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   b65d4:	b530      	push	{r4, r5, lr}
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
   b65d6:	8102      	strh	r2, [r0, #8]
  clientid = "";
   b65d8:	4a0a      	ldr	r2, [pc, #40]	; (b6604 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x30>)
                             const char *pass) {
   b65da:	4d0b      	ldr	r5, [pc, #44]	; (b6608 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x34>)
  username = user;
   b65dc:	e9c0 2303 	strd	r2, r3, [r0, #12]
  password = pass;
   b65e0:	9b03      	ldr	r3, [sp, #12]
   b65e2:	6143      	str	r3, [r0, #20]

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   b65e4:	2300      	movs	r3, #0
  servername = server;
   b65e6:	e9c0 5100 	strd	r5, r1, [r0]
    subscriptions[i] = 0;
   b65ea:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
   b65ee:	e9c0 3331 	strd	r3, r3, [r0, #196]	; 0xc4
  }

  will_topic = 0;
  will_payload = 0;
   b65f2:	e9c0 3306 	strd	r3, r3, [r0, #24]
    subscriptions[i] = 0;
   b65f6:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  will_qos = 0;
   b65fa:	8403      	strh	r3, [r0, #32]
  will_retain = 0;

  packet_id_counter = 0;
   b65fc:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   b6600:	bd30      	pop	{r4, r5, pc}
   b6602:	bf00      	nop
   b6604:	000bc04d 	.word	0x000bc04d
   b6608:	000bc960 	.word	0x000bc960

000b660c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   b660c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6610:	4616      	mov	r6, r2
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   b6612:	6802      	ldr	r2, [r0, #0]
   b6614:	b21b      	sxth	r3, r3
   b6616:	6997      	ldr	r7, [r2, #24]
   b6618:	9301      	str	r3, [sp, #4]
   b661a:	2201      	movs	r2, #1
uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   b661c:	4605      	mov	r5, r0
   b661e:	460c      	mov	r4, r1
  rlen = readPacket(pbuff, 1, timeout);
   b6620:	47b8      	blx	r7
  if (rlen != 1) return 0;
   b6622:	b2c7      	uxtb	r7, r0
   b6624:	2f01      	cmp	r7, #1
   b6626:	9b01      	ldr	r3, [sp, #4]
   b6628:	d003      	beq.n	b6632 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x26>
   b662a:	2000      	movs	r0, #0
    rlen = readPacket(pbuff, value, timeout);
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
}
   b662c:	b003      	add	sp, #12
   b662e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pbuff++;
   b6632:	f104 0801 	add.w	r8, r4, #1
  uint32_t multiplier = 1;
   b6636:	f104 0a05 	add.w	sl, r4, #5
  uint32_t value = 0;
   b663a:	f04f 0900 	mov.w	r9, #0
    rlen = readPacket(pbuff, 1, timeout);
   b663e:	682a      	ldr	r2, [r5, #0]
   b6640:	9301      	str	r3, [sp, #4]
   b6642:	f8d2 b018 	ldr.w	fp, [r2, #24]
   b6646:	4641      	mov	r1, r8
   b6648:	2201      	movs	r2, #1
   b664a:	4628      	mov	r0, r5
   b664c:	47d8      	blx	fp
    if (rlen != 1) return 0;
   b664e:	b2c0      	uxtb	r0, r0
   b6650:	2801      	cmp	r0, #1
   b6652:	d1ea      	bne.n	b662a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   b6654:	f818 2b01 	ldrb.w	r2, [r8], #1
    uint32_t intermediate = encodedByte & 0x7F;
   b6658:	f002 017f 	and.w	r1, r2, #127	; 0x7f
    if (multiplier > (128UL*128UL*128UL)) {
   b665c:	45c2      	cmp	sl, r8
    value += intermediate;
   b665e:	fb01 9907 	mla	r9, r1, r7, r9
    multiplier *= 128;
   b6662:	ea4f 17c7 	mov.w	r7, r7, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   b6666:	d0e0      	beq.n	b662a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
  } while (encodedByte & 0x80);
   b6668:	f012 0f80 	tst.w	r2, #128	; 0x80
   b666c:	9b01      	ldr	r3, [sp, #4]
   b666e:	d1e6      	bne.n	b663e <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x32>
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b6670:	eba8 0404 	sub.w	r4, r8, r4
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b6674:	b2a7      	uxth	r7, r4
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b6676:	1b34      	subs	r4, r6, r4
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b6678:	682a      	ldr	r2, [r5, #0]
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b667a:	3c01      	subs	r4, #1
   b667c:	454c      	cmp	r4, r9
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b667e:	f8d2 a018 	ldr.w	sl, [r2, #24]
   b6682:	bf3d      	ittte	cc
   b6684:	f106 32ff 	addcc.w	r2, r6, #4294967295
   b6688:	1bd2      	subcc	r2, r2, r7
   b668a:	b292      	uxthcc	r2, r2
    rlen = readPacket(pbuff, value, timeout);
   b668c:	fa1f f289 	uxthcs.w	r2, r9
   b6690:	4641      	mov	r1, r8
   b6692:	4628      	mov	r0, r5
   b6694:	47d0      	blx	sl
   b6696:	b2c0      	uxtb	r0, r0
  return ((pbuff - buffer)+rlen);
   b6698:	4438      	add	r0, r7
   b669a:	b280      	uxth	r0, r0
   b669c:	e7c6      	b.n	b662c <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x20>
	...

000b66a0 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   b66a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      ERROR_PRINTLN(F("Dropped a packet"));
   b66a4:	f8df 8030 	ldr.w	r8, [pc, #48]	; b66d8 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x38>
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   b66a8:	4605      	mov	r5, r0
   b66aa:	460c      	mov	r4, r1
   b66ac:	4616      	mov	r6, r2
   b66ae:	461f      	mov	r7, r3
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   b66b0:	463b      	mov	r3, r7
   b66b2:	2296      	movs	r2, #150	; 0x96
   b66b4:	4621      	mov	r1, r4
   b66b6:	4628      	mov	r0, r5
   b66b8:	f7ff ffa8 	bl	b660c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   b66bc:	b148      	cbz	r0, b66d2 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
    if ((buffer[0] >> 4) == waitforpackettype) {
   b66be:	7823      	ldrb	r3, [r4, #0]
   b66c0:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   b66c4:	d005      	beq.n	b66d2 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
      ERROR_PRINTLN(F("Dropped a packet"));
   b66c6:	f002 fa87 	bl	b8bd8 <_Z16_fetch_usbserialv>
   b66ca:	4641      	mov	r1, r8
   b66cc:	f001 ffcd 	bl	b866a <_ZN5Print7printlnEPKc>
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   b66d0:	e7ee      	b.n	b66b0 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x10>
}
   b66d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b66d6:	bf00      	nop
   b66d8:	000bc770 	.word	0x000bc770

000b66dc <_ZN13Adafruit_MQTT18connectErrorStringEa>:

const FLASH_STRING* Adafruit_MQTT::connectErrorString(int8_t code)
{
   switch (code) {
   b66dc:	3102      	adds	r1, #2
   b66de:	b2c9      	uxtb	r1, r1
   b66e0:	2909      	cmp	r1, #9
   b66e2:	bf9a      	itte	ls
   b66e4:	4b02      	ldrls	r3, [pc, #8]	; (b66f0 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x14>)
   b66e6:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
   b66ea:	4802      	ldrhi	r0, [pc, #8]	; (b66f4 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x18>)
      case 7: return F("You have been banned from connecting. Please contact the MQTT server administrator for more details.");
      case -1: return F("Connection failed");
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}
   b66ec:	4770      	bx	lr
   b66ee:	bf00      	nop
   b66f0:	000bc97c 	.word	0x000bc97c
   b66f4:	000bc781 	.word	0x000bc781

000b66f8 <_ZN13Adafruit_MQTT10disconnectEv>:

bool Adafruit_MQTT::disconnect() {
   b66f8:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   b66fa:	23e0      	movs	r3, #224	; 0xe0
   b66fc:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  uint8_t len = disconnectPacket(buffer);
   b6700:	4601      	mov	r1, r0
  packet[1] = 0;
   b6702:	2300      	movs	r3, #0
   b6704:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
  if (! sendPacket(buffer, len))
   b6708:	f851 3b22 	ldr.w	r3, [r1], #34
bool Adafruit_MQTT::disconnect() {
   b670c:	4604      	mov	r4, r0
  if (! sendPacket(buffer, len))
   b670e:	695b      	ldr	r3, [r3, #20]
   b6710:	2202      	movs	r2, #2
   b6712:	4798      	blx	r3
  return disconnectServer();
   b6714:	6823      	ldr	r3, [r4, #0]
   b6716:	4620      	mov	r0, r4
   b6718:	691b      	ldr	r3, [r3, #16]
}
   b671a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return disconnectServer();
   b671e:	4718      	bx	r3

000b6720 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>:
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b6720:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
   b6724:	b530      	push	{r4, r5, lr}
   b6726:	4613      	mov	r3, r2
   b6728:	f100 04d0 	add.w	r4, r0, #208	; 0xd0
    if (subscriptions[i] == sub) {
   b672c:	f853 5b04 	ldr.w	r5, [r3], #4
   b6730:	428d      	cmp	r5, r1
   b6732:	d009      	beq.n	b6748 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x28>
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b6734:	42a3      	cmp	r3, r4
   b6736:	d1f9      	bne.n	b672c <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0xc>
   b6738:	2300      	movs	r3, #0
      if (subscriptions[i] == 0) {
   b673a:	f852 4b04 	ldr.w	r4, [r2], #4
   b673e:	b92c      	cbnz	r4, b674c <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x2c>
        subscriptions[i] = sub;
   b6740:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   b6744:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
      return true;
   b6748:	2001      	movs	r0, #1
   b674a:	e003      	b.n	b6754 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b674c:	3301      	adds	r3, #1
   b674e:	2b05      	cmp	r3, #5
   b6750:	d1f3      	bne.n	b673a <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x1a>
  return false;
   b6752:	2000      	movs	r0, #0
}
   b6754:	bd30      	pop	{r4, r5, pc}

000b6756 <_ZN13Adafruit_MQTT16readSubscriptionEs>:
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   b6756:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   b675a:	f100 0922 	add.w	r9, r0, #34	; 0x22
   b675e:	b28b      	uxth	r3, r1
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   b6760:	b085      	sub	sp, #20
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   b6762:	2296      	movs	r2, #150	; 0x96
   b6764:	4649      	mov	r1, r9
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   b6766:	4605      	mov	r5, r0
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   b6768:	f7ff ff50 	bl	b660c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (!len)
   b676c:	4606      	mov	r6, r0
   b676e:	b1f0      	cbz	r0, b67ae <_ZN13Adafruit_MQTT16readSubscriptionEs+0x58>
  topiclen = buffer[3];
   b6770:	f895 7025 	ldrb.w	r7, [r5, #37]	; 0x25
   b6774:	9700      	str	r7, [sp, #0]
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b6776:	f105 0abc 	add.w	sl, r5, #188	; 0xbc
  topiclen = buffer[3];
   b677a:	f04f 0800 	mov.w	r8, #0
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   b677e:	f105 0b26 	add.w	fp, r5, #38	; 0x26
    if (subscriptions[i]) {
   b6782:	f85a 4b04 	ldr.w	r4, [sl], #4
   b6786:	b16c      	cbz	r4, b67a4 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x4e>
      if (strlen(subscriptions[i]->topic) != topiclen)
   b6788:	6821      	ldr	r1, [r4, #0]
   b678a:	9101      	str	r1, [sp, #4]
   b678c:	4608      	mov	r0, r1
   b678e:	f005 fa25 	bl	bbbdc <strlen>
   b6792:	42b8      	cmp	r0, r7
   b6794:	d106      	bne.n	b67a4 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x4e>
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   b6796:	9901      	ldr	r1, [sp, #4]
   b6798:	463a      	mov	r2, r7
   b679a:	4658      	mov	r0, fp
   b679c:	f005 fa26 	bl	bbbec <strncasecmp>
   b67a0:	2800      	cmp	r0, #0
   b67a2:	d048      	beq.n	b6836 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xe0>
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b67a4:	f108 0801 	add.w	r8, r8, #1
   b67a8:	f1b8 0f05 	cmp.w	r8, #5
   b67ac:	d1e9      	bne.n	b6782 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x2c>
    return NULL;  // No data available, just quit.
   b67ae:	2000      	movs	r0, #0
   b67b0:	e03e      	b.n	b6830 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xda>
    packetid = buffer[topiclen+4];
   b67b2:	19ea      	adds	r2, r5, r7
   b67b4:	f892 0026 	ldrb.w	r0, [r2, #38]	; 0x26
    packetid |= buffer[topiclen+5];
   b67b8:	f892 a027 	ldrb.w	sl, [r2, #39]	; 0x27
   b67bc:	ea4a 2a00 	orr.w	sl, sl, r0, lsl #8
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);
   b67c0:	2214      	movs	r2, #20
   b67c2:	2100      	movs	r1, #0
   b67c4:	1d60      	adds	r0, r4, #5
   b67c6:	f005 f9c1 	bl	bbb4c <memset>
  datalen = len - topiclen - packet_id_len - 4;
   b67ca:	9b00      	ldr	r3, [sp, #0]
   b67cc:	f5c3 447f 	rsb	r4, r3, #65280	; 0xff00
   b67d0:	34fc      	adds	r4, #252	; 0xfc
   b67d2:	4426      	add	r6, r4
   b67d4:	eb05 0888 	add.w	r8, r5, r8, lsl #2
   b67d8:	eba6 060b 	sub.w	r6, r6, fp
   b67dc:	b2b6      	uxth	r6, r6
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   b67de:	2e15      	cmp	r6, #21
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   b67e0:	f8d8 00bc 	ldr.w	r0, [r8, #188]	; 0xbc
   b67e4:	f107 0104 	add.w	r1, r7, #4
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   b67e8:	bf28      	it	cs
   b67ea:	2613      	movcs	r6, #19
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   b67ec:	4459      	add	r1, fp
   b67ee:	4632      	mov	r2, r6
   b67f0:	4449      	add	r1, r9
   b67f2:	3005      	adds	r0, #5
   b67f4:	f005 f990 	bl	bbb18 <memmove>
  subscriptions[i]->datalen = datalen;
   b67f8:	f8d8 30bc 	ldr.w	r3, [r8, #188]	; 0xbc
   b67fc:	835e      	strh	r6, [r3, #26]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
   b67fe:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   b6802:	f003 0306 	and.w	r3, r3, #6
   b6806:	2b02      	cmp	r3, #2
   b6808:	d110      	bne.n	b682c <_ZN13Adafruit_MQTT16readSubscriptionEs+0xd6>
  packet[1] = 2;
   b680a:	f88d 300d 	strb.w	r3, [sp, #13]
  packet[2] = packetid >> 8;
   b680e:	ea4f 231a 	mov.w	r3, sl, lsr #8
   b6812:	f88d 300e 	strb.w	r3, [sp, #14]
    if (!sendPacket(ackpacket, len))
   b6816:	682b      	ldr	r3, [r5, #0]
  packet[3] = packetid;
   b6818:	f88d a00f 	strb.w	sl, [sp, #15]
  packet[0] = MQTT_CTRL_PUBACK << 4;
   b681c:	2240      	movs	r2, #64	; 0x40
   b681e:	f88d 200c 	strb.w	r2, [sp, #12]
    if (!sendPacket(ackpacket, len))
   b6822:	695b      	ldr	r3, [r3, #20]
   b6824:	2204      	movs	r2, #4
   b6826:	a903      	add	r1, sp, #12
   b6828:	4628      	mov	r0, r5
   b682a:	4798      	blx	r3
  return subscriptions[i];
   b682c:	f8d8 00bc 	ldr.w	r0, [r8, #188]	; 0xbc
}
   b6830:	b005      	add	sp, #20
   b6832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((buffer[0] & 0x6) == 0x2) {
   b6836:	f895 b022 	ldrb.w	fp, [r5, #34]	; 0x22
   b683a:	f00b 0b06 	and.w	fp, fp, #6
   b683e:	f1bb 0f02 	cmp.w	fp, #2
   b6842:	d0b6      	beq.n	b67b2 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x5c>
  uint16_t packetid=0;
   b6844:	4682      	mov	sl, r0
  uint8_t packet_id_len = 0;
   b6846:	4683      	mov	fp, r0
   b6848:	e7ba      	b.n	b67c0 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x6a>

000b684a <_ZN13Adafruit_MQTT4pingEh>:
bool Adafruit_MQTT::ping(uint8_t num) {
   b684a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b684e:	4604      	mov	r4, r0
   b6850:	460d      	mov	r5, r1
   b6852:	f04f 0800 	mov.w	r8, #0
    uint8_t len = pingPacket(buffer);
   b6856:	f100 0722 	add.w	r7, r0, #34	; 0x22
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   b685a:	f04f 09c0 	mov.w	r9, #192	; 0xc0
  while (num--) {
   b685e:	b1e5      	cbz	r5, b689a <_ZN13Adafruit_MQTT4pingEh+0x50>
    if (!sendPacket(buffer, len))
   b6860:	6823      	ldr	r3, [r4, #0]
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   b6862:	f884 9022 	strb.w	r9, [r4, #34]	; 0x22
  packet[1] = 0;
   b6866:	f884 8023 	strb.w	r8, [r4, #35]	; 0x23
    if (!sendPacket(buffer, len))
   b686a:	695b      	ldr	r3, [r3, #20]
   b686c:	2202      	movs	r2, #2
   b686e:	4639      	mov	r1, r7
   b6870:	4620      	mov	r0, r4
   b6872:	4798      	blx	r3
   b6874:	4606      	mov	r6, r0
   b6876:	b168      	cbz	r0, b6894 <_ZN13Adafruit_MQTT4pingEh+0x4a>
    len = processPacketsUntil(buffer, MQTT_CTRL_PINGRESP, PING_TIMEOUT_MS);
   b6878:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b687c:	220d      	movs	r2, #13
   b687e:	4639      	mov	r1, r7
   b6880:	4620      	mov	r0, r4
   b6882:	f7ff ff0d 	bl	b66a0 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
    if (buffer[0] == (MQTT_CTRL_PINGRESP << 4))
   b6886:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b688a:	2bd0      	cmp	r3, #208	; 0xd0
   b688c:	d102      	bne.n	b6894 <_ZN13Adafruit_MQTT4pingEh+0x4a>
}
   b688e:	4630      	mov	r0, r6
   b6890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6894:	3d01      	subs	r5, #1
   b6896:	b2ed      	uxtb	r5, r5
   b6898:	e7e1      	b.n	b685e <_ZN13Adafruit_MQTT4pingEh+0x14>
  return false;
   b689a:	462e      	mov	r6, r5
   b689c:	e7f7      	b.n	b688e <_ZN13Adafruit_MQTT4pingEh+0x44>
	...

000b68a0 <_ZN13Adafruit_MQTT13connectPacketEPh>:
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   b68a0:	b538      	push	{r3, r4, r5, lr}
   b68a2:	4605      	mov	r5, r0
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   b68a4:	4608      	mov	r0, r1
   b68a6:	2310      	movs	r3, #16
   b68a8:	f800 3b02 	strb.w	r3, [r0], #2
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   b68ac:	460c      	mov	r4, r1
    p = stringprint(p, "MQTT");
   b68ae:	4929      	ldr	r1, [pc, #164]	; (b6954 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   b68b0:	f7ff fe7c 	bl	b65ac <_ZL11stringprintPhPKct.constprop.0>
  p[0] = MQTT_PROTOCOL_LEVEL;
   b68b4:	2304      	movs	r3, #4
   b68b6:	7003      	strb	r3, [r0, #0]
  p[0] = MQTT_CONN_CLEANSESSION;
   b68b8:	2302      	movs	r3, #2
   b68ba:	7043      	strb	r3, [r0, #1]
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   b68bc:	69ab      	ldr	r3, [r5, #24]
   b68be:	b18b      	cbz	r3, b68e4 <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
   b68c0:	781b      	ldrb	r3, [r3, #0]
   b68c2:	b17b      	cbz	r3, b68e4 <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
    p[0] |= MQTT_CONN_WILLFLAG;
   b68c4:	2306      	movs	r3, #6
   b68c6:	7043      	strb	r3, [r0, #1]
    if(will_qos == 1)
   b68c8:	f895 3020 	ldrb.w	r3, [r5, #32]
   b68cc:	2b01      	cmp	r3, #1
   b68ce:	d139      	bne.n	b6944 <_ZN13Adafruit_MQTT13connectPacketEPh+0xa4>
      p[0] |= MQTT_CONN_WILLQOS_1;
   b68d0:	230e      	movs	r3, #14
      p[0] |= MQTT_CONN_WILLQOS_2;
   b68d2:	7043      	strb	r3, [r0, #1]
    if(will_retain == 1)
   b68d4:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   b68d8:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   b68da:	bf02      	ittt	eq
   b68dc:	7843      	ldrbeq	r3, [r0, #1]
   b68de:	f043 0320 	orreq.w	r3, r3, #32
   b68e2:	7043      	strbeq	r3, [r0, #1]
  if (pgm_read_byte(username) != 0)
   b68e4:	692b      	ldr	r3, [r5, #16]
   b68e6:	781b      	ldrb	r3, [r3, #0]
   b68e8:	b11b      	cbz	r3, b68f2 <_ZN13Adafruit_MQTT13connectPacketEPh+0x52>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   b68ea:	7843      	ldrb	r3, [r0, #1]
   b68ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
   b68f0:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   b68f2:	696b      	ldr	r3, [r5, #20]
   b68f4:	781b      	ldrb	r3, [r3, #0]
   b68f6:	b11b      	cbz	r3, b6900 <_ZN13Adafruit_MQTT13connectPacketEPh+0x60>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   b68f8:	7843      	ldrb	r3, [r0, #1]
   b68fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   b68fe:	7043      	strb	r3, [r0, #1]
  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   b6900:	2301      	movs	r3, #1
   b6902:	7083      	strb	r3, [r0, #2]
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   b6904:	232c      	movs	r3, #44	; 0x2c
   b6906:	70c3      	strb	r3, [r0, #3]
    if (pgm_read_byte(clientid) != 0) {
   b6908:	68e9      	ldr	r1, [r5, #12]
   b690a:	780b      	ldrb	r3, [r1, #0]
   b690c:	b1f3      	cbz	r3, b694c <_ZN13Adafruit_MQTT13connectPacketEPh+0xac>
      p = stringprint(p, clientid);
   b690e:	3004      	adds	r0, #4
   b6910:	f7ff fe4c 	bl	b65ac <_ZL11stringprintPhPKct.constprop.0>
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   b6914:	69a9      	ldr	r1, [r5, #24]
   b6916:	b131      	cbz	r1, b6926 <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
   b6918:	780b      	ldrb	r3, [r1, #0]
   b691a:	b123      	cbz	r3, b6926 <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
    p = stringprint(p, will_topic);
   b691c:	f7ff fe46 	bl	b65ac <_ZL11stringprintPhPKct.constprop.0>
    p = stringprint(p, will_payload);
   b6920:	69e9      	ldr	r1, [r5, #28]
   b6922:	f7ff fe43 	bl	b65ac <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(username) != 0) {
   b6926:	6929      	ldr	r1, [r5, #16]
   b6928:	780b      	ldrb	r3, [r1, #0]
   b692a:	b10b      	cbz	r3, b6930 <_ZN13Adafruit_MQTT13connectPacketEPh+0x90>
    p = stringprint(p, username);
   b692c:	f7ff fe3e 	bl	b65ac <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(password) != 0) {
   b6930:	6969      	ldr	r1, [r5, #20]
   b6932:	780b      	ldrb	r3, [r1, #0]
   b6934:	b10b      	cbz	r3, b693a <_ZN13Adafruit_MQTT13connectPacketEPh+0x9a>
    p = stringprint(p, password);
   b6936:	f7ff fe39 	bl	b65ac <_ZL11stringprintPhPKct.constprop.0>
  len = p - packet;
   b693a:	1b00      	subs	r0, r0, r4
  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   b693c:	b2c0      	uxtb	r0, r0
   b693e:	1e83      	subs	r3, r0, #2
   b6940:	7063      	strb	r3, [r4, #1]
}
   b6942:	bd38      	pop	{r3, r4, r5, pc}
    else if(will_qos == 2)
   b6944:	2b02      	cmp	r3, #2
   b6946:	d1c5      	bne.n	b68d4 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_2;
   b6948:	231e      	movs	r3, #30
   b694a:	e7c2      	b.n	b68d2 <_ZN13Adafruit_MQTT13connectPacketEPh+0x32>
      p[0] = 0x0;
   b694c:	7103      	strb	r3, [r0, #4]
      p[0] = 0x0;
   b694e:	7143      	strb	r3, [r0, #5]
      p++;
   b6950:	3006      	adds	r0, #6
   b6952:	e7df      	b.n	b6914 <_ZN13Adafruit_MQTT13connectPacketEPh+0x74>
   b6954:	000bc78f 	.word	0x000bc78f

000b6958 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b6958:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b695c:	4605      	mov	r5, r0
  len += strlen(topic); // topic length
   b695e:	4610      	mov	r0, r2
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b6960:	460e      	mov	r6, r1
   b6962:	4698      	mov	r8, r3
  len += strlen(topic); // topic length
   b6964:	9201      	str	r2, [sp, #4]
   b6966:	f005 f939 	bl	bbbdc <strlen>
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b696a:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b696e:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
  if(qos > 0) { 
   b6972:	9901      	ldr	r1, [sp, #4]
  len += strlen(topic); // topic length
   b6974:	b284      	uxth	r4, r0
  if(qos > 0) { 
   b6976:	f1b9 0f00 	cmp.w	r9, #0
   b697a:	d135      	bne.n	b69e8 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x90>
  len += strlen(topic); // topic length
   b697c:	3402      	adds	r4, #2
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b697e:	ea4f 0349 	mov.w	r3, r9, lsl #1
   b6982:	4630      	mov	r0, r6
    len += 2; // qos packet id
   b6984:	b2a4      	uxth	r4, r4
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b6986:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  len += bLen; // payload length
   b698a:	443c      	add	r4, r7
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b698c:	f800 3b01 	strb.w	r3, [r0], #1
  len += bLen; // payload length
   b6990:	b2a4      	uxth	r4, r4
    uint8_t encodedByte = len % 128;
   b6992:	4622      	mov	r2, r4
   b6994:	f004 037f 	and.w	r3, r4, #127	; 0x7f
    if ( len > 0 ) {
   b6998:	2a7f      	cmp	r2, #127	; 0x7f
      encodedByte |= 0x80;
   b699a:	bf88      	it	hi
   b699c:	f043 0380 	orrhi.w	r3, r3, #128	; 0x80
  } while ( len > 0 );
   b69a0:	2a7f      	cmp	r2, #127	; 0x7f
    p[0] = encodedByte;
   b69a2:	f800 3b01 	strb.w	r3, [r0], #1
    len /= 128;
   b69a6:	ea4f 14d4 	mov.w	r4, r4, lsr #7
  } while ( len > 0 );
   b69aa:	d8f2      	bhi.n	b6992 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3a>
  p = stringprint(p, topic);
   b69ac:	f7ff fdfe 	bl	b65ac <_ZL11stringprintPhPKct.constprop.0>
   b69b0:	4603      	mov	r3, r0
  if(qos > 0) {
   b69b2:	f1b9 0f00 	cmp.w	r9, #0
   b69b6:	d00c      	beq.n	b69d2 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x7a>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   b69b8:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b69bc:	0a12      	lsrs	r2, r2, #8
   b69be:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   b69c0:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b69c4:	7042      	strb	r2, [r0, #1]
    packet_id_counter++;
   b69c6:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b69ca:	3201      	adds	r2, #1
    p+=2;
   b69cc:	3302      	adds	r3, #2
    packet_id_counter++;
   b69ce:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  memmove(p, data, bLen);
   b69d2:	463a      	mov	r2, r7
   b69d4:	4641      	mov	r1, r8
   b69d6:	4618      	mov	r0, r3
   b69d8:	f005 f89e 	bl	bbb18 <memmove>
  p+= bLen;
   b69dc:	4438      	add	r0, r7
  len = p - packet;
   b69de:	1b80      	subs	r0, r0, r6
}
   b69e0:	b280      	uxth	r0, r0
   b69e2:	b003      	add	sp, #12
   b69e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    len += 2; // qos packet id
   b69e8:	3404      	adds	r4, #4
   b69ea:	e7c8      	b.n	b697e <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>

000b69ec <_ZN13Adafruit_MQTT7publishEPKcPhth>:
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   b69ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b69ee:	f89d 6018 	ldrb.w	r6, [sp, #24]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b69f2:	f100 0522 	add.w	r5, r0, #34	; 0x22
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   b69f6:	4604      	mov	r4, r0
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b69f8:	e9cd 3600 	strd	r3, r6, [sp]
   b69fc:	4613      	mov	r3, r2
   b69fe:	460a      	mov	r2, r1
   b6a00:	4629      	mov	r1, r5
   b6a02:	f7ff ffa9 	bl	b6958 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   b6a06:	6823      	ldr	r3, [r4, #0]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b6a08:	4602      	mov	r2, r0
  if (!sendPacket(buffer, len))
   b6a0a:	695b      	ldr	r3, [r3, #20]
   b6a0c:	4629      	mov	r1, r5
   b6a0e:	4620      	mov	r0, r4
   b6a10:	4798      	blx	r3
   b6a12:	b910      	cbnz	r0, b6a1a <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2e>
    return false;
   b6a14:	2000      	movs	r0, #0
}
   b6a16:	b002      	add	sp, #8
   b6a18:	bd70      	pop	{r4, r5, r6, pc}
  if (qos > 0) {
   b6a1a:	2e00      	cmp	r6, #0
   b6a1c:	d0fb      	beq.n	b6a16 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   b6a1e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b6a22:	2296      	movs	r2, #150	; 0x96
   b6a24:	4629      	mov	r1, r5
   b6a26:	4620      	mov	r0, r4
   b6a28:	f7ff fdf0 	bl	b660c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    if (len != 4)
   b6a2c:	2804      	cmp	r0, #4
   b6a2e:	d1f1      	bne.n	b6a14 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   b6a30:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b6a34:	091b      	lsrs	r3, r3, #4
   b6a36:	2b04      	cmp	r3, #4
   b6a38:	d1ec      	bne.n	b6a14 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    packnum |= buffer[3];
   b6a3a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    if (packnum != packet_id_counter)
   b6a3c:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   b6a40:	ba5b      	rev16	r3, r3
    packnum++;
   b6a42:	3301      	adds	r3, #1
    if (packnum != packet_id_counter)
   b6a44:	b29b      	uxth	r3, r3
   b6a46:	1ac3      	subs	r3, r0, r3
   b6a48:	4258      	negs	r0, r3
   b6a4a:	4158      	adcs	r0, r3
   b6a4c:	e7e3      	b.n	b6a16 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>

000b6a4e <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   b6a4e:	b530      	push	{r4, r5, lr}
   b6a50:	b085      	sub	sp, #20
   b6a52:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   b6a54:	4610      	mov	r0, r2
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   b6a56:	461d      	mov	r5, r3
   b6a58:	9103      	str	r1, [sp, #12]
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   b6a5a:	9202      	str	r2, [sp, #8]
   b6a5c:	f005 f8be 	bl	bbbdc <strlen>
   b6a60:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   b6a64:	b283      	uxth	r3, r0
   b6a66:	9500      	str	r5, [sp, #0]
   b6a68:	4620      	mov	r0, r4
   b6a6a:	f7ff ffbf 	bl	b69ec <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   b6a6e:	b005      	add	sp, #20
   b6a70:	bd30      	pop	{r4, r5, pc}

000b6a72 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
                                       uint8_t qos) {
   b6a72:	b538      	push	{r3, r4, r5, lr}
   b6a74:	461d      	mov	r5, r3
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   b6a76:	2382      	movs	r3, #130	; 0x82
   b6a78:	700b      	strb	r3, [r1, #0]
  p[0] = (packet_id_counter >> 8) & 0xFF;
   b6a7a:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   b6a7e:	0a1b      	lsrs	r3, r3, #8
   b6a80:	708b      	strb	r3, [r1, #2]
  p[1] = packet_id_counter & 0xFF;
   b6a82:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   b6a86:	70cb      	strb	r3, [r1, #3]
  packet_id_counter++;
   b6a88:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
                                       uint8_t qos) {
   b6a8c:	460c      	mov	r4, r1
  packet_id_counter++;
   b6a8e:	3301      	adds	r3, #1
   b6a90:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8
  p = stringprint(p, topic);
   b6a94:	4611      	mov	r1, r2
   b6a96:	1d20      	adds	r0, r4, #4
   b6a98:	f7ff fd88 	bl	b65ac <_ZL11stringprintPhPKct.constprop.0>
  p[0] = qos;
   b6a9c:	f800 5b01 	strb.w	r5, [r0], #1
  len = p - packet;
   b6aa0:	1b00      	subs	r0, r0, r4
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   b6aa2:	b2c0      	uxtb	r0, r0
   b6aa4:	1e83      	subs	r3, r0, #2
   b6aa6:	7063      	strb	r3, [r4, #1]
}
   b6aa8:	bd38      	pop	{r3, r4, r5, pc}

000b6aaa <_ZN13Adafruit_MQTT7connectEv>:
int8_t Adafruit_MQTT::connect() {
   b6aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!connectServer())
   b6aae:	6803      	ldr	r3, [r0, #0]
   b6ab0:	68db      	ldr	r3, [r3, #12]
int8_t Adafruit_MQTT::connect() {
   b6ab2:	4604      	mov	r4, r0
  if (!connectServer())
   b6ab4:	4798      	blx	r3
   b6ab6:	2800      	cmp	r0, #0
   b6ab8:	d04b      	beq.n	b6b52 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  uint8_t len = connectPacket(buffer);
   b6aba:	f104 0522 	add.w	r5, r4, #34	; 0x22
   b6abe:	4629      	mov	r1, r5
   b6ac0:	4620      	mov	r0, r4
   b6ac2:	f7ff feed 	bl	b68a0 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   b6ac6:	6823      	ldr	r3, [r4, #0]
   b6ac8:	b282      	uxth	r2, r0
   b6aca:	695b      	ldr	r3, [r3, #20]
   b6acc:	4629      	mov	r1, r5
   b6ace:	4620      	mov	r0, r4
   b6ad0:	4798      	blx	r3
   b6ad2:	2800      	cmp	r0, #0
   b6ad4:	d03d      	beq.n	b6b52 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   b6ad6:	f241 7370 	movw	r3, #6000	; 0x1770
   b6ada:	2296      	movs	r2, #150	; 0x96
   b6adc:	4629      	mov	r1, r5
   b6ade:	4620      	mov	r0, r4
   b6ae0:	f7ff fd94 	bl	b660c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   b6ae4:	b2c0      	uxtb	r0, r0
   b6ae6:	2804      	cmp	r0, #4
   b6ae8:	d133      	bne.n	b6b52 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   b6aea:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b6aec:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   b6af0:	d12f      	bne.n	b6b52 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if (buffer[3] != 0)
   b6af2:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   b6af6:	b110      	cbz	r0, b6afe <_ZN13Adafruit_MQTT7connectEv+0x54>
    return buffer[3];
   b6af8:	b240      	sxtb	r0, r0
}
   b6afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6afe:	f104 07bc 	add.w	r7, r4, #188	; 0xbc
   b6b02:	f104 08d0 	add.w	r8, r4, #208	; 0xd0
    if (subscriptions[i] == 0) continue;
   b6b06:	f857 3b04 	ldr.w	r3, [r7], #4
   b6b0a:	b1f3      	cbz	r3, b6b4a <_ZN13Adafruit_MQTT7connectEv+0xa0>
   b6b0c:	2603      	movs	r6, #3
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   b6b0e:	f857 2c04 	ldr.w	r2, [r7, #-4]
   b6b12:	4629      	mov	r1, r5
   b6b14:	7913      	ldrb	r3, [r2, #4]
   b6b16:	6812      	ldr	r2, [r2, #0]
   b6b18:	4620      	mov	r0, r4
   b6b1a:	f7ff ffaa 	bl	b6a72 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   b6b1e:	6823      	ldr	r3, [r4, #0]
   b6b20:	b282      	uxth	r2, r0
   b6b22:	695b      	ldr	r3, [r3, #20]
   b6b24:	4629      	mov	r1, r5
   b6b26:	4620      	mov	r0, r4
   b6b28:	4798      	blx	r3
   b6b2a:	b190      	cbz	r0, b6b52 <_ZN13Adafruit_MQTT7connectEv+0xa8>
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   b6b2c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b6b30:	2209      	movs	r2, #9
   b6b32:	4629      	mov	r1, r5
   b6b34:	4620      	mov	r0, r4
   b6b36:	f7ff fdb3 	bl	b66a0 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   b6b3a:	b930      	cbnz	r0, b6b4a <_ZN13Adafruit_MQTT7connectEv+0xa0>
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   b6b3c:	3e01      	subs	r6, #1
   b6b3e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   b6b42:	d1e4      	bne.n	b6b0e <_ZN13Adafruit_MQTT7connectEv+0x64>
    if (! success) return -2; // failed to sub for some reason
   b6b44:	f06f 0001 	mvn.w	r0, #1
   b6b48:	e7d7      	b.n	b6afa <_ZN13Adafruit_MQTT7connectEv+0x50>
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   b6b4a:	45b8      	cmp	r8, r7
   b6b4c:	d1db      	bne.n	b6b06 <_ZN13Adafruit_MQTT7connectEv+0x5c>
  return 0;
   b6b4e:	2000      	movs	r0, #0
   b6b50:	e7d3      	b.n	b6afa <_ZN13Adafruit_MQTT7connectEv+0x50>
    return -1;
   b6b52:	f04f 30ff 	mov.w	r0, #4294967295
   b6b56:	e7d0      	b.n	b6afa <_ZN13Adafruit_MQTT7connectEv+0x50>

000b6b58 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   b6b58:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   b6b5a:	e9c0 1200 	strd	r1, r2, [r0]
  qos = q;
   b6b5e:	7203      	strb	r3, [r0, #8]
}
   b6b60:	bd10      	pop	{r4, pc}

000b6b62 <_ZN21Adafruit_MQTT_Publish7publishEi>:

bool Adafruit_MQTT_Publish::publish(int i) {
   b6b62:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6b64:	4604      	mov	r4, r0
  char payload[12];
  ltoa(i, payload, 10);
   b6b66:	220a      	movs	r2, #10
bool Adafruit_MQTT_Publish::publish(int i) {
   b6b68:	4608      	mov	r0, r1
  ltoa(i, payload, 10);
   b6b6a:	a901      	add	r1, sp, #4
   b6b6c:	f001 fc0e 	bl	b838c <ltoa>
  return mqtt->publish(topic, payload, qos);
   b6b70:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6b74:	7a23      	ldrb	r3, [r4, #8]
   b6b76:	aa01      	add	r2, sp, #4
   b6b78:	f7ff ff69 	bl	b6a4e <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   b6b7c:	b004      	add	sp, #16
   b6b7e:	bd10      	pop	{r4, pc}

000b6b80 <_ZN21Adafruit_MQTT_Publish7publishEdh>:
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   b6b80:	b5d0      	push	{r4, r6, r7, lr}
   b6b82:	ec57 6b10 	vmov	r6, r7, d0
   b6b86:	b090      	sub	sp, #64	; 0x40
   b6b88:	4604      	mov	r4, r0
   b6b8a:	460b      	mov	r3, r1
  sprintf(fmt, "%%%d.%df", width, prec);
   b6b8c:	2200      	movs	r2, #0
   b6b8e:	4909      	ldr	r1, [pc, #36]	; (b6bb4 <_ZN21Adafruit_MQTT_Publish7publishEdh+0x34>)
   b6b90:	4668      	mov	r0, sp
   b6b92:	f001 fa2d 	bl	b7ff0 <sprintf>
  sprintf(sout, fmt, val);
   b6b96:	4632      	mov	r2, r6
   b6b98:	463b      	mov	r3, r7
   b6b9a:	4669      	mov	r1, sp
   b6b9c:	a805      	add	r0, sp, #20
   b6b9e:	f001 fa27 	bl	b7ff0 <sprintf>
  char payload[41];  // Need to technically hold float max, 39 digits and minus sign.
  dtostrf(f, 0, precision, payload);
  return mqtt->publish(topic, payload, qos);
   b6ba2:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6ba6:	7a23      	ldrb	r3, [r4, #8]
   b6ba8:	aa05      	add	r2, sp, #20
   b6baa:	f7ff ff50 	bl	b6a4e <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   b6bae:	b010      	add	sp, #64	; 0x40
   b6bb0:	bdd0      	pop	{r4, r6, r7, pc}
   b6bb2:	bf00      	nop
   b6bb4:	000bc794 	.word	0x000bc794

000b6bb8 <_ZN21Adafruit_MQTT_Publish7publishEPKc>:

bool Adafruit_MQTT_Publish::publish(const char *payload) {
  return mqtt->publish(topic, payload, qos);
   b6bb8:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_MQTT_Publish::publish(const char *payload) {
   b6bba:	460a      	mov	r2, r1
  return mqtt->publish(topic, payload, qos);
   b6bbc:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6bc0:	f7ff bf45 	b.w	b6a4e <_ZN13Adafruit_MQTT7publishEPKcS1_h>

000b6bc4 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   b6bc4:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   b6bc6:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   b6bc8:	2300      	movs	r3, #0
  callback_uint32t = 0;
  callback_buffer = 0;
  callback_double = 0;
   b6bca:	e9c0 3308 	strd	r3, r3, [r0, #32]
  callback_io = 0;
   b6bce:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  mqtt = mqttserver;
   b6bd2:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   b6bd4:	6002      	str	r2, [r0, #0]
  datalen = 0;
   b6bd6:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   b6bd8:	61c3      	str	r3, [r0, #28]
  io_feed = 0;
   b6bda:	6303      	str	r3, [r0, #48]	; 0x30
}
   b6bdc:	bd10      	pop	{r4, pc}

000b6bde <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b6bde:	b510      	push	{r4, lr}
   b6be0:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b6be2:	3024      	adds	r0, #36	; 0x24
   b6be4:	f000 fa58 	bl	b7098 <_ZN8FatCache4syncEv>
   b6be8:	b128      	cbz	r0, b6bf6 <_ZN9FatVolume9cacheSyncEv+0x18>
   b6bea:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b6bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b6bf2:	f000 ba51 	b.w	b7098 <_ZN8FatCache4syncEv>
  }
   b6bf6:	bd10      	pop	{r4, pc}

000b6bf8 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b6bf8:	b538      	push	{r3, r4, r5, lr}
   b6bfa:	4604      	mov	r4, r0
   b6bfc:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b6bfe:	2224      	movs	r2, #36	; 0x24
   b6c00:	2100      	movs	r1, #0
   b6c02:	f004 ffa3 	bl	bbb4c <memset>

  m_vol = vol;
   b6c06:	60a5      	str	r5, [r4, #8]
    return m_fatType;
   b6c08:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b6c0a:	2b10      	cmp	r3, #16
   b6c0c:	d003      	beq.n	b6c16 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b6c0e:	2b20      	cmp	r3, #32
   b6c10:	d006      	beq.n	b6c20 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b6c12:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b6c14:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b6c16:	2320      	movs	r3, #32
  m_flags = F_READ;
   b6c18:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b6c1a:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6c1c:	70a0      	strb	r0, [r4, #2]
  return true;
   b6c1e:	e7f9      	b.n	b6c14 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b6c20:	2340      	movs	r3, #64	; 0x40
   b6c22:	e7f9      	b.n	b6c18 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b6c24 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b6c24:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6c26:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b6c28:	f043 0304 	orr.w	r3, r3, #4
   b6c2c:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6c2e:	f100 0210 	add.w	r2, r0, #16
   b6c32:	6880      	ldr	r0, [r0, #8]
   b6c34:	f000 bae6 	b.w	b7204 <_ZN9FatVolume15allocateClusterEmPm>

000b6c38 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b6c38:	b510      	push	{r4, lr}
   b6c3a:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b6c3c:	6880      	ldr	r0, [r0, #8]
   b6c3e:	460a      	mov	r2, r1
   b6c40:	3024      	adds	r0, #36	; 0x24
   b6c42:	69a1      	ldr	r1, [r4, #24]
   b6c44:	f000 fa50 	bl	b70e8 <_ZN8FatCache4readEmh>
  if (!pc) {
   b6c48:	b120      	cbz	r0, b6c54 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b6c4a:	88a3      	ldrh	r3, [r4, #4]
   b6c4c:	f003 030f 	and.w	r3, r3, #15
   b6c50:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b6c54:	bd10      	pop	{r4, pc}

000b6c56 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b6c56:	7803      	ldrb	r3, [r0, #0]
   b6c58:	b90b      	cbnz	r3, b6c5e <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b6c5a:	f7ff bfcd 	b.w	b6bf8 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b6c5e:	2000      	movs	r0, #0
   b6c60:	4770      	bx	lr

000b6c62 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b6c62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isLFN() const {
    return m_lfnOrd;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {
    return m_attr;
   b6c66:	7803      	ldrb	r3, [r0, #0]
   b6c68:	4604      	mov	r4, r0
   b6c6a:	4688      	mov	r8, r1
   b6c6c:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b6c6e:	2b00      	cmp	r3, #0
   b6c70:	d05d      	beq.n	b6d2e <_ZN7FatFile4readEPvj+0xcc>
   b6c72:	7882      	ldrb	r2, [r0, #2]
   b6c74:	07d1      	lsls	r1, r2, #31
   b6c76:	d55a      	bpl.n	b6d2e <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b6c78:	071a      	lsls	r2, r3, #28
   b6c7a:	d52d      	bpl.n	b6cd8 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b6c7c:	69c3      	ldr	r3, [r0, #28]
   b6c7e:	6942      	ldr	r2, [r0, #20]
   b6c80:	1a9b      	subs	r3, r3, r2
   b6c82:	429d      	cmp	r5, r3
   b6c84:	bf28      	it	cs
   b6c86:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b6c88:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b6c8a:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6c8e:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b6c92:	2e00      	cmp	r6, #0
   b6c94:	f000 808f 	beq.w	b6db6 <_ZN7FatFile4readEPvj+0x154>
  bool isRoot32() const {
    return m_attr & FILE_ATTR_ROOT32;
  }
  /** \return True if this is the FAT12 of FAT16 root directory. */
  bool isRootFixed() const {
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b6c98:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b6c9a:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6c9c:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b6c9e:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b6ca0:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6ca4:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b6ca8:	d51f      	bpl.n	b6cea <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6caa:	6a00      	ldr	r0, [r0, #32]
   b6cac:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b6cae:	68a0      	ldr	r0, [r4, #8]
   b6cb0:	f1ba 0f00 	cmp.w	sl, #0
   b6cb4:	d142      	bne.n	b6d3c <_ZN7FatFile4readEPvj+0xda>
   b6cb6:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6cba:	d33f      	bcc.n	b6d3c <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b6cbc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6cbe:	4299      	cmp	r1, r3
   b6cc0:	d03c      	beq.n	b6d3c <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b6cc2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b6cc6:	d252      	bcs.n	b6d6e <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b6cc8:	6800      	ldr	r0, [r0, #0]
   b6cca:	4642      	mov	r2, r8
   b6ccc:	f000 fcd2 	bl	b7674 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b6cd0:	b368      	cbz	r0, b6d2e <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b6cd2:	f44f 7700 	mov.w	r7, #512	; 0x200
   b6cd6:	e044      	b.n	b6d62 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b6cd8:	069b      	lsls	r3, r3, #26
   b6cda:	d5d5      	bpl.n	b6c88 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b6cdc:	6883      	ldr	r3, [r0, #8]
   b6cde:	891a      	ldrh	r2, [r3, #8]
   b6ce0:	6943      	ldr	r3, [r0, #20]
   b6ce2:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b6ce6:	b29b      	uxth	r3, r3
   b6ce8:	e7cb      	b.n	b6c82 <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b6cea:	f890 9005 	ldrb.w	r9, [r0, #5]
   b6cee:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b6cf2:	f1ba 0f00 	cmp.w	sl, #0
   b6cf6:	d108      	bne.n	b6d0a <_ZN7FatFile4readEPvj+0xa8>
   b6cf8:	f1b9 0f00 	cmp.w	r9, #0
   b6cfc:	d105      	bne.n	b6d0a <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b6cfe:	b95b      	cbnz	r3, b6d18 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6d00:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b6d02:	bf4c      	ite	mi
   b6d04:	6a03      	ldrmi	r3, [r0, #32]
   b6d06:	6a23      	ldrpl	r3, [r4, #32]
   b6d08:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b6d0a:	6921      	ldr	r1, [r4, #16]
   b6d0c:	68a0      	ldr	r0, [r4, #8]
   b6d0e:	f000 fa0e 	bl	b712e <_ZNK9FatVolume17clusterFirstBlockEm>
   b6d12:	eb09 0100 	add.w	r1, r9, r0
   b6d16:	e7ca      	b.n	b6cae <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6d18:	6921      	ldr	r1, [r4, #16]
   b6d1a:	465a      	mov	r2, fp
   b6d1c:	f000 fa0d 	bl	b713a <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b6d20:	2800      	cmp	r0, #0
   b6d22:	db04      	blt.n	b6d2e <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b6d24:	d1f1      	bne.n	b6d0a <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b6d26:	7823      	ldrb	r3, [r4, #0]
   b6d28:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6d2c:	d143      	bne.n	b6db6 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b6d2e:	7863      	ldrb	r3, [r4, #1]
   b6d30:	f043 0302 	orr.w	r3, r3, #2
   b6d34:	7063      	strb	r3, [r4, #1]
  return -1;
   b6d36:	f04f 30ff 	mov.w	r0, #4294967295
   b6d3a:	e03d      	b.n	b6db8 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b6d3c:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b6d40:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b6d42:	f04f 0200 	mov.w	r2, #0
   b6d46:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b6d4a:	bf28      	it	cs
   b6d4c:	4637      	movcs	r7, r6
   b6d4e:	f000 f9cb 	bl	b70e8 <_ZN8FatCache4readEmh>
      if (!pc) {
   b6d52:	2800      	cmp	r0, #0
   b6d54:	d0eb      	beq.n	b6d2e <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b6d56:	eb00 010a 	add.w	r1, r0, sl
   b6d5a:	463a      	mov	r2, r7
   b6d5c:	4640      	mov	r0, r8
   b6d5e:	f004 fecd 	bl	bbafc <memcpy>
    m_curPosition += n;
   b6d62:	6963      	ldr	r3, [r4, #20]
   b6d64:	443b      	add	r3, r7
    dst += n;
   b6d66:	44b8      	add	r8, r7
    m_curPosition += n;
   b6d68:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b6d6a:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b6d6c:	e791      	b.n	b6c92 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b6d6e:	7822      	ldrb	r2, [r4, #0]
   b6d70:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b6d72:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b6d76:	d406      	bmi.n	b6d86 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b6d78:	7902      	ldrb	r2, [r0, #4]
   b6d7a:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b6d7e:	b2d2      	uxtb	r2, r2
   b6d80:	4592      	cmp	sl, r2
   b6d82:	bf28      	it	cs
   b6d84:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6d86:	4299      	cmp	r1, r3
      n = 512*nb;
   b6d88:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6d8c:	d208      	bcs.n	b6da0 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b6d8e:	68a0      	ldr	r0, [r4, #8]
   b6d90:	4653      	mov	r3, sl
   b6d92:	6800      	ldr	r0, [r0, #0]
   b6d94:	4642      	mov	r2, r8
   b6d96:	f000 fcb5 	bl	b7704 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b6d9a:	2800      	cmp	r0, #0
   b6d9c:	d1e1      	bne.n	b6d62 <_ZN7FatFile4readEPvj+0x100>
   b6d9e:	e7c6      	b.n	b6d2e <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6da0:	4453      	add	r3, sl
   b6da2:	428b      	cmp	r3, r1
   b6da4:	d9f3      	bls.n	b6d8e <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b6da6:	3024      	adds	r0, #36	; 0x24
   b6da8:	9101      	str	r1, [sp, #4]
   b6daa:	f000 f975 	bl	b7098 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b6dae:	9901      	ldr	r1, [sp, #4]
   b6db0:	2800      	cmp	r0, #0
   b6db2:	d1ec      	bne.n	b6d8e <_ZN7FatFile4readEPvj+0x12c>
   b6db4:	e7bb      	b.n	b6d2e <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b6db6:	1ba8      	subs	r0, r5, r6
}
   b6db8:	b003      	add	sp, #12
   b6dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6dbe <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b6dbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b6dc0:	2201      	movs	r2, #1
   b6dc2:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b6dc6:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b6dca:	4604      	mov	r4, r0
   b6dcc:	f7ff ff49 	bl	b6c62 <_ZN7FatFile4readEPvj>
   b6dd0:	2801      	cmp	r0, #1
   b6dd2:	bf0a      	itet	eq
   b6dd4:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b6dd8:	f04f 30ff 	movne.w	r0, #4294967295
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b6ddc:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b6de0:	b002      	add	sp, #8
   b6de2:	bd70      	pop	{r4, r5, r6, pc}

000b6de4 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b6de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b6de8:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b6dea:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b6dec:	4604      	mov	r4, r0
   b6dee:	460d      	mov	r5, r1
  if (!isOpen()) {
   b6df0:	b162      	cbz	r2, b6e0c <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b6df2:	6940      	ldr	r0, [r0, #20]
   b6df4:	4288      	cmp	r0, r1
   b6df6:	d002      	beq.n	b6dfe <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b6df8:	b919      	cbnz	r1, b6e02 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b6dfa:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b6dfc:	6165      	str	r5, [r4, #20]
    return true;
   b6dfe:	2001      	movs	r0, #1
   b6e00:	e006      	b.n	b6e10 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b6e02:	0716      	lsls	r6, r2, #28
   b6e04:	d506      	bpl.n	b6e14 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b6e06:	69e3      	ldr	r3, [r4, #28]
   b6e08:	428b      	cmp	r3, r1
   b6e0a:	d20b      	bcs.n	b6e24 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b6e0c:	6127      	str	r7, [r4, #16]
  return false;
   b6e0e:	2000      	movs	r0, #0
}
   b6e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b6e14:	0691      	lsls	r1, r2, #26
   b6e16:	d505      	bpl.n	b6e24 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b6e18:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b6e1a:	891b      	ldrh	r3, [r3, #8]
   b6e1c:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b6e20:	d9ec      	bls.n	b6dfc <_ZN7FatFile7seekSetEm+0x18>
   b6e22:	e7f3      	b.n	b6e0c <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b6e24:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b6e28:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b6e2c:	1e43      	subs	r3, r0, #1
   b6e2e:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b6e32:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b6e34:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b6e36:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b6e38:	42b3      	cmp	r3, r6
   b6e3a:	d800      	bhi.n	b6e3e <_ZN7FatFile7seekSetEm+0x5a>
   b6e3c:	b998      	cbnz	r0, b6e66 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6e3e:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b6e40:	bf4c      	ite	mi
   b6e42:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b6e46:	6a23      	ldrpl	r3, [r4, #32]
   b6e48:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b6e4a:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b6e4e:	2e00      	cmp	r6, #0
   b6e50:	d0d4      	beq.n	b6dfc <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b6e52:	6921      	ldr	r1, [r4, #16]
   b6e54:	68a0      	ldr	r0, [r4, #8]
   b6e56:	4642      	mov	r2, r8
   b6e58:	f000 f96f 	bl	b713a <_ZN9FatVolume6fatGetEmPm>
   b6e5c:	2800      	cmp	r0, #0
   b6e5e:	f106 36ff 	add.w	r6, r6, #4294967295
   b6e62:	dcf4      	bgt.n	b6e4e <_ZN7FatFile7seekSetEm+0x6a>
   b6e64:	e7d2      	b.n	b6e0c <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b6e66:	1af6      	subs	r6, r6, r3
   b6e68:	e7ef      	b.n	b6e4a <_ZN7FatFile7seekSetEm+0x66>
	...

000b6e6c <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b6e6c:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b6e6e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b6e70:	4604      	mov	r4, r0
  if (!isOpen()) {
   b6e72:	b90b      	cbnz	r3, b6e78 <_ZN7FatFile4syncEv+0xc>
    return true;
   b6e74:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b6e76:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b6e78:	7883      	ldrb	r3, [r0, #2]
   b6e7a:	075a      	lsls	r2, r3, #29
   b6e7c:	d523      	bpl.n	b6ec6 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b6e7e:	2101      	movs	r1, #1
   b6e80:	f7ff feda 	bl	b6c38 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b6e84:	4605      	mov	r5, r0
   b6e86:	b928      	cbnz	r0, b6e94 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b6e88:	7863      	ldrb	r3, [r4, #1]
   b6e8a:	f043 0301 	orr.w	r3, r3, #1
   b6e8e:	7063      	strb	r3, [r4, #1]
  return false;
   b6e90:	2000      	movs	r0, #0
   b6e92:	e7f0      	b.n	b6e76 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b6e94:	7803      	ldrb	r3, [r0, #0]
   b6e96:	2be5      	cmp	r3, #229	; 0xe5
   b6e98:	d0f6      	beq.n	b6e88 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b6e9a:	7823      	ldrb	r3, [r4, #0]
   b6e9c:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b6e9e:	bf44      	itt	mi
   b6ea0:	69e3      	ldrmi	r3, [r4, #28]
   b6ea2:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b6ea4:	6a23      	ldr	r3, [r4, #32]
   b6ea6:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b6ea8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b6eaa:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b6eac:	4b09      	ldr	r3, [pc, #36]	; (b6ed4 <_ZN7FatFile4syncEv+0x68>)
   b6eae:	681b      	ldr	r3, [r3, #0]
   b6eb0:	b12b      	cbz	r3, b6ebe <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b6eb2:	f100 0116 	add.w	r1, r0, #22
   b6eb6:	3018      	adds	r0, #24
   b6eb8:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b6eba:	8b2b      	ldrh	r3, [r5, #24]
   b6ebc:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b6ebe:	78a3      	ldrb	r3, [r4, #2]
   b6ec0:	f023 0304 	bic.w	r3, r3, #4
   b6ec4:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b6ec6:	68a0      	ldr	r0, [r4, #8]
   b6ec8:	f7ff fe89 	bl	b6bde <_ZN9FatVolume9cacheSyncEv>
   b6ecc:	2800      	cmp	r0, #0
   b6ece:	d0db      	beq.n	b6e88 <_ZN7FatFile4syncEv+0x1c>
   b6ed0:	e7d0      	b.n	b6e74 <_ZN7FatFile4syncEv+0x8>
   b6ed2:	bf00      	nop
   b6ed4:	2003e6a4 	.word	0x2003e6a4

000b6ed8 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b6ed8:	b510      	push	{r4, lr}
   b6eda:	4604      	mov	r4, r0
  bool rtn = sync();
   b6edc:	f7ff ffc6 	bl	b6e6c <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b6ee0:	2300      	movs	r3, #0
   b6ee2:	7023      	strb	r3, [r4, #0]
}
   b6ee4:	bd10      	pop	{r4, pc}
	...

000b6ee8 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b6ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6eec:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b6eee:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6ef0:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b6ef2:	4604      	mov	r4, r0
   b6ef4:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6ef6:	d55b      	bpl.n	b6fb0 <_ZN7FatFile5writeEPKvj+0xc8>
   b6ef8:	7883      	ldrb	r3, [r0, #2]
   b6efa:	079a      	lsls	r2, r3, #30
   b6efc:	d558      	bpl.n	b6fb0 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b6efe:	071b      	lsls	r3, r3, #28
   b6f00:	d451      	bmi.n	b6fa6 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b6f02:	6963      	ldr	r3, [r4, #20]
   b6f04:	43db      	mvns	r3, r3
   b6f06:	42bb      	cmp	r3, r7
   b6f08:	d352      	bcc.n	b6fb0 <_ZN7FatFile5writeEPKvj+0xc8>
   b6f0a:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6f0c:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b6f10:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b6f12:	f1b8 0f00 	cmp.w	r8, #0
   b6f16:	f000 8091 	beq.w	b703c <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b6f1a:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b6f1c:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b6f1e:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b6f22:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b6f26:	d10e      	bne.n	b6f46 <_ZN7FatFile5writeEPKvj+0x5e>
   b6f28:	b96d      	cbnz	r5, b6f46 <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b6f2a:	6921      	ldr	r1, [r4, #16]
   b6f2c:	2900      	cmp	r1, #0
   b6f2e:	d046      	beq.n	b6fbe <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6f30:	4652      	mov	r2, sl
   b6f32:	f000 f902 	bl	b713a <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b6f36:	2800      	cmp	r0, #0
   b6f38:	db3a      	blt.n	b6fb0 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b6f3a:	d104      	bne.n	b6f46 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b6f3c:	4620      	mov	r0, r4
   b6f3e:	f7ff fe71 	bl	b6c24 <_ZN7FatFile10addClusterEv>
   b6f42:	2800      	cmp	r0, #0
   b6f44:	d034      	beq.n	b6fb0 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b6f46:	6921      	ldr	r1, [r4, #16]
   b6f48:	68a0      	ldr	r0, [r4, #8]
   b6f4a:	f000 f8f0 	bl	b712e <_ZNK9FatVolume17clusterFirstBlockEm>
   b6f4e:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b6f50:	68a0      	ldr	r0, [r4, #8]
   b6f52:	b915      	cbnz	r5, b6f5a <_ZN7FatFile5writeEPKvj+0x72>
   b6f54:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b6f58:	d23f      	bcs.n	b6fda <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b6f5a:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b6f5e:	4546      	cmp	r6, r8
   b6f60:	bf28      	it	cs
   b6f62:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b6f64:	2d00      	cmp	r5, #0
   b6f66:	d136      	bne.n	b6fd6 <_ZN7FatFile5writeEPKvj+0xee>
   b6f68:	6962      	ldr	r2, [r4, #20]
   b6f6a:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b6f6c:	429a      	cmp	r2, r3
   b6f6e:	bf34      	ite	cc
   b6f70:	2201      	movcc	r2, #1
   b6f72:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b6f74:	3024      	adds	r0, #36	; 0x24
   b6f76:	f000 f8b7 	bl	b70e8 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b6f7a:	b1c8      	cbz	r0, b6fb0 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b6f7c:	4428      	add	r0, r5
   b6f7e:	4632      	mov	r2, r6
   b6f80:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b6f82:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b6f84:	f004 fdba 	bl	bbafc <memcpy>
      if (512 == (n + blockOffset)) {
   b6f88:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b6f8c:	d104      	bne.n	b6f98 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b6f8e:	68a0      	ldr	r0, [r4, #8]
   b6f90:	3024      	adds	r0, #36	; 0x24
   b6f92:	f000 f881 	bl	b7098 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b6f96:	b158      	cbz	r0, b6fb0 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b6f98:	6963      	ldr	r3, [r4, #20]
   b6f9a:	4433      	add	r3, r6
   b6f9c:	6163      	str	r3, [r4, #20]
    src += n;
   b6f9e:	44b1      	add	r9, r6
    nToWrite -= n;
   b6fa0:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b6fa4:	e7b4      	b.n	b6f10 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b6fa6:	69c1      	ldr	r1, [r0, #28]
   b6fa8:	f7ff ff1c 	bl	b6de4 <_ZN7FatFile7seekSetEm>
   b6fac:	2800      	cmp	r0, #0
   b6fae:	d1a8      	bne.n	b6f02 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b6fb0:	7863      	ldrb	r3, [r4, #1]
   b6fb2:	f043 0301 	orr.w	r3, r3, #1
   b6fb6:	7063      	strb	r3, [r4, #1]
  return -1;
   b6fb8:	f04f 30ff 	mov.w	r0, #4294967295
   b6fbc:	e050      	b.n	b7060 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b6fbe:	6a23      	ldr	r3, [r4, #32]
   b6fc0:	b93b      	cbnz	r3, b6fd2 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b6fc2:	4620      	mov	r0, r4
   b6fc4:	f7ff fe2e 	bl	b6c24 <_ZN7FatFile10addClusterEv>
   b6fc8:	2800      	cmp	r0, #0
   b6fca:	d0f1      	beq.n	b6fb0 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b6fcc:	6923      	ldr	r3, [r4, #16]
   b6fce:	6223      	str	r3, [r4, #32]
   b6fd0:	e7b9      	b.n	b6f46 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b6fd2:	6123      	str	r3, [r4, #16]
   b6fd4:	e7b7      	b.n	b6f46 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b6fd6:	2201      	movs	r2, #1
   b6fd8:	e7cc      	b.n	b6f74 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b6fda:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b6fde:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b6fe0:	d31b      	bcc.n	b701a <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b6fe2:	f890 c004 	ldrb.w	ip, [r0, #4]
   b6fe6:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b6fea:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b6fec:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b6ff0:	4573      	cmp	r3, lr
   b6ff2:	bf28      	it	cs
   b6ff4:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6ff6:	4291      	cmp	r1, r2
      n = 512*nb;
   b6ff8:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6ffc:	d307      	bcc.n	b700e <_ZN7FatFile5writeEPKvj+0x126>
   b6ffe:	441a      	add	r2, r3
   b7000:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b7002:	bf82      	ittt	hi
   b7004:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
   b7008:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b700c:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b700e:	68a5      	ldr	r5, [r4, #8]
   b7010:	464a      	mov	r2, r9
   b7012:	6828      	ldr	r0, [r5, #0]
   b7014:	f000 fc2d 	bl	b7872 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b7018:	e7bd      	b.n	b6f96 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b701a:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b701c:	bf02      	ittt	eq
   b701e:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
   b7022:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7026:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b7028:	68a3      	ldr	r3, [r4, #8]
   b702a:	464a      	mov	r2, r9
   b702c:	6818      	ldr	r0, [r3, #0]
   b702e:	f000 fbaa 	bl	b7786 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b7032:	2800      	cmp	r0, #0
   b7034:	d0bc      	beq.n	b6fb0 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b7036:	f44f 7600 	mov.w	r6, #512	; 0x200
   b703a:	e7ad      	b.n	b6f98 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b703c:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b703e:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b7040:	42b2      	cmp	r2, r6
   b7042:	d204      	bcs.n	b704e <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b7044:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b7046:	f043 0304 	orr.w	r3, r3, #4
   b704a:	70a3      	strb	r3, [r4, #2]
   b704c:	e003      	b.n	b7056 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b704e:	4a08      	ldr	r2, [pc, #32]	; (b7070 <_ZN7FatFile5writeEPKvj+0x188>)
   b7050:	6812      	ldr	r2, [r2, #0]
   b7052:	2a00      	cmp	r2, #0
   b7054:	d1f7      	bne.n	b7046 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b7056:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b705a:	2b00      	cmp	r3, #0
   b705c:	db02      	blt.n	b7064 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b705e:	4638      	mov	r0, r7
}
   b7060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b7064:	4620      	mov	r0, r4
   b7066:	f7ff ff01 	bl	b6e6c <_ZN7FatFile4syncEv>
   b706a:	2800      	cmp	r0, #0
   b706c:	d1f7      	bne.n	b705e <_ZN7FatFile5writeEPKvj+0x176>
   b706e:	e79f      	b.n	b6fb0 <_ZN7FatFile5writeEPKvj+0xc8>
   b7070:	2003e6a4 	.word	0x2003e6a4

000b7074 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7074:	b513      	push	{r0, r1, r4, lr}
   b7076:	4604      	mov	r4, r0
    }
   b7078:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b707a:	b159      	cbz	r1, b7094 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b707c:	9101      	str	r1, [sp, #4]
   b707e:	f004 fdad 	bl	bbbdc <strlen>
   b7082:	6823      	ldr	r3, [r4, #0]
   b7084:	9901      	ldr	r1, [sp, #4]
   b7086:	68db      	ldr	r3, [r3, #12]
   b7088:	4602      	mov	r2, r0
   b708a:	4620      	mov	r0, r4
    }
   b708c:	b002      	add	sp, #8
   b708e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7092:	4718      	bx	r3
    }
   b7094:	b002      	add	sp, #8
   b7096:	bd10      	pop	{r4, pc}

000b7098 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b7098:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b709a:	7803      	ldrb	r3, [r0, #0]
   b709c:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b709e:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b70a0:	d520      	bpl.n	b70e4 <_ZN8FatCache4syncEv+0x4c>
   b70a2:	6843      	ldr	r3, [r0, #4]
   b70a4:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b70a6:	f100 020c 	add.w	r2, r0, #12
   b70aa:	6818      	ldr	r0, [r3, #0]
   b70ac:	9201      	str	r2, [sp, #4]
   b70ae:	f000 fb6a 	bl	b7786 <_ZN9SdSpiCard10writeBlockEmPKh>
   b70b2:	9a01      	ldr	r2, [sp, #4]
   b70b4:	4605      	mov	r5, r0
   b70b6:	b918      	cbnz	r0, b70c0 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b70b8:	2500      	movs	r5, #0
}
   b70ba:	4628      	mov	r0, r5
   b70bc:	b003      	add	sp, #12
   b70be:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b70c0:	7823      	ldrb	r3, [r4, #0]
   b70c2:	079b      	lsls	r3, r3, #30
   b70c4:	d404      	bmi.n	b70d0 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b70c6:	7823      	ldrb	r3, [r4, #0]
   b70c8:	f023 0301 	bic.w	r3, r3, #1
   b70cc:	7023      	strb	r3, [r4, #0]
   b70ce:	e7f4      	b.n	b70ba <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b70d0:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b70d4:	6919      	ldr	r1, [r3, #16]
   b70d6:	4401      	add	r1, r0
   b70d8:	6818      	ldr	r0, [r3, #0]
   b70da:	f000 fb54 	bl	b7786 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b70de:	2800      	cmp	r0, #0
   b70e0:	d1f1      	bne.n	b70c6 <_ZN8FatCache4syncEv+0x2e>
   b70e2:	e7e9      	b.n	b70b8 <_ZN8FatCache4syncEv+0x20>
  return true;
   b70e4:	2501      	movs	r5, #1
   b70e6:	e7e8      	b.n	b70ba <_ZN8FatCache4syncEv+0x22>

000b70e8 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b70e8:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b70ea:	6883      	ldr	r3, [r0, #8]
   b70ec:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b70ee:	4604      	mov	r4, r0
   b70f0:	460e      	mov	r6, r1
   b70f2:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b70f4:	d009      	beq.n	b710a <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b70f6:	f7ff ffcf 	bl	b7098 <_ZN8FatCache4syncEv>
   b70fa:	b908      	cbnz	r0, b7100 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b70fc:	2000      	movs	r0, #0
}
   b70fe:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b7100:	076b      	lsls	r3, r5, #29
   b7102:	d50a      	bpl.n	b711a <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b7104:	2300      	movs	r3, #0
   b7106:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b7108:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b710a:	7822      	ldrb	r2, [r4, #0]
   b710c:	f005 0503 	and.w	r5, r5, #3
   b7110:	4620      	mov	r0, r4
   b7112:	4315      	orrs	r5, r2
   b7114:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b7118:	e7f1      	b.n	b70fe <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b711a:	6863      	ldr	r3, [r4, #4]
   b711c:	f104 020c 	add.w	r2, r4, #12
   b7120:	6818      	ldr	r0, [r3, #0]
   b7122:	4631      	mov	r1, r6
   b7124:	f000 faa6 	bl	b7674 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b7128:	2800      	cmp	r0, #0
   b712a:	d1eb      	bne.n	b7104 <_ZN8FatCache4readEmh+0x1c>
   b712c:	e7e6      	b.n	b70fc <_ZN8FatCache4readEmh+0x14>

000b712e <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b712e:	7983      	ldrb	r3, [r0, #6]
   b7130:	6940      	ldr	r0, [r0, #20]
   b7132:	3902      	subs	r1, #2
   b7134:	4099      	lsls	r1, r3
}
   b7136:	4408      	add	r0, r1
   b7138:	4770      	bx	lr

000b713a <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b713a:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b713c:	b570      	push	{r4, r5, r6, lr}
   b713e:	4605      	mov	r5, r0
   b7140:	460c      	mov	r4, r1
   b7142:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7144:	d802      	bhi.n	b714c <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b7146:	f04f 30ff 	mov.w	r0, #4294967295
}
   b714a:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b714c:	69c3      	ldr	r3, [r0, #28]
   b714e:	428b      	cmp	r3, r1
   b7150:	d3f9      	bcc.n	b7146 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b7152:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7154:	2b20      	cmp	r3, #32
   b7156:	d116      	bne.n	b7186 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b7158:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b715a:	2202      	movs	r2, #2
   b715c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7160:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7164:	f7ff ffc0 	bl	b70e8 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7168:	2800      	cmp	r0, #0
   b716a:	d0ec      	beq.n	b7146 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b716c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7170:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b7174:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b7178:	69ea      	ldr	r2, [r5, #28]
   b717a:	429a      	cmp	r2, r3
  *value = next;
   b717c:	bf26      	itte	cs
   b717e:	6033      	strcs	r3, [r6, #0]
  return 1;
   b7180:	2001      	movcs	r0, #1
    return 0;
   b7182:	2000      	movcc	r0, #0
   b7184:	e7e1      	b.n	b714a <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b7186:	2b10      	cmp	r3, #16
   b7188:	d1dd      	bne.n	b7146 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b718a:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b718e:	6981      	ldr	r1, [r0, #24]
   b7190:	2202      	movs	r2, #2
   b7192:	4419      	add	r1, r3
   b7194:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7198:	f7ff ffa6 	bl	b70e8 <_ZN8FatCache4readEmh>
    if (!pc) {
   b719c:	2800      	cmp	r0, #0
   b719e:	d0d2      	beq.n	b7146 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b71a0:	b2e4      	uxtb	r4, r4
   b71a2:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b71a6:	e7e7      	b.n	b7178 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b71a8 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b71a8:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b71aa:	b538      	push	{r3, r4, r5, lr}
   b71ac:	460c      	mov	r4, r1
   b71ae:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b71b0:	d801      	bhi.n	b71b6 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b71b2:	2000      	movs	r0, #0
}
   b71b4:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b71b6:	69c3      	ldr	r3, [r0, #28]
   b71b8:	428b      	cmp	r3, r1
   b71ba:	d3fa      	bcc.n	b71b2 <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b71bc:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b71be:	2b20      	cmp	r3, #32
   b71c0:	d10f      	bne.n	b71e2 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b71c2:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b71c4:	2203      	movs	r2, #3
   b71c6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b71ca:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b71ce:	f7ff ff8b 	bl	b70e8 <_ZN8FatCache4readEmh>
    if (!pc) {
   b71d2:	2800      	cmp	r0, #0
   b71d4:	d0ed      	beq.n	b71b2 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b71d6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b71da:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b71de:	2001      	movs	r0, #1
   b71e0:	e7e8      	b.n	b71b4 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b71e2:	2b10      	cmp	r3, #16
   b71e4:	d1e5      	bne.n	b71b2 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b71e6:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b71ea:	6981      	ldr	r1, [r0, #24]
   b71ec:	2203      	movs	r2, #3
   b71ee:	4419      	add	r1, r3
   b71f0:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b71f4:	f7ff ff78 	bl	b70e8 <_ZN8FatCache4readEmh>
    if (!pc) {
   b71f8:	2800      	cmp	r0, #0
   b71fa:	d0da      	beq.n	b71b2 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b71fc:	b2e4      	uxtb	r4, r4
   b71fe:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b7202:	e7ec      	b.n	b71de <_ZN9FatVolume6fatPutEmm+0x36>

000b7204 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b7204:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b7208:	68c4      	ldr	r4, [r0, #12]
   b720a:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b720c:	4605      	mov	r5, r0
   b720e:	460e      	mov	r6, r1
   b7210:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b7212:	d301      	bcc.n	b7218 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b7214:	2701      	movs	r7, #1
   b7216:	e001      	b.n	b721c <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7218:	460c      	mov	r4, r1
    setStart = false;
   b721a:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b721c:	69eb      	ldr	r3, [r5, #28]
    find++;
   b721e:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b7220:	42a3      	cmp	r3, r4
   b7222:	d202      	bcs.n	b722a <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b7224:	b9c7      	cbnz	r7, b7258 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b7226:	68ec      	ldr	r4, [r5, #12]
   b7228:	e7f4      	b.n	b7214 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b722a:	42a6      	cmp	r6, r4
   b722c:	d014      	beq.n	b7258 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b722e:	aa01      	add	r2, sp, #4
   b7230:	4621      	mov	r1, r4
   b7232:	4628      	mov	r0, r5
   b7234:	f7ff ff81 	bl	b713a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7238:	2800      	cmp	r0, #0
   b723a:	db0d      	blt.n	b7258 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b723c:	d0ee      	beq.n	b721c <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b723e:	9b01      	ldr	r3, [sp, #4]
   b7240:	2b00      	cmp	r3, #0
   b7242:	d1eb      	bne.n	b721c <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b7244:	b107      	cbz	r7, b7248 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b7246:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b7248:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b724c:	4621      	mov	r1, r4
   b724e:	4628      	mov	r0, r5
   b7250:	f7ff ffaa 	bl	b71a8 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b7254:	4607      	mov	r7, r0
   b7256:	b920      	cbnz	r0, b7262 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b7258:	2700      	movs	r7, #0
}
   b725a:	4638      	mov	r0, r7
   b725c:	b002      	add	sp, #8
   b725e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b7262:	b916      	cbnz	r6, b726a <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b7264:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b7268:	e7f7      	b.n	b725a <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b726a:	4622      	mov	r2, r4
   b726c:	4631      	mov	r1, r6
   b726e:	4628      	mov	r0, r5
   b7270:	f7ff ff9a 	bl	b71a8 <_ZN9FatVolume6fatPutEmm>
   b7274:	2800      	cmp	r0, #0
   b7276:	d1f5      	bne.n	b7264 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b7278:	e7ee      	b.n	b7258 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b727a <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b727a:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b727c:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b727e:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b7280:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b7282:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
   b7286:	4604      	mov	r4, r0
  m_fatType = 0;
   b7288:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b728a:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b728e:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b7290:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7294:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b7296:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b729a:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b729e:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b72a2:	460d      	mov	r5, r1
   b72a4:	b1b9      	cbz	r1, b72d6 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b72a6:	2904      	cmp	r1, #4
   b72a8:	d901      	bls.n	b72ae <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b72aa:	2000      	movs	r0, #0
}
   b72ac:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b72ae:	4611      	mov	r1, r2
   b72b0:	4630      	mov	r0, r6
   b72b2:	f7ff ff19 	bl	b70e8 <_ZN8FatCache4readEmh>
    if (!pc) {
   b72b6:	2800      	cmp	r0, #0
   b72b8:	d0f7      	beq.n	b72aa <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b72ba:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b72be:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b72c2:	065b      	lsls	r3, r3, #25
   b72c4:	d1f1      	bne.n	b72aa <_ZN9FatVolume4initEh+0x30>
   b72c6:	f105 011b 	add.w	r1, r5, #27
   b72ca:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b72ce:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b72d2:	2d00      	cmp	r5, #0
   b72d4:	d0e9      	beq.n	b72aa <_ZN9FatVolume4initEh+0x30>
   b72d6:	2200      	movs	r2, #0
   b72d8:	4629      	mov	r1, r5
   b72da:	4630      	mov	r0, r6
   b72dc:	f7ff ff04 	bl	b70e8 <_ZN8FatCache4readEmh>
  if (!pc) {
   b72e0:	2800      	cmp	r0, #0
   b72e2:	d0e2      	beq.n	b72aa <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b72e4:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b72e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b72ec:	d1dd      	bne.n	b72aa <_ZN9FatVolume4initEh+0x30>
   b72ee:	7c03      	ldrb	r3, [r0, #16]
   b72f0:	2b02      	cmp	r3, #2
   b72f2:	d1da      	bne.n	b72aa <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b72f4:	89c3      	ldrh	r3, [r0, #14]
   b72f6:	2b00      	cmp	r3, #0
   b72f8:	d0d7      	beq.n	b72aa <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b72fa:	7b41      	ldrb	r1, [r0, #13]
   b72fc:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b72fe:	1e4b      	subs	r3, r1, #1
   b7300:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b7302:	2300      	movs	r3, #0
   b7304:	71a3      	strb	r3, [r4, #6]
   b7306:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7308:	2301      	movs	r3, #1
   b730a:	4299      	cmp	r1, r3
   b730c:	d007      	beq.n	b731e <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b730e:	3e01      	subs	r6, #1
   b7310:	d0cb      	beq.n	b72aa <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7312:	79a2      	ldrb	r2, [r4, #6]
   b7314:	005b      	lsls	r3, r3, #1
   b7316:	3201      	adds	r2, #1
   b7318:	b2db      	uxtb	r3, r3
   b731a:	71a2      	strb	r2, [r4, #6]
   b731c:	e7f5      	b.n	b730a <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b731e:	8ac1      	ldrh	r1, [r0, #22]
   b7320:	b901      	cbnz	r1, b7324 <_ZN9FatVolume4initEh+0xaa>
   b7322:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b7324:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b7326:	89c3      	ldrh	r3, [r0, #14]
   b7328:	442b      	add	r3, r5
   b732a:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b732c:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b7330:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b7332:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b7336:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b7338:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b733c:	0149      	lsls	r1, r1, #5
   b733e:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b7342:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b7346:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b7348:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b734c:	b902      	cbnz	r2, b7350 <_ZN9FatVolume4initEh+0xd6>
   b734e:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7350:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b7352:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7354:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b7356:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b7358:	1c4b      	adds	r3, r1, #1
   b735a:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b735c:	f640 73f4 	movw	r3, #4084	; 0xff4
   b7360:	4299      	cmp	r1, r3
   b7362:	d802      	bhi.n	b736a <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b7364:	230c      	movs	r3, #12
   b7366:	71e3      	strb	r3, [r4, #7]
   b7368:	e79f      	b.n	b72aa <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b736a:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b736e:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b7370:	bf85      	ittet	hi
   b7372:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b7374:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b7376:	2310      	movls	r3, #16
    m_fatType = 32;
   b7378:	2320      	movhi	r3, #32
   b737a:	71e3      	strb	r3, [r4, #7]
  return true;
   b737c:	2001      	movs	r0, #1
   b737e:	e795      	b.n	b72ac <_ZN9FatVolume4initEh+0x32>

000b7380 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b7380:	f000 baca 	b.w	b7918 <_ZN14SdSpiAltDriver4sendEh>

000b7384 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b7384:	f000 baad 	b.w	b78e2 <_ZN14SdSpiAltDriver7receiveEv>

000b7388 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7388:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b738a:	4e0e      	ldr	r6, [pc, #56]	; (b73c4 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b738c:	460d      	mov	r5, r1
   b738e:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b7390:	f000 fb9a 	bl	b7ac8 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7394:	6833      	ldr	r3, [r6, #0]
   b7396:	1ac0      	subs	r0, r0, r3
   b7398:	4b0b      	ldr	r3, [pc, #44]	; (b73c8 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b739a:	4298      	cmp	r0, r3
   b739c:	d908      	bls.n	b73b0 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b739e:	f000 fb9b 	bl	b7ad8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b73a2:	4b0a      	ldr	r3, [pc, #40]	; (b73cc <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b73a4:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b73a6:	f000 fde3 	bl	b7f70 <spark_process>
   b73aa:	f000 fb8d 	bl	b7ac8 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b73ae:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b73b0:	f000 fb92 	bl	b7ad8 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b73b4:	b280      	uxth	r0, r0
   b73b6:	1b40      	subs	r0, r0, r5
}
   b73b8:	42a0      	cmp	r0, r4
   b73ba:	bfd4      	ite	le
   b73bc:	2000      	movle	r0, #0
   b73be:	2001      	movgt	r0, #1
   b73c0:	bd70      	pop	{r4, r5, r6, pc}
   b73c2:	bf00      	nop
   b73c4:	2003e6ac 	.word	0x2003e6ac
   b73c8:	000186a0 	.word	0x000186a0
   b73cc:	2003e740 	.word	0x2003e740

000b73d0 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b73d0:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b73d2:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b73d4:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b73d6:	b94d      	cbnz	r5, b73ec <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b73d8:	6840      	ldr	r0, [r0, #4]
   b73da:	f000 fa6b 	bl	b78b4 <_ZN14SdSpiAltDriver8activateEv>
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   b73de:	6863      	ldr	r3, [r4, #4]
   b73e0:	4629      	mov	r1, r5
   b73e2:	7d18      	ldrb	r0, [r3, #20]
   b73e4:	f002 f8f3 	bl	b95ce <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b73e8:	2301      	movs	r3, #1
   b73ea:	7223      	strb	r3, [r4, #8]
  }
}
   b73ec:	bd38      	pop	{r3, r4, r5, pc}

000b73ee <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b73ee:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b73f0:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b73f2:	4604      	mov	r4, r0
  if (m_spiActive) {
   b73f4:	b16b      	cbz	r3, b7412 <_ZN9SdSpiCard7spiStopEv+0x24>
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   b73f6:	6843      	ldr	r3, [r0, #4]
   b73f8:	2101      	movs	r1, #1
   b73fa:	7d18      	ldrb	r0, [r3, #20]
   b73fc:	f002 f8e7 	bl	b95ce <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b7400:	6860      	ldr	r0, [r4, #4]
   b7402:	21ff      	movs	r1, #255	; 0xff
   b7404:	f7ff ffbc 	bl	b7380 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b7408:	6860      	ldr	r0, [r4, #4]
   b740a:	f000 fa67 	bl	b78dc <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b740e:	2300      	movs	r3, #0
   b7410:	7223      	strb	r3, [r4, #8]
  }
}
   b7412:	bd10      	pop	{r4, pc}

000b7414 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b7414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7416:	4604      	mov	r4, r0
   b7418:	460d      	mov	r5, r1
   b741a:	4616      	mov	r6, r2
   b741c:	f000 fb5c 	bl	b7ad8 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b7420:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b7422:	6860      	ldr	r0, [r4, #4]
   b7424:	f7ff ffae 	bl	b7384 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7428:	28ff      	cmp	r0, #255	; 0xff
   b742a:	7260      	strb	r0, [r4, #9]
   b742c:	d10e      	bne.n	b744c <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b742e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7432:	4639      	mov	r1, r7
   b7434:	4620      	mov	r0, r4
   b7436:	f7ff ffa7 	bl	b7388 <_ZN9SdSpiCard10isTimedOutEtt>
   b743a:	2800      	cmp	r0, #0
   b743c:	d0f1      	beq.n	b7422 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b743e:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b7440:	4620      	mov	r0, r4
   b7442:	7023      	strb	r3, [r4, #0]
   b7444:	f7ff ffd3 	bl	b73ee <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7448:	2000      	movs	r0, #0
}
   b744a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b744c:	28fe      	cmp	r0, #254	; 0xfe
   b744e:	d001      	beq.n	b7454 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b7450:	2350      	movs	r3, #80	; 0x50
   b7452:	e7f5      	b.n	b7440 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b7454:	6860      	ldr	r0, [r4, #4]
   b7456:	4632      	mov	r2, r6
   b7458:	4629      	mov	r1, r5
   b745a:	f000 fa47 	bl	b78ec <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b745e:	7260      	strb	r0, [r4, #9]
   b7460:	b108      	cbz	r0, b7466 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b7462:	2360      	movs	r3, #96	; 0x60
   b7464:	e7ec      	b.n	b7440 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b7466:	6860      	ldr	r0, [r4, #4]
   b7468:	f7ff ff8c 	bl	b7384 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b746c:	6860      	ldr	r0, [r4, #4]
   b746e:	f7ff ff89 	bl	b7384 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b7472:	2001      	movs	r0, #1
   b7474:	e7e9      	b.n	b744a <_ZN9SdSpiCard8readDataEPhj+0x36>

000b7476 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b7476:	b570      	push	{r4, r5, r6, lr}
   b7478:	4604      	mov	r4, r0
   b747a:	460e      	mov	r6, r1
   b747c:	f000 fb2c 	bl	b7ad8 <HAL_Timer_Get_Milli_Seconds>
   b7480:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b7482:	4632      	mov	r2, r6
   b7484:	4629      	mov	r1, r5
   b7486:	4620      	mov	r0, r4
   b7488:	f7ff ff7e 	bl	b7388 <_ZN9SdSpiCard10isTimedOutEtt>
   b748c:	b930      	cbnz	r0, b749c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b748e:	6860      	ldr	r0, [r4, #4]
   b7490:	f7ff ff78 	bl	b7384 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7494:	28ff      	cmp	r0, #255	; 0xff
   b7496:	d1f4      	bne.n	b7482 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b7498:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b749a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b749c:	2000      	movs	r0, #0
   b749e:	e7fc      	b.n	b749a <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b74a0 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b74a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b74a2:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b74a4:	9201      	str	r2, [sp, #4]
   b74a6:	4604      	mov	r4, r0
   b74a8:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b74aa:	b90b      	cbnz	r3, b74b0 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b74ac:	f7ff ff90 	bl	b73d0 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b74b0:	b125      	cbz	r5, b74bc <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b74b2:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b74b6:	4620      	mov	r0, r4
   b74b8:	f7ff ffdd 	bl	b7476 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b74bc:	6860      	ldr	r0, [r4, #4]
   b74be:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b74c2:	f7ff ff5d 	bl	b7380 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b74c6:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b74c8:	af01      	add	r7, sp, #4
   b74ca:	5db9      	ldrb	r1, [r7, r6]
   b74cc:	6860      	ldr	r0, [r4, #4]
   b74ce:	f7ff ff57 	bl	b7380 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b74d2:	3e01      	subs	r6, #1
   b74d4:	d2f9      	bcs.n	b74ca <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b74d6:	2d00      	cmp	r5, #0
   b74d8:	6860      	ldr	r0, [r4, #4]
   b74da:	bf0c      	ite	eq
   b74dc:	2195      	moveq	r1, #149	; 0x95
   b74de:	2187      	movne	r1, #135	; 0x87
   b74e0:	f7ff ff4e 	bl	b7380 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b74e4:	6860      	ldr	r0, [r4, #4]
   b74e6:	f7ff ff4d 	bl	b7384 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b74ea:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b74ec:	6860      	ldr	r0, [r4, #4]
   b74ee:	f7ff ff49 	bl	b7384 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b74f2:	0603      	lsls	r3, r0, #24
   b74f4:	7260      	strb	r0, [r4, #9]
   b74f6:	d503      	bpl.n	b7500 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b74f8:	3d01      	subs	r5, #1
   b74fa:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b74fe:	d1f5      	bne.n	b74ec <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b7500:	b003      	add	sp, #12
   b7502:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7504 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b7504:	b570      	push	{r4, r5, r6, lr}
   b7506:	4604      	mov	r4, r0
   b7508:	460d      	mov	r5, r1
   b750a:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b750c:	2137      	movs	r1, #55	; 0x37
   b750e:	2200      	movs	r2, #0
   b7510:	f7ff ffc6 	bl	b74a0 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b7514:	4632      	mov	r2, r6
   b7516:	4629      	mov	r1, r5
   b7518:	4620      	mov	r0, r4
  }
   b751a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b751e:	f7ff bfbf 	b.w	b74a0 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b7524 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b7528:	2500      	movs	r5, #0
   b752a:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b752c:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b752e:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b7530:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7532:	4604      	mov	r4, r0
   b7534:	4690      	mov	r8, r2
   b7536:	461e      	mov	r6, r3
   b7538:	f000 face 	bl	b7ad8 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b753c:	4641      	mov	r1, r8
   b753e:	4607      	mov	r7, r0
   b7540:	6860      	ldr	r0, [r4, #4]
   b7542:	f000 f9bb 	bl	b78bc <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b7546:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b7548:	4a49      	ldr	r2, [pc, #292]	; (b7670 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b754a:	721d      	strb	r5, [r3, #8]
   b754c:	2501      	movs	r5, #1
   b754e:	60da      	str	r2, [r3, #12]
   b7550:	821d      	strh	r5, [r3, #16]
  spiStart();
   b7552:	4620      	mov	r0, r4
   b7554:	f7ff ff3c 	bl	b73d0 <_ZN9SdSpiCard8spiStartEv>
   b7558:	6863      	ldr	r3, [r4, #4]
   b755a:	4629      	mov	r1, r5
   b755c:	7d18      	ldrb	r0, [r3, #20]
   b755e:	f002 f836 	bl	b95ce <digitalWrite>
   b7562:	250a      	movs	r5, #10
    spiSend(0XFF);
   b7564:	6860      	ldr	r0, [r4, #4]
   b7566:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b7568:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b756a:	f7ff ff09 	bl	b7380 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b756e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7572:	d1f7      	bne.n	b7564 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b7574:	6863      	ldr	r3, [r4, #4]
   b7576:	4629      	mov	r1, r5
   b7578:	7d18      	ldrb	r0, [r3, #20]
   b757a:	f002 f828 	bl	b95ce <digitalWrite>
  }
   b757e:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b7580:	2200      	movs	r2, #0
   b7582:	4611      	mov	r1, r2
   b7584:	4620      	mov	r0, r4
   b7586:	f7ff ff8b 	bl	b74a0 <_ZN9SdSpiCard11cardCommandEhm>
   b758a:	2801      	cmp	r0, #1
   b758c:	4680      	mov	r8, r0
   b758e:	d018      	beq.n	b75c2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b7590:	3d01      	subs	r5, #1
   b7592:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7596:	d107      	bne.n	b75a8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b7598:	2320      	movs	r3, #32
  spiStop();
   b759a:	4620      	mov	r0, r4
   b759c:	7023      	strb	r3, [r4, #0]
   b759e:	f7ff ff26 	bl	b73ee <_ZN9SdSpiCard7spiStopEv>
  return false;
   b75a2:	2000      	movs	r0, #0
}
   b75a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b75a8:	6860      	ldr	r0, [r4, #4]
   b75aa:	21fd      	movs	r1, #253	; 0xfd
   b75ac:	f7ff fee8 	bl	b7380 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b75b0:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b75b4:	6860      	ldr	r0, [r4, #4]
   b75b6:	f7ff fee5 	bl	b7384 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b75ba:	f1b8 0801 	subs.w	r8, r8, #1
   b75be:	d1f9      	bne.n	b75b4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b75c0:	e7de      	b.n	b7580 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b75c2:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b75c6:	2108      	movs	r1, #8
   b75c8:	4620      	mov	r0, r4
   b75ca:	f7ff ff69 	bl	b74a0 <_ZN9SdSpiCard11cardCommandEhm>
   b75ce:	2805      	cmp	r0, #5
   b75d0:	d114      	bne.n	b75fc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b75d2:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b75d6:	2500      	movs	r5, #0
   b75d8:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b75da:	462a      	mov	r2, r5
   b75dc:	2129      	movs	r1, #41	; 0x29
   b75de:	4620      	mov	r0, r4
   b75e0:	f7ff ff90 	bl	b7504 <_ZN9SdSpiCard8cardAcmdEhm>
   b75e4:	4602      	mov	r2, r0
   b75e6:	b1d8      	cbz	r0, b7620 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b75e8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b75ec:	4639      	mov	r1, r7
   b75ee:	4620      	mov	r0, r4
   b75f0:	f7ff feca 	bl	b7388 <_ZN9SdSpiCard10isTimedOutEtt>
   b75f4:	2800      	cmp	r0, #0
   b75f6:	d0f0      	beq.n	b75da <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b75f8:	2343      	movs	r3, #67	; 0x43
   b75fa:	e7ce      	b.n	b759a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b75fc:	2504      	movs	r5, #4
      m_status = spiReceive();
   b75fe:	6860      	ldr	r0, [r4, #4]
   b7600:	f7ff fec0 	bl	b7384 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b7604:	3d01      	subs	r5, #1
   b7606:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b760a:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b760c:	d1f7      	bne.n	b75fe <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b760e:	28aa      	cmp	r0, #170	; 0xaa
   b7610:	d104      	bne.n	b761c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b7612:	2302      	movs	r3, #2
   b7614:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7616:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b761a:	e7dd      	b.n	b75d8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b761c:	2325      	movs	r3, #37	; 0x25
   b761e:	e7bc      	b.n	b759a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b7620:	7aa3      	ldrb	r3, [r4, #10]
   b7622:	2b02      	cmp	r3, #2
   b7624:	d118      	bne.n	b7658 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b7626:	213a      	movs	r1, #58	; 0x3a
   b7628:	4620      	mov	r0, r4
   b762a:	f7ff ff39 	bl	b74a0 <_ZN9SdSpiCard11cardCommandEhm>
   b762e:	b108      	cbz	r0, b7634 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b7630:	2337      	movs	r3, #55	; 0x37
   b7632:	e7b2      	b.n	b759a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b7634:	6860      	ldr	r0, [r4, #4]
   b7636:	f7ff fea5 	bl	b7384 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b763a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b763e:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b7640:	bf04      	itt	eq
   b7642:	2303      	moveq	r3, #3
   b7644:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b7646:	6860      	ldr	r0, [r4, #4]
   b7648:	f7ff fe9c 	bl	b7384 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b764c:	6860      	ldr	r0, [r4, #4]
   b764e:	f7ff fe99 	bl	b7384 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7652:	6860      	ldr	r0, [r4, #4]
   b7654:	f7ff fe96 	bl	b7384 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b7658:	4620      	mov	r0, r4
   b765a:	f7ff fec8 	bl	b73ee <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b765e:	6863      	ldr	r3, [r4, #4]
   b7660:	7930      	ldrb	r0, [r6, #4]
   b7662:	68b1      	ldr	r1, [r6, #8]
   b7664:	89b2      	ldrh	r2, [r6, #12]
   b7666:	821a      	strh	r2, [r3, #16]
   b7668:	7218      	strb	r0, [r3, #8]
   b766a:	60d9      	str	r1, [r3, #12]
  return true;
   b766c:	2001      	movs	r0, #1
   b766e:	e799      	b.n	b75a4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b7670:	0003d090 	.word	0x0003d090

000b7674 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7674:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7676:	7a83      	ldrb	r3, [r0, #10]
   b7678:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b767a:	bf18      	it	ne
   b767c:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b767e:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b7680:	460a      	mov	r2, r1
   b7682:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7684:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b7686:	f7ff ff0b 	bl	b74a0 <_ZN9SdSpiCard11cardCommandEhm>
   b768a:	b130      	cbz	r0, b769a <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b768c:	2330      	movs	r3, #48	; 0x30
   b768e:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7690:	4620      	mov	r0, r4
   b7692:	f7ff feac 	bl	b73ee <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7696:	2500      	movs	r5, #0
   b7698:	e00b      	b.n	b76b2 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b769a:	4629      	mov	r1, r5
   b769c:	f44f 7200 	mov.w	r2, #512	; 0x200
   b76a0:	4620      	mov	r0, r4
   b76a2:	f7ff feb7 	bl	b7414 <_ZN9SdSpiCard8readDataEPhj>
   b76a6:	4605      	mov	r5, r0
   b76a8:	2800      	cmp	r0, #0
   b76aa:	d0f1      	beq.n	b7690 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b76ac:	4620      	mov	r0, r4
   b76ae:	f7ff fe9e 	bl	b73ee <_ZN9SdSpiCard7spiStopEv>
}
   b76b2:	4628      	mov	r0, r5
   b76b4:	bd38      	pop	{r3, r4, r5, pc}

000b76b6 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b76b6:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b76b8:	7a83      	ldrb	r3, [r0, #10]
   b76ba:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b76bc:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b76be:	bf18      	it	ne
   b76c0:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b76c2:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b76c4:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b76c6:	f7ff feeb 	bl	b74a0 <_ZN9SdSpiCard11cardCommandEhm>
   b76ca:	b130      	cbz	r0, b76da <_ZN9SdSpiCard9readStartEm+0x24>
   b76cc:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b76ce:	4620      	mov	r0, r4
   b76d0:	7023      	strb	r3, [r4, #0]
   b76d2:	f7ff fe8c 	bl	b73ee <_ZN9SdSpiCard7spiStopEv>
  return false;
   b76d6:	2000      	movs	r0, #0
}
   b76d8:	bd10      	pop	{r4, pc}
  return true;
   b76da:	2001      	movs	r0, #1
   b76dc:	e7fc      	b.n	b76d8 <_ZN9SdSpiCard9readStartEm+0x22>

000b76de <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b76de:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b76e0:	2200      	movs	r2, #0
   b76e2:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b76e4:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b76e6:	f7ff fedb 	bl	b74a0 <_ZN9SdSpiCard11cardCommandEhm>
   b76ea:	b130      	cbz	r0, b76fa <_ZN9SdSpiCard8readStopEv+0x1c>
   b76ec:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b76ee:	4620      	mov	r0, r4
   b76f0:	7023      	strb	r3, [r4, #0]
   b76f2:	f7ff fe7c 	bl	b73ee <_ZN9SdSpiCard7spiStopEv>
  return false;
   b76f6:	2000      	movs	r0, #0
}
   b76f8:	bd10      	pop	{r4, pc}
  spiStop();
   b76fa:	4620      	mov	r0, r4
   b76fc:	f7ff fe77 	bl	b73ee <_ZN9SdSpiCard7spiStopEv>
  return true;
   b7700:	2001      	movs	r0, #1
   b7702:	e7f9      	b.n	b76f8 <_ZN9SdSpiCard8readStopEv+0x1a>

000b7704 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b7704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7706:	4604      	mov	r4, r0
   b7708:	4616      	mov	r6, r2
   b770a:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b770c:	f7ff ffd3 	bl	b76b6 <_ZN9SdSpiCard9readStartEm>
   b7710:	b168      	cbz	r0, b772e <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b7712:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b7714:	b2ab      	uxth	r3, r5
   b7716:	429f      	cmp	r7, r3
   b7718:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b771c:	d909      	bls.n	b7732 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b771e:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7722:	4620      	mov	r0, r4
   b7724:	f7ff fe76 	bl	b7414 <_ZN9SdSpiCard8readDataEPhj>
   b7728:	3501      	adds	r5, #1
   b772a:	2800      	cmp	r0, #0
   b772c:	d1f2      	bne.n	b7714 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b772e:	2000      	movs	r0, #0
   b7730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b7732:	4620      	mov	r0, r4
}
   b7734:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b7738:	f7ff bfd1 	b.w	b76de <_ZN9SdSpiCard8readStopEv>

000b773c <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b773c:	b538      	push	{r3, r4, r5, lr}
   b773e:	4604      	mov	r4, r0
   b7740:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b7742:	6840      	ldr	r0, [r0, #4]
   b7744:	f7ff fe1c 	bl	b7380 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b7748:	f44f 7200 	mov.w	r2, #512	; 0x200
   b774c:	6860      	ldr	r0, [r4, #4]
   b774e:	4629      	mov	r1, r5
   b7750:	f000 f8e6 	bl	b7920 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b7754:	6860      	ldr	r0, [r4, #4]
   b7756:	21ff      	movs	r1, #255	; 0xff
   b7758:	f7ff fe12 	bl	b7380 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b775c:	6860      	ldr	r0, [r4, #4]
   b775e:	21ff      	movs	r1, #255	; 0xff
   b7760:	f7ff fe0e 	bl	b7380 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b7764:	6860      	ldr	r0, [r4, #4]
   b7766:	f7ff fe0d 	bl	b7384 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b776a:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b776c:	f000 001f 	and.w	r0, r0, #31
   b7770:	2805      	cmp	r0, #5
   b7772:	d006      	beq.n	b7782 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b7774:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7776:	4620      	mov	r0, r4
   b7778:	7023      	strb	r3, [r4, #0]
   b777a:	f7ff fe38 	bl	b73ee <_ZN9SdSpiCard7spiStopEv>
  return false;
   b777e:	2000      	movs	r0, #0
}
   b7780:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b7782:	2001      	movs	r0, #1
   b7784:	e7fc      	b.n	b7780 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b7786 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7786:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7788:	7a83      	ldrb	r3, [r0, #10]
   b778a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b778c:	bf18      	it	ne
   b778e:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7790:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b7792:	460a      	mov	r2, r1
   b7794:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7796:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b7798:	f7ff fe82 	bl	b74a0 <_ZN9SdSpiCard11cardCommandEhm>
   b779c:	4606      	mov	r6, r0
   b779e:	b130      	cbz	r0, b77ae <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b77a0:	2332      	movs	r3, #50	; 0x32
   b77a2:	7023      	strb	r3, [r4, #0]
  spiStop();
   b77a4:	4620      	mov	r0, r4
   b77a6:	f7ff fe22 	bl	b73ee <_ZN9SdSpiCard7spiStopEv>
  return false;
   b77aa:	2500      	movs	r5, #0
   b77ac:	e01f      	b.n	b77ee <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b77ae:	462a      	mov	r2, r5
   b77b0:	21fe      	movs	r1, #254	; 0xfe
   b77b2:	4620      	mov	r0, r4
   b77b4:	f7ff ffc2 	bl	b773c <_ZN9SdSpiCard9writeDataEhPKh>
   b77b8:	2800      	cmp	r0, #0
   b77ba:	d0f3      	beq.n	b77a4 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b77bc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b77c0:	4620      	mov	r0, r4
   b77c2:	f7ff fe58 	bl	b7476 <_ZN9SdSpiCard11waitNotBusyEt>
   b77c6:	4605      	mov	r5, r0
   b77c8:	b908      	cbnz	r0, b77ce <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b77ca:	235a      	movs	r3, #90	; 0x5a
   b77cc:	e7e9      	b.n	b77a2 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b77ce:	4632      	mov	r2, r6
   b77d0:	210d      	movs	r1, #13
   b77d2:	4620      	mov	r0, r4
   b77d4:	f7ff fe64 	bl	b74a0 <_ZN9SdSpiCard11cardCommandEhm>
   b77d8:	b108      	cbz	r0, b77de <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b77da:	2329      	movs	r3, #41	; 0x29
   b77dc:	e7e1      	b.n	b77a2 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b77de:	6860      	ldr	r0, [r4, #4]
   b77e0:	f7ff fdd0 	bl	b7384 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b77e4:	2800      	cmp	r0, #0
   b77e6:	d1f8      	bne.n	b77da <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b77e8:	4620      	mov	r0, r4
   b77ea:	f7ff fe00 	bl	b73ee <_ZN9SdSpiCard7spiStopEv>
}
   b77ee:	4628      	mov	r0, r5
   b77f0:	bd70      	pop	{r4, r5, r6, pc}

000b77f2 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b77f2:	b513      	push	{r0, r1, r4, lr}
   b77f4:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b77f6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b77fa:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b77fc:	f7ff fe3b 	bl	b7476 <_ZN9SdSpiCard11waitNotBusyEt>
   b7800:	9a01      	ldr	r2, [sp, #4]
   b7802:	b930      	cbnz	r0, b7812 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b7804:	235b      	movs	r3, #91	; 0x5b
   b7806:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7808:	4620      	mov	r0, r4
   b780a:	f7ff fdf0 	bl	b73ee <_ZN9SdSpiCard7spiStopEv>
  return false;
   b780e:	2000      	movs	r0, #0
   b7810:	e005      	b.n	b781e <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b7812:	21fc      	movs	r1, #252	; 0xfc
   b7814:	4620      	mov	r0, r4
   b7816:	f7ff ff91 	bl	b773c <_ZN9SdSpiCard9writeDataEhPKh>
   b781a:	2800      	cmp	r0, #0
   b781c:	d0f4      	beq.n	b7808 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b781e:	b002      	add	sp, #8
   b7820:	bd10      	pop	{r4, pc}

000b7822 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7822:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b7824:	7a83      	ldrb	r3, [r0, #10]
   b7826:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7828:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b782a:	bf18      	it	ne
   b782c:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b782e:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7830:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b7832:	f7ff fe35 	bl	b74a0 <_ZN9SdSpiCard11cardCommandEhm>
   b7836:	b130      	cbz	r0, b7846 <_ZN9SdSpiCard10writeStartEm+0x24>
   b7838:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b783a:	4620      	mov	r0, r4
   b783c:	7023      	strb	r3, [r4, #0]
   b783e:	f7ff fdd6 	bl	b73ee <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7842:	2000      	movs	r0, #0
}
   b7844:	bd10      	pop	{r4, pc}
  return true;
   b7846:	2001      	movs	r0, #1
   b7848:	e7fc      	b.n	b7844 <_ZN9SdSpiCard10writeStartEm+0x22>

000b784a <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b784a:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b784c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b7850:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7852:	f7ff fe10 	bl	b7476 <_ZN9SdSpiCard11waitNotBusyEt>
   b7856:	4605      	mov	r5, r0
   b7858:	b930      	cbnz	r0, b7868 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b785a:	2356      	movs	r3, #86	; 0x56
   b785c:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b785e:	4620      	mov	r0, r4
   b7860:	f7ff fdc5 	bl	b73ee <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b7864:	4628      	mov	r0, r5
   b7866:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b7868:	6860      	ldr	r0, [r4, #4]
   b786a:	21fd      	movs	r1, #253	; 0xfd
   b786c:	f7ff fd88 	bl	b7380 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7870:	e7f5      	b.n	b785e <_ZN9SdSpiCard9writeStopEv+0x14>

000b7872 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b7872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7874:	4604      	mov	r4, r0
   b7876:	4616      	mov	r6, r2
   b7878:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b787a:	f7ff ffd2 	bl	b7822 <_ZN9SdSpiCard10writeStartEm>
   b787e:	b170      	cbz	r0, b789e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7880:	2500      	movs	r5, #0
   b7882:	42bd      	cmp	r5, r7
   b7884:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b7888:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b788a:	d004      	beq.n	b7896 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b788c:	f7ff ffb1 	bl	b77f2 <_ZN9SdSpiCard9writeDataEPKh>
   b7890:	b128      	cbz	r0, b789e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7892:	3501      	adds	r5, #1
   b7894:	e7f5      	b.n	b7882 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b7896:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b789a:	f7ff bfd6 	b.w	b784a <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b789e:	4620      	mov	r0, r4
   b78a0:	f7ff fda5 	bl	b73ee <_ZN9SdSpiCard7spiStopEv>
}
   b78a4:	2000      	movs	r0, #0
   b78a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b78a8 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b78a8:	4b01      	ldr	r3, [pc, #4]	; (b78b0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b78aa:	2201      	movs	r2, #1
   b78ac:	701a      	strb	r2, [r3, #0]
}
   b78ae:	4770      	bx	lr
   b78b0:	2003e6b0 	.word	0x2003e6b0

000b78b4 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b78b4:	1d01      	adds	r1, r0, #4
   b78b6:	6800      	ldr	r0, [r0, #0]
   b78b8:	f000 bc76 	b.w	b81a8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b78bc <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b78bc:	b510      	push	{r4, lr}
   b78be:	4604      	mov	r4, r0
  m_csPin = csPin;
   b78c0:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b78c2:	6800      	ldr	r0, [r0, #0]
   b78c4:	f000 fc1a 	bl	b80fc <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b78c8:	7d20      	ldrb	r0, [r4, #20]
   b78ca:	2101      	movs	r1, #1
   b78cc:	f001 fe6e 	bl	b95ac <pinMode>
  digitalWrite(m_csPin, HIGH);
   b78d0:	7d20      	ldrb	r0, [r4, #20]
   b78d2:	2101      	movs	r1, #1
}
   b78d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b78d8:	f001 be79 	b.w	b95ce <digitalWrite>

000b78dc <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b78dc:	6800      	ldr	r0, [r0, #0]
   b78de:	f000 bc49 	b.w	b8174 <_ZN8SPIClass14endTransactionEv>

000b78e2 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b78e2:	6800      	ldr	r0, [r0, #0]
   b78e4:	21ff      	movs	r1, #255	; 0xff
   b78e6:	f000 bd25 	b.w	b8334 <_ZN8SPIClass8transferEh>
	...

000b78ec <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b78ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b78ee:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b78f0:	4a07      	ldr	r2, [pc, #28]	; (b7910 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b78f2:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b78f4:	2500      	movs	r5, #0
   b78f6:	4c07      	ldr	r4, [pc, #28]	; (b7914 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b78f8:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b78fa:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b78fc:	460a      	mov	r2, r1
   b78fe:	4629      	mov	r1, r5
   b7900:	f000 fd1e 	bl	b8340 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b7904:	7823      	ldrb	r3, [r4, #0]
   b7906:	2b00      	cmp	r3, #0
   b7908:	d0fc      	beq.n	b7904 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b790a:	2000      	movs	r0, #0
   b790c:	b003      	add	sp, #12
   b790e:	bd30      	pop	{r4, r5, pc}
   b7910:	000b78a9 	.word	0x000b78a9
   b7914:	2003e6b0 	.word	0x2003e6b0

000b7918 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b7918:	6800      	ldr	r0, [r0, #0]
   b791a:	f000 bd0b 	b.w	b8334 <_ZN8SPIClass8transferEh>
	...

000b7920 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b7920:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7922:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7924:	4a06      	ldr	r2, [pc, #24]	; (b7940 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b7926:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7928:	2500      	movs	r5, #0
   b792a:	4c06      	ldr	r4, [pc, #24]	; (b7944 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b792c:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b792e:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7930:	462a      	mov	r2, r5
   b7932:	f000 fd05 	bl	b8340 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b7936:	7823      	ldrb	r3, [r4, #0]
   b7938:	2b00      	cmp	r3, #0
   b793a:	d0fc      	beq.n	b7936 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b793c:	b003      	add	sp, #12
   b793e:	bd30      	pop	{r4, r5, pc}
   b7940:	000b78a9 	.word	0x000b78a9
   b7944:	2003e6b0 	.word	0x2003e6b0

000b7948 <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
   b7948:	2200      	movs	r2, #0
   b794a:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b794e:	6001      	str	r1, [r0, #0]
    // do nothing
}
   b7950:	4770      	bx	lr

000b7952 <_ZN16AirQualitySensor4initEv>:

bool AirQualitySensor::init(void) {
   b7952:	b510      	push	{r4, lr}
   b7954:	4604      	mov	r4, r0
    int initVoltage = analogRead(_pin);
   b7956:	8800      	ldrh	r0, [r0, #0]
   b7958:	f001 fe65 	bl	b9626 <analogRead>

    if (10 < initVoltage && initVoltage < 798) {
   b795c:	f240 3312 	movw	r3, #786	; 0x312
   b7960:	f1a0 020b 	sub.w	r2, r0, #11
   b7964:	429a      	cmp	r2, r3
   b7966:	d807      	bhi.n	b7978 <_ZN16AirQualitySensor4initEv+0x26>
        _currentVoltage = initVoltage;
        _lastVoltage = _currentVoltage;
   b7968:	e9c4 0001 	strd	r0, r0, [r4, #4]

        _standardVoltage = initVoltage;
   b796c:	60e0      	str	r0, [r4, #12]
   b796e:	f000 f8b3 	bl	b7ad8 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();
   b7972:	61a0      	str	r0, [r4, #24]

        return true;
   b7974:	2001      	movs	r0, #1
    }
    else {
        return false;
    }
}
   b7976:	bd10      	pop	{r4, pc}
        return false;
   b7978:	2000      	movs	r0, #0
   b797a:	e7fc      	b.n	b7976 <_ZN16AirQualitySensor4initEv+0x24>

000b797c <_ZN16AirQualitySensor21updateStandardVoltageEv>:

int AirQualitySensor::getValue(void) {
    return _currentVoltage;
}

void AirQualitySensor::updateStandardVoltage(void) {
   b797c:	b510      	push	{r4, lr}
   b797e:	4604      	mov	r4, r0
   b7980:	f000 f8aa 	bl	b7ad8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - _lastStdVolUpdated > 500000) {
   b7984:	69a3      	ldr	r3, [r4, #24]
   b7986:	1ac0      	subs	r0, r0, r3
   b7988:	4b07      	ldr	r3, [pc, #28]	; (b79a8 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x2c>)
   b798a:	4298      	cmp	r0, r3
   b798c:	d90a      	bls.n	b79a4 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x28>
        _standardVoltage = _voltageSum / _volSumCount;
   b798e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b7992:	fb93 f3f2 	sdiv	r3, r3, r2
   b7996:	60e3      	str	r3, [r4, #12]
   b7998:	f000 f89e 	bl	b7ad8 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();

        _voltageSum = 0;
   b799c:	2300      	movs	r3, #0
        _volSumCount = 0;
   b799e:	e9c4 3304 	strd	r3, r3, [r4, #16]
        _lastStdVolUpdated = millis();
   b79a2:	61a0      	str	r0, [r4, #24]
    }
}
   b79a4:	bd10      	pop	{r4, pc}
   b79a6:	bf00      	nop
   b79a8:	0007a120 	.word	0x0007a120

000b79ac <_ZN16AirQualitySensor5slopeEv>:
int AirQualitySensor::slope(void) {
   b79ac:	b510      	push	{r4, lr}
    _lastVoltage = _currentVoltage;
   b79ae:	6883      	ldr	r3, [r0, #8]
   b79b0:	6043      	str	r3, [r0, #4]
int AirQualitySensor::slope(void) {
   b79b2:	4604      	mov	r4, r0
    _currentVoltage = analogRead(_pin);
   b79b4:	8800      	ldrh	r0, [r0, #0]
   b79b6:	f001 fe36 	bl	b9626 <analogRead>
    _voltageSum += _currentVoltage;
   b79ba:	6923      	ldr	r3, [r4, #16]
    _currentVoltage = analogRead(_pin);
   b79bc:	60a0      	str	r0, [r4, #8]
    _voltageSum += _currentVoltage;
   b79be:	4418      	add	r0, r3
    _volSumCount += 1;
   b79c0:	6963      	ldr	r3, [r4, #20]
    _voltageSum += _currentVoltage;
   b79c2:	6120      	str	r0, [r4, #16]
    _volSumCount += 1;
   b79c4:	3301      	adds	r3, #1
   b79c6:	6163      	str	r3, [r4, #20]
    updateStandardVoltage();
   b79c8:	4620      	mov	r0, r4
   b79ca:	f7ff ffd7 	bl	b797c <_ZN16AirQualitySensor21updateStandardVoltageEv>
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
   b79ce:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   b79d2:	1a51      	subs	r1, r2, r1
   b79d4:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
   b79d8:	dc10      	bgt.n	b79fc <_ZN16AirQualitySensor5slopeEv+0x50>
   b79da:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   b79de:	dc0d      	bgt.n	b79fc <_ZN16AirQualitySensor5slopeEv+0x50>
             || _currentVoltage - _standardVoltage > 150) {
   b79e0:	68e3      	ldr	r3, [r4, #12]
   b79e2:	1ad3      	subs	r3, r2, r3
   b79e4:	2b96      	cmp	r3, #150	; 0x96
   b79e6:	dc0b      	bgt.n	b7a00 <_ZN16AirQualitySensor5slopeEv+0x54>
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
   b79e8:	29c8      	cmp	r1, #200	; 0xc8
   b79ea:	dd02      	ble.n	b79f2 <_ZN16AirQualitySensor5slopeEv+0x46>
   b79ec:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   b79f0:	d108      	bne.n	b7a04 <_ZN16AirQualitySensor5slopeEv+0x58>
        return AirQualitySensor::FRESH_AIR;
   b79f2:	2b32      	cmp	r3, #50	; 0x32
   b79f4:	bfcc      	ite	gt
   b79f6:	2002      	movgt	r0, #2
   b79f8:	2003      	movle	r0, #3
}
   b79fa:	bd10      	pop	{r4, pc}
        return AirQualitySensor::FORCE_SIGNAL;
   b79fc:	2000      	movs	r0, #0
   b79fe:	e7fc      	b.n	b79fa <_ZN16AirQualitySensor5slopeEv+0x4e>
        return AirQualitySensor::HIGH_POLLUTION;
   b7a00:	2001      	movs	r0, #1
   b7a02:	e7fa      	b.n	b79fa <_ZN16AirQualitySensor5slopeEv+0x4e>
        return AirQualitySensor::LOW_POLLUTION;
   b7a04:	2002      	movs	r0, #2
   b7a06:	e7f8      	b.n	b79fa <_ZN16AirQualitySensor5slopeEv+0x4e>

000b7a08 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b7a08:	b508      	push	{r3, lr}
   b7a0a:	4b02      	ldr	r3, [pc, #8]	; (b7a14 <netdb_freeaddrinfo+0xc>)
   b7a0c:	681b      	ldr	r3, [r3, #0]
   b7a0e:	689b      	ldr	r3, [r3, #8]
   b7a10:	9301      	str	r3, [sp, #4]
   b7a12:	bd08      	pop	{r3, pc}
   b7a14:	00030268 	.word	0x00030268

000b7a18 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b7a18:	b508      	push	{r3, lr}
   b7a1a:	4b02      	ldr	r3, [pc, #8]	; (b7a24 <netdb_getaddrinfo+0xc>)
   b7a1c:	681b      	ldr	r3, [r3, #0]
   b7a1e:	68db      	ldr	r3, [r3, #12]
   b7a20:	9301      	str	r3, [sp, #4]
   b7a22:	bd08      	pop	{r3, pc}
   b7a24:	00030268 	.word	0x00030268

000b7a28 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b7a28:	b508      	push	{r3, lr}
   b7a2a:	4b02      	ldr	r3, [pc, #8]	; (b7a34 <HAL_Pin_Map+0xc>)
   b7a2c:	681b      	ldr	r3, [r3, #0]
   b7a2e:	681b      	ldr	r3, [r3, #0]
   b7a30:	9301      	str	r3, [sp, #4]
   b7a32:	bd08      	pop	{r3, pc}
   b7a34:	0003022c 	.word	0x0003022c

000b7a38 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b7a38:	b508      	push	{r3, lr}
   b7a3a:	4b02      	ldr	r3, [pc, #8]	; (b7a44 <HAL_Validate_Pin_Function+0xc>)
   b7a3c:	681b      	ldr	r3, [r3, #0]
   b7a3e:	685b      	ldr	r3, [r3, #4]
   b7a40:	9301      	str	r3, [sp, #4]
   b7a42:	bd08      	pop	{r3, pc}
   b7a44:	0003022c 	.word	0x0003022c

000b7a48 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b7a48:	b508      	push	{r3, lr}
   b7a4a:	4b02      	ldr	r3, [pc, #8]	; (b7a54 <HAL_Pin_Mode+0xc>)
   b7a4c:	681b      	ldr	r3, [r3, #0]
   b7a4e:	689b      	ldr	r3, [r3, #8]
   b7a50:	9301      	str	r3, [sp, #4]
   b7a52:	bd08      	pop	{r3, pc}
   b7a54:	0003022c 	.word	0x0003022c

000b7a58 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b7a58:	b508      	push	{r3, lr}
   b7a5a:	4b02      	ldr	r3, [pc, #8]	; (b7a64 <HAL_Get_Pin_Mode+0xc>)
   b7a5c:	681b      	ldr	r3, [r3, #0]
   b7a5e:	68db      	ldr	r3, [r3, #12]
   b7a60:	9301      	str	r3, [sp, #4]
   b7a62:	bd08      	pop	{r3, pc}
   b7a64:	0003022c 	.word	0x0003022c

000b7a68 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b7a68:	b508      	push	{r3, lr}
   b7a6a:	4b02      	ldr	r3, [pc, #8]	; (b7a74 <HAL_GPIO_Write+0xc>)
   b7a6c:	681b      	ldr	r3, [r3, #0]
   b7a6e:	691b      	ldr	r3, [r3, #16]
   b7a70:	9301      	str	r3, [sp, #4]
   b7a72:	bd08      	pop	{r3, pc}
   b7a74:	0003022c 	.word	0x0003022c

000b7a78 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b7a78:	b508      	push	{r3, lr}
   b7a7a:	4b02      	ldr	r3, [pc, #8]	; (b7a84 <HAL_GPIO_Read+0xc>)
   b7a7c:	681b      	ldr	r3, [r3, #0]
   b7a7e:	695b      	ldr	r3, [r3, #20]
   b7a80:	9301      	str	r3, [sp, #4]
   b7a82:	bd08      	pop	{r3, pc}
   b7a84:	0003022c 	.word	0x0003022c

000b7a88 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b7a88:	b508      	push	{r3, lr}
   b7a8a:	4b02      	ldr	r3, [pc, #8]	; (b7a94 <hal_adc_read+0xc>)
   b7a8c:	681b      	ldr	r3, [r3, #0]
   b7a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7a90:	9301      	str	r3, [sp, #4]
   b7a92:	bd08      	pop	{r3, pc}
   b7a94:	0003022c 	.word	0x0003022c

000b7a98 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b7a98:	b508      	push	{r3, lr}
   b7a9a:	4b02      	ldr	r3, [pc, #8]	; (b7aa4 <if_index_to_name+0xc>)
   b7a9c:	681b      	ldr	r3, [r3, #0]
   b7a9e:	695b      	ldr	r3, [r3, #20]
   b7aa0:	9301      	str	r3, [sp, #4]
   b7aa2:	bd08      	pop	{r3, pc}
   b7aa4:	0003026c 	.word	0x0003026c

000b7aa8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7aa8:	b508      	push	{r3, lr}
   b7aaa:	4b02      	ldr	r3, [pc, #8]	; (b7ab4 <HAL_RNG_GetRandomNumber+0xc>)
   b7aac:	681b      	ldr	r3, [r3, #0]
   b7aae:	685b      	ldr	r3, [r3, #4]
   b7ab0:	9301      	str	r3, [sp, #4]
   b7ab2:	bd08      	pop	{r3, pc}
   b7ab4:	00030218 	.word	0x00030218

000b7ab8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7ab8:	b508      	push	{r3, lr}
   b7aba:	4b02      	ldr	r3, [pc, #8]	; (b7ac4 <HAL_Delay_Microseconds+0xc>)
   b7abc:	681b      	ldr	r3, [r3, #0]
   b7abe:	68db      	ldr	r3, [r3, #12]
   b7ac0:	9301      	str	r3, [sp, #4]
   b7ac2:	bd08      	pop	{r3, pc}
   b7ac4:	00030218 	.word	0x00030218

000b7ac8 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b7ac8:	b508      	push	{r3, lr}
   b7aca:	4b02      	ldr	r3, [pc, #8]	; (b7ad4 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b7acc:	681b      	ldr	r3, [r3, #0]
   b7ace:	691b      	ldr	r3, [r3, #16]
   b7ad0:	9301      	str	r3, [sp, #4]
   b7ad2:	bd08      	pop	{r3, pc}
   b7ad4:	00030218 	.word	0x00030218

000b7ad8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7ad8:	b508      	push	{r3, lr}
   b7ada:	4b02      	ldr	r3, [pc, #8]	; (b7ae4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7adc:	681b      	ldr	r3, [r3, #0]
   b7ade:	695b      	ldr	r3, [r3, #20]
   b7ae0:	9301      	str	r3, [sp, #4]
   b7ae2:	bd08      	pop	{r3, pc}
   b7ae4:	00030218 	.word	0x00030218

000b7ae8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b7ae8:	b508      	push	{r3, lr}
   b7aea:	4b02      	ldr	r3, [pc, #8]	; (b7af4 <hal_rtc_time_is_valid+0xc>)
   b7aec:	681b      	ldr	r3, [r3, #0]
   b7aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7af0:	9301      	str	r3, [sp, #4]
   b7af2:	bd08      	pop	{r3, pc}
   b7af4:	00030218 	.word	0x00030218

000b7af8 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b7af8:	b508      	push	{r3, lr}
   b7afa:	4b02      	ldr	r3, [pc, #8]	; (b7b04 <hal_rtc_get_time+0xc>)
   b7afc:	681b      	ldr	r3, [r3, #0]
   b7afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b7b00:	9301      	str	r3, [sp, #4]
   b7b02:	bd08      	pop	{r3, pc}
   b7b04:	00030218 	.word	0x00030218

000b7b08 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7b08:	b508      	push	{r3, lr}
   b7b0a:	4b02      	ldr	r3, [pc, #8]	; (b7b14 <os_mutex_recursive_create+0xc>)
   b7b0c:	681b      	ldr	r3, [r3, #0]
   b7b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7b10:	9301      	str	r3, [sp, #4]
   b7b12:	bd08      	pop	{r3, pc}
   b7b14:	00030248 	.word	0x00030248

000b7b18 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7b18:	b508      	push	{r3, lr}
   b7b1a:	4b02      	ldr	r3, [pc, #8]	; (b7b24 <inet_inet_ntop+0xc>)
   b7b1c:	681b      	ldr	r3, [r3, #0]
   b7b1e:	695b      	ldr	r3, [r3, #20]
   b7b20:	9301      	str	r3, [sp, #4]
   b7b22:	bd08      	pop	{r3, pc}
   b7b24:	00030264 	.word	0x00030264

000b7b28 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b7b28:	b508      	push	{r3, lr}
   b7b2a:	4b02      	ldr	r3, [pc, #8]	; (b7b34 <inet_htonl+0xc>)
   b7b2c:	681b      	ldr	r3, [r3, #0]
   b7b2e:	6a1b      	ldr	r3, [r3, #32]
   b7b30:	9301      	str	r3, [sp, #4]
   b7b32:	bd08      	pop	{r3, pc}
   b7b34:	00030264 	.word	0x00030264

000b7b38 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b7b38:	b508      	push	{r3, lr}
   b7b3a:	4b02      	ldr	r3, [pc, #8]	; (b7b44 <inet_htons+0xc>)
   b7b3c:	681b      	ldr	r3, [r3, #0]
   b7b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7b40:	9301      	str	r3, [sp, #4]
   b7b42:	bd08      	pop	{r3, pc}
   b7b44:	00030264 	.word	0x00030264

000b7b48 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7b48:	b508      	push	{r3, lr}
   b7b4a:	4b02      	ldr	r3, [pc, #8]	; (b7b54 <hal_usart_write+0xc>)
   b7b4c:	681b      	ldr	r3, [r3, #0]
   b7b4e:	68db      	ldr	r3, [r3, #12]
   b7b50:	9301      	str	r3, [sp, #4]
   b7b52:	bd08      	pop	{r3, pc}
   b7b54:	0003023c 	.word	0x0003023c

000b7b58 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7b58:	b508      	push	{r3, lr}
   b7b5a:	4b02      	ldr	r3, [pc, #8]	; (b7b64 <hal_usart_available+0xc>)
   b7b5c:	681b      	ldr	r3, [r3, #0]
   b7b5e:	691b      	ldr	r3, [r3, #16]
   b7b60:	9301      	str	r3, [sp, #4]
   b7b62:	bd08      	pop	{r3, pc}
   b7b64:	0003023c 	.word	0x0003023c

000b7b68 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7b68:	b508      	push	{r3, lr}
   b7b6a:	4b02      	ldr	r3, [pc, #8]	; (b7b74 <hal_usart_read+0xc>)
   b7b6c:	681b      	ldr	r3, [r3, #0]
   b7b6e:	695b      	ldr	r3, [r3, #20]
   b7b70:	9301      	str	r3, [sp, #4]
   b7b72:	bd08      	pop	{r3, pc}
   b7b74:	0003023c 	.word	0x0003023c

000b7b78 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7b78:	b508      	push	{r3, lr}
   b7b7a:	4b02      	ldr	r3, [pc, #8]	; (b7b84 <hal_usart_peek+0xc>)
   b7b7c:	681b      	ldr	r3, [r3, #0]
   b7b7e:	699b      	ldr	r3, [r3, #24]
   b7b80:	9301      	str	r3, [sp, #4]
   b7b82:	bd08      	pop	{r3, pc}
   b7b84:	0003023c 	.word	0x0003023c

000b7b88 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7b88:	b508      	push	{r3, lr}
   b7b8a:	4b02      	ldr	r3, [pc, #8]	; (b7b94 <hal_usart_flush+0xc>)
   b7b8c:	681b      	ldr	r3, [r3, #0]
   b7b8e:	69db      	ldr	r3, [r3, #28]
   b7b90:	9301      	str	r3, [sp, #4]
   b7b92:	bd08      	pop	{r3, pc}
   b7b94:	0003023c 	.word	0x0003023c

000b7b98 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b7b98:	b508      	push	{r3, lr}
   b7b9a:	4b02      	ldr	r3, [pc, #8]	; (b7ba4 <hal_usart_is_enabled+0xc>)
   b7b9c:	681b      	ldr	r3, [r3, #0]
   b7b9e:	6a1b      	ldr	r3, [r3, #32]
   b7ba0:	9301      	str	r3, [sp, #4]
   b7ba2:	bd08      	pop	{r3, pc}
   b7ba4:	0003023c 	.word	0x0003023c

000b7ba8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7ba8:	b508      	push	{r3, lr}
   b7baa:	4b02      	ldr	r3, [pc, #8]	; (b7bb4 <hal_usart_available_data_for_write+0xc>)
   b7bac:	681b      	ldr	r3, [r3, #0]
   b7bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7bb0:	9301      	str	r3, [sp, #4]
   b7bb2:	bd08      	pop	{r3, pc}
   b7bb4:	0003023c 	.word	0x0003023c

000b7bb8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7bb8:	b508      	push	{r3, lr}
   b7bba:	4b02      	ldr	r3, [pc, #8]	; (b7bc4 <hal_usart_init_ex+0xc>)
   b7bbc:	681b      	ldr	r3, [r3, #0]
   b7bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7bc0:	9301      	str	r3, [sp, #4]
   b7bc2:	bd08      	pop	{r3, pc}
   b7bc4:	0003023c 	.word	0x0003023c

000b7bc8 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b7bc8:	b508      	push	{r3, lr}
   b7bca:	4b02      	ldr	r3, [pc, #8]	; (b7bd4 <hal_i2c_begin+0xc>)
   b7bcc:	681b      	ldr	r3, [r3, #0]
   b7bce:	68db      	ldr	r3, [r3, #12]
   b7bd0:	9301      	str	r3, [sp, #4]
   b7bd2:	bd08      	pop	{r3, pc}
   b7bd4:	00030228 	.word	0x00030228

000b7bd8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b7bd8:	b508      	push	{r3, lr}
   b7bda:	4b02      	ldr	r3, [pc, #8]	; (b7be4 <hal_i2c_begin_transmission+0xc>)
   b7bdc:	681b      	ldr	r3, [r3, #0]
   b7bde:	699b      	ldr	r3, [r3, #24]
   b7be0:	9301      	str	r3, [sp, #4]
   b7be2:	bd08      	pop	{r3, pc}
   b7be4:	00030228 	.word	0x00030228

000b7be8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b7be8:	b508      	push	{r3, lr}
   b7bea:	4b02      	ldr	r3, [pc, #8]	; (b7bf4 <hal_i2c_end_transmission+0xc>)
   b7bec:	681b      	ldr	r3, [r3, #0]
   b7bee:	69db      	ldr	r3, [r3, #28]
   b7bf0:	9301      	str	r3, [sp, #4]
   b7bf2:	bd08      	pop	{r3, pc}
   b7bf4:	00030228 	.word	0x00030228

000b7bf8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b7bf8:	b508      	push	{r3, lr}
   b7bfa:	4b02      	ldr	r3, [pc, #8]	; (b7c04 <hal_i2c_write+0xc>)
   b7bfc:	681b      	ldr	r3, [r3, #0]
   b7bfe:	6a1b      	ldr	r3, [r3, #32]
   b7c00:	9301      	str	r3, [sp, #4]
   b7c02:	bd08      	pop	{r3, pc}
   b7c04:	00030228 	.word	0x00030228

000b7c08 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b7c08:	b508      	push	{r3, lr}
   b7c0a:	4b02      	ldr	r3, [pc, #8]	; (b7c14 <hal_i2c_available+0xc>)
   b7c0c:	681b      	ldr	r3, [r3, #0]
   b7c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7c10:	9301      	str	r3, [sp, #4]
   b7c12:	bd08      	pop	{r3, pc}
   b7c14:	00030228 	.word	0x00030228

000b7c18 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b7c18:	b508      	push	{r3, lr}
   b7c1a:	4b02      	ldr	r3, [pc, #8]	; (b7c24 <hal_i2c_read+0xc>)
   b7c1c:	681b      	ldr	r3, [r3, #0]
   b7c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7c20:	9301      	str	r3, [sp, #4]
   b7c22:	bd08      	pop	{r3, pc}
   b7c24:	00030228 	.word	0x00030228

000b7c28 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b7c28:	b508      	push	{r3, lr}
   b7c2a:	4b02      	ldr	r3, [pc, #8]	; (b7c34 <hal_i2c_peek+0xc>)
   b7c2c:	681b      	ldr	r3, [r3, #0]
   b7c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7c30:	9301      	str	r3, [sp, #4]
   b7c32:	bd08      	pop	{r3, pc}
   b7c34:	00030228 	.word	0x00030228

000b7c38 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7c38:	b508      	push	{r3, lr}
   b7c3a:	4b02      	ldr	r3, [pc, #8]	; (b7c44 <hal_i2c_flush+0xc>)
   b7c3c:	681b      	ldr	r3, [r3, #0]
   b7c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7c40:	9301      	str	r3, [sp, #4]
   b7c42:	bd08      	pop	{r3, pc}
   b7c44:	00030228 	.word	0x00030228

000b7c48 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b7c48:	b508      	push	{r3, lr}
   b7c4a:	4b02      	ldr	r3, [pc, #8]	; (b7c54 <hal_i2c_is_enabled+0xc>)
   b7c4c:	681b      	ldr	r3, [r3, #0]
   b7c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7c50:	9301      	str	r3, [sp, #4]
   b7c52:	bd08      	pop	{r3, pc}
   b7c54:	00030228 	.word	0x00030228

000b7c58 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b7c58:	b508      	push	{r3, lr}
   b7c5a:	4b02      	ldr	r3, [pc, #8]	; (b7c64 <hal_i2c_init+0xc>)
   b7c5c:	681b      	ldr	r3, [r3, #0]
   b7c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7c60:	9301      	str	r3, [sp, #4]
   b7c62:	bd08      	pop	{r3, pc}
   b7c64:	00030228 	.word	0x00030228

000b7c68 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b7c68:	b508      	push	{r3, lr}
   b7c6a:	4b02      	ldr	r3, [pc, #8]	; (b7c74 <hal_i2c_request_ex+0xc>)
   b7c6c:	681b      	ldr	r3, [r3, #0]
   b7c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7c70:	9301      	str	r3, [sp, #4]
   b7c72:	bd08      	pop	{r3, pc}
   b7c74:	00030228 	.word	0x00030228

000b7c78 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b7c78:	b508      	push	{r3, lr}
   b7c7a:	4b02      	ldr	r3, [pc, #8]	; (b7c84 <sock_setsockopt+0xc>)
   b7c7c:	681b      	ldr	r3, [r3, #0]
   b7c7e:	699b      	ldr	r3, [r3, #24]
   b7c80:	9301      	str	r3, [sp, #4]
   b7c82:	bd08      	pop	{r3, pc}
   b7c84:	00030238 	.word	0x00030238

000b7c88 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b7c88:	b508      	push	{r3, lr}
   b7c8a:	4b02      	ldr	r3, [pc, #8]	; (b7c94 <sock_close+0xc>)
   b7c8c:	681b      	ldr	r3, [r3, #0]
   b7c8e:	69db      	ldr	r3, [r3, #28]
   b7c90:	9301      	str	r3, [sp, #4]
   b7c92:	bd08      	pop	{r3, pc}
   b7c94:	00030238 	.word	0x00030238

000b7c98 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b7c98:	b508      	push	{r3, lr}
   b7c9a:	4b02      	ldr	r3, [pc, #8]	; (b7ca4 <sock_connect+0xc>)
   b7c9c:	681b      	ldr	r3, [r3, #0]
   b7c9e:	6a1b      	ldr	r3, [r3, #32]
   b7ca0:	9301      	str	r3, [sp, #4]
   b7ca2:	bd08      	pop	{r3, pc}
   b7ca4:	00030238 	.word	0x00030238

000b7ca8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b7ca8:	b508      	push	{r3, lr}
   b7caa:	4b02      	ldr	r3, [pc, #8]	; (b7cb4 <sock_recv+0xc>)
   b7cac:	681b      	ldr	r3, [r3, #0]
   b7cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7cb0:	9301      	str	r3, [sp, #4]
   b7cb2:	bd08      	pop	{r3, pc}
   b7cb4:	00030238 	.word	0x00030238

000b7cb8 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b7cb8:	b508      	push	{r3, lr}
   b7cba:	4b02      	ldr	r3, [pc, #8]	; (b7cc4 <sock_send+0xc>)
   b7cbc:	681b      	ldr	r3, [r3, #0]
   b7cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7cc0:	9301      	str	r3, [sp, #4]
   b7cc2:	bd08      	pop	{r3, pc}
   b7cc4:	00030238 	.word	0x00030238

000b7cc8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b7cc8:	b508      	push	{r3, lr}
   b7cca:	4b02      	ldr	r3, [pc, #8]	; (b7cd4 <sock_socket+0xc>)
   b7ccc:	681b      	ldr	r3, [r3, #0]
   b7cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7cd0:	9301      	str	r3, [sp, #4]
   b7cd2:	bd08      	pop	{r3, pc}
   b7cd4:	00030238 	.word	0x00030238

000b7cd8 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b7cd8:	b508      	push	{r3, lr}
   b7cda:	4b02      	ldr	r3, [pc, #8]	; (b7ce4 <hal_spi_begin+0xc>)
   b7cdc:	681b      	ldr	r3, [r3, #0]
   b7cde:	681b      	ldr	r3, [r3, #0]
   b7ce0:	9301      	str	r3, [sp, #4]
   b7ce2:	bd08      	pop	{r3, pc}
   b7ce4:	00030230 	.word	0x00030230

000b7ce8 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b7ce8:	b508      	push	{r3, lr}
   b7cea:	4b02      	ldr	r3, [pc, #8]	; (b7cf4 <hal_spi_set_bit_order+0xc>)
   b7cec:	681b      	ldr	r3, [r3, #0]
   b7cee:	689b      	ldr	r3, [r3, #8]
   b7cf0:	9301      	str	r3, [sp, #4]
   b7cf2:	bd08      	pop	{r3, pc}
   b7cf4:	00030230 	.word	0x00030230

000b7cf8 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b7cf8:	b508      	push	{r3, lr}
   b7cfa:	4b02      	ldr	r3, [pc, #8]	; (b7d04 <hal_spi_set_data_mode+0xc>)
   b7cfc:	681b      	ldr	r3, [r3, #0]
   b7cfe:	68db      	ldr	r3, [r3, #12]
   b7d00:	9301      	str	r3, [sp, #4]
   b7d02:	bd08      	pop	{r3, pc}
   b7d04:	00030230 	.word	0x00030230

000b7d08 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b7d08:	b508      	push	{r3, lr}
   b7d0a:	4b02      	ldr	r3, [pc, #8]	; (b7d14 <hal_spi_set_clock_divider+0xc>)
   b7d0c:	681b      	ldr	r3, [r3, #0]
   b7d0e:	691b      	ldr	r3, [r3, #16]
   b7d10:	9301      	str	r3, [sp, #4]
   b7d12:	bd08      	pop	{r3, pc}
   b7d14:	00030230 	.word	0x00030230

000b7d18 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b7d18:	b508      	push	{r3, lr}
   b7d1a:	4b02      	ldr	r3, [pc, #8]	; (b7d24 <hal_spi_transfer+0xc>)
   b7d1c:	681b      	ldr	r3, [r3, #0]
   b7d1e:	695b      	ldr	r3, [r3, #20]
   b7d20:	9301      	str	r3, [sp, #4]
   b7d22:	bd08      	pop	{r3, pc}
   b7d24:	00030230 	.word	0x00030230

000b7d28 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b7d28:	b508      	push	{r3, lr}
   b7d2a:	4b02      	ldr	r3, [pc, #8]	; (b7d34 <hal_spi_init+0xc>)
   b7d2c:	681b      	ldr	r3, [r3, #0]
   b7d2e:	69db      	ldr	r3, [r3, #28]
   b7d30:	9301      	str	r3, [sp, #4]
   b7d32:	bd08      	pop	{r3, pc}
   b7d34:	00030230 	.word	0x00030230

000b7d38 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b7d38:	b508      	push	{r3, lr}
   b7d3a:	4b02      	ldr	r3, [pc, #8]	; (b7d44 <hal_spi_is_enabled+0xc>)
   b7d3c:	681b      	ldr	r3, [r3, #0]
   b7d3e:	6a1b      	ldr	r3, [r3, #32]
   b7d40:	9301      	str	r3, [sp, #4]
   b7d42:	bd08      	pop	{r3, pc}
   b7d44:	00030230 	.word	0x00030230

000b7d48 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b7d48:	b508      	push	{r3, lr}
   b7d4a:	4b02      	ldr	r3, [pc, #8]	; (b7d54 <hal_spi_info+0xc>)
   b7d4c:	681b      	ldr	r3, [r3, #0]
   b7d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7d50:	9301      	str	r3, [sp, #4]
   b7d52:	bd08      	pop	{r3, pc}
   b7d54:	00030230 	.word	0x00030230

000b7d58 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b7d58:	b508      	push	{r3, lr}
   b7d5a:	4b02      	ldr	r3, [pc, #8]	; (b7d64 <hal_spi_transfer_dma+0xc>)
   b7d5c:	681b      	ldr	r3, [r3, #0]
   b7d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7d60:	9301      	str	r3, [sp, #4]
   b7d62:	bd08      	pop	{r3, pc}
   b7d64:	00030230 	.word	0x00030230

000b7d68 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b7d68:	b508      	push	{r3, lr}
   b7d6a:	4b02      	ldr	r3, [pc, #8]	; (b7d74 <hal_spi_transfer_dma_status+0xc>)
   b7d6c:	681b      	ldr	r3, [r3, #0]
   b7d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7d70:	9301      	str	r3, [sp, #4]
   b7d72:	bd08      	pop	{r3, pc}
   b7d74:	00030230 	.word	0x00030230

000b7d78 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b7d78:	b508      	push	{r3, lr}
   b7d7a:	4b02      	ldr	r3, [pc, #8]	; (b7d84 <hal_spi_set_settings+0xc>)
   b7d7c:	681b      	ldr	r3, [r3, #0]
   b7d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7d80:	9301      	str	r3, [sp, #4]
   b7d82:	bd08      	pop	{r3, pc}
   b7d84:	00030230 	.word	0x00030230

000b7d88 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b7d88:	b508      	push	{r3, lr}
   b7d8a:	4b02      	ldr	r3, [pc, #8]	; (b7d94 <hal_spi_acquire+0xc>)
   b7d8c:	681b      	ldr	r3, [r3, #0]
   b7d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7d90:	9301      	str	r3, [sp, #4]
   b7d92:	bd08      	pop	{r3, pc}
   b7d94:	00030230 	.word	0x00030230

000b7d98 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b7d98:	b508      	push	{r3, lr}
   b7d9a:	4b02      	ldr	r3, [pc, #8]	; (b7da4 <hal_spi_release+0xc>)
   b7d9c:	681b      	ldr	r3, [r3, #0]
   b7d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7da0:	9301      	str	r3, [sp, #4]
   b7da2:	bd08      	pop	{r3, pc}
   b7da4:	00030230 	.word	0x00030230

000b7da8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7da8:	b508      	push	{r3, lr}
   b7daa:	4b02      	ldr	r3, [pc, #8]	; (b7db4 <HAL_USB_USART_Init+0xc>)
   b7dac:	681b      	ldr	r3, [r3, #0]
   b7dae:	681b      	ldr	r3, [r3, #0]
   b7db0:	9301      	str	r3, [sp, #4]
   b7db2:	bd08      	pop	{r3, pc}
   b7db4:	0003024c 	.word	0x0003024c

000b7db8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b7db8:	b508      	push	{r3, lr}
   b7dba:	4b02      	ldr	r3, [pc, #8]	; (b7dc4 <HAL_USB_USART_Begin+0xc>)
   b7dbc:	681b      	ldr	r3, [r3, #0]
   b7dbe:	685b      	ldr	r3, [r3, #4]
   b7dc0:	9301      	str	r3, [sp, #4]
   b7dc2:	bd08      	pop	{r3, pc}
   b7dc4:	0003024c 	.word	0x0003024c

000b7dc8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b7dc8:	b508      	push	{r3, lr}
   b7dca:	4b02      	ldr	r3, [pc, #8]	; (b7dd4 <HAL_USB_USART_Available_Data+0xc>)
   b7dcc:	681b      	ldr	r3, [r3, #0]
   b7dce:	691b      	ldr	r3, [r3, #16]
   b7dd0:	9301      	str	r3, [sp, #4]
   b7dd2:	bd08      	pop	{r3, pc}
   b7dd4:	0003024c 	.word	0x0003024c

000b7dd8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b7dd8:	b508      	push	{r3, lr}
   b7dda:	4b02      	ldr	r3, [pc, #8]	; (b7de4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7ddc:	681b      	ldr	r3, [r3, #0]
   b7dde:	695b      	ldr	r3, [r3, #20]
   b7de0:	9301      	str	r3, [sp, #4]
   b7de2:	bd08      	pop	{r3, pc}
   b7de4:	0003024c 	.word	0x0003024c

000b7de8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7de8:	b508      	push	{r3, lr}
   b7dea:	4b02      	ldr	r3, [pc, #8]	; (b7df4 <HAL_USB_USART_Receive_Data+0xc>)
   b7dec:	681b      	ldr	r3, [r3, #0]
   b7dee:	699b      	ldr	r3, [r3, #24]
   b7df0:	9301      	str	r3, [sp, #4]
   b7df2:	bd08      	pop	{r3, pc}
   b7df4:	0003024c 	.word	0x0003024c

000b7df8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7df8:	b508      	push	{r3, lr}
   b7dfa:	4b02      	ldr	r3, [pc, #8]	; (b7e04 <HAL_USB_USART_Send_Data+0xc>)
   b7dfc:	681b      	ldr	r3, [r3, #0]
   b7dfe:	69db      	ldr	r3, [r3, #28]
   b7e00:	9301      	str	r3, [sp, #4]
   b7e02:	bd08      	pop	{r3, pc}
   b7e04:	0003024c 	.word	0x0003024c

000b7e08 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7e08:	b508      	push	{r3, lr}
   b7e0a:	4b02      	ldr	r3, [pc, #8]	; (b7e14 <HAL_USB_USART_Flush_Data+0xc>)
   b7e0c:	681b      	ldr	r3, [r3, #0]
   b7e0e:	6a1b      	ldr	r3, [r3, #32]
   b7e10:	9301      	str	r3, [sp, #4]
   b7e12:	bd08      	pop	{r3, pc}
   b7e14:	0003024c 	.word	0x0003024c

000b7e18 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   b7e18:	b508      	push	{r3, lr}
   b7e1a:	4b02      	ldr	r3, [pc, #8]	; (b7e24 <HAL_USB_USART_Is_Enabled+0xc>)
   b7e1c:	681b      	ldr	r3, [r3, #0]
   b7e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7e20:	9301      	str	r3, [sp, #4]
   b7e22:	bd08      	pop	{r3, pc}
   b7e24:	0003024c 	.word	0x0003024c

000b7e28 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7e28:	b508      	push	{r3, lr}
   b7e2a:	4b02      	ldr	r3, [pc, #8]	; (b7e34 <panic_+0xc>)
   b7e2c:	681b      	ldr	r3, [r3, #0]
   b7e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7e30:	9301      	str	r3, [sp, #4]
   b7e32:	bd08      	pop	{r3, pc}
   b7e34:	00030260 	.word	0x00030260

000b7e38 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7e38:	b508      	push	{r3, lr}
   b7e3a:	4b02      	ldr	r3, [pc, #8]	; (b7e44 <log_message+0xc>)
   b7e3c:	681b      	ldr	r3, [r3, #0]
   b7e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7e40:	9301      	str	r3, [sp, #4]
   b7e42:	bd08      	pop	{r3, pc}
   b7e44:	00030260 	.word	0x00030260

000b7e48 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b7e48:	b508      	push	{r3, lr}
   b7e4a:	4b02      	ldr	r3, [pc, #8]	; (b7e54 <system_mode+0xc>)
   b7e4c:	681b      	ldr	r3, [r3, #0]
   b7e4e:	681b      	ldr	r3, [r3, #0]
   b7e50:	9301      	str	r3, [sp, #4]
   b7e52:	bd08      	pop	{r3, pc}
   b7e54:	00030220 	.word	0x00030220

000b7e58 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7e58:	b508      	push	{r3, lr}
   b7e5a:	4b02      	ldr	r3, [pc, #8]	; (b7e64 <set_system_mode+0xc>)
   b7e5c:	681b      	ldr	r3, [r3, #0]
   b7e5e:	685b      	ldr	r3, [r3, #4]
   b7e60:	9301      	str	r3, [sp, #4]
   b7e62:	bd08      	pop	{r3, pc}
   b7e64:	00030220 	.word	0x00030220

000b7e68 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7e68:	b508      	push	{r3, lr}
   b7e6a:	4b02      	ldr	r3, [pc, #8]	; (b7e74 <system_delay_ms+0xc>)
   b7e6c:	681b      	ldr	r3, [r3, #0]
   b7e6e:	695b      	ldr	r3, [r3, #20]
   b7e70:	9301      	str	r3, [sp, #4]
   b7e72:	bd08      	pop	{r3, pc}
   b7e74:	00030220 	.word	0x00030220

000b7e78 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b7e78:	b508      	push	{r3, lr}
   b7e7a:	4b02      	ldr	r3, [pc, #8]	; (b7e84 <system_thread_get_state+0xc>)
   b7e7c:	681b      	ldr	r3, [r3, #0]
   b7e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7e80:	9301      	str	r3, [sp, #4]
   b7e82:	bd08      	pop	{r3, pc}
   b7e84:	00030220 	.word	0x00030220

000b7e88 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7e88:	b508      	push	{r3, lr}
   b7e8a:	4b03      	ldr	r3, [pc, #12]	; (b7e98 <system_ctrl_set_app_request_handler+0x10>)
   b7e8c:	681b      	ldr	r3, [r3, #0]
   b7e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7e92:	9301      	str	r3, [sp, #4]
   b7e94:	bd08      	pop	{r3, pc}
   b7e96:	0000      	.short	0x0000
   b7e98:	00030220 	.word	0x00030220

000b7e9c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7e9c:	b508      	push	{r3, lr}
   b7e9e:	4b03      	ldr	r3, [pc, #12]	; (b7eac <system_ctrl_set_result+0x10>)
   b7ea0:	681b      	ldr	r3, [r3, #0]
   b7ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7ea6:	9301      	str	r3, [sp, #4]
   b7ea8:	bd08      	pop	{r3, pc}
   b7eaa:	0000      	.short	0x0000
   b7eac:	00030220 	.word	0x00030220

000b7eb0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7eb0:	b508      	push	{r3, lr}
   b7eb2:	4b02      	ldr	r3, [pc, #8]	; (b7ebc <network_connect+0xc>)
   b7eb4:	681b      	ldr	r3, [r3, #0]
   b7eb6:	685b      	ldr	r3, [r3, #4]
   b7eb8:	9301      	str	r3, [sp, #4]
   b7eba:	bd08      	pop	{r3, pc}
   b7ebc:	00030240 	.word	0x00030240

000b7ec0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7ec0:	b508      	push	{r3, lr}
   b7ec2:	4b02      	ldr	r3, [pc, #8]	; (b7ecc <network_connecting+0xc>)
   b7ec4:	681b      	ldr	r3, [r3, #0]
   b7ec6:	689b      	ldr	r3, [r3, #8]
   b7ec8:	9301      	str	r3, [sp, #4]
   b7eca:	bd08      	pop	{r3, pc}
   b7ecc:	00030240 	.word	0x00030240

000b7ed0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7ed0:	b508      	push	{r3, lr}
   b7ed2:	4b02      	ldr	r3, [pc, #8]	; (b7edc <network_disconnect+0xc>)
   b7ed4:	681b      	ldr	r3, [r3, #0]
   b7ed6:	68db      	ldr	r3, [r3, #12]
   b7ed8:	9301      	str	r3, [sp, #4]
   b7eda:	bd08      	pop	{r3, pc}
   b7edc:	00030240 	.word	0x00030240

000b7ee0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7ee0:	b508      	push	{r3, lr}
   b7ee2:	4b02      	ldr	r3, [pc, #8]	; (b7eec <network_ready+0xc>)
   b7ee4:	681b      	ldr	r3, [r3, #0]
   b7ee6:	691b      	ldr	r3, [r3, #16]
   b7ee8:	9301      	str	r3, [sp, #4]
   b7eea:	bd08      	pop	{r3, pc}
   b7eec:	00030240 	.word	0x00030240

000b7ef0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7ef0:	b508      	push	{r3, lr}
   b7ef2:	4b02      	ldr	r3, [pc, #8]	; (b7efc <network_on+0xc>)
   b7ef4:	681b      	ldr	r3, [r3, #0]
   b7ef6:	695b      	ldr	r3, [r3, #20]
   b7ef8:	9301      	str	r3, [sp, #4]
   b7efa:	bd08      	pop	{r3, pc}
   b7efc:	00030240 	.word	0x00030240

000b7f00 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7f00:	b508      	push	{r3, lr}
   b7f02:	4b02      	ldr	r3, [pc, #8]	; (b7f0c <network_off+0xc>)
   b7f04:	681b      	ldr	r3, [r3, #0]
   b7f06:	699b      	ldr	r3, [r3, #24]
   b7f08:	9301      	str	r3, [sp, #4]
   b7f0a:	bd08      	pop	{r3, pc}
   b7f0c:	00030240 	.word	0x00030240

000b7f10 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7f10:	b508      	push	{r3, lr}
   b7f12:	4b02      	ldr	r3, [pc, #8]	; (b7f1c <network_listen+0xc>)
   b7f14:	681b      	ldr	r3, [r3, #0]
   b7f16:	69db      	ldr	r3, [r3, #28]
   b7f18:	9301      	str	r3, [sp, #4]
   b7f1a:	bd08      	pop	{r3, pc}
   b7f1c:	00030240 	.word	0x00030240

000b7f20 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7f20:	b508      	push	{r3, lr}
   b7f22:	4b02      	ldr	r3, [pc, #8]	; (b7f2c <network_listening+0xc>)
   b7f24:	681b      	ldr	r3, [r3, #0]
   b7f26:	6a1b      	ldr	r3, [r3, #32]
   b7f28:	9301      	str	r3, [sp, #4]
   b7f2a:	bd08      	pop	{r3, pc}
   b7f2c:	00030240 	.word	0x00030240

000b7f30 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7f30:	b508      	push	{r3, lr}
   b7f32:	4b02      	ldr	r3, [pc, #8]	; (b7f3c <network_set_listen_timeout+0xc>)
   b7f34:	681b      	ldr	r3, [r3, #0]
   b7f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7f38:	9301      	str	r3, [sp, #4]
   b7f3a:	bd08      	pop	{r3, pc}
   b7f3c:	00030240 	.word	0x00030240

000b7f40 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7f40:	b508      	push	{r3, lr}
   b7f42:	4b02      	ldr	r3, [pc, #8]	; (b7f4c <network_get_listen_timeout+0xc>)
   b7f44:	681b      	ldr	r3, [r3, #0]
   b7f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7f48:	9301      	str	r3, [sp, #4]
   b7f4a:	bd08      	pop	{r3, pc}
   b7f4c:	00030240 	.word	0x00030240

000b7f50 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7f50:	b508      	push	{r3, lr}
   b7f52:	4b02      	ldr	r3, [pc, #8]	; (b7f5c <network_is_on+0xc>)
   b7f54:	681b      	ldr	r3, [r3, #0]
   b7f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7f58:	9301      	str	r3, [sp, #4]
   b7f5a:	bd08      	pop	{r3, pc}
   b7f5c:	00030240 	.word	0x00030240

000b7f60 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7f60:	b508      	push	{r3, lr}
   b7f62:	4b02      	ldr	r3, [pc, #8]	; (b7f6c <network_is_off+0xc>)
   b7f64:	681b      	ldr	r3, [r3, #0]
   b7f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7f68:	9301      	str	r3, [sp, #4]
   b7f6a:	bd08      	pop	{r3, pc}
   b7f6c:	00030240 	.word	0x00030240

000b7f70 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b7f70:	b508      	push	{r3, lr}
   b7f72:	4b02      	ldr	r3, [pc, #8]	; (b7f7c <spark_process+0xc>)
   b7f74:	681b      	ldr	r3, [r3, #0]
   b7f76:	689b      	ldr	r3, [r3, #8]
   b7f78:	9301      	str	r3, [sp, #4]
   b7f7a:	bd08      	pop	{r3, pc}
   b7f7c:	00030244 	.word	0x00030244

000b7f80 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b7f80:	b508      	push	{r3, lr}
   b7f82:	4b02      	ldr	r3, [pc, #8]	; (b7f8c <spark_cloud_flag_connected+0xc>)
   b7f84:	681b      	ldr	r3, [r3, #0]
   b7f86:	695b      	ldr	r3, [r3, #20]
   b7f88:	9301      	str	r3, [sp, #4]
   b7f8a:	bd08      	pop	{r3, pc}
   b7f8c:	00030244 	.word	0x00030244

000b7f90 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b7f90:	b508      	push	{r3, lr}
   b7f92:	4b02      	ldr	r3, [pc, #8]	; (b7f9c <spark_sync_time+0xc>)
   b7f94:	681b      	ldr	r3, [r3, #0]
   b7f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7f98:	9301      	str	r3, [sp, #4]
   b7f9a:	bd08      	pop	{r3, pc}
   b7f9c:	00030244 	.word	0x00030244

000b7fa0 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b7fa0:	b508      	push	{r3, lr}
   b7fa2:	4b02      	ldr	r3, [pc, #8]	; (b7fac <spark_sync_time_pending+0xc>)
   b7fa4:	681b      	ldr	r3, [r3, #0]
   b7fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7fa8:	9301      	str	r3, [sp, #4]
   b7faa:	bd08      	pop	{r3, pc}
   b7fac:	00030244 	.word	0x00030244

000b7fb0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7fb0:	b508      	push	{r3, lr}
   b7fb2:	4b02      	ldr	r3, [pc, #8]	; (b7fbc <spark_set_random_seed_from_cloud_handler+0xc>)
   b7fb4:	681b      	ldr	r3, [r3, #0]
   b7fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7fb8:	9301      	str	r3, [sp, #4]
   b7fba:	bd08      	pop	{r3, pc}
   b7fbc:	00030244 	.word	0x00030244

000b7fc0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7fc0:	b508      	push	{r3, lr}
   b7fc2:	4b02      	ldr	r3, [pc, #8]	; (b7fcc <malloc+0xc>)
   b7fc4:	681b      	ldr	r3, [r3, #0]
   b7fc6:	681b      	ldr	r3, [r3, #0]
   b7fc8:	9301      	str	r3, [sp, #4]
   b7fca:	bd08      	pop	{r3, pc}
   b7fcc:	0003021c 	.word	0x0003021c

000b7fd0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7fd0:	b508      	push	{r3, lr}
   b7fd2:	4b02      	ldr	r3, [pc, #8]	; (b7fdc <free+0xc>)
   b7fd4:	681b      	ldr	r3, [r3, #0]
   b7fd6:	685b      	ldr	r3, [r3, #4]
   b7fd8:	9301      	str	r3, [sp, #4]
   b7fda:	bd08      	pop	{r3, pc}
   b7fdc:	0003021c 	.word	0x0003021c

000b7fe0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7fe0:	b508      	push	{r3, lr}
   b7fe2:	4b02      	ldr	r3, [pc, #8]	; (b7fec <realloc+0xc>)
   b7fe4:	681b      	ldr	r3, [r3, #0]
   b7fe6:	689b      	ldr	r3, [r3, #8]
   b7fe8:	9301      	str	r3, [sp, #4]
   b7fea:	bd08      	pop	{r3, pc}
   b7fec:	0003021c 	.word	0x0003021c

000b7ff0 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b7ff0:	b508      	push	{r3, lr}
   b7ff2:	4b02      	ldr	r3, [pc, #8]	; (b7ffc <sprintf+0xc>)
   b7ff4:	681b      	ldr	r3, [r3, #0]
   b7ff6:	68db      	ldr	r3, [r3, #12]
   b7ff8:	9301      	str	r3, [sp, #4]
   b7ffa:	bd08      	pop	{r3, pc}
   b7ffc:	0003021c 	.word	0x0003021c

000b8000 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b8000:	b508      	push	{r3, lr}
   b8002:	4b02      	ldr	r3, [pc, #8]	; (b800c <siprintf+0xc>)
   b8004:	681b      	ldr	r3, [r3, #0]
   b8006:	691b      	ldr	r3, [r3, #16]
   b8008:	9301      	str	r3, [sp, #4]
   b800a:	bd08      	pop	{r3, pc}
   b800c:	0003021c 	.word	0x0003021c

000b8010 <vsnprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b8010:	b508      	push	{r3, lr}
   b8012:	4b02      	ldr	r3, [pc, #8]	; (b801c <vsnprintf+0xc>)
   b8014:	681b      	ldr	r3, [r3, #0]
   b8016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8018:	9301      	str	r3, [sp, #4]
   b801a:	bd08      	pop	{r3, pc}
   b801c:	0003021c 	.word	0x0003021c

000b8020 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b8020:	b508      	push	{r3, lr}
   b8022:	4b02      	ldr	r3, [pc, #8]	; (b802c <__errno+0xc>)
   b8024:	681b      	ldr	r3, [r3, #0]
   b8026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8028:	9301      	str	r3, [sp, #4]
   b802a:	bd08      	pop	{r3, pc}
   b802c:	0003021c 	.word	0x0003021c

000b8030 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b8030:	b508      	push	{r3, lr}
   b8032:	4b02      	ldr	r3, [pc, #8]	; (b803c <__assert_func+0xc>)
   b8034:	681b      	ldr	r3, [r3, #0]
   b8036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8038:	9301      	str	r3, [sp, #4]
   b803a:	bd08      	pop	{r3, pc}
   b803c:	0003021c 	.word	0x0003021c

000b8040 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b8040:	b508      	push	{r3, lr}
   b8042:	4b02      	ldr	r3, [pc, #8]	; (b804c <newlib_impure_ptr_callback+0xc>)
   b8044:	681b      	ldr	r3, [r3, #0]
   b8046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8048:	9301      	str	r3, [sp, #4]
   b804a:	bd08      	pop	{r3, pc}
   b804c:	0003021c 	.word	0x0003021c

000b8050 <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b8050:	b508      	push	{r3, lr}
   b8052:	4b02      	ldr	r3, [pc, #8]	; (b805c <localtime_r+0xc>)
   b8054:	681b      	ldr	r3, [r3, #0]
   b8056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8058:	9301      	str	r3, [sp, #4]
   b805a:	bd08      	pop	{r3, pc}
   b805c:	0003021c 	.word	0x0003021c

000b8060 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8060:	2200      	movs	r2, #0
   b8062:	6840      	ldr	r0, [r0, #4]
   b8064:	4611      	mov	r1, r2
   b8066:	f7ff bf5b 	b.w	b7f20 <network_listening>

000b806a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b806a:	2200      	movs	r2, #0
   b806c:	6840      	ldr	r0, [r0, #4]
   b806e:	4611      	mov	r1, r2
   b8070:	f7ff bf66 	b.w	b7f40 <network_get_listen_timeout>

000b8074 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8074:	6840      	ldr	r0, [r0, #4]
   b8076:	2200      	movs	r2, #0
   b8078:	f7ff bf5a 	b.w	b7f30 <network_set_listen_timeout>

000b807c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b807c:	6840      	ldr	r0, [r0, #4]
   b807e:	2200      	movs	r2, #0
   b8080:	f081 0101 	eor.w	r1, r1, #1
   b8084:	f7ff bf44 	b.w	b7f10 <network_listen>

000b8088 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8088:	2300      	movs	r3, #0
   b808a:	6840      	ldr	r0, [r0, #4]
   b808c:	461a      	mov	r2, r3
   b808e:	4619      	mov	r1, r3
   b8090:	f7ff bf36 	b.w	b7f00 <network_off>

000b8094 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8094:	2300      	movs	r3, #0
   b8096:	6840      	ldr	r0, [r0, #4]
   b8098:	461a      	mov	r2, r3
   b809a:	4619      	mov	r1, r3
   b809c:	f7ff bf28 	b.w	b7ef0 <network_on>

000b80a0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b80a0:	2200      	movs	r2, #0
   b80a2:	6840      	ldr	r0, [r0, #4]
   b80a4:	4611      	mov	r1, r2
   b80a6:	f7ff bf1b 	b.w	b7ee0 <network_ready>

000b80aa <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b80aa:	2200      	movs	r2, #0
   b80ac:	6840      	ldr	r0, [r0, #4]
   b80ae:	4611      	mov	r1, r2
   b80b0:	f7ff bf06 	b.w	b7ec0 <network_connecting>

000b80b4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b80b4:	6840      	ldr	r0, [r0, #4]
   b80b6:	2200      	movs	r2, #0
   b80b8:	2102      	movs	r1, #2
   b80ba:	f7ff bf09 	b.w	b7ed0 <network_disconnect>

000b80be <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b80be:	2300      	movs	r3, #0
   b80c0:	6840      	ldr	r0, [r0, #4]
   b80c2:	461a      	mov	r2, r3
   b80c4:	f7ff bef4 	b.w	b7eb0 <network_connect>

000b80c8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b80c8:	4b02      	ldr	r3, [pc, #8]	; (b80d4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b80ca:	2203      	movs	r2, #3
   b80cc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b80ce:	4a02      	ldr	r2, [pc, #8]	; (b80d8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b80d0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b80d2:	4770      	bx	lr
   b80d4:	2003e6b4 	.word	0x2003e6b4
   b80d8:	000bc9ac 	.word	0x000bc9ac

000b80dc <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b80dc:	2100      	movs	r1, #0
   b80de:	f7ff be5b 	b.w	b7d98 <hal_spi_release>

000b80e2 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b80e2:	2100      	movs	r1, #0
   b80e4:	f7ff be50 	b.w	b7d88 <hal_spi_acquire>

000b80e8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b80e8:	b510      	push	{r4, lr}
   b80ea:	4604      	mov	r4, r0
   b80ec:	4608      	mov	r0, r1
{
    _spi = spi;
   b80ee:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b80f0:	f7ff fe1a 	bl	b7d28 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b80f4:	2300      	movs	r3, #0
   b80f6:	6063      	str	r3, [r4, #4]
}
   b80f8:	4620      	mov	r0, r4
   b80fa:	bd10      	pop	{r4, pc}

000b80fc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b80fc:	b513      	push	{r0, r1, r4, lr}
   b80fe:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b8100:	7800      	ldrb	r0, [r0, #0]
   b8102:	f7ff ffee 	bl	b80e2 <_ZN8SPIClass4lockEv.isra.0>
   b8106:	b958      	cbnz	r0, b8120 <_ZN8SPIClass5beginEv+0x24>
   b8108:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b810a:	9001      	str	r0, [sp, #4]
   b810c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8110:	f7ff fde2 	bl	b7cd8 <hal_spi_begin>
        unlock();
   b8114:	9801      	ldr	r0, [sp, #4]
    }
}
   b8116:	b002      	add	sp, #8
   b8118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b811c:	f7ff bfde 	b.w	b80dc <_ZN8SPIClass6unlockEv.isra.0>
   b8120:	b002      	add	sp, #8
   b8122:	bd10      	pop	{r4, pc}

000b8124 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b8124:	b513      	push	{r0, r1, r4, lr}
   b8126:	4604      	mov	r4, r0
    if (!lock())
   b8128:	7800      	ldrb	r0, [r0, #0]
{
   b812a:	9101      	str	r1, [sp, #4]
    if (!lock())
   b812c:	f7ff ffd9 	bl	b80e2 <_ZN8SPIClass4lockEv.isra.0>
   b8130:	9901      	ldr	r1, [sp, #4]
   b8132:	b948      	cbnz	r0, b8148 <_ZN8SPIClass11setBitOrderEh+0x24>
   b8134:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b8136:	9001      	str	r0, [sp, #4]
   b8138:	f7ff fdd6 	bl	b7ce8 <hal_spi_set_bit_order>
        unlock();
   b813c:	9801      	ldr	r0, [sp, #4]
    }
}
   b813e:	b002      	add	sp, #8
   b8140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8144:	f7ff bfca 	b.w	b80dc <_ZN8SPIClass6unlockEv.isra.0>
   b8148:	b002      	add	sp, #8
   b814a:	bd10      	pop	{r4, pc}

000b814c <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b814c:	b513      	push	{r0, r1, r4, lr}
   b814e:	4604      	mov	r4, r0
    if (!lock())
   b8150:	7800      	ldrb	r0, [r0, #0]
{
   b8152:	9101      	str	r1, [sp, #4]
    if (!lock())
   b8154:	f7ff ffc5 	bl	b80e2 <_ZN8SPIClass4lockEv.isra.0>
   b8158:	9901      	ldr	r1, [sp, #4]
   b815a:	b948      	cbnz	r0, b8170 <_ZN8SPIClass11setDataModeEh+0x24>
   b815c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b815e:	9001      	str	r0, [sp, #4]
   b8160:	f7ff fdca 	bl	b7cf8 <hal_spi_set_data_mode>
        unlock();
   b8164:	9801      	ldr	r0, [sp, #4]
    }
}
   b8166:	b002      	add	sp, #8
   b8168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b816c:	f7ff bfb6 	b.w	b80dc <_ZN8SPIClass6unlockEv.isra.0>
   b8170:	b002      	add	sp, #8
   b8172:	bd10      	pop	{r4, pc}

000b8174 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b8174:	7800      	ldrb	r0, [r0, #0]
   b8176:	f7ff bfb1 	b.w	b80dc <_ZN8SPIClass6unlockEv.isra.0>
	...

000b817c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b817c:	0840      	lsrs	r0, r0, #1
{
   b817e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b8180:	6018      	str	r0, [r3, #0]
   b8182:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b8184:	6818      	ldr	r0, [r3, #0]
   b8186:	4288      	cmp	r0, r1
   b8188:	b2e5      	uxtb	r5, r4
   b818a:	d906      	bls.n	b819a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b818c:	3401      	adds	r4, #1
   b818e:	2c08      	cmp	r4, #8
   b8190:	d002      	beq.n	b8198 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b8192:	0840      	lsrs	r0, r0, #1
   b8194:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b8196:	e7f5      	b.n	b8184 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b8198:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b819a:	4b02      	ldr	r3, [pc, #8]	; (b81a4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b819c:	5d5b      	ldrb	r3, [r3, r5]
   b819e:	7013      	strb	r3, [r2, #0]
}
   b81a0:	bd30      	pop	{r4, r5, pc}
   b81a2:	bf00      	nop
   b81a4:	000bc9e0 	.word	0x000bc9e0

000b81a8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b81a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b81ac:	4606      	mov	r6, r0
   b81ae:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b81b0:	7800      	ldrb	r0, [r0, #0]
{
   b81b2:	460c      	mov	r4, r1
    CHECK(lock());
   b81b4:	f7ff ff95 	bl	b80e2 <_ZN8SPIClass4lockEv.isra.0>
   b81b8:	2800      	cmp	r0, #0
   b81ba:	db1b      	blt.n	b81f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b81bc:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b81be:	2214      	movs	r2, #20
   b81c0:	2100      	movs	r1, #0
   b81c2:	a809      	add	r0, sp, #36	; 0x24
   b81c4:	f003 fcc2 	bl	bbb4c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b81c8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b81ca:	2200      	movs	r2, #0
   b81cc:	a909      	add	r1, sp, #36	; 0x24
   b81ce:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b81d0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b81d4:	f7ff fdb8 	bl	b7d48 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b81d8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b81dc:	b113      	cbz	r3, b81e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b81de:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b81e2:	b155      	cbz	r5, b81fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b81e4:	2700      	movs	r7, #0
   b81e6:	46b9      	mov	r9, r7
   b81e8:	46b8      	mov	r8, r7
   b81ea:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b81ec:	7923      	ldrb	r3, [r4, #4]
   b81ee:	b15d      	cbz	r5, b8208 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b81f0:	b1c3      	cbz	r3, b8224 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b81f2:	2000      	movs	r0, #0
}
   b81f4:	b00f      	add	sp, #60	; 0x3c
   b81f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b81fa:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b81fe:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b8202:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b8206:	e7f1      	b.n	b81ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b8208:	2b00      	cmp	r3, #0
   b820a:	d135      	bne.n	b8278 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b820c:	68a3      	ldr	r3, [r4, #8]
   b820e:	4543      	cmp	r3, r8
   b8210:	d108      	bne.n	b8224 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b8212:	f88d 9020 	strb.w	r9, [sp, #32]
   b8216:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b821a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b821e:	89a3      	ldrh	r3, [r4, #12]
   b8220:	429a      	cmp	r2, r3
   b8222:	d0e6      	beq.n	b81f2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b8224:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b8226:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b8228:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b822c:	980a      	ldr	r0, [sp, #40]	; 0x28
   b822e:	ab04      	add	r3, sp, #16
   b8230:	f10d 020f 	add.w	r2, sp, #15
   b8234:	f7ff ffa2 	bl	b817c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b8238:	7921      	ldrb	r1, [r4, #4]
   b823a:	b985      	cbnz	r5, b825e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b823c:	b989      	cbnz	r1, b8262 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b823e:	68a3      	ldr	r3, [r4, #8]
   b8240:	4543      	cmp	r3, r8
   b8242:	d30e      	bcc.n	b8262 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b8244:	f88d 9020 	strb.w	r9, [sp, #32]
   b8248:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b824c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b8250:	89a3      	ldrh	r3, [r4, #12]
   b8252:	429a      	cmp	r2, r3
   b8254:	d105      	bne.n	b8262 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b8256:	9b04      	ldr	r3, [sp, #16]
   b8258:	4543      	cmp	r3, r8
   b825a:	d102      	bne.n	b8262 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b825c:	e7c9      	b.n	b81f2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b825e:	2900      	cmp	r1, #0
   b8260:	d1f9      	bne.n	b8256 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b8262:	2300      	movs	r3, #0
   b8264:	9301      	str	r3, [sp, #4]
   b8266:	7b63      	ldrb	r3, [r4, #13]
   b8268:	9300      	str	r3, [sp, #0]
   b826a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b826e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b8270:	7830      	ldrb	r0, [r6, #0]
   b8272:	f7ff fd81 	bl	b7d78 <hal_spi_set_settings>
   b8276:	e7bc      	b.n	b81f2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b8278:	e9cd 5500 	strd	r5, r5, [sp]
   b827c:	462b      	mov	r3, r5
   b827e:	462a      	mov	r2, r5
   b8280:	2101      	movs	r1, #1
   b8282:	e7f5      	b.n	b8270 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b8284 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b8284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8288:	b088      	sub	sp, #32
    unsigned clock = 0;
   b828a:	2300      	movs	r3, #0
{
   b828c:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b828e:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b8290:	9302      	str	r3, [sp, #8]
{
   b8292:	460e      	mov	r6, r1
   b8294:	4617      	mov	r7, r2
    if (!lock())
   b8296:	f7ff ff24 	bl	b80e2 <_ZN8SPIClass4lockEv.isra.0>
   b829a:	4605      	mov	r5, r0
   b829c:	bb00      	cbnz	r0, b82e0 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b829e:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b82a2:	4601      	mov	r1, r0
   b82a4:	2214      	movs	r2, #20
   b82a6:	a803      	add	r0, sp, #12
   b82a8:	f003 fc50 	bl	bbb4c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b82ac:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b82ae:	462a      	mov	r2, r5
   b82b0:	a903      	add	r1, sp, #12
   b82b2:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b82b4:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b82b8:	f7ff fd46 	bl	b7d48 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b82bc:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b82be:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b82c2:	ab02      	add	r3, sp, #8
   b82c4:	f10d 0207 	add.w	r2, sp, #7
   b82c8:	fb07 f106 	mul.w	r1, r7, r6
   b82cc:	f7ff ff56 	bl	b817c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b82d0:	7820      	ldrb	r0, [r4, #0]
   b82d2:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b82d6:	f7ff fd17 	bl	b7d08 <hal_spi_set_clock_divider>
        unlock();
   b82da:	7820      	ldrb	r0, [r4, #0]
   b82dc:	f7ff fefe 	bl	b80dc <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b82e0:	9802      	ldr	r0, [sp, #8]
   b82e2:	b008      	add	sp, #32
   b82e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b82e8 <_ZN8SPIClass15setClockDividerEh>:
{
   b82e8:	b538      	push	{r3, r4, r5, lr}
   b82ea:	4604      	mov	r4, r0
    if (!lock())
   b82ec:	7800      	ldrb	r0, [r0, #0]
{
   b82ee:	460d      	mov	r5, r1
    if (!lock())
   b82f0:	f7ff fef7 	bl	b80e2 <_ZN8SPIClass4lockEv.isra.0>
   b82f4:	4603      	mov	r3, r0
   b82f6:	b9d0      	cbnz	r0, b832e <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b82f8:	6861      	ldr	r1, [r4, #4]
   b82fa:	b199      	cbz	r1, b8324 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b82fc:	4a0c      	ldr	r2, [pc, #48]	; (b8330 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b82fe:	f812 0b01 	ldrb.w	r0, [r2], #1
   b8302:	4285      	cmp	r5, r0
   b8304:	d002      	beq.n	b830c <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b8306:	3301      	adds	r3, #1
   b8308:	2b08      	cmp	r3, #8
   b830a:	d1f8      	bne.n	b82fe <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b830c:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b830e:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b8310:	2201      	movs	r2, #1
   b8312:	40d9      	lsrs	r1, r3
   b8314:	4620      	mov	r0, r4
   b8316:	f7ff ffb5 	bl	b8284 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b831a:	7820      	ldrb	r0, [r4, #0]
}
   b831c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b8320:	f7ff bedc 	b.w	b80dc <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b8324:	7820      	ldrb	r0, [r4, #0]
   b8326:	4629      	mov	r1, r5
   b8328:	f7ff fcee 	bl	b7d08 <hal_spi_set_clock_divider>
   b832c:	e7f5      	b.n	b831a <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b832e:	bd38      	pop	{r3, r4, r5, pc}
   b8330:	000bc9e0 	.word	0x000bc9e0

000b8334 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b8334:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b8336:	7800      	ldrb	r0, [r0, #0]
   b8338:	f7ff fcee 	bl	b7d18 <hal_spi_transfer>
}
   b833c:	b2c0      	uxtb	r0, r0
   b833e:	bd08      	pop	{r3, pc}

000b8340 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   b8340:	b530      	push	{r4, r5, lr}
   b8342:	b087      	sub	sp, #28
   b8344:	4604      	mov	r4, r0
   b8346:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   b8348:	9500      	str	r5, [sp, #0]
   b834a:	7800      	ldrb	r0, [r0, #0]
   b834c:	f7ff fd04 	bl	b7d58 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   b8350:	b93d      	cbnz	r5, b8362 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   b8352:	7820      	ldrb	r0, [r4, #0]
   b8354:	a902      	add	r1, sp, #8
   b8356:	f7ff fd07 	bl	b7d68 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   b835a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b835e:	07db      	lsls	r3, r3, #31
   b8360:	d4f7      	bmi.n	b8352 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   b8362:	b007      	add	sp, #28
   b8364:	bd30      	pop	{r4, r5, pc}
	...

000b8368 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8368:	4b05      	ldr	r3, [pc, #20]	; (b8380 <_GLOBAL__sub_I_System+0x18>)
   b836a:	2202      	movs	r2, #2
   b836c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b836e:	4b05      	ldr	r3, [pc, #20]	; (b8384 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8370:	4a05      	ldr	r2, [pc, #20]	; (b8388 <_GLOBAL__sub_I_System+0x20>)
   b8372:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8374:	2000      	movs	r0, #0
   b8376:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b837a:	f7ff bd6d 	b.w	b7e58 <set_system_mode>
   b837e:	bf00      	nop
   b8380:	2003e6c8 	.word	0x2003e6c8
   b8384:	2003e6bc 	.word	0x2003e6bc
   b8388:	ffff0000 	.word	0xffff0000

000b838c <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b838c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b8390:	1e93      	subs	r3, r2, #2
{
   b8392:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b8394:	2b22      	cmp	r3, #34	; 0x22
   b8396:	f04f 0300 	mov.w	r3, #0
{
   b839a:	460d      	mov	r5, r1
   b839c:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b839e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b83a2:	d927      	bls.n	b83f4 <ltoa+0x68>

      if (10 == base && N < 0L)
   b83a4:	2800      	cmp	r0, #0
   b83a6:	da2a      	bge.n	b83fe <ltoa+0x72>
      {
            *head++ = '-';
   b83a8:	462e      	mov	r6, r5
   b83aa:	232d      	movs	r3, #45	; 0x2d
   b83ac:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b83b0:	4240      	negs	r0, r0
   b83b2:	240a      	movs	r4, #10
      *tail-- = '\0';
   b83b4:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b83b8:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b83bc:	4622      	mov	r2, r4
   b83be:	4601      	mov	r1, r0
   b83c0:	a801      	add	r0, sp, #4
   b83c2:	f003 fb87 	bl	bbad4 <ldiv>
   b83c6:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b83c8:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b83ca:	2b09      	cmp	r3, #9
   b83cc:	bfcc      	ite	gt
   b83ce:	2237      	movgt	r2, #55	; 0x37
   b83d0:	2230      	movle	r2, #48	; 0x30
   b83d2:	fa52 f383 	uxtab	r3, r2, r3
   b83d6:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b83da:	f108 0801 	add.w	r8, r8, #1
   b83de:	2800      	cmp	r0, #0
   b83e0:	d1ec      	bne.n	b83bc <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b83e2:	4642      	mov	r2, r8
   b83e4:	1c79      	adds	r1, r7, #1
   b83e6:	4630      	mov	r0, r6
   b83e8:	f003 fb88 	bl	bbafc <memcpy>
      return str;
}
   b83ec:	4628      	mov	r0, r5
   b83ee:	b00c      	add	sp, #48	; 0x30
   b83f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b83f4:	2a0a      	cmp	r2, #10
   b83f6:	d0d5      	beq.n	b83a4 <ltoa+0x18>
      if (uarg)
   b83f8:	b118      	cbz	r0, b8402 <ltoa+0x76>
   b83fa:	462e      	mov	r6, r5
   b83fc:	e7da      	b.n	b83b4 <ltoa+0x28>
   b83fe:	240a      	movs	r4, #10
   b8400:	e7fa      	b.n	b83f8 <ltoa+0x6c>
      else  *tail-- = '0';
   b8402:	2330      	movs	r3, #48	; 0x30
   b8404:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b8408:	462e      	mov	r6, r5
   b840a:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b840e:	f04f 0802 	mov.w	r8, #2
   b8412:	e7e6      	b.n	b83e2 <ltoa+0x56>

000b8414 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b8414:	b510      	push	{r4, lr}
   b8416:	4604      	mov	r4, r0
{
	free(buffer);
   b8418:	6800      	ldr	r0, [r0, #0]
   b841a:	f7ff fdd9 	bl	b7fd0 <free>
}
   b841e:	4620      	mov	r0, r4
   b8420:	bd10      	pop	{r4, pc}

000b8422 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b8422:	b510      	push	{r4, lr}
   b8424:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b8426:	6800      	ldr	r0, [r0, #0]
   b8428:	b108      	cbz	r0, b842e <_ZN6String10invalidateEv+0xc>
   b842a:	f7ff fdd1 	bl	b7fd0 <free>
	buffer = NULL;
   b842e:	2300      	movs	r3, #0
	capacity = len = 0;
   b8430:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8434:	6023      	str	r3, [r4, #0]
}
   b8436:	bd10      	pop	{r4, pc}

000b8438 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8438:	b538      	push	{r3, r4, r5, lr}
   b843a:	4604      	mov	r4, r0
   b843c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b843e:	6800      	ldr	r0, [r0, #0]
   b8440:	3101      	adds	r1, #1
   b8442:	f7ff fdcd 	bl	b7fe0 <realloc>
	if (newbuffer) {
   b8446:	b110      	cbz	r0, b844e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b8448:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b844c:	2001      	movs	r0, #1
	}
	return 0;
}
   b844e:	bd38      	pop	{r3, r4, r5, pc}

000b8450 <_ZN6String7reserveEj>:
{
   b8450:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b8452:	6803      	ldr	r3, [r0, #0]
{
   b8454:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b8456:	b123      	cbz	r3, b8462 <_ZN6String7reserveEj+0x12>
   b8458:	6843      	ldr	r3, [r0, #4]
   b845a:	428b      	cmp	r3, r1
   b845c:	d301      	bcc.n	b8462 <_ZN6String7reserveEj+0x12>
   b845e:	2001      	movs	r0, #1
}
   b8460:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b8462:	4620      	mov	r0, r4
   b8464:	f7ff ffe8 	bl	b8438 <_ZN6String12changeBufferEj>
   b8468:	2800      	cmp	r0, #0
   b846a:	d0f9      	beq.n	b8460 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b846c:	68a3      	ldr	r3, [r4, #8]
   b846e:	2b00      	cmp	r3, #0
   b8470:	d1f5      	bne.n	b845e <_ZN6String7reserveEj+0xe>
   b8472:	6822      	ldr	r2, [r4, #0]
   b8474:	7013      	strb	r3, [r2, #0]
   b8476:	e7f2      	b.n	b845e <_ZN6String7reserveEj+0xe>

000b8478 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8478:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b847a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b847c:	4611      	mov	r1, r2
   b847e:	9201      	str	r2, [sp, #4]
{
   b8480:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b8482:	f7ff ffe5 	bl	b8450 <_ZN6String7reserveEj>
   b8486:	9a01      	ldr	r2, [sp, #4]
   b8488:	b928      	cbnz	r0, b8496 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b848a:	4620      	mov	r0, r4
   b848c:	f7ff ffc9 	bl	b8422 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8490:	4620      	mov	r0, r4
   b8492:	b003      	add	sp, #12
   b8494:	bd30      	pop	{r4, r5, pc}
	len = length;
   b8496:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8498:	4629      	mov	r1, r5
   b849a:	6820      	ldr	r0, [r4, #0]
   b849c:	f003 fb2e 	bl	bbafc <memcpy>
	buffer[len] = 0;
   b84a0:	6822      	ldr	r2, [r4, #0]
   b84a2:	68a3      	ldr	r3, [r4, #8]
   b84a4:	2100      	movs	r1, #0
   b84a6:	54d1      	strb	r1, [r2, r3]
	return *this;
   b84a8:	e7f2      	b.n	b8490 <_ZN6String4copyEPKcj+0x18>

000b84aa <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b84aa:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b84ac:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b84ae:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b84b2:	4604      	mov	r4, r0
	len = 0;
   b84b4:	6083      	str	r3, [r0, #8]
	flags = 0;
   b84b6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b84b8:	b141      	cbz	r1, b84cc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b84ba:	4608      	mov	r0, r1
   b84bc:	9101      	str	r1, [sp, #4]
   b84be:	f003 fb8d 	bl	bbbdc <strlen>
   b84c2:	9901      	ldr	r1, [sp, #4]
   b84c4:	4602      	mov	r2, r0
   b84c6:	4620      	mov	r0, r4
   b84c8:	f7ff ffd6 	bl	b8478 <_ZN6String4copyEPKcj>
}
   b84cc:	4620      	mov	r0, r4
   b84ce:	b002      	add	sp, #8
   b84d0:	bd10      	pop	{r4, pc}

000b84d2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b84d2:	b538      	push	{r3, r4, r5, lr}
   b84d4:	4605      	mov	r5, r0
	if (buffer) {
   b84d6:	6800      	ldr	r0, [r0, #0]
{
   b84d8:	460c      	mov	r4, r1
	if (buffer) {
   b84da:	b168      	cbz	r0, b84f8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b84dc:	686a      	ldr	r2, [r5, #4]
   b84de:	688b      	ldr	r3, [r1, #8]
   b84e0:	429a      	cmp	r2, r3
   b84e2:	d307      	bcc.n	b84f4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b84e4:	6809      	ldr	r1, [r1, #0]
   b84e6:	f003 fb71 	bl	bbbcc <strcpy>
			len = rhs.len;
   b84ea:	68a3      	ldr	r3, [r4, #8]
   b84ec:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b84ee:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b84f0:	60a3      	str	r3, [r4, #8]
}
   b84f2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b84f4:	f7ff fd6c 	bl	b7fd0 <free>
	buffer = rhs.buffer;
   b84f8:	6823      	ldr	r3, [r4, #0]
   b84fa:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b84fc:	6863      	ldr	r3, [r4, #4]
   b84fe:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b8500:	68a3      	ldr	r3, [r4, #8]
   b8502:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b8504:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b8506:	e9c4 3300 	strd	r3, r3, [r4]
   b850a:	e7f1      	b.n	b84f0 <_ZN6String4moveERS_+0x1e>

000b850c <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b850c:	4288      	cmp	r0, r1
{
   b850e:	b510      	push	{r4, lr}
   b8510:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b8512:	d005      	beq.n	b8520 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b8514:	680b      	ldr	r3, [r1, #0]
   b8516:	b12b      	cbz	r3, b8524 <_ZN6StringaSERKS_+0x18>
   b8518:	688a      	ldr	r2, [r1, #8]
   b851a:	4619      	mov	r1, r3
   b851c:	f7ff ffac 	bl	b8478 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8520:	4620      	mov	r0, r4
   b8522:	bd10      	pop	{r4, pc}
	else invalidate();
   b8524:	f7ff ff7d 	bl	b8422 <_ZN6String10invalidateEv>
   b8528:	e7fa      	b.n	b8520 <_ZN6StringaSERKS_+0x14>

000b852a <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b852a:	b510      	push	{r4, lr}
	buffer = NULL;
   b852c:	2300      	movs	r3, #0
String::String(const String &value)
   b852e:	4604      	mov	r4, r0
	capacity = 0;
   b8530:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b8534:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8536:	7303      	strb	r3, [r0, #12]
	*this = value;
   b8538:	f7ff ffe8 	bl	b850c <_ZN6StringaSERKS_>
}
   b853c:	4620      	mov	r0, r4
   b853e:	bd10      	pop	{r4, pc}

000b8540 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b8540:	4288      	cmp	r0, r1
{
   b8542:	b510      	push	{r4, lr}
   b8544:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b8546:	d001      	beq.n	b854c <_ZN6StringaSEOS_+0xc>
   b8548:	f7ff ffc3 	bl	b84d2 <_ZN6String4moveERS_>
	return *this;
}
   b854c:	4620      	mov	r0, r4
   b854e:	bd10      	pop	{r4, pc}

000b8550 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b8550:	b513      	push	{r0, r1, r4, lr}
   b8552:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b8554:	b159      	cbz	r1, b856e <_ZN6StringaSEPKc+0x1e>
   b8556:	4608      	mov	r0, r1
   b8558:	9101      	str	r1, [sp, #4]
   b855a:	f003 fb3f 	bl	bbbdc <strlen>
   b855e:	9901      	ldr	r1, [sp, #4]
   b8560:	4602      	mov	r2, r0
   b8562:	4620      	mov	r0, r4
   b8564:	f7ff ff88 	bl	b8478 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8568:	4620      	mov	r0, r4
   b856a:	b002      	add	sp, #8
   b856c:	bd10      	pop	{r4, pc}
	else invalidate();
   b856e:	f7ff ff58 	bl	b8422 <_ZN6String10invalidateEv>
   b8572:	e7f9      	b.n	b8568 <_ZN6StringaSEPKc+0x18>

000b8574 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b8574:	6802      	ldr	r2, [r0, #0]
{
   b8576:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b8578:	6809      	ldr	r1, [r1, #0]
   b857a:	b162      	cbz	r2, b8596 <_ZNK6String9compareToERKS_+0x22>
   b857c:	b941      	cbnz	r1, b8590 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b857e:	6880      	ldr	r0, [r0, #8]
   b8580:	b160      	cbz	r0, b859c <_ZNK6String9compareToERKS_+0x28>
   b8582:	7810      	ldrb	r0, [r2, #0]
   b8584:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b8586:	6898      	ldr	r0, [r3, #8]
   b8588:	b140      	cbz	r0, b859c <_ZNK6String9compareToERKS_+0x28>
   b858a:	7809      	ldrb	r1, [r1, #0]
   b858c:	4248      	negs	r0, r1
   b858e:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b8590:	4610      	mov	r0, r2
   b8592:	f003 bb11 	b.w	bbbb8 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b8596:	2900      	cmp	r1, #0
   b8598:	d1f5      	bne.n	b8586 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b859a:	4608      	mov	r0, r1
}
   b859c:	4770      	bx	lr
	...

000b85a0 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b85a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b85a2:	429a      	cmp	r2, r3
{
   b85a4:	460f      	mov	r7, r1
   b85a6:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b85a8:	490c      	ldr	r1, [pc, #48]	; (b85dc <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b85aa:	bf88      	it	hi
   b85ac:	4613      	movhi	r3, r2
{
   b85ae:	4614      	mov	r4, r2
   b85b0:	4606      	mov	r6, r0
	if (left > right) {
   b85b2:	bf84      	itt	hi
   b85b4:	462c      	movhi	r4, r5
   b85b6:	461d      	movhi	r5, r3
	String out;
   b85b8:	f7ff ff77 	bl	b84aa <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b85bc:	68bb      	ldr	r3, [r7, #8]
   b85be:	42a3      	cmp	r3, r4
   b85c0:	d30a      	bcc.n	b85d8 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b85c2:	6839      	ldr	r1, [r7, #0]
   b85c4:	42ab      	cmp	r3, r5
   b85c6:	bf94      	ite	ls
   b85c8:	ebc4 0203 	rsbls	r2, r4, r3
   b85cc:	ebc4 0205 	rsbhi	r2, r4, r5
   b85d0:	4421      	add	r1, r4
   b85d2:	4630      	mov	r0, r6
   b85d4:	f7ff ff50 	bl	b8478 <_ZN6String4copyEPKcj>
	return out;
}
   b85d8:	4630      	mov	r0, r6
   b85da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b85dc:	000bc04d 	.word	0x000bc04d

000b85e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b85e0:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b85e2:	6843      	ldr	r3, [r0, #4]
   b85e4:	3b01      	subs	r3, #1
    {
   b85e6:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b85e8:	6043      	str	r3, [r0, #4]
   b85ea:	b963      	cbnz	r3, b8606 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b85ec:	6803      	ldr	r3, [r0, #0]
   b85ee:	689b      	ldr	r3, [r3, #8]
   b85f0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b85f2:	68a3      	ldr	r3, [r4, #8]
   b85f4:	3b01      	subs	r3, #1
   b85f6:	60a3      	str	r3, [r4, #8]
   b85f8:	b92b      	cbnz	r3, b8606 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b85fa:	6823      	ldr	r3, [r4, #0]
   b85fc:	4620      	mov	r0, r4
   b85fe:	68db      	ldr	r3, [r3, #12]
        }
    }
   b8600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b8604:	4718      	bx	r3
    }
   b8606:	bd10      	pop	{r4, pc}

000b8608 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b8608:	4802      	ldr	r0, [pc, #8]	; (b8614 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b860a:	2300      	movs	r3, #0
   b860c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b860e:	f7ff ba7b 	b.w	b7b08 <os_mutex_recursive_create>
   b8612:	bf00      	nop
   b8614:	2003e6cc 	.word	0x2003e6cc

000b8618 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b861a:	4606      	mov	r6, r0
   b861c:	460d      	mov	r5, r1
  size_t n = 0;
   b861e:	188f      	adds	r7, r1, r2
   b8620:	2400      	movs	r4, #0
  while (size--) {
   b8622:	42bd      	cmp	r5, r7
   b8624:	d00c      	beq.n	b8640 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8626:	6833      	ldr	r3, [r6, #0]
   b8628:	f815 1b01 	ldrb.w	r1, [r5], #1
   b862c:	689b      	ldr	r3, [r3, #8]
   b862e:	4630      	mov	r0, r6
   b8630:	4798      	blx	r3
     if (chunk>=0)
   b8632:	1e03      	subs	r3, r0, #0
   b8634:	db01      	blt.n	b863a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8636:	441c      	add	r4, r3
  while (size--) {
   b8638:	e7f3      	b.n	b8622 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b863a:	2c00      	cmp	r4, #0
   b863c:	bf08      	it	eq
   b863e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8640:	4620      	mov	r0, r4
   b8642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8644 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b8644:	b508      	push	{r3, lr}
  return write(str);
   b8646:	f7fe fd15 	bl	b7074 <_ZN5Print5writeEPKc>
}
   b864a:	bd08      	pop	{r3, pc}

000b864c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b864c:	6803      	ldr	r3, [r0, #0]
   b864e:	689b      	ldr	r3, [r3, #8]
   b8650:	4718      	bx	r3

000b8652 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b8652:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8654:	210d      	movs	r1, #13
{
   b8656:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8658:	f7ff fff8 	bl	b864c <_ZN5Print5printEc>
  n += print('\n');
   b865c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b865e:	4604      	mov	r4, r0
  n += print('\n');
   b8660:	4628      	mov	r0, r5
   b8662:	f7ff fff3 	bl	b864c <_ZN5Print5printEc>
  return n;
}
   b8666:	4420      	add	r0, r4
   b8668:	bd38      	pop	{r3, r4, r5, pc}

000b866a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b866a:	b538      	push	{r3, r4, r5, lr}
   b866c:	4605      	mov	r5, r0
  return write(str);
   b866e:	f7fe fd01 	bl	b7074 <_ZN5Print5writeEPKc>
   b8672:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b8674:	4628      	mov	r0, r5
   b8676:	f7ff ffec 	bl	b8652 <_ZN5Print7printlnEv>
  return n;
}
   b867a:	4420      	add	r0, r4
   b867c:	bd38      	pop	{r3, r4, r5, pc}

000b867e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b867e:	b530      	push	{r4, r5, lr}
   b8680:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b8682:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8684:	2a01      	cmp	r2, #1
  *str = '\0';
   b8686:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b868a:	bf98      	it	ls
   b868c:	220a      	movls	r2, #10
   b868e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8690:	460d      	mov	r5, r1
   b8692:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b8696:	fb01 5312 	mls	r3, r1, r2, r5
   b869a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b869e:	2b09      	cmp	r3, #9
   b86a0:	bf94      	ite	ls
   b86a2:	3330      	addls	r3, #48	; 0x30
   b86a4:	3337      	addhi	r3, #55	; 0x37
   b86a6:	b2db      	uxtb	r3, r3
  } while(n);
   b86a8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b86aa:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b86ae:	d9ef      	bls.n	b8690 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b86b0:	4621      	mov	r1, r4
   b86b2:	f7fe fcdf 	bl	b7074 <_ZN5Print5writeEPKc>
}
   b86b6:	b00b      	add	sp, #44	; 0x2c
   b86b8:	bd30      	pop	{r4, r5, pc}

000b86ba <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b86ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b86be:	b086      	sub	sp, #24
   b86c0:	af00      	add	r7, sp, #0
   b86c2:	4605      	mov	r5, r0
   b86c4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b86c6:	1d38      	adds	r0, r7, #4
   b86c8:	2114      	movs	r1, #20
{
   b86ca:	4614      	mov	r4, r2
    va_copy(args2, args);
   b86cc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b86ce:	f7ff fc9f 	bl	b8010 <vsnprintf>

    if (n<bufsize)
   b86d2:	2813      	cmp	r0, #19
   b86d4:	d80e      	bhi.n	b86f4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b86d6:	1d39      	adds	r1, r7, #4
   b86d8:	4628      	mov	r0, r5
   b86da:	f7fe fccb 	bl	b7074 <_ZN5Print5writeEPKc>
   b86de:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b86e0:	b11e      	cbz	r6, b86ea <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b86e2:	4628      	mov	r0, r5
   b86e4:	f7ff ffb5 	bl	b8652 <_ZN5Print7printlnEv>
   b86e8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b86ea:	4620      	mov	r0, r4
   b86ec:	3718      	adds	r7, #24
   b86ee:	46bd      	mov	sp, r7
   b86f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b86f4:	f100 0308 	add.w	r3, r0, #8
   b86f8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b86fc:	46e8      	mov	r8, sp
        char bigger[n+1];
   b86fe:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b8702:	4622      	mov	r2, r4
   b8704:	1c41      	adds	r1, r0, #1
   b8706:	683b      	ldr	r3, [r7, #0]
   b8708:	4668      	mov	r0, sp
   b870a:	f7ff fc81 	bl	b8010 <vsnprintf>
  return write(str);
   b870e:	4669      	mov	r1, sp
   b8710:	4628      	mov	r0, r5
   b8712:	f7fe fcaf 	bl	b7074 <_ZN5Print5writeEPKc>
   b8716:	4604      	mov	r4, r0
   b8718:	46c5      	mov	sp, r8
   b871a:	e7e1      	b.n	b86e0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b871c <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b871c:	2300      	movs	r3, #0
   b871e:	6840      	ldr	r0, [r0, #4]
   b8720:	461a      	mov	r2, r3
   b8722:	4619      	mov	r1, r3
   b8724:	f7ff bbe4 	b.w	b7ef0 <network_on>

000b8728 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b8728:	4b01      	ldr	r3, [pc, #4]	; (b8730 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b872a:	4a02      	ldr	r2, [pc, #8]	; (b8734 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b872c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b872e:	4770      	bx	lr
   b8730:	2003e6d0 	.word	0x2003e6d0
   b8734:	000bc9f0 	.word	0x000bc9f0

000b8738 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b8738:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b873a:	2000      	movs	r0, #0
   b873c:	f7ff fc30 	bl	b7fa0 <spark_sync_time_pending>
   b8740:	b128      	cbz	r0, b874e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b8742:	f7ff fc1d 	bl	b7f80 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8746:	f080 0001 	eor.w	r0, r0, #1
   b874a:	b2c0      	uxtb	r0, r0
    }
   b874c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b874e:	2001      	movs	r0, #1
   b8750:	e7fc      	b.n	b874c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b8754 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b8754:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   b8758:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b875c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b8760:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b8762:	d411      	bmi.n	b8788 <_ZN9TimeClass4zoneEf+0x34>
   b8764:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   b8768:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b876c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b8770:	dc0a      	bgt.n	b8788 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   b8772:	eddf 7a06 	vldr	s15, [pc, #24]	; b878c <_ZN9TimeClass4zoneEf+0x38>
   b8776:	ee60 7a27 	vmul.f32	s15, s0, s15
   b877a:	ee17 0a90 	vmov	r0, s15
   b877e:	f002 ffdb 	bl	bb738 <__aeabi_f2lz>
   b8782:	4b03      	ldr	r3, [pc, #12]	; (b8790 <_ZN9TimeClass4zoneEf+0x3c>)
   b8784:	e9c3 0100 	strd	r0, r1, [r3]
}
   b8788:	bd08      	pop	{r3, pc}
   b878a:	bf00      	nop
   b878c:	45610000 	.word	0x45610000
   b8790:	2003e6e0 	.word	0x2003e6e0

000b8794 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b8794:	b530      	push	{r4, r5, lr}
   b8796:	b093      	sub	sp, #76	; 0x4c
   b8798:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b879c:	4b19      	ldr	r3, [pc, #100]	; (b8804 <_ZN9TimeClass7timeStrEx+0x70>)
{
   b879e:	4604      	mov	r4, r0
    t += time_zone_cache;
   b87a0:	e9d3 1000 	ldrd	r1, r0, [r3]
   b87a4:	9b01      	ldr	r3, [sp, #4]
   b87a6:	1852      	adds	r2, r2, r1
   b87a8:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b87ac:	4816      	ldr	r0, [pc, #88]	; (b8808 <_ZN9TimeClass7timeStrEx+0x74>)
   b87ae:	e9d0 1000 	ldrd	r1, r0, [r0]
   b87b2:	1852      	adds	r2, r2, r1
   b87b4:	eb43 0300 	adc.w	r3, r3, r0
   b87b8:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b87bc:	2224      	movs	r2, #36	; 0x24
   b87be:	eb0d 0002 	add.w	r0, sp, r2
   b87c2:	2100      	movs	r1, #0
   b87c4:	f003 f9c2 	bl	bbb4c <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b87c8:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b87ca:	a909      	add	r1, sp, #36	; 0x24
   b87cc:	4668      	mov	r0, sp
   b87ce:	f7ff fc3f 	bl	b8050 <localtime_r>
    char ascstr[26] = {};
   b87d2:	2216      	movs	r2, #22
   b87d4:	4629      	mov	r1, r5
   b87d6:	a803      	add	r0, sp, #12
   b87d8:	9502      	str	r5, [sp, #8]
   b87da:	f003 f9b7 	bl	bbb4c <memset>
    asctime_r(&calendar_time, ascstr);
   b87de:	a902      	add	r1, sp, #8
   b87e0:	a809      	add	r0, sp, #36	; 0x24
   b87e2:	f003 f947 	bl	bba74 <asctime_r>
    int len = strlen(ascstr);
   b87e6:	a802      	add	r0, sp, #8
   b87e8:	f003 f9f8 	bl	bbbdc <strlen>
    ascstr[len-1] = 0; // remove final newline
   b87ec:	ab12      	add	r3, sp, #72	; 0x48
   b87ee:	4418      	add	r0, r3
    return String(ascstr);
   b87f0:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b87f2:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b87f6:	4620      	mov	r0, r4
   b87f8:	f7ff fe57 	bl	b84aa <_ZN6StringC1EPK19__FlashStringHelper>
}
   b87fc:	4620      	mov	r0, r4
   b87fe:	b013      	add	sp, #76	; 0x4c
   b8800:	bd30      	pop	{r4, r5, pc}
   b8802:	bf00      	nop
   b8804:	2003e6e0 	.word	0x2003e6e0
   b8808:	2003e6d8 	.word	0x2003e6d8

000b880c <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b880c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b880e:	2000      	movs	r0, #0
   b8810:	f7ff f96a 	bl	b7ae8 <hal_rtc_time_is_valid>
    if (rtcstate)
   b8814:	4604      	mov	r4, r0
   b8816:	b9a0      	cbnz	r0, b8842 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b8818:	f7ff fb16 	bl	b7e48 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b881c:	2801      	cmp	r0, #1
   b881e:	d110      	bne.n	b8842 <_ZN9TimeClass7isValidEv+0x36>
   b8820:	4620      	mov	r0, r4
   b8822:	f7ff fb29 	bl	b7e78 <system_thread_get_state>
   b8826:	b960      	cbnz	r0, b8842 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b8828:	f7ff ff86 	bl	b8738 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b882c:	b910      	cbnz	r0, b8834 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b882e:	f7ff fb9f 	bl	b7f70 <spark_process>
        while (_while() && !_condition()) {
   b8832:	e7f9      	b.n	b8828 <_ZN9TimeClass7isValidEv+0x1c>
   b8834:	f7ff ff80 	bl	b8738 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b8838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b883c:	2000      	movs	r0, #0
   b883e:	f7ff b953 	b.w	b7ae8 <hal_rtc_time_is_valid>
}
   b8842:	4620      	mov	r0, r4
   b8844:	bd10      	pop	{r4, pc}

000b8846 <_ZN9TimeClass3nowEv>:
{
   b8846:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b8848:	f7ff ffe0 	bl	b880c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b884c:	2210      	movs	r2, #16
   b884e:	2100      	movs	r1, #0
   b8850:	4668      	mov	r0, sp
   b8852:	f003 f97b 	bl	bbb4c <memset>
    hal_rtc_get_time(&tv, nullptr);
   b8856:	2100      	movs	r1, #0
   b8858:	4668      	mov	r0, sp
   b885a:	f7ff f94d 	bl	b7af8 <hal_rtc_get_time>
}
   b885e:	9800      	ldr	r0, [sp, #0]
   b8860:	b005      	add	sp, #20
   b8862:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8868 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b8868:	4b02      	ldr	r3, [pc, #8]	; (b8874 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b886a:	681a      	ldr	r2, [r3, #0]
   b886c:	4b02      	ldr	r3, [pc, #8]	; (b8878 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b886e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b8870:	4770      	bx	lr
   b8872:	bf00      	nop
   b8874:	2003deb0 	.word	0x2003deb0
   b8878:	2003e6d4 	.word	0x2003e6d4

000b887c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b887c:	2100      	movs	r1, #0
   b887e:	f7ff baf3 	b.w	b7e68 <system_delay_ms>
	...

000b8884 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b8884:	b510      	push	{r4, lr}
   b8886:	4b04      	ldr	r3, [pc, #16]	; (b8898 <_ZN9TCPClientD1Ev+0x14>)
   b8888:	6003      	str	r3, [r0, #0]
   b888a:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b888c:	6980      	ldr	r0, [r0, #24]
   b888e:	b108      	cbz	r0, b8894 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b8890:	f7ff fea6 	bl	b85e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b8894:	4620      	mov	r0, r4
   b8896:	bd10      	pop	{r4, pc}
   b8898:	000bcae8 	.word	0x000bcae8

000b889c <_ZN9TCPClientD0Ev>:
   b889c:	b510      	push	{r4, lr}
   b889e:	4604      	mov	r4, r0
   b88a0:	f7ff fff0 	bl	b8884 <_ZN9TCPClientD1Ev>
   b88a4:	4620      	mov	r0, r4
   b88a6:	211c      	movs	r1, #28
   b88a8:	f7fb fbf9 	bl	b409e <_ZdlPvj>
   b88ac:	4620      	mov	r0, r4
   b88ae:	bd10      	pop	{r4, pc}

000b88b0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b88b0:	4b01      	ldr	r3, [pc, #4]	; (b88b8 <_GLOBAL__sub_I_RGB+0x8>)
   b88b2:	2200      	movs	r2, #0
   b88b4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b88b6:	4770      	bx	lr
   b88b8:	2003e6e8 	.word	0x2003e6e8

000b88bc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b88bc:	4b01      	ldr	r3, [pc, #4]	; (b88c4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b88be:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b88c0:	4770      	bx	lr
   b88c2:	bf00      	nop
   b88c4:	2003deb8 	.word	0x2003deb8

000b88c8 <serialEventRun>:
{
   b88c8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b88ca:	4b0b      	ldr	r3, [pc, #44]	; (b88f8 <serialEventRun+0x30>)
   b88cc:	b143      	cbz	r3, b88e0 <serialEventRun+0x18>
   b88ce:	f000 f983 	bl	b8bd8 <_Z16_fetch_usbserialv>
   b88d2:	6803      	ldr	r3, [r0, #0]
   b88d4:	691b      	ldr	r3, [r3, #16]
   b88d6:	4798      	blx	r3
   b88d8:	2800      	cmp	r0, #0
   b88da:	dd01      	ble.n	b88e0 <serialEventRun+0x18>
        serialEvent();
   b88dc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b88e0:	4b06      	ldr	r3, [pc, #24]	; (b88fc <serialEventRun+0x34>)
   b88e2:	b143      	cbz	r3, b88f6 <serialEventRun+0x2e>
   b88e4:	f000 fef4 	bl	b96d0 <_Z22__fetch_global_Serial1v>
   b88e8:	6803      	ldr	r3, [r0, #0]
   b88ea:	691b      	ldr	r3, [r3, #16]
   b88ec:	4798      	blx	r3
   b88ee:	2800      	cmp	r0, #0
   b88f0:	dd01      	ble.n	b88f6 <serialEventRun+0x2e>
        serialEvent1();
   b88f2:	f3af 8000 	nop.w
}
   b88f6:	bd08      	pop	{r3, pc}
	...

000b8900 <_post_loop>:
{
   b8900:	b508      	push	{r3, lr}
	serialEventRun();
   b8902:	f7ff ffe1 	bl	b88c8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8906:	f7ff f8e7 	bl	b7ad8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b890a:	4b01      	ldr	r3, [pc, #4]	; (b8910 <_post_loop+0x10>)
   b890c:	6018      	str	r0, [r3, #0]
}
   b890e:	bd08      	pop	{r3, pc}
   b8910:	2003e740 	.word	0x2003e740

000b8914 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8914:	4805      	ldr	r0, [pc, #20]	; (b892c <_Z33system_initialize_user_backup_ramv+0x18>)
   b8916:	4a06      	ldr	r2, [pc, #24]	; (b8930 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8918:	4906      	ldr	r1, [pc, #24]	; (b8934 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b891a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b891c:	1a12      	subs	r2, r2, r0
   b891e:	f003 f8ed 	bl	bbafc <memcpy>
    __backup_sram_signature = signature;
   b8922:	4b05      	ldr	r3, [pc, #20]	; (b8938 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8924:	4a05      	ldr	r2, [pc, #20]	; (b893c <_Z33system_initialize_user_backup_ramv+0x28>)
   b8926:	601a      	str	r2, [r3, #0]
}
   b8928:	bd08      	pop	{r3, pc}
   b892a:	bf00      	nop
   b892c:	2003f400 	.word	0x2003f400
   b8930:	2003f404 	.word	0x2003f404
   b8934:	000bced8 	.word	0x000bced8
   b8938:	2003f400 	.word	0x2003f400
   b893c:	9a271c1e 	.word	0x9a271c1e

000b8940 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8940:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8942:	2300      	movs	r3, #0
   b8944:	9300      	str	r3, [sp, #0]
   b8946:	461a      	mov	r2, r3
   b8948:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b894c:	f7ff faa6 	bl	b7e9c <system_ctrl_set_result>
}
   b8950:	b003      	add	sp, #12
   b8952:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8958 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8958:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b895a:	8843      	ldrh	r3, [r0, #2]
   b895c:	2b0a      	cmp	r3, #10
   b895e:	d008      	beq.n	b8972 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b8960:	2b50      	cmp	r3, #80	; 0x50
   b8962:	d10b      	bne.n	b897c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8964:	4b09      	ldr	r3, [pc, #36]	; (b898c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b8966:	681b      	ldr	r3, [r3, #0]
   b8968:	b14b      	cbz	r3, b897e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b896a:	b003      	add	sp, #12
   b896c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b8970:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b8972:	f7ff ffe5 	bl	b8940 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b8976:	b003      	add	sp, #12
   b8978:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b897c:	2300      	movs	r3, #0
   b897e:	9300      	str	r3, [sp, #0]
   b8980:	461a      	mov	r2, r3
   b8982:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8986:	f7ff fa89 	bl	b7e9c <system_ctrl_set_result>
}
   b898a:	e7f4      	b.n	b8976 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b898c:	2003e6fc 	.word	0x2003e6fc

000b8990 <module_user_init_hook>:
{
   b8990:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b8992:	4812      	ldr	r0, [pc, #72]	; (b89dc <module_user_init_hook+0x4c>)
   b8994:	2100      	movs	r1, #0
   b8996:	f7ff fb53 	bl	b8040 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b899a:	4b11      	ldr	r3, [pc, #68]	; (b89e0 <module_user_init_hook+0x50>)
   b899c:	681a      	ldr	r2, [r3, #0]
   b899e:	4b11      	ldr	r3, [pc, #68]	; (b89e4 <module_user_init_hook+0x54>)
   b89a0:	429a      	cmp	r2, r3
   b89a2:	4b11      	ldr	r3, [pc, #68]	; (b89e8 <module_user_init_hook+0x58>)
   b89a4:	bf0c      	ite	eq
   b89a6:	2201      	moveq	r2, #1
   b89a8:	2200      	movne	r2, #0
   b89aa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b89ac:	d001      	beq.n	b89b2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b89ae:	f7ff ffb1 	bl	b8914 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b89b2:	f7ff f879 	bl	b7aa8 <HAL_RNG_GetRandomNumber>
   b89b6:	4604      	mov	r4, r0
    srand(seed);
   b89b8:	f003 f8d0 	bl	bbb5c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b89bc:	4b0b      	ldr	r3, [pc, #44]	; (b89ec <module_user_init_hook+0x5c>)
   b89be:	b113      	cbz	r3, b89c6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b89c0:	4620      	mov	r0, r4
   b89c2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b89c6:	2100      	movs	r1, #0
   b89c8:	4808      	ldr	r0, [pc, #32]	; (b89ec <module_user_init_hook+0x5c>)
   b89ca:	f7ff faf1 	bl	b7fb0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b89ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b89d2:	4807      	ldr	r0, [pc, #28]	; (b89f0 <module_user_init_hook+0x60>)
   b89d4:	2100      	movs	r1, #0
   b89d6:	f7ff ba57 	b.w	b7e88 <system_ctrl_set_app_request_handler>
   b89da:	bf00      	nop
   b89dc:	000b88bd 	.word	0x000b88bd
   b89e0:	2003f400 	.word	0x2003f400
   b89e4:	9a271c1e 	.word	0x9a271c1e
   b89e8:	2003e6f8 	.word	0x2003e6f8
   b89ec:	00000000 	.word	0x00000000
   b89f0:	000b8959 	.word	0x000b8959

000b89f4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b89f4:	4770      	bx	lr

000b89f6 <_ZN9IPAddressD0Ev>:
   b89f6:	b510      	push	{r4, lr}
   b89f8:	2118      	movs	r1, #24
   b89fa:	4604      	mov	r4, r0
   b89fc:	f7fb fb4f 	bl	b409e <_ZdlPvj>
   b8a00:	4620      	mov	r0, r4
   b8a02:	bd10      	pop	{r4, pc}

000b8a04 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8a04:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8a06:	7d03      	ldrb	r3, [r0, #20]
   b8a08:	2b06      	cmp	r3, #6
{
   b8a0a:	b08d      	sub	sp, #52	; 0x34
   b8a0c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8a0e:	f100 0704 	add.w	r7, r0, #4
   b8a12:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8a16:	d012      	beq.n	b8a3e <_ZNK9IPAddress7printToER5Print+0x3a>
   b8a18:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8a1c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8a20:	220a      	movs	r2, #10
   b8a22:	4630      	mov	r0, r6
   b8a24:	f7ff fe2b 	bl	b867e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8a28:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b8a2a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8a2c:	d019      	beq.n	b8a62 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8a2e:	2c00      	cmp	r4, #0
   b8a30:	d0f4      	beq.n	b8a1c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8a32:	212e      	movs	r1, #46	; 0x2e
   b8a34:	4630      	mov	r0, r6
   b8a36:	f7ff fe09 	bl	b864c <_ZN5Print5printEc>
   b8a3a:	4404      	add	r4, r0
   b8a3c:	e7ee      	b.n	b8a1c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8a3e:	232f      	movs	r3, #47	; 0x2f
   b8a40:	466a      	mov	r2, sp
   b8a42:	4639      	mov	r1, r7
   b8a44:	200a      	movs	r0, #10
		buf[0] = 0;
   b8a46:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8a4a:	f7ff f865 	bl	b7b18 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b8a4e:	4668      	mov	r0, sp
   b8a50:	f003 f8c4 	bl	bbbdc <strlen>
   b8a54:	6833      	ldr	r3, [r6, #0]
   b8a56:	4602      	mov	r2, r0
   b8a58:	68db      	ldr	r3, [r3, #12]
   b8a5a:	4669      	mov	r1, sp
   b8a5c:	4630      	mov	r0, r6
   b8a5e:	4798      	blx	r3
   b8a60:	4604      	mov	r4, r0
    }
    return n;
}
   b8a62:	4620      	mov	r0, r4
   b8a64:	b00d      	add	sp, #52	; 0x34
   b8a66:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8a68 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8a68:	b510      	push	{r4, lr}
   b8a6a:	4b05      	ldr	r3, [pc, #20]	; (b8a80 <_ZN9IPAddressC1Ev+0x18>)
   b8a6c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b8a6e:	2211      	movs	r2, #17
   b8a70:	f840 3b04 	str.w	r3, [r0], #4
   b8a74:	2100      	movs	r1, #0
   b8a76:	f003 f869 	bl	bbb4c <memset>
}
   b8a7a:	4620      	mov	r0, r4
   b8a7c:	bd10      	pop	{r4, pc}
   b8a7e:	bf00      	nop
   b8a80:	000bca18 	.word	0x000bca18

000b8a84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8a84:	4603      	mov	r3, r0
   b8a86:	4a07      	ldr	r2, [pc, #28]	; (b8aa4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8a88:	b510      	push	{r4, lr}
   b8a8a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b8a8e:	f101 0210 	add.w	r2, r1, #16
   b8a92:	f851 4b04 	ldr.w	r4, [r1], #4
   b8a96:	f843 4b04 	str.w	r4, [r3], #4
   b8a9a:	4291      	cmp	r1, r2
   b8a9c:	d1f9      	bne.n	b8a92 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b8a9e:	780a      	ldrb	r2, [r1, #0]
   b8aa0:	701a      	strb	r2, [r3, #0]
}
   b8aa2:	bd10      	pop	{r4, pc}
   b8aa4:	000bca18 	.word	0x000bca18

000b8aa8 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b8aa8:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b8aaa:	2b04      	cmp	r3, #4
   b8aac:	d104      	bne.n	b8ab8 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b8aae:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8ab0:	3800      	subs	r0, #0
   b8ab2:	bf18      	it	ne
   b8ab4:	2001      	movne	r0, #1
   b8ab6:	4770      	bx	lr
    } else if (version() == 6) {
   b8ab8:	2b06      	cmp	r3, #6
   b8aba:	d107      	bne.n	b8acc <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8abc:	6843      	ldr	r3, [r0, #4]
   b8abe:	b93b      	cbnz	r3, b8ad0 <_ZNK9IPAddresscvbEv+0x28>
   b8ac0:	6883      	ldr	r3, [r0, #8]
   b8ac2:	b92b      	cbnz	r3, b8ad0 <_ZNK9IPAddresscvbEv+0x28>
   b8ac4:	68c3      	ldr	r3, [r0, #12]
   b8ac6:	b91b      	cbnz	r3, b8ad0 <_ZNK9IPAddresscvbEv+0x28>
   b8ac8:	6900      	ldr	r0, [r0, #16]
   b8aca:	e7f1      	b.n	b8ab0 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b8acc:	2000      	movs	r0, #0
   b8ace:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8ad0:	2001      	movs	r0, #1
}
   b8ad2:	4770      	bx	lr

000b8ad4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8ad4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b8ad6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b8ada:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b8ade:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8ae2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b8ae6:	2304      	movs	r3, #4
   b8ae8:	6041      	str	r1, [r0, #4]
   b8aea:	7503      	strb	r3, [r0, #20]
}
   b8aec:	bd10      	pop	{r4, pc}
	...

000b8af0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8af0:	b507      	push	{r0, r1, r2, lr}
   b8af2:	4b06      	ldr	r3, [pc, #24]	; (b8b0c <_ZN9IPAddressC1EPKh+0x1c>)
   b8af4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b8af6:	78cb      	ldrb	r3, [r1, #3]
   b8af8:	9300      	str	r3, [sp, #0]
   b8afa:	788b      	ldrb	r3, [r1, #2]
   b8afc:	784a      	ldrb	r2, [r1, #1]
   b8afe:	7809      	ldrb	r1, [r1, #0]
   b8b00:	f7ff ffe8 	bl	b8ad4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8b04:	b003      	add	sp, #12
   b8b06:	f85d fb04 	ldr.w	pc, [sp], #4
   b8b0a:	bf00      	nop
   b8b0c:	000bca18 	.word	0x000bca18

000b8b10 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8b10:	7441      	strb	r1, [r0, #17]
}
   b8b12:	4770      	bx	lr

000b8b14 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8b14:	4770      	bx	lr

000b8b16 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8b16:	4770      	bx	lr

000b8b18 <_ZN9USBSerial4readEv>:
{
   b8b18:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8b1a:	2100      	movs	r1, #0
   b8b1c:	7c00      	ldrb	r0, [r0, #16]
   b8b1e:	f7ff f963 	bl	b7de8 <HAL_USB_USART_Receive_Data>
}
   b8b22:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8b26:	bd08      	pop	{r3, pc}

000b8b28 <_ZN9USBSerial4peekEv>:
{
   b8b28:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8b2a:	2101      	movs	r1, #1
   b8b2c:	7c00      	ldrb	r0, [r0, #16]
   b8b2e:	f7ff f95b 	bl	b7de8 <HAL_USB_USART_Receive_Data>
}
   b8b32:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8b36:	bd08      	pop	{r3, pc}

000b8b38 <_ZN9USBSerial17availableForWriteEv>:
{
   b8b38:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8b3a:	7c00      	ldrb	r0, [r0, #16]
   b8b3c:	f7ff f94c 	bl	b7dd8 <HAL_USB_USART_Available_Data_For_Write>
}
   b8b40:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8b44:	bd08      	pop	{r3, pc}

000b8b46 <_ZN9USBSerial9availableEv>:
{
   b8b46:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8b48:	7c00      	ldrb	r0, [r0, #16]
   b8b4a:	f7ff f93d 	bl	b7dc8 <HAL_USB_USART_Available_Data>
}
   b8b4e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8b52:	bd08      	pop	{r3, pc}

000b8b54 <_ZN9USBSerial5writeEh>:
{
   b8b54:	b513      	push	{r0, r1, r4, lr}
   b8b56:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8b58:	7c00      	ldrb	r0, [r0, #16]
{
   b8b5a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8b5c:	f7ff f93c 	bl	b7dd8 <HAL_USB_USART_Available_Data_For_Write>
   b8b60:	2800      	cmp	r0, #0
   b8b62:	9901      	ldr	r1, [sp, #4]
   b8b64:	dc01      	bgt.n	b8b6a <_ZN9USBSerial5writeEh+0x16>
   b8b66:	7c60      	ldrb	r0, [r4, #17]
   b8b68:	b120      	cbz	r0, b8b74 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8b6a:	7c20      	ldrb	r0, [r4, #16]
   b8b6c:	f7ff f944 	bl	b7df8 <HAL_USB_USART_Send_Data>
   b8b70:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8b74:	b002      	add	sp, #8
   b8b76:	bd10      	pop	{r4, pc}

000b8b78 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8b78:	7c00      	ldrb	r0, [r0, #16]
   b8b7a:	f7ff b945 	b.w	b7e08 <HAL_USB_USART_Flush_Data>

000b8b7e <_ZN9USBSerialD0Ev>:
   b8b7e:	b510      	push	{r4, lr}
   b8b80:	2114      	movs	r1, #20
   b8b82:	4604      	mov	r4, r0
   b8b84:	f7fb fa8b 	bl	b409e <_ZdlPvj>
   b8b88:	4620      	mov	r0, r4
   b8b8a:	bd10      	pop	{r4, pc}

000b8b8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8b8c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b8b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8b92:	4604      	mov	r4, r0
   b8b94:	4608      	mov	r0, r1
   b8b96:	2100      	movs	r1, #0
   b8b98:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8b9c:	4b04      	ldr	r3, [pc, #16]	; (b8bb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b8b9e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8ba0:	2301      	movs	r3, #1
  _serial = serial;
   b8ba2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8ba4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b8ba6:	4611      	mov	r1, r2
   b8ba8:	f7ff f8fe 	bl	b7da8 <HAL_USB_USART_Init>
}
   b8bac:	4620      	mov	r0, r4
   b8bae:	bd10      	pop	{r4, pc}
   b8bb0:	000bca2c 	.word	0x000bca2c

000b8bb4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b8bb4:	7c00      	ldrb	r0, [r0, #16]
   b8bb6:	2200      	movs	r2, #0
   b8bb8:	f7ff b8fe 	b.w	b7db8 <HAL_USB_USART_Begin>

000b8bbc <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
   b8bbc:	7c00      	ldrb	r0, [r0, #16]
   b8bbe:	f7ff b92b 	b.w	b7e18 <HAL_USB_USART_Is_Enabled>

000b8bc2 <_ZN9USBSerialcvbEv>:
  return isEnabled();
   b8bc2:	f7ff bffb 	b.w	b8bbc <_ZN9USBSerial9isEnabledEv>

000b8bc6 <_Z19acquireSerialBufferv>:
{
   b8bc6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b8bc8:	2214      	movs	r2, #20
{
   b8bca:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b8bcc:	2100      	movs	r1, #0
   b8bce:	f002 ffbd 	bl	bbb4c <memset>
}
   b8bd2:	4620      	mov	r0, r4
   b8bd4:	bd10      	pop	{r4, pc}
	...

000b8bd8 <_Z16_fetch_usbserialv>:
{
   b8bd8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8bda:	4c0f      	ldr	r4, [pc, #60]	; (b8c18 <_Z16_fetch_usbserialv+0x40>)
{
   b8bdc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b8bde:	a803      	add	r0, sp, #12
   b8be0:	f7ff fff1 	bl	b8bc6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8be4:	7821      	ldrb	r1, [r4, #0]
   b8be6:	f3bf 8f5b 	dmb	ish
   b8bea:	f011 0101 	ands.w	r1, r1, #1
   b8bee:	d10f      	bne.n	b8c10 <_Z16_fetch_usbserialv+0x38>
   b8bf0:	4620      	mov	r0, r4
   b8bf2:	9101      	str	r1, [sp, #4]
   b8bf4:	f7fb fa60 	bl	b40b8 <__cxa_guard_acquire>
   b8bf8:	9901      	ldr	r1, [sp, #4]
   b8bfa:	b148      	cbz	r0, b8c10 <_Z16_fetch_usbserialv+0x38>
   b8bfc:	aa03      	add	r2, sp, #12
   b8bfe:	4807      	ldr	r0, [pc, #28]	; (b8c1c <_Z16_fetch_usbserialv+0x44>)
   b8c00:	f7ff ffc4 	bl	b8b8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8c04:	4620      	mov	r0, r4
   b8c06:	f7fb fa5c 	bl	b40c2 <__cxa_guard_release>
   b8c0a:	4805      	ldr	r0, [pc, #20]	; (b8c20 <_Z16_fetch_usbserialv+0x48>)
   b8c0c:	f002 ff58 	bl	bbac0 <atexit>
	return _usbserial;
}
   b8c10:	4802      	ldr	r0, [pc, #8]	; (b8c1c <_Z16_fetch_usbserialv+0x44>)
   b8c12:	b008      	add	sp, #32
   b8c14:	bd10      	pop	{r4, pc}
   b8c16:	bf00      	nop
   b8c18:	2003e700 	.word	0x2003e700
   b8c1c:	2003e704 	.word	0x2003e704
   b8c20:	000b8b15 	.word	0x000b8b15

000b8c24 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8c24:	4770      	bx	lr

000b8c26 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8c26:	7441      	strb	r1, [r0, #17]
}
   b8c28:	4770      	bx	lr

000b8c2a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8c2a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8c2c:	7c00      	ldrb	r0, [r0, #16]
   b8c2e:	f7fe ffbb 	bl	b7ba8 <hal_usart_available_data_for_write>
}
   b8c32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8c36:	bd08      	pop	{r3, pc}

000b8c38 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8c38:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8c3a:	7c00      	ldrb	r0, [r0, #16]
   b8c3c:	f7fe ff8c 	bl	b7b58 <hal_usart_available>
}
   b8c40:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8c44:	bd08      	pop	{r3, pc}

000b8c46 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8c46:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8c48:	7c00      	ldrb	r0, [r0, #16]
   b8c4a:	f7fe ff95 	bl	b7b78 <hal_usart_peek>
}
   b8c4e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8c52:	bd08      	pop	{r3, pc}

000b8c54 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8c54:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8c56:	7c00      	ldrb	r0, [r0, #16]
   b8c58:	f7fe ff86 	bl	b7b68 <hal_usart_read>
}
   b8c5c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8c60:	bd08      	pop	{r3, pc}

000b8c62 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8c62:	7c00      	ldrb	r0, [r0, #16]
   b8c64:	f7fe bf90 	b.w	b7b88 <hal_usart_flush>

000b8c68 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8c68:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8c6a:	7c45      	ldrb	r5, [r0, #17]
{
   b8c6c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8c6e:	b12d      	cbz	r5, b8c7c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8c70:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8c72:	b003      	add	sp, #12
   b8c74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8c78:	f7fe bf66 	b.w	b7b48 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8c7c:	7c00      	ldrb	r0, [r0, #16]
   b8c7e:	9101      	str	r1, [sp, #4]
   b8c80:	f7fe ff92 	bl	b7ba8 <hal_usart_available_data_for_write>
   b8c84:	2800      	cmp	r0, #0
   b8c86:	9901      	ldr	r1, [sp, #4]
   b8c88:	dcf2      	bgt.n	b8c70 <_ZN11USARTSerial5writeEh+0x8>
}
   b8c8a:	4628      	mov	r0, r5
   b8c8c:	b003      	add	sp, #12
   b8c8e:	bd30      	pop	{r4, r5, pc}

000b8c90 <_ZN11USARTSerialD0Ev>:
   b8c90:	b510      	push	{r4, lr}
   b8c92:	2114      	movs	r1, #20
   b8c94:	4604      	mov	r4, r0
   b8c96:	f7fb fa02 	bl	b409e <_ZdlPvj>
   b8c9a:	4620      	mov	r0, r4
   b8c9c:	bd10      	pop	{r4, pc}
	...

000b8ca0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8ca0:	b510      	push	{r4, lr}
   b8ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8ca6:	4604      	mov	r4, r0
   b8ca8:	4608      	mov	r0, r1
   b8caa:	4611      	mov	r1, r2
   b8cac:	2200      	movs	r2, #0
   b8cae:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8cb2:	4b04      	ldr	r3, [pc, #16]	; (b8cc4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b8cb4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8cb6:	2301      	movs	r3, #1
  _serial = serial;
   b8cb8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8cba:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b8cbc:	f7fe ff7c 	bl	b7bb8 <hal_usart_init_ex>
}
   b8cc0:	4620      	mov	r0, r4
   b8cc2:	bd10      	pop	{r4, pc}
   b8cc4:	000bca5c 	.word	0x000bca5c

000b8cc8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8cc8:	4770      	bx	lr

000b8cca <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b8cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8ccc:	4606      	mov	r6, r0
   b8cce:	4615      	mov	r5, r2
   b8cd0:	460c      	mov	r4, r1
   b8cd2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8cd4:	42bc      	cmp	r4, r7
   b8cd6:	d006      	beq.n	b8ce6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8cd8:	6833      	ldr	r3, [r6, #0]
   b8cda:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8cde:	689b      	ldr	r3, [r3, #8]
   b8ce0:	4630      	mov	r0, r6
   b8ce2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8ce4:	e7f6      	b.n	b8cd4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b8ce6:	4628      	mov	r0, r5
   b8ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8cea <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b8cea:	7c00      	ldrb	r0, [r0, #16]
   b8cec:	2200      	movs	r2, #0
   b8cee:	f7fe bf83 	b.w	b7bf8 <hal_i2c_write>

000b8cf2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8cf2:	7c00      	ldrb	r0, [r0, #16]
   b8cf4:	2100      	movs	r1, #0
   b8cf6:	f7fe bf87 	b.w	b7c08 <hal_i2c_available>

000b8cfa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b8cfa:	7c00      	ldrb	r0, [r0, #16]
   b8cfc:	2100      	movs	r1, #0
   b8cfe:	f7fe bf8b 	b.w	b7c18 <hal_i2c_read>

000b8d02 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8d02:	7c00      	ldrb	r0, [r0, #16]
   b8d04:	2100      	movs	r1, #0
   b8d06:	f7fe bf8f 	b.w	b7c28 <hal_i2c_peek>

000b8d0a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b8d0a:	7c00      	ldrb	r0, [r0, #16]
   b8d0c:	2100      	movs	r1, #0
   b8d0e:	f7fe bf93 	b.w	b7c38 <hal_i2c_flush>

000b8d12 <_ZN7TwoWireD0Ev>:
   b8d12:	b510      	push	{r4, lr}
   b8d14:	2114      	movs	r1, #20
   b8d16:	4604      	mov	r4, r0
   b8d18:	f7fb f9c1 	bl	b409e <_ZdlPvj>
   b8d1c:	4620      	mov	r0, r4
   b8d1e:	bd10      	pop	{r4, pc}

000b8d20 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8d20:	b510      	push	{r4, lr}
   b8d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8d26:	4604      	mov	r4, r0
   b8d28:	4608      	mov	r0, r1
   b8d2a:	2100      	movs	r1, #0
   b8d2c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8d30:	4b03      	ldr	r3, [pc, #12]	; (b8d40 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b8d32:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b8d34:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b8d36:	4611      	mov	r1, r2
   b8d38:	f7fe ff8e 	bl	b7c58 <hal_i2c_init>
}
   b8d3c:	4620      	mov	r0, r4
   b8d3e:	bd10      	pop	{r4, pc}
   b8d40:	000bca8c 	.word	0x000bca8c

000b8d44 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b8d44:	2300      	movs	r3, #0
   b8d46:	7c00      	ldrb	r0, [r0, #16]
   b8d48:	461a      	mov	r2, r3
   b8d4a:	4619      	mov	r1, r3
   b8d4c:	f7fe bf3c 	b.w	b7bc8 <hal_i2c_begin>

000b8d50 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b8d50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b8d52:	2200      	movs	r2, #0
   b8d54:	2314      	movs	r3, #20
   b8d56:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b8d5a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b8d5e:	780b      	ldrb	r3, [r1, #0]
   b8d60:	f88d 3008 	strb.w	r3, [sp, #8]
   b8d64:	684b      	ldr	r3, [r1, #4]
   b8d66:	9303      	str	r3, [sp, #12]
   b8d68:	68cb      	ldr	r3, [r1, #12]
   b8d6a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b8d6c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b8d6e:	7a0b      	ldrb	r3, [r1, #8]
   b8d70:	9305      	str	r3, [sp, #20]
   b8d72:	a901      	add	r1, sp, #4
   b8d74:	f7fe ff78 	bl	b7c68 <hal_i2c_request_ex>
}
   b8d78:	b007      	add	sp, #28
   b8d7a:	f85d fb04 	ldr.w	pc, [sp], #4

000b8d7e <_ZN7TwoWire11requestFromEhjh>:
{
   b8d7e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b8d80:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b8d82:	f88d 1000 	strb.w	r1, [sp]
   b8d86:	f04f 0164 	mov.w	r1, #100	; 0x64
   b8d8a:	9103      	str	r1, [sp, #12]
   b8d8c:	bf18      	it	ne
   b8d8e:	2301      	movne	r3, #1
   b8d90:	4669      	mov	r1, sp
    size_ = size;
   b8d92:	9201      	str	r2, [sp, #4]
   b8d94:	f88d 3008 	strb.w	r3, [sp, #8]
   b8d98:	f7ff ffda 	bl	b8d50 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b8d9c:	b005      	add	sp, #20
   b8d9e:	f85d fb04 	ldr.w	pc, [sp], #4

000b8da2 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b8da2:	2301      	movs	r3, #1
   b8da4:	f7ff bfeb 	b.w	b8d7e <_ZN7TwoWire11requestFromEhjh>

000b8da8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b8da8:	7c00      	ldrb	r0, [r0, #16]
   b8daa:	2200      	movs	r2, #0
   b8dac:	f7fe bf14 	b.w	b7bd8 <hal_i2c_begin_transmission>

000b8db0 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b8db0:	b2c9      	uxtb	r1, r1
   b8db2:	f7ff bff9 	b.w	b8da8 <_ZN7TwoWire17beginTransmissionEh>

000b8db6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b8db6:	7c00      	ldrb	r0, [r0, #16]
   b8db8:	2200      	movs	r2, #0
   b8dba:	f7fe bf15 	b.w	b7be8 <hal_i2c_end_transmission>

000b8dbe <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b8dbe:	2101      	movs	r1, #1
   b8dc0:	f7ff bff9 	b.w	b8db6 <_ZN7TwoWire15endTransmissionEh>

000b8dc4 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b8dc4:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8dc6:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b8dc8:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8dcc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8dce:	2201      	movs	r2, #1
   b8dd0:	f04f 33ff 	mov.w	r3, #4294967295
   b8dd4:	f10d 0107 	add.w	r1, sp, #7
   b8dd8:	47a0      	blx	r4
}
   b8dda:	b002      	add	sp, #8
   b8ddc:	bd10      	pop	{r4, pc}

000b8dde <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b8dde:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8de0:	6803      	ldr	r3, [r0, #0]
   b8de2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8de4:	f04f 33ff 	mov.w	r3, #4294967295
   b8de8:	46a4      	mov	ip, r4
}
   b8dea:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8dee:	4760      	bx	ip

000b8df0 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8df0:	b513      	push	{r0, r1, r4, lr}
   b8df2:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b8df4:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8df6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b8dfa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b8dfc:	f10d 0107 	add.w	r1, sp, #7
   b8e00:	2201      	movs	r2, #1
   b8e02:	47a0      	blx	r4
}
   b8e04:	b002      	add	sp, #8
   b8e06:	bd10      	pop	{r4, pc}

000b8e08 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b8e08:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b8e0a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8e0c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8e10:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8e14:	429a      	cmp	r2, r3
int TCPClient::read() {
   b8e16:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8e18:	d008      	beq.n	b8e2c <_ZN9TCPClient4readEv+0x24>
   b8e1a:	6963      	ldr	r3, [r4, #20]
   b8e1c:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8e20:	1c51      	adds	r1, r2, #1
   b8e22:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b8e26:	4413      	add	r3, r2
   b8e28:	7918      	ldrb	r0, [r3, #4]
}
   b8e2a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8e2c:	6803      	ldr	r3, [r0, #0]
   b8e2e:	691b      	ldr	r3, [r3, #16]
   b8e30:	4798      	blx	r3
   b8e32:	2800      	cmp	r0, #0
   b8e34:	d1f1      	bne.n	b8e1a <_ZN9TCPClient4readEv+0x12>
   b8e36:	f04f 30ff 	mov.w	r0, #4294967295
   b8e3a:	e7f6      	b.n	b8e2a <_ZN9TCPClient4readEv+0x22>

000b8e3c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b8e3c:	4770      	bx	lr

000b8e3e <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b8e3e:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b8e40:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b8e42:	43c0      	mvns	r0, r0
   b8e44:	0fc0      	lsrs	r0, r0, #31
   b8e46:	4770      	bx	lr

000b8e48 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8e48:	4770      	bx	lr
	...

000b8e4c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8e4c:	4b06      	ldr	r3, [pc, #24]	; (b8e68 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8e4e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8e50:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b8e52:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8e56:	d005      	beq.n	b8e64 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8e58:	4608      	mov	r0, r1
   b8e5a:	f000 fc9b 	bl	b9794 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8e5e:	2800      	cmp	r0, #0
   b8e60:	bf08      	it	eq
   b8e62:	2400      	moveq	r4, #0
      }
   b8e64:	4620      	mov	r0, r4
   b8e66:	bd10      	pop	{r4, pc}
   b8e68:	000bc9e8 	.word	0x000bc9e8

000b8e6c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8e6c:	b510      	push	{r4, lr}
   b8e6e:	21ac      	movs	r1, #172	; 0xac
   b8e70:	4604      	mov	r4, r0
   b8e72:	f7fb f914 	bl	b409e <_ZdlPvj>
   b8e76:	4620      	mov	r0, r4
   b8e78:	bd10      	pop	{r4, pc}

000b8e7a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b8e7a:	21ac      	movs	r1, #172	; 0xac
   b8e7c:	f7fb b90f 	b.w	b409e <_ZdlPvj>

000b8e80 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b8e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b8e84:	f04f 0800 	mov.w	r8, #0
   b8e88:	b086      	sub	sp, #24
   b8e8a:	461c      	mov	r4, r3
   b8e8c:	f8c0 8004 	str.w	r8, [r0, #4]
   b8e90:	4605      	mov	r5, r0
   b8e92:	460e      	mov	r6, r1
   b8e94:	4617      	mov	r7, r2
    struct timeval tv = {};
   b8e96:	4641      	mov	r1, r8
   b8e98:	2210      	movs	r2, #16
   b8e9a:	a802      	add	r0, sp, #8
   b8e9c:	f002 fe56 	bl	bbb4c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b8ea0:	1c63      	adds	r3, r4, #1
   b8ea2:	d009      	beq.n	b8eb8 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b8ea4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8ea8:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b8eac:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b8eb0:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b8eb4:	435c      	muls	r4, r3
   b8eb6:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b8eb8:	6968      	ldr	r0, [r5, #20]
   b8eba:	2310      	movs	r3, #16
   b8ebc:	9300      	str	r3, [sp, #0]
   b8ebe:	6800      	ldr	r0, [r0, #0]
   b8ec0:	ab02      	add	r3, sp, #8
   b8ec2:	f241 0205 	movw	r2, #4101	; 0x1005
   b8ec6:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8eca:	f7fe fed5 	bl	b7c78 <sock_setsockopt>
    if (ret < 0) {
   b8ece:	2800      	cmp	r0, #0
   b8ed0:	da07      	bge.n	b8ee2 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b8ed2:	f7ff f8a5 	bl	b8020 <__errno>
   b8ed6:	6803      	ldr	r3, [r0, #0]
   b8ed8:	606b      	str	r3, [r5, #4]
        return 0;
   b8eda:	2000      	movs	r0, #0
}
   b8edc:	b006      	add	sp, #24
   b8ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b8ee2:	6968      	ldr	r0, [r5, #20]
   b8ee4:	2300      	movs	r3, #0
   b8ee6:	6800      	ldr	r0, [r0, #0]
   b8ee8:	463a      	mov	r2, r7
   b8eea:	4631      	mov	r1, r6
   b8eec:	f7fe fee4 	bl	b7cb8 <sock_send>
    if (ret < 0) {
   b8ef0:	1e03      	subs	r3, r0, #0
   b8ef2:	dbee      	blt.n	b8ed2 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b8ef4:	4618      	mov	r0, r3
   b8ef6:	e7f1      	b.n	b8edc <_ZN9TCPClient5writeEPKhjm+0x5c>

000b8ef8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b8ef8:	b530      	push	{r4, r5, lr}
   b8efa:	b087      	sub	sp, #28
   b8efc:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b8efe:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b8f00:	4668      	mov	r0, sp
   b8f02:	f7ff fdf5 	bl	b8af0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8f06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8f08:	3404      	adds	r4, #4
   b8f0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8f0c:	682b      	ldr	r3, [r5, #0]
   b8f0e:	7023      	strb	r3, [r4, #0]
    }
   b8f10:	b007      	add	sp, #28
   b8f12:	bd30      	pop	{r4, r5, pc}

000b8f14 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b8f14:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b8f16:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b8f18:	4b05      	ldr	r3, [pc, #20]	; (b8f30 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b8f1a:	4604      	mov	r4, r0
   b8f1c:	358c      	adds	r5, #140	; 0x8c
   b8f1e:	f844 3b04 	str.w	r3, [r4], #4
   b8f22:	4606      	mov	r6, r0
   b8f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8f28:	682b      	ldr	r3, [r5, #0]
   b8f2a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b8f2c:	4630      	mov	r0, r6
   b8f2e:	bd70      	pop	{r4, r5, r6, pc}
   b8f30:	000bca18 	.word	0x000bca18

000b8f34 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8f38:	4698      	mov	r8, r3
    stop();
   b8f3a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8f3c:	b093      	sub	sp, #76	; 0x4c
   b8f3e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b8f40:	2400      	movs	r4, #0
    stop();
   b8f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8f44:	4606      	mov	r6, r0
   b8f46:	4617      	mov	r7, r2
    stop();
   b8f48:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8f4a:	4628      	mov	r0, r5
   b8f4c:	466b      	mov	r3, sp
   b8f4e:	4622      	mov	r2, r4
   b8f50:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b8f52:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8f54:	f7fe fd60 	bl	b7a18 <netdb_getaddrinfo>
   b8f58:	4605      	mov	r5, r0
   b8f5a:	2800      	cmp	r0, #0
   b8f5c:	d163      	bne.n	b9026 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b8f5e:	9b00      	ldr	r3, [sp, #0]
   b8f60:	2b00      	cmp	r3, #0
   b8f62:	d04b      	beq.n	b8ffc <_ZN9TCPClient7connectEPKctm+0xc8>
   b8f64:	695b      	ldr	r3, [r3, #20]
   b8f66:	2b00      	cmp	r3, #0
   b8f68:	d048      	beq.n	b8ffc <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b8f6a:	a806      	add	r0, sp, #24
   b8f6c:	f7ff fd7c 	bl	b8a68 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b8f70:	9b00      	ldr	r3, [sp, #0]
   b8f72:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b8f74:	7863      	ldrb	r3, [r4, #1]
   b8f76:	2b02      	cmp	r3, #2
   b8f78:	d104      	bne.n	b8f84 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b8f7a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b8f7c:	a806      	add	r0, sp, #24
   b8f7e:	f7ff ffbb 	bl	b8ef8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b8f82:	e026      	b.n	b8fd2 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b8f84:	2b0a      	cmp	r3, #10
   b8f86:	d124      	bne.n	b8fd2 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b8f88:	2211      	movs	r2, #17
   b8f8a:	4629      	mov	r1, r5
   b8f8c:	a801      	add	r0, sp, #4
   b8f8e:	f002 fddd 	bl	bbb4c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8f92:	68a3      	ldr	r3, [r4, #8]
   b8f94:	2b00      	cmp	r3, #0
   b8f96:	d038      	beq.n	b900a <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8f98:	f104 0308 	add.w	r3, r4, #8
   b8f9c:	f10d 0c04 	add.w	ip, sp, #4
   b8fa0:	3418      	adds	r4, #24
   b8fa2:	6818      	ldr	r0, [r3, #0]
   b8fa4:	6859      	ldr	r1, [r3, #4]
   b8fa6:	4662      	mov	r2, ip
   b8fa8:	c203      	stmia	r2!, {r0, r1}
   b8faa:	3308      	adds	r3, #8
   b8fac:	42a3      	cmp	r3, r4
   b8fae:	4694      	mov	ip, r2
   b8fb0:	d1f7      	bne.n	b8fa2 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b8fb2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b8fb4:	a901      	add	r1, sp, #4
   b8fb6:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b8fb8:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b8fbc:	f7ff fd62 	bl	b8a84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8fc0:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b8fc4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b8fc8:	ac07      	add	r4, sp, #28
   b8fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8fcc:	f8dc 3000 	ldr.w	r3, [ip]
   b8fd0:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b8fd2:	a806      	add	r0, sp, #24
   b8fd4:	f7ff fd68 	bl	b8aa8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b8fd8:	b180      	cbz	r0, b8ffc <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b8fda:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b8fdc:	ad07      	add	r5, sp, #28
   b8fde:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b8fe2:	4b12      	ldr	r3, [pc, #72]	; (b902c <_ZN9TCPClient7connectEPKctm+0xf8>)
   b8fe4:	930c      	str	r3, [sp, #48]	; 0x30
   b8fe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8fe8:	ac0d      	add	r4, sp, #52	; 0x34
   b8fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8fec:	682b      	ldr	r3, [r5, #0]
   b8fee:	7023      	strb	r3, [r4, #0]
   b8ff0:	463a      	mov	r2, r7
   b8ff2:	4643      	mov	r3, r8
   b8ff4:	a90c      	add	r1, sp, #48	; 0x30
   b8ff6:	4630      	mov	r0, r6
   b8ff8:	47c8      	blx	r9
   b8ffa:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b8ffc:	9800      	ldr	r0, [sp, #0]
   b8ffe:	f7fe fd03 	bl	b7a08 <netdb_freeaddrinfo>
}
   b9002:	4628      	mov	r0, r5
   b9004:	b013      	add	sp, #76	; 0x4c
   b9006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b900a:	68e3      	ldr	r3, [r4, #12]
   b900c:	2b00      	cmp	r3, #0
   b900e:	d1c3      	bne.n	b8f98 <_ZN9TCPClient7connectEPKctm+0x64>
   b9010:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9014:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b9018:	f7fe fd86 	bl	b7b28 <inet_htonl>
   b901c:	4581      	cmp	r9, r0
   b901e:	d1bb      	bne.n	b8f98 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b9020:	f104 0114 	add.w	r1, r4, #20
   b9024:	e7aa      	b.n	b8f7c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9026:	4625      	mov	r5, r4
   b9028:	e7e8      	b.n	b8ffc <_ZN9TCPClient7connectEPKctm+0xc8>
   b902a:	bf00      	nop
   b902c:	000bca18 	.word	0x000bca18

000b9030 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b9030:	b538      	push	{r3, r4, r5, lr}
   b9032:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b9034:	681a      	ldr	r2, [r3, #0]
   b9036:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b9038:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b903a:	da10      	bge.n	b905e <_ZN9TCPClient9connectedEv+0x2e>
   b903c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9040:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9044:	429a      	cmp	r2, r3
   b9046:	d10a      	bne.n	b905e <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b9048:	6803      	ldr	r3, [r0, #0]
   b904a:	691b      	ldr	r3, [r3, #16]
   b904c:	4798      	blx	r3
        if (!rv) {
   b904e:	4604      	mov	r4, r0
   b9050:	b928      	cbnz	r0, b905e <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b9052:	682b      	ldr	r3, [r5, #0]
   b9054:	4628      	mov	r0, r5
   b9056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9058:	4798      	blx	r3
        rv = available();
   b905a:	4620      	mov	r0, r4
}
   b905c:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b905e:	2001      	movs	r0, #1
   b9060:	e7fc      	b.n	b905c <_ZN9TCPClient9connectedEv+0x2c>

000b9062 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b9062:	b510      	push	{r4, lr}
   b9064:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9066:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b906a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b906e:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b9070:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9072:	d005      	beq.n	b9080 <_ZN9TCPClient4peekEv+0x1e>
   b9074:	6963      	ldr	r3, [r4, #20]
   b9076:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b907a:	4413      	add	r3, r2
   b907c:	7918      	ldrb	r0, [r3, #4]
}
   b907e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9080:	6803      	ldr	r3, [r0, #0]
   b9082:	691b      	ldr	r3, [r3, #16]
   b9084:	4798      	blx	r3
   b9086:	2800      	cmp	r0, #0
   b9088:	d1f4      	bne.n	b9074 <_ZN9TCPClient4peekEv+0x12>
   b908a:	f04f 30ff 	mov.w	r0, #4294967295
   b908e:	e7f6      	b.n	b907e <_ZN9TCPClient4peekEv+0x1c>

000b9090 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9092:	6943      	ldr	r3, [r0, #20]
   b9094:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b9096:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b909a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b909e:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b90a0:	4605      	mov	r5, r0
   b90a2:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b90a4:	d016      	beq.n	b90d4 <_ZN9TCPClient4readEPhj+0x44>
   b90a6:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b90a8:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b90ac:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b90b0:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b90b2:	42bc      	cmp	r4, r7
   b90b4:	bf28      	it	cs
   b90b6:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b90b8:	3304      	adds	r3, #4
   b90ba:	4622      	mov	r2, r4
   b90bc:	4419      	add	r1, r3
   b90be:	4630      	mov	r0, r6
   b90c0:	f002 fd1c 	bl	bbafc <memcpy>
   b90c4:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b90c6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b90ca:	4423      	add	r3, r4
   b90cc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b90d0:	4620      	mov	r0, r4
   b90d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b90d4:	6803      	ldr	r3, [r0, #0]
   b90d6:	691b      	ldr	r3, [r3, #16]
   b90d8:	4798      	blx	r3
   b90da:	2800      	cmp	r0, #0
   b90dc:	d1e3      	bne.n	b90a6 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b90de:	f04f 34ff 	mov.w	r4, #4294967295
   b90e2:	e7f5      	b.n	b90d0 <_ZN9TCPClient4readEPhj+0x40>

000b90e4 <_ZN9TCPClient12flush_bufferEv>:
   b90e4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b90e6:	2300      	movs	r3, #0
   b90e8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b90ec:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b90ee:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b90f2:	4770      	bx	lr

000b90f4 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b90f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b90f8:	461f      	mov	r7, r3
    stop();
   b90fa:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b90fc:	460c      	mov	r4, r1
    stop();
   b90fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9100:	b08a      	sub	sp, #40	; 0x28
   b9102:	4605      	mov	r5, r0
   b9104:	4616      	mov	r6, r2
    stop();
   b9106:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b9108:	7d23      	ldrb	r3, [r4, #20]
   b910a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b910e:	2b04      	cmp	r3, #4
   b9110:	bf0c      	ite	eq
   b9112:	2002      	moveq	r0, #2
   b9114:	200a      	movne	r0, #10
   b9116:	2206      	movs	r2, #6
   b9118:	2101      	movs	r1, #1
   b911a:	f7fe fdd5 	bl	b7cc8 <sock_socket>
   b911e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b9122:	696b      	ldr	r3, [r5, #20]
   b9124:	681b      	ldr	r3, [r3, #0]
   b9126:	2b00      	cmp	r3, #0
   b9128:	da08      	bge.n	b913c <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b912a:	682b      	ldr	r3, [r5, #0]
   b912c:	4628      	mov	r0, r5
   b912e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9130:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b9132:	4798      	blx	r3
}
   b9134:	4620      	mov	r0, r4
   b9136:	b00a      	add	sp, #40	; 0x28
   b9138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b913c:	4628      	mov	r0, r5
   b913e:	f7ff ffd1 	bl	b90e4 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b9142:	b1b7      	cbz	r7, b9172 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b9144:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9146:	a903      	add	r1, sp, #12
   b9148:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b914a:	9303      	str	r3, [sp, #12]
   b914c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9150:	f7fe fca2 	bl	b7a98 <if_index_to_name>
   b9154:	2800      	cmp	r0, #0
   b9156:	d1e8      	bne.n	b912a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b9158:	6968      	ldr	r0, [r5, #20]
   b915a:	2306      	movs	r3, #6
   b915c:	9300      	str	r3, [sp, #0]
   b915e:	6800      	ldr	r0, [r0, #0]
   b9160:	ab03      	add	r3, sp, #12
   b9162:	f241 020b 	movw	r2, #4107	; 0x100b
   b9166:	f640 71ff 	movw	r1, #4095	; 0xfff
   b916a:	f7fe fd85 	bl	b7c78 <sock_setsockopt>
   b916e:	2800      	cmp	r0, #0
   b9170:	d1db      	bne.n	b912a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b9172:	221c      	movs	r2, #28
   b9174:	2100      	movs	r1, #0
   b9176:	a803      	add	r0, sp, #12
   b9178:	f002 fce8 	bl	bbb4c <memset>
    if (ip.version() == 4) {
   b917c:	7d23      	ldrb	r3, [r4, #20]
   b917e:	2b04      	cmp	r3, #4
   b9180:	d11d      	bne.n	b91be <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b9182:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b9186:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b9188:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b918c:	f7fe fcd4 	bl	b7b38 <inet_htons>
   b9190:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b9194:	6860      	ldr	r0, [r4, #4]
   b9196:	f7fe fcc7 	bl	b7b28 <inet_htonl>
   b919a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b919c:	696b      	ldr	r3, [r5, #20]
   b919e:	221c      	movs	r2, #28
   b91a0:	6818      	ldr	r0, [r3, #0]
   b91a2:	a903      	add	r1, sp, #12
   b91a4:	f7fe fd78 	bl	b7c98 <sock_connect>
   b91a8:	2800      	cmp	r0, #0
   b91aa:	d1be      	bne.n	b912a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b91ac:	3404      	adds	r4, #4
   b91ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b91b0:	696d      	ldr	r5, [r5, #20]
   b91b2:	358c      	adds	r5, #140	; 0x8c
   b91b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b91b6:	6823      	ldr	r3, [r4, #0]
   b91b8:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b91ba:	2401      	movs	r4, #1
   b91bc:	e7ba      	b.n	b9134 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b91be:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b91c2:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b91c4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b91c8:	f7fe fcb6 	bl	b7b38 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b91cc:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b91ce:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b91d2:	1d23      	adds	r3, r4, #4
   b91d4:	f104 0714 	add.w	r7, r4, #20
   b91d8:	6818      	ldr	r0, [r3, #0]
   b91da:	6859      	ldr	r1, [r3, #4]
   b91dc:	4632      	mov	r2, r6
   b91de:	c203      	stmia	r2!, {r0, r1}
   b91e0:	3308      	adds	r3, #8
   b91e2:	42bb      	cmp	r3, r7
   b91e4:	4616      	mov	r6, r2
   b91e6:	d1f7      	bne.n	b91d8 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b91e8:	e7d8      	b.n	b919c <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b91ec <_ZN9TCPClient9availableEv>:
{
   b91ec:	b530      	push	{r4, r5, lr}
   b91ee:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b91f0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b91f4:	b08b      	sub	sp, #44	; 0x2c
   b91f6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b91f8:	b12b      	cbz	r3, b9206 <_ZN9TCPClient9availableEv+0x1a>
   b91fa:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b91fe:	429a      	cmp	r2, r3
   b9200:	d101      	bne.n	b9206 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b9202:	f7ff ff6f 	bl	b90e4 <_ZN9TCPClient12flush_bufferEv>
   b9206:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b9208:	6808      	ldr	r0, [r1, #0]
   b920a:	2800      	cmp	r0, #0
   b920c:	db18      	blt.n	b9240 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b920e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b9212:	2d7f      	cmp	r5, #127	; 0x7f
   b9214:	d814      	bhi.n	b9240 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b9216:	3104      	adds	r1, #4
   b9218:	2308      	movs	r3, #8
   b921a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b921e:	4429      	add	r1, r5
   b9220:	f7fe fd42 	bl	b7ca8 <sock_recv>
            if (ret > 0) {
   b9224:	2800      	cmp	r0, #0
   b9226:	dd13      	ble.n	b9250 <_ZN9TCPClient9availableEv+0x64>
   b9228:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b922a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b922e:	b90a      	cbnz	r2, b9234 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b9230:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b9234:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b9236:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b923a:	4410      	add	r0, r2
   b923c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b9240:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b9242:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b9246:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b924a:	1ac0      	subs	r0, r0, r3
   b924c:	b00b      	add	sp, #44	; 0x2c
   b924e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b9250:	f7fe fee6 	bl	b8020 <__errno>
   b9254:	6803      	ldr	r3, [r0, #0]
   b9256:	2b0b      	cmp	r3, #11
   b9258:	d0f2      	beq.n	b9240 <_ZN9TCPClient9availableEv+0x54>
   b925a:	f7fe fee1 	bl	b8020 <__errno>
   b925e:	6803      	ldr	r3, [r0, #0]
   b9260:	2b0b      	cmp	r3, #11
   b9262:	d0ed      	beq.n	b9240 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b9264:	2320      	movs	r3, #32
   b9266:	2500      	movs	r5, #0
   b9268:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b926c:	f7fe fed8 	bl	b8020 <__errno>
   b9270:	6803      	ldr	r3, [r0, #0]
   b9272:	9301      	str	r3, [sp, #4]
   b9274:	4b08      	ldr	r3, [pc, #32]	; (b9298 <_ZN9TCPClient9availableEv+0xac>)
   b9276:	4909      	ldr	r1, [pc, #36]	; (b929c <_ZN9TCPClient9availableEv+0xb0>)
   b9278:	9300      	str	r3, [sp, #0]
   b927a:	aa02      	add	r2, sp, #8
   b927c:	462b      	mov	r3, r5
   b927e:	2032      	movs	r0, #50	; 0x32
   b9280:	f7fe fdda 	bl	b7e38 <log_message>
                    sock_close(d_->sock);
   b9284:	6963      	ldr	r3, [r4, #20]
   b9286:	6818      	ldr	r0, [r3, #0]
   b9288:	f7fe fcfe 	bl	b7c88 <sock_close>
   b928c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b928e:	f04f 32ff 	mov.w	r2, #4294967295
   b9292:	601a      	str	r2, [r3, #0]
   b9294:	e7d4      	b.n	b9240 <_ZN9TCPClient9availableEv+0x54>
   b9296:	bf00      	nop
   b9298:	000bcab3 	.word	0x000bcab3
   b929c:	000bcaac 	.word	0x000bcaac

000b92a0 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b92a0:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b92a2:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b92a4:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b92a6:	6818      	ldr	r0, [r3, #0]
   b92a8:	2800      	cmp	r0, #0
   b92aa:	db01      	blt.n	b92b0 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b92ac:	f7fe fcec 	bl	b7c88 <sock_close>
   b92b0:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b92b2:	f04f 32ff 	mov.w	r2, #4294967295
   b92b6:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b92b8:	6960      	ldr	r0, [r4, #20]
   b92ba:	2211      	movs	r2, #17
   b92bc:	2100      	movs	r1, #0
   b92be:	308c      	adds	r0, #140	; 0x8c
   b92c0:	f002 fc44 	bl	bbb4c <memset>
    flush_buffer();
   b92c4:	4620      	mov	r0, r4
}
   b92c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b92ca:	f7ff bf0b 	b.w	b90e4 <_ZN9TCPClient12flush_bufferEv>

000b92ce <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b92ce:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b92d0:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b92d2:	4604      	mov	r4, r0
          total(0) {
   b92d4:	6001      	str	r1, [r0, #0]
   b92d6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b92da:	3088      	adds	r0, #136	; 0x88
   b92dc:	f7ff fbc4 	bl	b8a68 <_ZN9IPAddressC1Ev>
}
   b92e0:	4620      	mov	r0, r4
   b92e2:	bd10      	pop	{r4, pc}

000b92e4 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b92e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b92e6:	2300      	movs	r3, #0
   b92e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b92ec:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b92f0:	4a0e      	ldr	r2, [pc, #56]	; (b932c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b92f2:	6103      	str	r3, [r0, #16]
   b92f4:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b92f6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b92f8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b92fa:	20ac      	movs	r0, #172	; 0xac
   b92fc:	9101      	str	r1, [sp, #4]
   b92fe:	f7fa feca 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9302:	1e05      	subs	r5, r0, #0
   b9304:	f105 060c 	add.w	r6, r5, #12
   b9308:	d008      	beq.n	b931c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b930a:	2301      	movs	r3, #1
   b930c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b9310:	4b07      	ldr	r3, [pc, #28]	; (b9330 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9312:	9901      	ldr	r1, [sp, #4]
   b9314:	602b      	str	r3, [r5, #0]
   b9316:	4630      	mov	r0, r6
   b9318:	f7ff ffd9 	bl	b92ce <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b931c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b931e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b9322:	f7ff fedf 	bl	b90e4 <_ZN9TCPClient12flush_bufferEv>
}
   b9326:	b002      	add	sp, #8
   b9328:	bd70      	pop	{r4, r5, r6, pc}
   b932a:	bf00      	nop
   b932c:	000bcae8 	.word	0x000bcae8
   b9330:	000bcacc 	.word	0x000bcacc

000b9334 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b9334:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b9336:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b933a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b933c:	f7ff ffd2 	bl	b92e4 <_ZN9TCPClientC1Ei>
}
   b9340:	4620      	mov	r0, r4
   b9342:	bd10      	pop	{r4, pc}

000b9344 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b9344:	b510      	push	{r4, lr}
   b9346:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b9348:	6800      	ldr	r0, [r0, #0]
   b934a:	2800      	cmp	r0, #0
   b934c:	db01      	blt.n	b9352 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b934e:	f7fe fc9b 	bl	b7c88 <sock_close>
    }
}
   b9352:	4620      	mov	r0, r4
   b9354:	bd10      	pop	{r4, pc}

000b9356 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b9356:	300c      	adds	r0, #12
   b9358:	f7ff bff4 	b.w	b9344 <_ZN9TCPClient4DataD1Ev>

000b935c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b935c:	2200      	movs	r2, #0
   b935e:	6840      	ldr	r0, [r0, #4]
   b9360:	4611      	mov	r1, r2
   b9362:	f7fe bdbd 	b.w	b7ee0 <network_ready>

000b9366 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9366:	2200      	movs	r2, #0
   b9368:	6840      	ldr	r0, [r0, #4]
   b936a:	4611      	mov	r1, r2
   b936c:	f7fe bdd8 	b.w	b7f20 <network_listening>

000b9370 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9370:	2200      	movs	r2, #0
   b9372:	6840      	ldr	r0, [r0, #4]
   b9374:	4611      	mov	r1, r2
   b9376:	f7fe bde3 	b.w	b7f40 <network_get_listen_timeout>

000b937a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b937a:	6840      	ldr	r0, [r0, #4]
   b937c:	2200      	movs	r2, #0
   b937e:	f7fe bdd7 	b.w	b7f30 <network_set_listen_timeout>

000b9382 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9382:	6840      	ldr	r0, [r0, #4]
   b9384:	2200      	movs	r2, #0
   b9386:	f081 0101 	eor.w	r1, r1, #1
   b938a:	f7fe bdc1 	b.w	b7f10 <network_listen>

000b938e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b938e:	2300      	movs	r3, #0
   b9390:	6840      	ldr	r0, [r0, #4]
   b9392:	461a      	mov	r2, r3
   b9394:	4619      	mov	r1, r3
   b9396:	f7fe bdb3 	b.w	b7f00 <network_off>

000b939a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b939a:	2200      	movs	r2, #0
   b939c:	6840      	ldr	r0, [r0, #4]
   b939e:	4611      	mov	r1, r2
   b93a0:	f7fe bd8e 	b.w	b7ec0 <network_connecting>

000b93a4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b93a4:	6840      	ldr	r0, [r0, #4]
   b93a6:	2200      	movs	r2, #0
   b93a8:	2102      	movs	r1, #2
   b93aa:	f7fe bd91 	b.w	b7ed0 <network_disconnect>

000b93ae <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b93ae:	2300      	movs	r3, #0
   b93b0:	6840      	ldr	r0, [r0, #4]
   b93b2:	461a      	mov	r2, r3
   b93b4:	f7fe bd7c 	b.w	b7eb0 <network_connect>

000b93b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b93b8:	4b02      	ldr	r3, [pc, #8]	; (b93c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b93ba:	2204      	movs	r2, #4
   b93bc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b93be:	4a02      	ldr	r2, [pc, #8]	; (b93c8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b93c0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b93c2:	4770      	bx	lr
   b93c4:	2003e718 	.word	0x2003e718
   b93c8:	000bcb34 	.word	0x000bcb34

000b93cc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b93cc:	2300      	movs	r3, #0
   b93ce:	6840      	ldr	r0, [r0, #4]
   b93d0:	461a      	mov	r2, r3
   b93d2:	f7fe bd6d 	b.w	b7eb0 <network_connect>

000b93d6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b93d6:	6840      	ldr	r0, [r0, #4]
   b93d8:	2200      	movs	r2, #0
   b93da:	2102      	movs	r1, #2
   b93dc:	f7fe bd78 	b.w	b7ed0 <network_disconnect>

000b93e0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b93e0:	2200      	movs	r2, #0
   b93e2:	6840      	ldr	r0, [r0, #4]
   b93e4:	4611      	mov	r1, r2
   b93e6:	f7fe bd6b 	b.w	b7ec0 <network_connecting>

000b93ea <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b93ea:	2200      	movs	r2, #0
   b93ec:	6840      	ldr	r0, [r0, #4]
   b93ee:	4611      	mov	r1, r2
   b93f0:	f7fe bd76 	b.w	b7ee0 <network_ready>

000b93f4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b93f4:	2300      	movs	r3, #0
   b93f6:	6840      	ldr	r0, [r0, #4]
   b93f8:	461a      	mov	r2, r3
   b93fa:	4619      	mov	r1, r3
   b93fc:	f7fe bd78 	b.w	b7ef0 <network_on>

000b9400 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b9400:	2300      	movs	r3, #0
   b9402:	6840      	ldr	r0, [r0, #4]
   b9404:	461a      	mov	r2, r3
   b9406:	4619      	mov	r1, r3
   b9408:	f7fe bd7a 	b.w	b7f00 <network_off>

000b940c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b940c:	6840      	ldr	r0, [r0, #4]
   b940e:	2100      	movs	r1, #0
   b9410:	f7fe bd9e 	b.w	b7f50 <network_is_on>

000b9414 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b9414:	6840      	ldr	r0, [r0, #4]
   b9416:	2100      	movs	r1, #0
   b9418:	f7fe bda2 	b.w	b7f60 <network_is_off>

000b941c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b941c:	6840      	ldr	r0, [r0, #4]
   b941e:	2200      	movs	r2, #0
   b9420:	f081 0101 	eor.w	r1, r1, #1
   b9424:	f7fe bd74 	b.w	b7f10 <network_listen>

000b9428 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b9428:	6840      	ldr	r0, [r0, #4]
   b942a:	2200      	movs	r2, #0
   b942c:	f7fe bd80 	b.w	b7f30 <network_set_listen_timeout>

000b9430 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b9430:	2200      	movs	r2, #0
   b9432:	6840      	ldr	r0, [r0, #4]
   b9434:	4611      	mov	r1, r2
   b9436:	f7fe bd83 	b.w	b7f40 <network_get_listen_timeout>

000b943a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b943a:	2200      	movs	r2, #0
   b943c:	6840      	ldr	r0, [r0, #4]
   b943e:	4611      	mov	r1, r2
   b9440:	f7fe bd6e 	b.w	b7f20 <network_listening>

000b9444 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b9444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9448:	b095      	sub	sp, #84	; 0x54
   b944a:	4614      	mov	r4, r2
   b944c:	460d      	mov	r5, r1
   b944e:	4607      	mov	r7, r0
    IPAddress addr;
   b9450:	f7ff fb0a 	bl	b8a68 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b9454:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b9456:	221c      	movs	r2, #28
   b9458:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b945a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b945c:	f002 fb76 	bl	bbb4c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b9460:	2340      	movs	r3, #64	; 0x40
   b9462:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b9464:	4620      	mov	r0, r4
   b9466:	466b      	mov	r3, sp
   b9468:	aa0c      	add	r2, sp, #48	; 0x30
   b946a:	2100      	movs	r1, #0
   b946c:	f7fe fad4 	bl	b7a18 <netdb_getaddrinfo>
    if (!r) {
   b9470:	4604      	mov	r4, r0
   b9472:	2800      	cmp	r0, #0
   b9474:	d14b      	bne.n	b950e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9476:	4602      	mov	r2, r0
   b9478:	2101      	movs	r1, #1
   b947a:	6868      	ldr	r0, [r5, #4]
   b947c:	f7fe fd30 	bl	b7ee0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9480:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9482:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9484:	4622      	mov	r2, r4
   b9486:	6868      	ldr	r0, [r5, #4]
   b9488:	f7fe fd2a 	bl	b7ee0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b948c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b948e:	4681      	mov	r9, r0
        bool ok = false;
   b9490:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9492:	2e00      	cmp	r6, #0
   b9494:	d03b      	beq.n	b950e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b9496:	2900      	cmp	r1, #0
   b9498:	d139      	bne.n	b950e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b949a:	6873      	ldr	r3, [r6, #4]
   b949c:	2b02      	cmp	r3, #2
   b949e:	d003      	beq.n	b94a8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b94a0:	2b0a      	cmp	r3, #10
   b94a2:	d011      	beq.n	b94c8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b94a4:	69f6      	ldr	r6, [r6, #28]
   b94a6:	e7f4      	b.n	b9492 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b94a8:	f1b8 0f00 	cmp.w	r8, #0
   b94ac:	d0fa      	beq.n	b94a4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b94ae:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b94b0:	a806      	add	r0, sp, #24
   b94b2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b94b4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b94b6:	f7ff fb1b 	bl	b8af0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b94ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b94bc:	1d3c      	adds	r4, r7, #4
   b94be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b94c0:	682b      	ldr	r3, [r5, #0]
   b94c2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b94c4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b94c6:	e7ed      	b.n	b94a4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b94c8:	f1b9 0f00 	cmp.w	r9, #0
   b94cc:	d0ea      	beq.n	b94a4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b94ce:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b94d0:	2210      	movs	r2, #16
   b94d2:	a801      	add	r0, sp, #4
   b94d4:	f002 fb3a 	bl	bbb4c <memset>
                    a.v = 6;
   b94d8:	2306      	movs	r3, #6
   b94da:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b94de:	ad01      	add	r5, sp, #4
   b94e0:	f104 0308 	add.w	r3, r4, #8
   b94e4:	3418      	adds	r4, #24
   b94e6:	6818      	ldr	r0, [r3, #0]
   b94e8:	6859      	ldr	r1, [r3, #4]
   b94ea:	462a      	mov	r2, r5
   b94ec:	c203      	stmia	r2!, {r0, r1}
   b94ee:	3308      	adds	r3, #8
   b94f0:	42a3      	cmp	r3, r4
   b94f2:	4615      	mov	r5, r2
   b94f4:	d1f7      	bne.n	b94e6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b94f6:	a901      	add	r1, sp, #4
   b94f8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b94fa:	ad07      	add	r5, sp, #28
   b94fc:	f7ff fac2 	bl	b8a84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9502:	1d3c      	adds	r4, r7, #4
   b9504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9506:	682b      	ldr	r3, [r5, #0]
   b9508:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b950a:	4649      	mov	r1, r9
   b950c:	e7ca      	b.n	b94a4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b950e:	9800      	ldr	r0, [sp, #0]
   b9510:	f7fe fa7a 	bl	b7a08 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b9514:	4638      	mov	r0, r7
   b9516:	b015      	add	sp, #84	; 0x54
   b9518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b951c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b951c:	4b02      	ldr	r3, [pc, #8]	; (b9528 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b951e:	4a03      	ldr	r2, [pc, #12]	; (b952c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b9520:	601a      	str	r2, [r3, #0]
   b9522:	2200      	movs	r2, #0
   b9524:	605a      	str	r2, [r3, #4]

} // spark
   b9526:	4770      	bx	lr
   b9528:	2003e720 	.word	0x2003e720
   b952c:	000bcb70 	.word	0x000bcb70

000b9530 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b9530:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b9532:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b9534:	d902      	bls.n	b953c <pinAvailable+0xc>
    return false;
   b9536:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b9538:	b002      	add	sp, #8
   b953a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b953c:	f1a0 030b 	sub.w	r3, r0, #11
   b9540:	2b02      	cmp	r3, #2
   b9542:	d81a      	bhi.n	b957a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b9544:	4c17      	ldr	r4, [pc, #92]	; (b95a4 <pinAvailable+0x74>)
   b9546:	7821      	ldrb	r1, [r4, #0]
   b9548:	f3bf 8f5b 	dmb	ish
   b954c:	f011 0101 	ands.w	r1, r1, #1
   b9550:	d10b      	bne.n	b956a <pinAvailable+0x3a>
   b9552:	4620      	mov	r0, r4
   b9554:	9101      	str	r1, [sp, #4]
   b9556:	f7fa fdaf 	bl	b40b8 <__cxa_guard_acquire>
   b955a:	9901      	ldr	r1, [sp, #4]
   b955c:	b128      	cbz	r0, b956a <pinAvailable+0x3a>
   b955e:	4812      	ldr	r0, [pc, #72]	; (b95a8 <pinAvailable+0x78>)
   b9560:	f7fe fdc2 	bl	b80e8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b9564:	4620      	mov	r0, r4
   b9566:	f7fa fdac 	bl	b40c2 <__cxa_guard_release>
   b956a:	4b0f      	ldr	r3, [pc, #60]	; (b95a8 <pinAvailable+0x78>)
   b956c:	7818      	ldrb	r0, [r3, #0]
   b956e:	f7fe fbe3 	bl	b7d38 <hal_spi_is_enabled>
   b9572:	2800      	cmp	r0, #0
   b9574:	d1df      	bne.n	b9536 <pinAvailable+0x6>
  return true; // 'pin' is available
   b9576:	2001      	movs	r0, #1
   b9578:	e7de      	b.n	b9538 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b957a:	2801      	cmp	r0, #1
   b957c:	d809      	bhi.n	b9592 <pinAvailable+0x62>
   b957e:	f000 f8e3 	bl	b9748 <_Z19__fetch_global_Wirev>
   b9582:	2100      	movs	r1, #0
   b9584:	7c00      	ldrb	r0, [r0, #16]
   b9586:	f7fe fb5f 	bl	b7c48 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b958a:	f080 0001 	eor.w	r0, r0, #1
   b958e:	b2c0      	uxtb	r0, r0
   b9590:	e7d2      	b.n	b9538 <pinAvailable+0x8>
   b9592:	3809      	subs	r0, #9
   b9594:	2801      	cmp	r0, #1
   b9596:	d8ee      	bhi.n	b9576 <pinAvailable+0x46>
   b9598:	f000 f89a 	bl	b96d0 <_Z22__fetch_global_Serial1v>
   b959c:	7c00      	ldrb	r0, [r0, #16]
   b959e:	f7fe fafb 	bl	b7b98 <hal_usart_is_enabled>
   b95a2:	e7f2      	b.n	b958a <pinAvailable+0x5a>
   b95a4:	2003df20 	.word	0x2003df20
   b95a8:	2003df24 	.word	0x2003df24

000b95ac <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b95ac:	2823      	cmp	r0, #35	; 0x23
{
   b95ae:	b538      	push	{r3, r4, r5, lr}
   b95b0:	4604      	mov	r4, r0
   b95b2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b95b4:	d80a      	bhi.n	b95cc <pinMode+0x20>
   b95b6:	29ff      	cmp	r1, #255	; 0xff
   b95b8:	d008      	beq.n	b95cc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b95ba:	f7ff ffb9 	bl	b9530 <pinAvailable>
   b95be:	b128      	cbz	r0, b95cc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b95c0:	4629      	mov	r1, r5
   b95c2:	4620      	mov	r0, r4
}
   b95c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b95c8:	f7fe ba3e 	b.w	b7a48 <HAL_Pin_Mode>
}
   b95cc:	bd38      	pop	{r3, r4, r5, pc}

000b95ce <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b95ce:	b538      	push	{r3, r4, r5, lr}
   b95d0:	4604      	mov	r4, r0
   b95d2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b95d4:	f7fe fa40 	bl	b7a58 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b95d8:	28ff      	cmp	r0, #255	; 0xff
   b95da:	d010      	beq.n	b95fe <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b95dc:	2806      	cmp	r0, #6
   b95de:	d804      	bhi.n	b95ea <digitalWrite+0x1c>
   b95e0:	234d      	movs	r3, #77	; 0x4d
   b95e2:	fa23 f000 	lsr.w	r0, r3, r0
   b95e6:	07c3      	lsls	r3, r0, #31
   b95e8:	d409      	bmi.n	b95fe <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b95ea:	4620      	mov	r0, r4
   b95ec:	f7ff ffa0 	bl	b9530 <pinAvailable>
   b95f0:	b128      	cbz	r0, b95fe <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b95f2:	4629      	mov	r1, r5
   b95f4:	4620      	mov	r0, r4
}
   b95f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b95fa:	f7fe ba35 	b.w	b7a68 <HAL_GPIO_Write>
}
   b95fe:	bd38      	pop	{r3, r4, r5, pc}

000b9600 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b9600:	b510      	push	{r4, lr}
   b9602:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b9604:	f7fe fa28 	bl	b7a58 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b9608:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b960a:	b2db      	uxtb	r3, r3
   b960c:	2b01      	cmp	r3, #1
   b960e:	d908      	bls.n	b9622 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b9610:	4620      	mov	r0, r4
   b9612:	f7ff ff8d 	bl	b9530 <pinAvailable>
   b9616:	b120      	cbz	r0, b9622 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b9618:	4620      	mov	r0, r4
}
   b961a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b961e:	f7fe ba2b 	b.w	b7a78 <HAL_GPIO_Read>
}
   b9622:	2000      	movs	r0, #0
   b9624:	bd10      	pop	{r4, pc}

000b9626 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b9626:	280d      	cmp	r0, #13
{
   b9628:	b510      	push	{r4, lr}
   b962a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b962c:	bf9c      	itt	ls
   b962e:	340e      	addls	r4, #14
   b9630:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b9632:	4620      	mov	r0, r4
   b9634:	f7ff ff7c 	bl	b9530 <pinAvailable>
   b9638:	b150      	cbz	r0, b9650 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b963a:	2103      	movs	r1, #3
   b963c:	4620      	mov	r0, r4
   b963e:	f7fe f9fb 	bl	b7a38 <HAL_Validate_Pin_Function>
   b9642:	2803      	cmp	r0, #3
   b9644:	d104      	bne.n	b9650 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b9646:	4620      	mov	r0, r4
}
   b9648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b964c:	f7fe ba1c 	b.w	b7a88 <hal_adc_read>
}
   b9650:	2000      	movs	r0, #0
   b9652:	bd10      	pop	{r4, pc}

000b9654 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b9654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9658:	4690      	mov	r8, r2
   b965a:	461f      	mov	r7, r3
   b965c:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b965e:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b9660:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b9662:	f1c4 0107 	rsb	r1, r4, #7
   b9666:	f1b8 0f00 	cmp.w	r8, #0
   b966a:	d112      	bne.n	b9692 <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b966c:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b9670:	f001 0101 	and.w	r1, r1, #1
   b9674:	4630      	mov	r0, r6
   b9676:	f7ff ffaa 	bl	b95ce <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b967a:	2101      	movs	r1, #1
   b967c:	4628      	mov	r0, r5
   b967e:	f7ff ffa6 	bl	b95ce <digitalWrite>
    digitalWrite(clockPin, LOW);
   b9682:	2100      	movs	r1, #0
   b9684:	4628      	mov	r0, r5
   b9686:	f7ff ffa2 	bl	b95ce <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b968a:	3c01      	subs	r4, #1
   b968c:	d2e9      	bcs.n	b9662 <shiftOut+0xe>
  }
}
   b968e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b9692:	fa47 f104 	asr.w	r1, r7, r4
   b9696:	e7eb      	b.n	b9670 <shiftOut+0x1c>

000b9698 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9698:	4770      	bx	lr
	...

000b969c <_Z20acquireSerial1Bufferv>:
{
   b969c:	b538      	push	{r3, r4, r5, lr}
   b969e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b96a0:	2514      	movs	r5, #20
   b96a2:	462a      	mov	r2, r5
   b96a4:	2100      	movs	r1, #0
   b96a6:	f002 fa51 	bl	bbb4c <memset>
   b96aa:	8025      	strh	r5, [r4, #0]
   b96ac:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b96ae:	4907      	ldr	r1, [pc, #28]	; (b96cc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b96b0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b96b2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b96b4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b96b6:	f000 f86b 	bl	b9790 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b96ba:	4904      	ldr	r1, [pc, #16]	; (b96cc <_Z20acquireSerial1Bufferv+0x30>)
    };
   b96bc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b96be:	4628      	mov	r0, r5
   b96c0:	f000 f866 	bl	b9790 <_ZnajRKSt9nothrow_t>
    };
   b96c4:	60e0      	str	r0, [r4, #12]
}
   b96c6:	4620      	mov	r0, r4
   b96c8:	bd38      	pop	{r3, r4, r5, pc}
   b96ca:	bf00      	nop
   b96cc:	000bcba4 	.word	0x000bcba4

000b96d0 <_Z22__fetch_global_Serial1v>:
{
   b96d0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b96d2:	4d0e      	ldr	r5, [pc, #56]	; (b970c <_Z22__fetch_global_Serial1v+0x3c>)
   b96d4:	7829      	ldrb	r1, [r5, #0]
   b96d6:	f3bf 8f5b 	dmb	ish
   b96da:	f011 0401 	ands.w	r4, r1, #1
{
   b96de:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b96e0:	d111      	bne.n	b9706 <_Z22__fetch_global_Serial1v+0x36>
   b96e2:	4628      	mov	r0, r5
   b96e4:	f7fa fce8 	bl	b40b8 <__cxa_guard_acquire>
   b96e8:	b168      	cbz	r0, b9706 <_Z22__fetch_global_Serial1v+0x36>
   b96ea:	a801      	add	r0, sp, #4
   b96ec:	f7ff ffd6 	bl	b969c <_Z20acquireSerial1Bufferv>
   b96f0:	aa01      	add	r2, sp, #4
   b96f2:	4621      	mov	r1, r4
   b96f4:	4806      	ldr	r0, [pc, #24]	; (b9710 <_Z22__fetch_global_Serial1v+0x40>)
   b96f6:	f7ff fad3 	bl	b8ca0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b96fa:	4628      	mov	r0, r5
   b96fc:	f7fa fce1 	bl	b40c2 <__cxa_guard_release>
   b9700:	4804      	ldr	r0, [pc, #16]	; (b9714 <_Z22__fetch_global_Serial1v+0x44>)
   b9702:	f002 f9dd 	bl	bbac0 <atexit>
    return serial1;
}
   b9706:	4802      	ldr	r0, [pc, #8]	; (b9710 <_Z22__fetch_global_Serial1v+0x40>)
   b9708:	b007      	add	sp, #28
   b970a:	bd30      	pop	{r4, r5, pc}
   b970c:	2003e728 	.word	0x2003e728
   b9710:	2003e72c 	.word	0x2003e72c
   b9714:	000b9699 	.word	0x000b9699

000b9718 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9718:	4770      	bx	lr
	...

000b971c <_Z17acquireWireBufferv>:
{
   b971c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b971e:	2520      	movs	r5, #32
   b9720:	2314      	movs	r3, #20
{
   b9722:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b9724:	6003      	str	r3, [r0, #0]
   b9726:	6085      	str	r5, [r0, #8]
   b9728:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b972a:	4906      	ldr	r1, [pc, #24]	; (b9744 <_Z17acquireWireBufferv+0x28>)
   b972c:	4628      	mov	r0, r5
   b972e:	f000 f82f 	bl	b9790 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9732:	4904      	ldr	r1, [pc, #16]	; (b9744 <_Z17acquireWireBufferv+0x28>)
	};
   b9734:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9736:	4628      	mov	r0, r5
   b9738:	f000 f82a 	bl	b9790 <_ZnajRKSt9nothrow_t>
	};
   b973c:	60e0      	str	r0, [r4, #12]
}
   b973e:	4620      	mov	r0, r4
   b9740:	bd38      	pop	{r3, r4, r5, pc}
   b9742:	bf00      	nop
   b9744:	000bcba4 	.word	0x000bcba4

000b9748 <_Z19__fetch_global_Wirev>:
{
   b9748:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b974a:	4d0e      	ldr	r5, [pc, #56]	; (b9784 <_Z19__fetch_global_Wirev+0x3c>)
   b974c:	7829      	ldrb	r1, [r5, #0]
   b974e:	f3bf 8f5b 	dmb	ish
   b9752:	f011 0401 	ands.w	r4, r1, #1
{
   b9756:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9758:	d111      	bne.n	b977e <_Z19__fetch_global_Wirev+0x36>
   b975a:	4628      	mov	r0, r5
   b975c:	f7fa fcac 	bl	b40b8 <__cxa_guard_acquire>
   b9760:	b168      	cbz	r0, b977e <_Z19__fetch_global_Wirev+0x36>
   b9762:	a801      	add	r0, sp, #4
   b9764:	f7ff ffda 	bl	b971c <_Z17acquireWireBufferv>
   b9768:	aa01      	add	r2, sp, #4
   b976a:	4621      	mov	r1, r4
   b976c:	4806      	ldr	r0, [pc, #24]	; (b9788 <_Z19__fetch_global_Wirev+0x40>)
   b976e:	f7ff fad7 	bl	b8d20 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b9772:	4628      	mov	r0, r5
   b9774:	f7fa fca5 	bl	b40c2 <__cxa_guard_release>
   b9778:	4804      	ldr	r0, [pc, #16]	; (b978c <_Z19__fetch_global_Wirev+0x44>)
   b977a:	f002 f9a1 	bl	bbac0 <atexit>
	return wire;
}
   b977e:	4802      	ldr	r0, [pc, #8]	; (b9788 <_Z19__fetch_global_Wirev+0x40>)
   b9780:	b007      	add	sp, #28
   b9782:	bd30      	pop	{r4, r5, pc}
   b9784:	2003e744 	.word	0x2003e744
   b9788:	2003e748 	.word	0x2003e748
   b978c:	000b9719 	.word	0x000b9719

000b9790 <_ZnajRKSt9nothrow_t>:
   b9790:	f7fa bc83 	b.w	b409a <_Znaj>

000b9794 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b9794:	4901      	ldr	r1, [pc, #4]	; (b979c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b9796:	f000 b8f9 	b.w	b998c <_ZNKSt9type_infoeqERKS_>
   b979a:	bf00      	nop
   b979c:	000bcbc0 	.word	0x000bcbc0

000b97a0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b97a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b97a2:	2400      	movs	r4, #0
   b97a4:	2310      	movs	r3, #16
   b97a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b97aa:	6803      	ldr	r3, [r0, #0]
   b97ac:	4615      	mov	r5, r2
   b97ae:	699e      	ldr	r6, [r3, #24]
   b97b0:	6812      	ldr	r2, [r2, #0]
   b97b2:	466b      	mov	r3, sp
   b97b4:	e9cd 4400 	strd	r4, r4, [sp]
   b97b8:	47b0      	blx	r6
   b97ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b97be:	f003 0306 	and.w	r3, r3, #6
   b97c2:	2b06      	cmp	r3, #6
   b97c4:	bf03      	ittte	eq
   b97c6:	9b00      	ldreq	r3, [sp, #0]
   b97c8:	602b      	streq	r3, [r5, #0]
   b97ca:	2001      	moveq	r0, #1
   b97cc:	4620      	movne	r0, r4
   b97ce:	b004      	add	sp, #16
   b97d0:	bd70      	pop	{r4, r5, r6, pc}

000b97d2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b97d2:	9800      	ldr	r0, [sp, #0]
   b97d4:	4290      	cmp	r0, r2
   b97d6:	bf14      	ite	ne
   b97d8:	2001      	movne	r0, #1
   b97da:	2006      	moveq	r0, #6
   b97dc:	4770      	bx	lr
	...

000b97e0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b97e0:	b510      	push	{r4, lr}
   b97e2:	4b03      	ldr	r3, [pc, #12]	; (b97f0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b97e4:	6003      	str	r3, [r0, #0]
   b97e6:	4604      	mov	r4, r0
   b97e8:	f000 f8cd 	bl	b9986 <_ZNSt9type_infoD1Ev>
   b97ec:	4620      	mov	r0, r4
   b97ee:	bd10      	pop	{r4, pc}
   b97f0:	000bcc00 	.word	0x000bcc00

000b97f4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b97f4:	b510      	push	{r4, lr}
   b97f6:	4604      	mov	r4, r0
   b97f8:	f7ff fff2 	bl	b97e0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b97fc:	4620      	mov	r0, r4
   b97fe:	2108      	movs	r1, #8
   b9800:	f7fa fc4d 	bl	b409e <_ZdlPvj>
   b9804:	4620      	mov	r0, r4
   b9806:	bd10      	pop	{r4, pc}

000b9808 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b9808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b980c:	461f      	mov	r7, r3
   b980e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b9812:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b9816:	4598      	cmp	r8, r3
   b9818:	4606      	mov	r6, r0
   b981a:	4615      	mov	r5, r2
   b981c:	d107      	bne.n	b982e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b981e:	9907      	ldr	r1, [sp, #28]
   b9820:	f000 f8b4 	bl	b998c <_ZNKSt9type_infoeqERKS_>
   b9824:	b118      	cbz	r0, b982e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9826:	7165      	strb	r5, [r4, #5]
   b9828:	2000      	movs	r0, #0
   b982a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b982e:	4639      	mov	r1, r7
   b9830:	4630      	mov	r0, r6
   b9832:	f000 f8ab 	bl	b998c <_ZNKSt9type_infoeqERKS_>
   b9836:	2800      	cmp	r0, #0
   b9838:	d0f6      	beq.n	b9828 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b983a:	2301      	movs	r3, #1
   b983c:	f8c4 8000 	str.w	r8, [r4]
   b9840:	7125      	strb	r5, [r4, #4]
   b9842:	71a3      	strb	r3, [r4, #6]
   b9844:	e7f0      	b.n	b9828 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b9846 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b9846:	b538      	push	{r3, r4, r5, lr}
   b9848:	4615      	mov	r5, r2
   b984a:	461c      	mov	r4, r3
   b984c:	f000 f89e 	bl	b998c <_ZNKSt9type_infoeqERKS_>
   b9850:	b120      	cbz	r0, b985c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b9852:	2308      	movs	r3, #8
   b9854:	60e3      	str	r3, [r4, #12]
   b9856:	2306      	movs	r3, #6
   b9858:	6025      	str	r5, [r4, #0]
   b985a:	7123      	strb	r3, [r4, #4]
   b985c:	bd38      	pop	{r3, r4, r5, pc}

000b985e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b985e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9860:	4605      	mov	r5, r0
   b9862:	460c      	mov	r4, r1
   b9864:	9201      	str	r2, [sp, #4]
   b9866:	461e      	mov	r6, r3
   b9868:	f000 f890 	bl	b998c <_ZNKSt9type_infoeqERKS_>
   b986c:	b950      	cbnz	r0, b9884 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b986e:	2e03      	cmp	r6, #3
   b9870:	d808      	bhi.n	b9884 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9872:	6823      	ldr	r3, [r4, #0]
   b9874:	9a01      	ldr	r2, [sp, #4]
   b9876:	695b      	ldr	r3, [r3, #20]
   b9878:	4629      	mov	r1, r5
   b987a:	4620      	mov	r0, r4
   b987c:	b002      	add	sp, #8
   b987e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9882:	4718      	bx	r3
   b9884:	b002      	add	sp, #8
   b9886:	bd70      	pop	{r4, r5, r6, pc}

000b9888 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b9888:	b510      	push	{r4, lr}
   b988a:	4b03      	ldr	r3, [pc, #12]	; (b9898 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b988c:	6003      	str	r3, [r0, #0]
   b988e:	4604      	mov	r4, r0
   b9890:	f7ff ffa6 	bl	b97e0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9894:	4620      	mov	r0, r4
   b9896:	bd10      	pop	{r4, pc}
   b9898:	000bcc60 	.word	0x000bcc60

000b989c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b989c:	b510      	push	{r4, lr}
   b989e:	4604      	mov	r4, r0
   b98a0:	f7ff fff2 	bl	b9888 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b98a4:	4620      	mov	r0, r4
   b98a6:	210c      	movs	r1, #12
   b98a8:	f7fa fbf9 	bl	b409e <_ZdlPvj>
   b98ac:	4620      	mov	r0, r4
   b98ae:	bd10      	pop	{r4, pc}

000b98b0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b98b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b98b2:	9f08      	ldr	r7, [sp, #32]
   b98b4:	4297      	cmp	r7, r2
   b98b6:	4605      	mov	r5, r0
   b98b8:	460e      	mov	r6, r1
   b98ba:	4614      	mov	r4, r2
   b98bc:	d00a      	beq.n	b98d4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b98be:	68a8      	ldr	r0, [r5, #8]
   b98c0:	6802      	ldr	r2, [r0, #0]
   b98c2:	9708      	str	r7, [sp, #32]
   b98c4:	6a15      	ldr	r5, [r2, #32]
   b98c6:	4631      	mov	r1, r6
   b98c8:	4622      	mov	r2, r4
   b98ca:	46ac      	mov	ip, r5
   b98cc:	b003      	add	sp, #12
   b98ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b98d2:	4760      	bx	ip
   b98d4:	4619      	mov	r1, r3
   b98d6:	9301      	str	r3, [sp, #4]
   b98d8:	f000 f858 	bl	b998c <_ZNKSt9type_infoeqERKS_>
   b98dc:	9b01      	ldr	r3, [sp, #4]
   b98de:	2800      	cmp	r0, #0
   b98e0:	d0ed      	beq.n	b98be <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b98e2:	2006      	movs	r0, #6
   b98e4:	b003      	add	sp, #12
   b98e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b98e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b98e8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b98ec:	460d      	mov	r5, r1
   b98ee:	4619      	mov	r1, r3
   b98f0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b98f4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b98f8:	4681      	mov	r9, r0
   b98fa:	4617      	mov	r7, r2
   b98fc:	4698      	mov	r8, r3
   b98fe:	f000 f845 	bl	b998c <_ZNKSt9type_infoeqERKS_>
   b9902:	b190      	cbz	r0, b992a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b9904:	2d00      	cmp	r5, #0
   b9906:	6034      	str	r4, [r6, #0]
   b9908:	7137      	strb	r7, [r6, #4]
   b990a:	db09      	blt.n	b9920 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b990c:	1961      	adds	r1, r4, r5
   b990e:	458a      	cmp	sl, r1
   b9910:	bf0c      	ite	eq
   b9912:	2106      	moveq	r1, #6
   b9914:	2101      	movne	r1, #1
   b9916:	71b1      	strb	r1, [r6, #6]
   b9918:	2000      	movs	r0, #0
   b991a:	b001      	add	sp, #4
   b991c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9920:	3502      	adds	r5, #2
   b9922:	d1f9      	bne.n	b9918 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9924:	2301      	movs	r3, #1
   b9926:	71b3      	strb	r3, [r6, #6]
   b9928:	e7f6      	b.n	b9918 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b992a:	4554      	cmp	r4, sl
   b992c:	d106      	bne.n	b993c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b992e:	4659      	mov	r1, fp
   b9930:	4648      	mov	r0, r9
   b9932:	f000 f82b 	bl	b998c <_ZNKSt9type_infoeqERKS_>
   b9936:	b108      	cbz	r0, b993c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9938:	7177      	strb	r7, [r6, #5]
   b993a:	e7ed      	b.n	b9918 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b993c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b9940:	6803      	ldr	r3, [r0, #0]
   b9942:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b9946:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b994a:	69dc      	ldr	r4, [r3, #28]
   b994c:	463a      	mov	r2, r7
   b994e:	4643      	mov	r3, r8
   b9950:	4629      	mov	r1, r5
   b9952:	46a4      	mov	ip, r4
   b9954:	b001      	add	sp, #4
   b9956:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b995a:	4760      	bx	ip

000b995c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b995c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9960:	4607      	mov	r7, r0
   b9962:	460c      	mov	r4, r1
   b9964:	4615      	mov	r5, r2
   b9966:	461e      	mov	r6, r3
   b9968:	f7ff ff6d 	bl	b9846 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b996c:	b948      	cbnz	r0, b9982 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b996e:	68b8      	ldr	r0, [r7, #8]
   b9970:	6803      	ldr	r3, [r0, #0]
   b9972:	699f      	ldr	r7, [r3, #24]
   b9974:	462a      	mov	r2, r5
   b9976:	4633      	mov	r3, r6
   b9978:	4621      	mov	r1, r4
   b997a:	46bc      	mov	ip, r7
   b997c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9980:	4760      	bx	ip
   b9982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9986 <_ZNSt9type_infoD1Ev>:
   b9986:	4770      	bx	lr

000b9988 <_ZNKSt9type_info14__is_pointer_pEv>:
   b9988:	2000      	movs	r0, #0
   b998a:	4770      	bx	lr

000b998c <_ZNKSt9type_infoeqERKS_>:
   b998c:	4281      	cmp	r1, r0
   b998e:	b508      	push	{r3, lr}
   b9990:	d00e      	beq.n	b99b0 <_ZNKSt9type_infoeqERKS_+0x24>
   b9992:	6840      	ldr	r0, [r0, #4]
   b9994:	7803      	ldrb	r3, [r0, #0]
   b9996:	2b2a      	cmp	r3, #42	; 0x2a
   b9998:	d00c      	beq.n	b99b4 <_ZNKSt9type_infoeqERKS_+0x28>
   b999a:	6849      	ldr	r1, [r1, #4]
   b999c:	780b      	ldrb	r3, [r1, #0]
   b999e:	2b2a      	cmp	r3, #42	; 0x2a
   b99a0:	bf08      	it	eq
   b99a2:	3101      	addeq	r1, #1
   b99a4:	f002 f908 	bl	bbbb8 <strcmp>
   b99a8:	fab0 f080 	clz	r0, r0
   b99ac:	0940      	lsrs	r0, r0, #5
   b99ae:	bd08      	pop	{r3, pc}
   b99b0:	2001      	movs	r0, #1
   b99b2:	e7fc      	b.n	b99ae <_ZNKSt9type_infoeqERKS_+0x22>
   b99b4:	2000      	movs	r0, #0
   b99b6:	e7fa      	b.n	b99ae <_ZNKSt9type_infoeqERKS_+0x22>

000b99b8 <pow>:
   b99b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b99ba:	ed2d 8b02 	vpush	{d8}
   b99be:	ec57 6b10 	vmov	r6, r7, d0
   b99c2:	ec55 4b11 	vmov	r4, r5, d1
   b99c6:	f000 f8cb 	bl	b9b60 <__ieee754_pow>
   b99ca:	4b63      	ldr	r3, [pc, #396]	; (b9b58 <pow+0x1a0>)
   b99cc:	eeb0 8a40 	vmov.f32	s16, s0
   b99d0:	eef0 8a60 	vmov.f32	s17, s1
   b99d4:	f993 3000 	ldrsb.w	r3, [r3]
   b99d8:	3301      	adds	r3, #1
   b99da:	d02a      	beq.n	b9a32 <pow+0x7a>
   b99dc:	4622      	mov	r2, r4
   b99de:	462b      	mov	r3, r5
   b99e0:	4620      	mov	r0, r4
   b99e2:	4629      	mov	r1, r5
   b99e4:	f001 fcc4 	bl	bb370 <__aeabi_dcmpun>
   b99e8:	bb18      	cbnz	r0, b9a32 <pow+0x7a>
   b99ea:	4632      	mov	r2, r6
   b99ec:	463b      	mov	r3, r7
   b99ee:	4630      	mov	r0, r6
   b99f0:	4639      	mov	r1, r7
   b99f2:	f001 fcbd 	bl	bb370 <__aeabi_dcmpun>
   b99f6:	2800      	cmp	r0, #0
   b99f8:	d144      	bne.n	b9a84 <pow+0xcc>
   b99fa:	2200      	movs	r2, #0
   b99fc:	2300      	movs	r3, #0
   b99fe:	4630      	mov	r0, r6
   b9a00:	4639      	mov	r1, r7
   b9a02:	f001 fc83 	bl	bb30c <__aeabi_dcmpeq>
   b9a06:	b1d8      	cbz	r0, b9a40 <pow+0x88>
   b9a08:	2200      	movs	r2, #0
   b9a0a:	2300      	movs	r3, #0
   b9a0c:	4620      	mov	r0, r4
   b9a0e:	4629      	mov	r1, r5
   b9a10:	f001 fc7c 	bl	bb30c <__aeabi_dcmpeq>
   b9a14:	2800      	cmp	r0, #0
   b9a16:	d13d      	bne.n	b9a94 <pow+0xdc>
   b9a18:	ec45 4b10 	vmov	d0, r4, r5
   b9a1c:	f000 ff10 	bl	ba840 <finite>
   b9a20:	b138      	cbz	r0, b9a32 <pow+0x7a>
   b9a22:	4620      	mov	r0, r4
   b9a24:	4629      	mov	r1, r5
   b9a26:	2200      	movs	r2, #0
   b9a28:	2300      	movs	r3, #0
   b9a2a:	f001 fc79 	bl	bb320 <__aeabi_dcmplt>
   b9a2e:	2800      	cmp	r0, #0
   b9a30:	d15c      	bne.n	b9aec <pow+0x134>
   b9a32:	eeb0 0a48 	vmov.f32	s0, s16
   b9a36:	eef0 0a68 	vmov.f32	s1, s17
   b9a3a:	ecbd 8b02 	vpop	{d8}
   b9a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9a40:	eeb0 0a48 	vmov.f32	s0, s16
   b9a44:	eef0 0a68 	vmov.f32	s1, s17
   b9a48:	f000 fefa 	bl	ba840 <finite>
   b9a4c:	b358      	cbz	r0, b9aa6 <pow+0xee>
   b9a4e:	ec51 0b18 	vmov	r0, r1, d8
   b9a52:	2200      	movs	r2, #0
   b9a54:	2300      	movs	r3, #0
   b9a56:	f001 fc59 	bl	bb30c <__aeabi_dcmpeq>
   b9a5a:	2800      	cmp	r0, #0
   b9a5c:	d0e9      	beq.n	b9a32 <pow+0x7a>
   b9a5e:	ec47 6b10 	vmov	d0, r6, r7
   b9a62:	f000 feed 	bl	ba840 <finite>
   b9a66:	2800      	cmp	r0, #0
   b9a68:	d0e3      	beq.n	b9a32 <pow+0x7a>
   b9a6a:	ec45 4b10 	vmov	d0, r4, r5
   b9a6e:	f000 fee7 	bl	ba840 <finite>
   b9a72:	2800      	cmp	r0, #0
   b9a74:	d0dd      	beq.n	b9a32 <pow+0x7a>
   b9a76:	f7fe fad3 	bl	b8020 <__errno>
   b9a7a:	2322      	movs	r3, #34	; 0x22
   b9a7c:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b9b38 <pow+0x180>
   b9a80:	6003      	str	r3, [r0, #0]
   b9a82:	e7d6      	b.n	b9a32 <pow+0x7a>
   b9a84:	4620      	mov	r0, r4
   b9a86:	4629      	mov	r1, r5
   b9a88:	2200      	movs	r2, #0
   b9a8a:	2300      	movs	r3, #0
   b9a8c:	f001 fc3e 	bl	bb30c <__aeabi_dcmpeq>
   b9a90:	2800      	cmp	r0, #0
   b9a92:	d0ce      	beq.n	b9a32 <pow+0x7a>
   b9a94:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b9b40 <pow+0x188>
   b9a98:	eeb0 0a48 	vmov.f32	s0, s16
   b9a9c:	eef0 0a68 	vmov.f32	s1, s17
   b9aa0:	ecbd 8b02 	vpop	{d8}
   b9aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9aa6:	ec47 6b10 	vmov	d0, r6, r7
   b9aaa:	f000 fec9 	bl	ba840 <finite>
   b9aae:	2800      	cmp	r0, #0
   b9ab0:	d0cd      	beq.n	b9a4e <pow+0x96>
   b9ab2:	ec45 4b10 	vmov	d0, r4, r5
   b9ab6:	f000 fec3 	bl	ba840 <finite>
   b9aba:	2800      	cmp	r0, #0
   b9abc:	d0c7      	beq.n	b9a4e <pow+0x96>
   b9abe:	ec53 2b18 	vmov	r2, r3, d8
   b9ac2:	ee18 0a10 	vmov	r0, s16
   b9ac6:	4619      	mov	r1, r3
   b9ac8:	f001 fc52 	bl	bb370 <__aeabi_dcmpun>
   b9acc:	bb20      	cbnz	r0, b9b18 <pow+0x160>
   b9ace:	f7fe faa7 	bl	b8020 <__errno>
   b9ad2:	4603      	mov	r3, r0
   b9ad4:	2222      	movs	r2, #34	; 0x22
   b9ad6:	601a      	str	r2, [r3, #0]
   b9ad8:	4630      	mov	r0, r6
   b9ada:	4639      	mov	r1, r7
   b9adc:	2200      	movs	r2, #0
   b9ade:	2300      	movs	r3, #0
   b9ae0:	f001 fc1e 	bl	bb320 <__aeabi_dcmplt>
   b9ae4:	b948      	cbnz	r0, b9afa <pow+0x142>
   b9ae6:	ed9f 8b18 	vldr	d8, [pc, #96]	; b9b48 <pow+0x190>
   b9aea:	e7a2      	b.n	b9a32 <pow+0x7a>
   b9aec:	f7fe fa98 	bl	b8020 <__errno>
   b9af0:	2321      	movs	r3, #33	; 0x21
   b9af2:	ed9f 8b17 	vldr	d8, [pc, #92]	; b9b50 <pow+0x198>
   b9af6:	6003      	str	r3, [r0, #0]
   b9af8:	e79b      	b.n	b9a32 <pow+0x7a>
   b9afa:	ec45 4b10 	vmov	d0, r4, r5
   b9afe:	f000 feb3 	bl	ba868 <rint>
   b9b02:	4622      	mov	r2, r4
   b9b04:	ec51 0b10 	vmov	r0, r1, d0
   b9b08:	462b      	mov	r3, r5
   b9b0a:	f001 fbff 	bl	bb30c <__aeabi_dcmpeq>
   b9b0e:	2800      	cmp	r0, #0
   b9b10:	d1e9      	bne.n	b9ae6 <pow+0x12e>
   b9b12:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b9b50 <pow+0x198>
   b9b16:	e78c      	b.n	b9a32 <pow+0x7a>
   b9b18:	f7fe fa82 	bl	b8020 <__errno>
   b9b1c:	2200      	movs	r2, #0
   b9b1e:	2300      	movs	r3, #0
   b9b20:	2121      	movs	r1, #33	; 0x21
   b9b22:	6001      	str	r1, [r0, #0]
   b9b24:	4610      	mov	r0, r2
   b9b26:	4619      	mov	r1, r3
   b9b28:	f001 fab2 	bl	bb090 <__aeabi_ddiv>
   b9b2c:	ec41 0b18 	vmov	d8, r0, r1
   b9b30:	e77f      	b.n	b9a32 <pow+0x7a>
   b9b32:	bf00      	nop
   b9b34:	f3af 8000 	nop.w
	...
   b9b44:	3ff00000 	.word	0x3ff00000
   b9b48:	00000000 	.word	0x00000000
   b9b4c:	7ff00000 	.word	0x7ff00000
   b9b50:	00000000 	.word	0x00000000
   b9b54:	fff00000 	.word	0xfff00000
   b9b58:	2003deb4 	.word	0x2003deb4
   b9b5c:	00000000 	.word	0x00000000

000b9b60 <__ieee754_pow>:
   b9b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9b64:	ec57 6b11 	vmov	r6, r7, d1
   b9b68:	ed2d 8b0c 	vpush	{d8-d13}
   b9b6c:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b9b70:	ea5a 0206 	orrs.w	r2, sl, r6
   b9b74:	b087      	sub	sp, #28
   b9b76:	d03d      	beq.n	b9bf4 <__ieee754_pow+0x94>
   b9b78:	ec55 4b10 	vmov	r4, r5, d0
   b9b7c:	4972      	ldr	r1, [pc, #456]	; (b9d48 <__ieee754_pow+0x1e8>)
   b9b7e:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b9b82:	4588      	cmp	r8, r1
   b9b84:	ee10 2a10 	vmov	r2, s0
   b9b88:	46a9      	mov	r9, r5
   b9b8a:	dc2c      	bgt.n	b9be6 <__ieee754_pow+0x86>
   b9b8c:	ee11 3a10 	vmov	r3, s2
   b9b90:	46bb      	mov	fp, r7
   b9b92:	d036      	beq.n	b9c02 <__ieee754_pow+0xa2>
   b9b94:	458a      	cmp	sl, r1
   b9b96:	dc26      	bgt.n	b9be6 <__ieee754_pow+0x86>
   b9b98:	496b      	ldr	r1, [pc, #428]	; (b9d48 <__ieee754_pow+0x1e8>)
   b9b9a:	458a      	cmp	sl, r1
   b9b9c:	d021      	beq.n	b9be2 <__ieee754_pow+0x82>
   b9b9e:	f1b9 0f00 	cmp.w	r9, #0
   b9ba2:	db39      	blt.n	b9c18 <__ieee754_pow+0xb8>
   b9ba4:	2100      	movs	r1, #0
   b9ba6:	9100      	str	r1, [sp, #0]
   b9ba8:	2b00      	cmp	r3, #0
   b9baa:	d151      	bne.n	b9c50 <__ieee754_pow+0xf0>
   b9bac:	4b66      	ldr	r3, [pc, #408]	; (b9d48 <__ieee754_pow+0x1e8>)
   b9bae:	459a      	cmp	sl, r3
   b9bb0:	f000 80a2 	beq.w	b9cf8 <__ieee754_pow+0x198>
   b9bb4:	4b65      	ldr	r3, [pc, #404]	; (b9d4c <__ieee754_pow+0x1ec>)
   b9bb6:	459a      	cmp	sl, r3
   b9bb8:	f000 80b0 	beq.w	b9d1c <__ieee754_pow+0x1bc>
   b9bbc:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b9bc0:	f000 84c0 	beq.w	ba544 <__ieee754_pow+0x9e4>
   b9bc4:	4b62      	ldr	r3, [pc, #392]	; (b9d50 <__ieee754_pow+0x1f0>)
   b9bc6:	459b      	cmp	fp, r3
   b9bc8:	d142      	bne.n	b9c50 <__ieee754_pow+0xf0>
   b9bca:	f1b9 0f00 	cmp.w	r9, #0
   b9bce:	db3f      	blt.n	b9c50 <__ieee754_pow+0xf0>
   b9bd0:	ec45 4b10 	vmov	d0, r4, r5
   b9bd4:	b007      	add	sp, #28
   b9bd6:	ecbd 8b0c 	vpop	{d8-d13}
   b9bda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9bde:	f000 bd59 	b.w	ba694 <__ieee754_sqrt>
   b9be2:	2b00      	cmp	r3, #0
   b9be4:	d0db      	beq.n	b9b9e <__ieee754_pow+0x3e>
   b9be6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b9bea:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b9bee:	ea58 0302 	orrs.w	r3, r8, r2
   b9bf2:	d109      	bne.n	b9c08 <__ieee754_pow+0xa8>
   b9bf4:	ed9f 0b50 	vldr	d0, [pc, #320]	; b9d38 <__ieee754_pow+0x1d8>
   b9bf8:	b007      	add	sp, #28
   b9bfa:	ecbd 8b0c 	vpop	{d8-d13}
   b9bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9c02:	b90c      	cbnz	r4, b9c08 <__ieee754_pow+0xa8>
   b9c04:	45c2      	cmp	sl, r8
   b9c06:	ddc7      	ble.n	b9b98 <__ieee754_pow+0x38>
   b9c08:	4852      	ldr	r0, [pc, #328]	; (b9d54 <__ieee754_pow+0x1f4>)
   b9c0a:	b007      	add	sp, #28
   b9c0c:	ecbd 8b0c 	vpop	{d8-d13}
   b9c10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9c14:	f000 be20 	b.w	ba858 <nan>
   b9c18:	494f      	ldr	r1, [pc, #316]	; (b9d58 <__ieee754_pow+0x1f8>)
   b9c1a:	458a      	cmp	sl, r1
   b9c1c:	f300 8085 	bgt.w	b9d2a <__ieee754_pow+0x1ca>
   b9c20:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b9c24:	458a      	cmp	sl, r1
   b9c26:	dd0f      	ble.n	b9c48 <__ieee754_pow+0xe8>
   b9c28:	ea4f 512a 	mov.w	r1, sl, asr #20
   b9c2c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b9c30:	2914      	cmp	r1, #20
   b9c32:	f340 849b 	ble.w	ba56c <__ieee754_pow+0xa0c>
   b9c36:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b9c3a:	fa23 f001 	lsr.w	r0, r3, r1
   b9c3e:	fa00 f101 	lsl.w	r1, r0, r1
   b9c42:	4299      	cmp	r1, r3
   b9c44:	f000 84ed 	beq.w	ba622 <__ieee754_pow+0xac2>
   b9c48:	2100      	movs	r1, #0
   b9c4a:	9100      	str	r1, [sp, #0]
   b9c4c:	2b00      	cmp	r3, #0
   b9c4e:	d0b1      	beq.n	b9bb4 <__ieee754_pow+0x54>
   b9c50:	ec45 4b10 	vmov	d0, r4, r5
   b9c54:	9202      	str	r2, [sp, #8]
   b9c56:	f000 fde9 	bl	ba82c <fabs>
   b9c5a:	9a02      	ldr	r2, [sp, #8]
   b9c5c:	bb5a      	cbnz	r2, b9cb6 <__ieee754_pow+0x156>
   b9c5e:	f1b8 0f00 	cmp.w	r8, #0
   b9c62:	d004      	beq.n	b9c6e <__ieee754_pow+0x10e>
   b9c64:	4b39      	ldr	r3, [pc, #228]	; (b9d4c <__ieee754_pow+0x1ec>)
   b9c66:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b9c6a:	429a      	cmp	r2, r3
   b9c6c:	d123      	bne.n	b9cb6 <__ieee754_pow+0x156>
   b9c6e:	f1bb 0f00 	cmp.w	fp, #0
   b9c72:	da07      	bge.n	b9c84 <__ieee754_pow+0x124>
   b9c74:	ec53 2b10 	vmov	r2, r3, d0
   b9c78:	4934      	ldr	r1, [pc, #208]	; (b9d4c <__ieee754_pow+0x1ec>)
   b9c7a:	2000      	movs	r0, #0
   b9c7c:	f001 fa08 	bl	bb090 <__aeabi_ddiv>
   b9c80:	ec41 0b10 	vmov	d0, r0, r1
   b9c84:	f1b9 0f00 	cmp.w	r9, #0
   b9c88:	dab6      	bge.n	b9bf8 <__ieee754_pow+0x98>
   b9c8a:	9b00      	ldr	r3, [sp, #0]
   b9c8c:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b9c90:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b9c94:	ea58 0303 	orrs.w	r3, r8, r3
   b9c98:	f040 848d 	bne.w	ba5b6 <__ieee754_pow+0xa56>
   b9c9c:	ec53 2b10 	vmov	r2, r3, d0
   b9ca0:	4610      	mov	r0, r2
   b9ca2:	4619      	mov	r1, r3
   b9ca4:	f000 ff12 	bl	baacc <__aeabi_dsub>
   b9ca8:	4602      	mov	r2, r0
   b9caa:	460b      	mov	r3, r1
   b9cac:	f001 f9f0 	bl	bb090 <__aeabi_ddiv>
   b9cb0:	ec41 0b10 	vmov	d0, r0, r1
   b9cb4:	e7a0      	b.n	b9bf8 <__ieee754_pow+0x98>
   b9cb6:	9a00      	ldr	r2, [sp, #0]
   b9cb8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b9cbc:	3b01      	subs	r3, #1
   b9cbe:	9304      	str	r3, [sp, #16]
   b9cc0:	4313      	orrs	r3, r2
   b9cc2:	d035      	beq.n	b9d30 <__ieee754_pow+0x1d0>
   b9cc4:	4b25      	ldr	r3, [pc, #148]	; (b9d5c <__ieee754_pow+0x1fc>)
   b9cc6:	459a      	cmp	sl, r3
   b9cc8:	dd4c      	ble.n	b9d64 <__ieee754_pow+0x204>
   b9cca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b9cce:	459a      	cmp	sl, r3
   b9cd0:	4b23      	ldr	r3, [pc, #140]	; (b9d60 <__ieee754_pow+0x200>)
   b9cd2:	f340 83db 	ble.w	ba48c <__ieee754_pow+0x92c>
   b9cd6:	4598      	cmp	r8, r3
   b9cd8:	f340 8360 	ble.w	ba39c <__ieee754_pow+0x83c>
   b9cdc:	f1bb 0f00 	cmp.w	fp, #0
   b9ce0:	f340 8360 	ble.w	ba3a4 <__ieee754_pow+0x844>
   b9ce4:	a316      	add	r3, pc, #88	; (adr r3, b9d40 <__ieee754_pow+0x1e0>)
   b9ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9cea:	4610      	mov	r0, r2
   b9cec:	4619      	mov	r1, r3
   b9cee:	f001 f8a5 	bl	bae3c <__aeabi_dmul>
   b9cf2:	ec41 0b10 	vmov	d0, r0, r1
   b9cf6:	e77f      	b.n	b9bf8 <__ieee754_pow+0x98>
   b9cf8:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b9cfc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b9d00:	4313      	orrs	r3, r2
   b9d02:	f43f af77 	beq.w	b9bf4 <__ieee754_pow+0x94>
   b9d06:	4b16      	ldr	r3, [pc, #88]	; (b9d60 <__ieee754_pow+0x200>)
   b9d08:	4598      	cmp	r8, r3
   b9d0a:	f340 837a 	ble.w	ba402 <__ieee754_pow+0x8a2>
   b9d0e:	f1bb 0f00 	cmp.w	fp, #0
   b9d12:	f2c0 8347 	blt.w	ba3a4 <__ieee754_pow+0x844>
   b9d16:	ec47 6b10 	vmov	d0, r6, r7
   b9d1a:	e76d      	b.n	b9bf8 <__ieee754_pow+0x98>
   b9d1c:	f1bb 0f00 	cmp.w	fp, #0
   b9d20:	f2c0 841a 	blt.w	ba558 <__ieee754_pow+0x9f8>
   b9d24:	ec45 4b10 	vmov	d0, r4, r5
   b9d28:	e766      	b.n	b9bf8 <__ieee754_pow+0x98>
   b9d2a:	2102      	movs	r1, #2
   b9d2c:	9100      	str	r1, [sp, #0]
   b9d2e:	e73b      	b.n	b9ba8 <__ieee754_pow+0x48>
   b9d30:	4622      	mov	r2, r4
   b9d32:	462b      	mov	r3, r5
   b9d34:	e7b4      	b.n	b9ca0 <__ieee754_pow+0x140>
   b9d36:	bf00      	nop
   b9d38:	00000000 	.word	0x00000000
   b9d3c:	3ff00000 	.word	0x3ff00000
   b9d40:	8800759c 	.word	0x8800759c
   b9d44:	7e37e43c 	.word	0x7e37e43c
   b9d48:	7ff00000 	.word	0x7ff00000
   b9d4c:	3ff00000 	.word	0x3ff00000
   b9d50:	3fe00000 	.word	0x3fe00000
   b9d54:	000bcc9c 	.word	0x000bcc9c
   b9d58:	433fffff 	.word	0x433fffff
   b9d5c:	41e00000 	.word	0x41e00000
   b9d60:	3fefffff 	.word	0x3fefffff
   b9d64:	4be4      	ldr	r3, [pc, #912]	; (ba0f8 <__ieee754_pow+0x598>)
   b9d66:	ea09 0303 	and.w	r3, r9, r3
   b9d6a:	2200      	movs	r2, #0
   b9d6c:	b953      	cbnz	r3, b9d84 <__ieee754_pow+0x224>
   b9d6e:	ec51 0b10 	vmov	r0, r1, d0
   b9d72:	4be2      	ldr	r3, [pc, #904]	; (ba0fc <__ieee754_pow+0x59c>)
   b9d74:	f001 f862 	bl	bae3c <__aeabi_dmul>
   b9d78:	ec41 0b10 	vmov	d0, r0, r1
   b9d7c:	ee10 8a90 	vmov	r8, s1
   b9d80:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b9d84:	ea4f 5328 	mov.w	r3, r8, asr #20
   b9d88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b9d8c:	189a      	adds	r2, r3, r2
   b9d8e:	4bdc      	ldr	r3, [pc, #880]	; (ba100 <__ieee754_pow+0x5a0>)
   b9d90:	9205      	str	r2, [sp, #20]
   b9d92:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b9d96:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b9d9a:	4598      	cmp	r8, r3
   b9d9c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b9da0:	dd07      	ble.n	b9db2 <__ieee754_pow+0x252>
   b9da2:	4bd8      	ldr	r3, [pc, #864]	; (ba104 <__ieee754_pow+0x5a4>)
   b9da4:	4598      	cmp	r8, r3
   b9da6:	f340 8414 	ble.w	ba5d2 <__ieee754_pow+0xa72>
   b9daa:	3201      	adds	r2, #1
   b9dac:	9205      	str	r2, [sp, #20]
   b9dae:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b9db2:	ed9f 6bb9 	vldr	d6, [pc, #740]	; ba098 <__ieee754_pow+0x538>
   b9db6:	ed9f 7bba 	vldr	d7, [pc, #744]	; ba0a0 <__ieee754_pow+0x540>
   b9dba:	ec53 2b16 	vmov	r2, r3, d6
   b9dbe:	eeb0 ca47 	vmov.f32	s24, s14
   b9dc2:	eef0 ca67 	vmov.f32	s25, s15
   b9dc6:	2500      	movs	r5, #0
   b9dc8:	eeb0 da47 	vmov.f32	s26, s14
   b9dcc:	eef0 da67 	vmov.f32	s27, s15
   b9dd0:	ec5b ab10 	vmov	sl, fp, d0
   b9dd4:	46a3      	mov	fp, r4
   b9dd6:	4650      	mov	r0, sl
   b9dd8:	4659      	mov	r1, fp
   b9dda:	ec43 2b1a 	vmov	d10, r2, r3
   b9dde:	f000 fe75 	bl	baacc <__aeabi_dsub>
   b9de2:	ec53 2b1a 	vmov	r2, r3, d10
   b9de6:	4680      	mov	r8, r0
   b9de8:	4689      	mov	r9, r1
   b9dea:	4650      	mov	r0, sl
   b9dec:	4659      	mov	r1, fp
   b9dee:	f000 fe6f 	bl	baad0 <__adddf3>
   b9df2:	4602      	mov	r2, r0
   b9df4:	460b      	mov	r3, r1
   b9df6:	2000      	movs	r0, #0
   b9df8:	49c3      	ldr	r1, [pc, #780]	; (ba108 <__ieee754_pow+0x5a8>)
   b9dfa:	f001 f949 	bl	bb090 <__aeabi_ddiv>
   b9dfe:	ec41 0b1b 	vmov	d11, r0, r1
   b9e02:	4640      	mov	r0, r8
   b9e04:	ec53 2b1b 	vmov	r2, r3, d11
   b9e08:	4649      	mov	r1, r9
   b9e0a:	f001 f817 	bl	bae3c <__aeabi_dmul>
   b9e0e:	ec41 0b18 	vmov	d8, r0, r1
   b9e12:	460a      	mov	r2, r1
   b9e14:	4601      	mov	r1, r0
   b9e16:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b9e1a:	2100      	movs	r1, #0
   b9e1c:	9102      	str	r1, [sp, #8]
   b9e1e:	1064      	asrs	r4, r4, #1
   b9e20:	ec4b ab19 	vmov	d9, sl, fp
   b9e24:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b9e28:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b9e2c:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b9e30:	2000      	movs	r0, #0
   b9e32:	1959      	adds	r1, r3, r5
   b9e34:	4604      	mov	r4, r0
   b9e36:	460d      	mov	r5, r1
   b9e38:	4602      	mov	r2, r0
   b9e3a:	460b      	mov	r3, r1
   b9e3c:	4650      	mov	r0, sl
   b9e3e:	4659      	mov	r1, fp
   b9e40:	f000 fffc 	bl	bae3c <__aeabi_dmul>
   b9e44:	4602      	mov	r2, r0
   b9e46:	460b      	mov	r3, r1
   b9e48:	4640      	mov	r0, r8
   b9e4a:	4649      	mov	r1, r9
   b9e4c:	f000 fe3e 	bl	baacc <__aeabi_dsub>
   b9e50:	ec53 2b1a 	vmov	r2, r3, d10
   b9e54:	4680      	mov	r8, r0
   b9e56:	4689      	mov	r9, r1
   b9e58:	4620      	mov	r0, r4
   b9e5a:	4629      	mov	r1, r5
   b9e5c:	f000 fe36 	bl	baacc <__aeabi_dsub>
   b9e60:	4602      	mov	r2, r0
   b9e62:	460b      	mov	r3, r1
   b9e64:	ec51 0b19 	vmov	r0, r1, d9
   b9e68:	f000 fe30 	bl	baacc <__aeabi_dsub>
   b9e6c:	4652      	mov	r2, sl
   b9e6e:	465b      	mov	r3, fp
   b9e70:	f000 ffe4 	bl	bae3c <__aeabi_dmul>
   b9e74:	4602      	mov	r2, r0
   b9e76:	460b      	mov	r3, r1
   b9e78:	4640      	mov	r0, r8
   b9e7a:	4649      	mov	r1, r9
   b9e7c:	f000 fe26 	bl	baacc <__aeabi_dsub>
   b9e80:	ec53 2b1b 	vmov	r2, r3, d11
   b9e84:	f000 ffda 	bl	bae3c <__aeabi_dmul>
   b9e88:	ec53 2b18 	vmov	r2, r3, d8
   b9e8c:	ec41 0b19 	vmov	d9, r0, r1
   b9e90:	ec51 0b18 	vmov	r0, r1, d8
   b9e94:	f000 ffd2 	bl	bae3c <__aeabi_dmul>
   b9e98:	a383      	add	r3, pc, #524	; (adr r3, ba0a8 <__ieee754_pow+0x548>)
   b9e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9e9e:	4604      	mov	r4, r0
   b9ea0:	460d      	mov	r5, r1
   b9ea2:	f000 ffcb 	bl	bae3c <__aeabi_dmul>
   b9ea6:	a382      	add	r3, pc, #520	; (adr r3, ba0b0 <__ieee754_pow+0x550>)
   b9ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9eac:	f000 fe10 	bl	baad0 <__adddf3>
   b9eb0:	4622      	mov	r2, r4
   b9eb2:	462b      	mov	r3, r5
   b9eb4:	f000 ffc2 	bl	bae3c <__aeabi_dmul>
   b9eb8:	a37f      	add	r3, pc, #508	; (adr r3, ba0b8 <__ieee754_pow+0x558>)
   b9eba:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9ebe:	f000 fe07 	bl	baad0 <__adddf3>
   b9ec2:	4622      	mov	r2, r4
   b9ec4:	462b      	mov	r3, r5
   b9ec6:	f000 ffb9 	bl	bae3c <__aeabi_dmul>
   b9eca:	a37d      	add	r3, pc, #500	; (adr r3, ba0c0 <__ieee754_pow+0x560>)
   b9ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9ed0:	f000 fdfe 	bl	baad0 <__adddf3>
   b9ed4:	4622      	mov	r2, r4
   b9ed6:	462b      	mov	r3, r5
   b9ed8:	f000 ffb0 	bl	bae3c <__aeabi_dmul>
   b9edc:	a37a      	add	r3, pc, #488	; (adr r3, ba0c8 <__ieee754_pow+0x568>)
   b9ede:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9ee2:	f000 fdf5 	bl	baad0 <__adddf3>
   b9ee6:	4622      	mov	r2, r4
   b9ee8:	462b      	mov	r3, r5
   b9eea:	f000 ffa7 	bl	bae3c <__aeabi_dmul>
   b9eee:	a378      	add	r3, pc, #480	; (adr r3, ba0d0 <__ieee754_pow+0x570>)
   b9ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9ef4:	f000 fdec 	bl	baad0 <__adddf3>
   b9ef8:	4622      	mov	r2, r4
   b9efa:	4680      	mov	r8, r0
   b9efc:	4689      	mov	r9, r1
   b9efe:	462b      	mov	r3, r5
   b9f00:	4620      	mov	r0, r4
   b9f02:	4629      	mov	r1, r5
   b9f04:	f000 ff9a 	bl	bae3c <__aeabi_dmul>
   b9f08:	4602      	mov	r2, r0
   b9f0a:	460b      	mov	r3, r1
   b9f0c:	4640      	mov	r0, r8
   b9f0e:	4649      	mov	r1, r9
   b9f10:	f000 ff94 	bl	bae3c <__aeabi_dmul>
   b9f14:	4652      	mov	r2, sl
   b9f16:	4604      	mov	r4, r0
   b9f18:	460d      	mov	r5, r1
   b9f1a:	465b      	mov	r3, fp
   b9f1c:	ec51 0b18 	vmov	r0, r1, d8
   b9f20:	f000 fdd6 	bl	baad0 <__adddf3>
   b9f24:	ec53 2b19 	vmov	r2, r3, d9
   b9f28:	f000 ff88 	bl	bae3c <__aeabi_dmul>
   b9f2c:	4622      	mov	r2, r4
   b9f2e:	462b      	mov	r3, r5
   b9f30:	f000 fdce 	bl	baad0 <__adddf3>
   b9f34:	4652      	mov	r2, sl
   b9f36:	4680      	mov	r8, r0
   b9f38:	4689      	mov	r9, r1
   b9f3a:	465b      	mov	r3, fp
   b9f3c:	4650      	mov	r0, sl
   b9f3e:	4659      	mov	r1, fp
   b9f40:	f000 ff7c 	bl	bae3c <__aeabi_dmul>
   b9f44:	4602      	mov	r2, r0
   b9f46:	460b      	mov	r3, r1
   b9f48:	ec43 2b1a 	vmov	d10, r2, r3
   b9f4c:	4b6f      	ldr	r3, [pc, #444]	; (ba10c <__ieee754_pow+0x5ac>)
   b9f4e:	2200      	movs	r2, #0
   b9f50:	f000 fdbe 	bl	baad0 <__adddf3>
   b9f54:	4642      	mov	r2, r8
   b9f56:	464b      	mov	r3, r9
   b9f58:	f000 fdba 	bl	baad0 <__adddf3>
   b9f5c:	2400      	movs	r4, #0
   b9f5e:	460d      	mov	r5, r1
   b9f60:	4622      	mov	r2, r4
   b9f62:	462b      	mov	r3, r5
   b9f64:	4650      	mov	r0, sl
   b9f66:	4659      	mov	r1, fp
   b9f68:	f000 ff68 	bl	bae3c <__aeabi_dmul>
   b9f6c:	4b67      	ldr	r3, [pc, #412]	; (ba10c <__ieee754_pow+0x5ac>)
   b9f6e:	4682      	mov	sl, r0
   b9f70:	468b      	mov	fp, r1
   b9f72:	2200      	movs	r2, #0
   b9f74:	4620      	mov	r0, r4
   b9f76:	4629      	mov	r1, r5
   b9f78:	f000 fda8 	bl	baacc <__aeabi_dsub>
   b9f7c:	ec53 2b1a 	vmov	r2, r3, d10
   b9f80:	f000 fda4 	bl	baacc <__aeabi_dsub>
   b9f84:	4602      	mov	r2, r0
   b9f86:	460b      	mov	r3, r1
   b9f88:	4640      	mov	r0, r8
   b9f8a:	4649      	mov	r1, r9
   b9f8c:	f000 fd9e 	bl	baacc <__aeabi_dsub>
   b9f90:	ec53 2b18 	vmov	r2, r3, d8
   b9f94:	f000 ff52 	bl	bae3c <__aeabi_dmul>
   b9f98:	4622      	mov	r2, r4
   b9f9a:	462b      	mov	r3, r5
   b9f9c:	4604      	mov	r4, r0
   b9f9e:	460d      	mov	r5, r1
   b9fa0:	ec51 0b19 	vmov	r0, r1, d9
   b9fa4:	f000 ff4a 	bl	bae3c <__aeabi_dmul>
   b9fa8:	4602      	mov	r2, r0
   b9faa:	460b      	mov	r3, r1
   b9fac:	4620      	mov	r0, r4
   b9fae:	4629      	mov	r1, r5
   b9fb0:	f000 fd8e 	bl	baad0 <__adddf3>
   b9fb4:	4680      	mov	r8, r0
   b9fb6:	4689      	mov	r9, r1
   b9fb8:	4642      	mov	r2, r8
   b9fba:	464b      	mov	r3, r9
   b9fbc:	4650      	mov	r0, sl
   b9fbe:	4659      	mov	r1, fp
   b9fc0:	f000 fd86 	bl	baad0 <__adddf3>
   b9fc4:	a344      	add	r3, pc, #272	; (adr r3, ba0d8 <__ieee754_pow+0x578>)
   b9fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9fca:	2000      	movs	r0, #0
   b9fcc:	4604      	mov	r4, r0
   b9fce:	460d      	mov	r5, r1
   b9fd0:	f000 ff34 	bl	bae3c <__aeabi_dmul>
   b9fd4:	4652      	mov	r2, sl
   b9fd6:	ec41 0b19 	vmov	d9, r0, r1
   b9fda:	465b      	mov	r3, fp
   b9fdc:	4620      	mov	r0, r4
   b9fde:	4629      	mov	r1, r5
   b9fe0:	f000 fd74 	bl	baacc <__aeabi_dsub>
   b9fe4:	4602      	mov	r2, r0
   b9fe6:	460b      	mov	r3, r1
   b9fe8:	4640      	mov	r0, r8
   b9fea:	4649      	mov	r1, r9
   b9fec:	f000 fd6e 	bl	baacc <__aeabi_dsub>
   b9ff0:	a33b      	add	r3, pc, #236	; (adr r3, ba0e0 <__ieee754_pow+0x580>)
   b9ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9ff6:	f000 ff21 	bl	bae3c <__aeabi_dmul>
   b9ffa:	4602      	mov	r2, r0
   b9ffc:	460b      	mov	r3, r1
   b9ffe:	4620      	mov	r0, r4
   ba000:	4629      	mov	r1, r5
   ba002:	4614      	mov	r4, r2
   ba004:	461d      	mov	r5, r3
   ba006:	a338      	add	r3, pc, #224	; (adr r3, ba0e8 <__ieee754_pow+0x588>)
   ba008:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba00c:	f000 ff16 	bl	bae3c <__aeabi_dmul>
   ba010:	4602      	mov	r2, r0
   ba012:	460b      	mov	r3, r1
   ba014:	4620      	mov	r0, r4
   ba016:	4629      	mov	r1, r5
   ba018:	f000 fd5a 	bl	baad0 <__adddf3>
   ba01c:	ec53 2b1d 	vmov	r2, r3, d13
   ba020:	f000 fd56 	bl	baad0 <__adddf3>
   ba024:	4680      	mov	r8, r0
   ba026:	9805      	ldr	r0, [sp, #20]
   ba028:	4689      	mov	r9, r1
   ba02a:	f000 fe9d 	bl	bad68 <__aeabi_i2d>
   ba02e:	4642      	mov	r2, r8
   ba030:	4682      	mov	sl, r0
   ba032:	468b      	mov	fp, r1
   ba034:	464b      	mov	r3, r9
   ba036:	ec51 0b19 	vmov	r0, r1, d9
   ba03a:	f000 fd49 	bl	baad0 <__adddf3>
   ba03e:	ec53 2b1c 	vmov	r2, r3, d12
   ba042:	f000 fd45 	bl	baad0 <__adddf3>
   ba046:	4652      	mov	r2, sl
   ba048:	465b      	mov	r3, fp
   ba04a:	f000 fd41 	bl	baad0 <__adddf3>
   ba04e:	4652      	mov	r2, sl
   ba050:	465b      	mov	r3, fp
   ba052:	2000      	movs	r0, #0
   ba054:	4604      	mov	r4, r0
   ba056:	460d      	mov	r5, r1
   ba058:	f000 fd38 	bl	baacc <__aeabi_dsub>
   ba05c:	ec53 2b1c 	vmov	r2, r3, d12
   ba060:	f000 fd34 	bl	baacc <__aeabi_dsub>
   ba064:	ec53 2b19 	vmov	r2, r3, d9
   ba068:	f000 fd30 	bl	baacc <__aeabi_dsub>
   ba06c:	4602      	mov	r2, r0
   ba06e:	460b      	mov	r3, r1
   ba070:	4640      	mov	r0, r8
   ba072:	4649      	mov	r1, r9
   ba074:	f000 fd2a 	bl	baacc <__aeabi_dsub>
   ba078:	9b00      	ldr	r3, [sp, #0]
   ba07a:	9a04      	ldr	r2, [sp, #16]
   ba07c:	3b01      	subs	r3, #1
   ba07e:	4313      	orrs	r3, r2
   ba080:	4682      	mov	sl, r0
   ba082:	468b      	mov	fp, r1
   ba084:	f040 81b6 	bne.w	ba3f4 <__ieee754_pow+0x894>
   ba088:	ed9f 7b19 	vldr	d7, [pc, #100]	; ba0f0 <__ieee754_pow+0x590>
   ba08c:	eeb0 8a47 	vmov.f32	s16, s14
   ba090:	eef0 8a67 	vmov.f32	s17, s15
   ba094:	e03c      	b.n	ba110 <__ieee754_pow+0x5b0>
   ba096:	bf00      	nop
   ba098:	00000000 	.word	0x00000000
   ba09c:	3ff00000 	.word	0x3ff00000
	...
   ba0a8:	4a454eef 	.word	0x4a454eef
   ba0ac:	3fca7e28 	.word	0x3fca7e28
   ba0b0:	93c9db65 	.word	0x93c9db65
   ba0b4:	3fcd864a 	.word	0x3fcd864a
   ba0b8:	a91d4101 	.word	0xa91d4101
   ba0bc:	3fd17460 	.word	0x3fd17460
   ba0c0:	518f264d 	.word	0x518f264d
   ba0c4:	3fd55555 	.word	0x3fd55555
   ba0c8:	db6fabff 	.word	0xdb6fabff
   ba0cc:	3fdb6db6 	.word	0x3fdb6db6
   ba0d0:	33333303 	.word	0x33333303
   ba0d4:	3fe33333 	.word	0x3fe33333
   ba0d8:	e0000000 	.word	0xe0000000
   ba0dc:	3feec709 	.word	0x3feec709
   ba0e0:	dc3a03fd 	.word	0xdc3a03fd
   ba0e4:	3feec709 	.word	0x3feec709
   ba0e8:	145b01f5 	.word	0x145b01f5
   ba0ec:	be3e2fe0 	.word	0xbe3e2fe0
   ba0f0:	00000000 	.word	0x00000000
   ba0f4:	bff00000 	.word	0xbff00000
   ba0f8:	7ff00000 	.word	0x7ff00000
   ba0fc:	43400000 	.word	0x43400000
   ba100:	0003988e 	.word	0x0003988e
   ba104:	000bb679 	.word	0x000bb679
   ba108:	3ff00000 	.word	0x3ff00000
   ba10c:	40080000 	.word	0x40080000
   ba110:	2300      	movs	r3, #0
   ba112:	e9cd 6700 	strd	r6, r7, [sp]
   ba116:	9300      	str	r3, [sp, #0]
   ba118:	e9dd 8900 	ldrd	r8, r9, [sp]
   ba11c:	4630      	mov	r0, r6
   ba11e:	4642      	mov	r2, r8
   ba120:	464b      	mov	r3, r9
   ba122:	4639      	mov	r1, r7
   ba124:	f000 fcd2 	bl	baacc <__aeabi_dsub>
   ba128:	4622      	mov	r2, r4
   ba12a:	462b      	mov	r3, r5
   ba12c:	f000 fe86 	bl	bae3c <__aeabi_dmul>
   ba130:	4632      	mov	r2, r6
   ba132:	463b      	mov	r3, r7
   ba134:	4606      	mov	r6, r0
   ba136:	460f      	mov	r7, r1
   ba138:	4650      	mov	r0, sl
   ba13a:	4659      	mov	r1, fp
   ba13c:	f000 fe7e 	bl	bae3c <__aeabi_dmul>
   ba140:	4602      	mov	r2, r0
   ba142:	460b      	mov	r3, r1
   ba144:	4630      	mov	r0, r6
   ba146:	4639      	mov	r1, r7
   ba148:	f000 fcc2 	bl	baad0 <__adddf3>
   ba14c:	4642      	mov	r2, r8
   ba14e:	464b      	mov	r3, r9
   ba150:	4606      	mov	r6, r0
   ba152:	460f      	mov	r7, r1
   ba154:	4620      	mov	r0, r4
   ba156:	4629      	mov	r1, r5
   ba158:	f000 fe70 	bl	bae3c <__aeabi_dmul>
   ba15c:	4604      	mov	r4, r0
   ba15e:	460d      	mov	r5, r1
   ba160:	462b      	mov	r3, r5
   ba162:	4630      	mov	r0, r6
   ba164:	4639      	mov	r1, r7
   ba166:	4622      	mov	r2, r4
   ba168:	f000 fcb2 	bl	baad0 <__adddf3>
   ba16c:	4bc2      	ldr	r3, [pc, #776]	; (ba478 <__ieee754_pow+0x918>)
   ba16e:	4299      	cmp	r1, r3
   ba170:	4680      	mov	r8, r0
   ba172:	4689      	mov	r9, r1
   ba174:	468a      	mov	sl, r1
   ba176:	f340 8118 	ble.w	ba3aa <__ieee754_pow+0x84a>
   ba17a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   ba17e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   ba182:	4303      	orrs	r3, r0
   ba184:	f040 8207 	bne.w	ba596 <__ieee754_pow+0xa36>
   ba188:	a3a3      	add	r3, pc, #652	; (adr r3, ba418 <__ieee754_pow+0x8b8>)
   ba18a:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba18e:	4630      	mov	r0, r6
   ba190:	4639      	mov	r1, r7
   ba192:	f000 fc9d 	bl	baad0 <__adddf3>
   ba196:	4602      	mov	r2, r0
   ba198:	460b      	mov	r3, r1
   ba19a:	4640      	mov	r0, r8
   ba19c:	4649      	mov	r1, r9
   ba19e:	4690      	mov	r8, r2
   ba1a0:	4699      	mov	r9, r3
   ba1a2:	4622      	mov	r2, r4
   ba1a4:	462b      	mov	r3, r5
   ba1a6:	f000 fc91 	bl	baacc <__aeabi_dsub>
   ba1aa:	4602      	mov	r2, r0
   ba1ac:	460b      	mov	r3, r1
   ba1ae:	4640      	mov	r0, r8
   ba1b0:	4649      	mov	r1, r9
   ba1b2:	f001 f8d3 	bl	bb35c <__aeabi_dcmpgt>
   ba1b6:	2800      	cmp	r0, #0
   ba1b8:	f040 81ed 	bne.w	ba596 <__ieee754_pow+0xa36>
   ba1bc:	f3ca 530a 	ubfx	r3, sl, #20, #11
   ba1c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   ba1c4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   ba1c8:	fa42 f303 	asr.w	r3, r2, r3
   ba1cc:	4453      	add	r3, sl
   ba1ce:	49ab      	ldr	r1, [pc, #684]	; (ba47c <__ieee754_pow+0x91c>)
   ba1d0:	f3c3 520a 	ubfx	r2, r3, #20, #11
   ba1d4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   ba1d8:	fa41 fc02 	asr.w	ip, r1, r2
   ba1dc:	f3c3 0113 	ubfx	r1, r3, #0, #20
   ba1e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba1e4:	f1c2 0214 	rsb	r2, r2, #20
   ba1e8:	fa41 f202 	asr.w	r2, r1, r2
   ba1ec:	2000      	movs	r0, #0
   ba1ee:	ea23 010c 	bic.w	r1, r3, ip
   ba1f2:	f1ba 0f00 	cmp.w	sl, #0
   ba1f6:	9200      	str	r2, [sp, #0]
   ba1f8:	460b      	mov	r3, r1
   ba1fa:	4602      	mov	r2, r0
   ba1fc:	da02      	bge.n	ba204 <__ieee754_pow+0x6a4>
   ba1fe:	9900      	ldr	r1, [sp, #0]
   ba200:	4249      	negs	r1, r1
   ba202:	9100      	str	r1, [sp, #0]
   ba204:	4620      	mov	r0, r4
   ba206:	4629      	mov	r1, r5
   ba208:	f000 fc60 	bl	baacc <__aeabi_dsub>
   ba20c:	9b00      	ldr	r3, [sp, #0]
   ba20e:	051b      	lsls	r3, r3, #20
   ba210:	9302      	str	r3, [sp, #8]
   ba212:	4602      	mov	r2, r0
   ba214:	460b      	mov	r3, r1
   ba216:	4604      	mov	r4, r0
   ba218:	460d      	mov	r5, r1
   ba21a:	4630      	mov	r0, r6
   ba21c:	4639      	mov	r1, r7
   ba21e:	f000 fc57 	bl	baad0 <__adddf3>
   ba222:	4689      	mov	r9, r1
   ba224:	f04f 0800 	mov.w	r8, #0
   ba228:	a37d      	add	r3, pc, #500	; (adr r3, ba420 <__ieee754_pow+0x8c0>)
   ba22a:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba22e:	4640      	mov	r0, r8
   ba230:	4649      	mov	r1, r9
   ba232:	f000 fe03 	bl	bae3c <__aeabi_dmul>
   ba236:	4622      	mov	r2, r4
   ba238:	462b      	mov	r3, r5
   ba23a:	4682      	mov	sl, r0
   ba23c:	468b      	mov	fp, r1
   ba23e:	4640      	mov	r0, r8
   ba240:	4649      	mov	r1, r9
   ba242:	f000 fc43 	bl	baacc <__aeabi_dsub>
   ba246:	4602      	mov	r2, r0
   ba248:	460b      	mov	r3, r1
   ba24a:	4630      	mov	r0, r6
   ba24c:	4639      	mov	r1, r7
   ba24e:	f000 fc3d 	bl	baacc <__aeabi_dsub>
   ba252:	a375      	add	r3, pc, #468	; (adr r3, ba428 <__ieee754_pow+0x8c8>)
   ba254:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba258:	f000 fdf0 	bl	bae3c <__aeabi_dmul>
   ba25c:	a374      	add	r3, pc, #464	; (adr r3, ba430 <__ieee754_pow+0x8d0>)
   ba25e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba262:	4604      	mov	r4, r0
   ba264:	460d      	mov	r5, r1
   ba266:	4640      	mov	r0, r8
   ba268:	4649      	mov	r1, r9
   ba26a:	f000 fde7 	bl	bae3c <__aeabi_dmul>
   ba26e:	4602      	mov	r2, r0
   ba270:	460b      	mov	r3, r1
   ba272:	4620      	mov	r0, r4
   ba274:	4629      	mov	r1, r5
   ba276:	f000 fc2b 	bl	baad0 <__adddf3>
   ba27a:	4606      	mov	r6, r0
   ba27c:	460f      	mov	r7, r1
   ba27e:	4632      	mov	r2, r6
   ba280:	463b      	mov	r3, r7
   ba282:	4650      	mov	r0, sl
   ba284:	4659      	mov	r1, fp
   ba286:	f000 fc23 	bl	baad0 <__adddf3>
   ba28a:	4652      	mov	r2, sl
   ba28c:	465b      	mov	r3, fp
   ba28e:	4604      	mov	r4, r0
   ba290:	460d      	mov	r5, r1
   ba292:	f000 fc1b 	bl	baacc <__aeabi_dsub>
   ba296:	4602      	mov	r2, r0
   ba298:	460b      	mov	r3, r1
   ba29a:	4630      	mov	r0, r6
   ba29c:	4639      	mov	r1, r7
   ba29e:	f000 fc15 	bl	baacc <__aeabi_dsub>
   ba2a2:	4622      	mov	r2, r4
   ba2a4:	4680      	mov	r8, r0
   ba2a6:	4689      	mov	r9, r1
   ba2a8:	462b      	mov	r3, r5
   ba2aa:	4620      	mov	r0, r4
   ba2ac:	4629      	mov	r1, r5
   ba2ae:	f000 fdc5 	bl	bae3c <__aeabi_dmul>
   ba2b2:	a361      	add	r3, pc, #388	; (adr r3, ba438 <__ieee754_pow+0x8d8>)
   ba2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba2b8:	4606      	mov	r6, r0
   ba2ba:	460f      	mov	r7, r1
   ba2bc:	f000 fdbe 	bl	bae3c <__aeabi_dmul>
   ba2c0:	a35f      	add	r3, pc, #380	; (adr r3, ba440 <__ieee754_pow+0x8e0>)
   ba2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba2c6:	f000 fc01 	bl	baacc <__aeabi_dsub>
   ba2ca:	4632      	mov	r2, r6
   ba2cc:	463b      	mov	r3, r7
   ba2ce:	f000 fdb5 	bl	bae3c <__aeabi_dmul>
   ba2d2:	a35d      	add	r3, pc, #372	; (adr r3, ba448 <__ieee754_pow+0x8e8>)
   ba2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba2d8:	f000 fbfa 	bl	baad0 <__adddf3>
   ba2dc:	4632      	mov	r2, r6
   ba2de:	463b      	mov	r3, r7
   ba2e0:	f000 fdac 	bl	bae3c <__aeabi_dmul>
   ba2e4:	a35a      	add	r3, pc, #360	; (adr r3, ba450 <__ieee754_pow+0x8f0>)
   ba2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba2ea:	f000 fbef 	bl	baacc <__aeabi_dsub>
   ba2ee:	4632      	mov	r2, r6
   ba2f0:	463b      	mov	r3, r7
   ba2f2:	f000 fda3 	bl	bae3c <__aeabi_dmul>
   ba2f6:	a358      	add	r3, pc, #352	; (adr r3, ba458 <__ieee754_pow+0x8f8>)
   ba2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba2fc:	f000 fbe8 	bl	baad0 <__adddf3>
   ba300:	4632      	mov	r2, r6
   ba302:	463b      	mov	r3, r7
   ba304:	f000 fd9a 	bl	bae3c <__aeabi_dmul>
   ba308:	4602      	mov	r2, r0
   ba30a:	460b      	mov	r3, r1
   ba30c:	4620      	mov	r0, r4
   ba30e:	4629      	mov	r1, r5
   ba310:	f000 fbdc 	bl	baacc <__aeabi_dsub>
   ba314:	4606      	mov	r6, r0
   ba316:	460f      	mov	r7, r1
   ba318:	4632      	mov	r2, r6
   ba31a:	463b      	mov	r3, r7
   ba31c:	4620      	mov	r0, r4
   ba31e:	4629      	mov	r1, r5
   ba320:	f000 fd8c 	bl	bae3c <__aeabi_dmul>
   ba324:	4602      	mov	r2, r0
   ba326:	460b      	mov	r3, r1
   ba328:	4630      	mov	r0, r6
   ba32a:	4639      	mov	r1, r7
   ba32c:	4616      	mov	r6, r2
   ba32e:	461f      	mov	r7, r3
   ba330:	2200      	movs	r2, #0
   ba332:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   ba336:	f000 fbc9 	bl	baacc <__aeabi_dsub>
   ba33a:	4602      	mov	r2, r0
   ba33c:	460b      	mov	r3, r1
   ba33e:	4630      	mov	r0, r6
   ba340:	4639      	mov	r1, r7
   ba342:	f000 fea5 	bl	bb090 <__aeabi_ddiv>
   ba346:	4642      	mov	r2, r8
   ba348:	4606      	mov	r6, r0
   ba34a:	460f      	mov	r7, r1
   ba34c:	464b      	mov	r3, r9
   ba34e:	4620      	mov	r0, r4
   ba350:	4629      	mov	r1, r5
   ba352:	f000 fd73 	bl	bae3c <__aeabi_dmul>
   ba356:	4642      	mov	r2, r8
   ba358:	464b      	mov	r3, r9
   ba35a:	f000 fbb9 	bl	baad0 <__adddf3>
   ba35e:	4602      	mov	r2, r0
   ba360:	460b      	mov	r3, r1
   ba362:	4630      	mov	r0, r6
   ba364:	4639      	mov	r1, r7
   ba366:	f000 fbb1 	bl	baacc <__aeabi_dsub>
   ba36a:	4622      	mov	r2, r4
   ba36c:	462b      	mov	r3, r5
   ba36e:	f000 fbad 	bl	baacc <__aeabi_dsub>
   ba372:	4602      	mov	r2, r0
   ba374:	460b      	mov	r3, r1
   ba376:	2000      	movs	r0, #0
   ba378:	4941      	ldr	r1, [pc, #260]	; (ba480 <__ieee754_pow+0x920>)
   ba37a:	f000 fba7 	bl	baacc <__aeabi_dsub>
   ba37e:	9a02      	ldr	r2, [sp, #8]
   ba380:	460b      	mov	r3, r1
   ba382:	4413      	add	r3, r2
   ba384:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   ba388:	f2c0 8143 	blt.w	ba612 <__ieee754_pow+0xab2>
   ba38c:	4619      	mov	r1, r3
   ba38e:	ec53 2b18 	vmov	r2, r3, d8
   ba392:	f000 fd53 	bl	bae3c <__aeabi_dmul>
   ba396:	ec41 0b10 	vmov	d0, r0, r1
   ba39a:	e42d      	b.n	b9bf8 <__ieee754_pow+0x98>
   ba39c:	f1bb 0f00 	cmp.w	fp, #0
   ba3a0:	f6ff aca0 	blt.w	b9ce4 <__ieee754_pow+0x184>
   ba3a4:	ed9f 0b2e 	vldr	d0, [pc, #184]	; ba460 <__ieee754_pow+0x900>
   ba3a8:	e426      	b.n	b9bf8 <__ieee754_pow+0x98>
   ba3aa:	f8df c0dc 	ldr.w	ip, [pc, #220]	; ba488 <__ieee754_pow+0x928>
   ba3ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   ba3b2:	4563      	cmp	r3, ip
   ba3b4:	f340 80e7 	ble.w	ba586 <__ieee754_pow+0xa26>
   ba3b8:	4b32      	ldr	r3, [pc, #200]	; (ba484 <__ieee754_pow+0x924>)
   ba3ba:	440b      	add	r3, r1
   ba3bc:	4303      	orrs	r3, r0
   ba3be:	d10a      	bne.n	ba3d6 <__ieee754_pow+0x876>
   ba3c0:	4622      	mov	r2, r4
   ba3c2:	462b      	mov	r3, r5
   ba3c4:	f000 fb82 	bl	baacc <__aeabi_dsub>
   ba3c8:	4632      	mov	r2, r6
   ba3ca:	463b      	mov	r3, r7
   ba3cc:	f000 ffbc 	bl	bb348 <__aeabi_dcmpge>
   ba3d0:	2800      	cmp	r0, #0
   ba3d2:	f43f aef3 	beq.w	ba1bc <__ieee754_pow+0x65c>
   ba3d6:	a324      	add	r3, pc, #144	; (adr r3, ba468 <__ieee754_pow+0x908>)
   ba3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba3dc:	ec51 0b18 	vmov	r0, r1, d8
   ba3e0:	f000 fd2c 	bl	bae3c <__aeabi_dmul>
   ba3e4:	a320      	add	r3, pc, #128	; (adr r3, ba468 <__ieee754_pow+0x908>)
   ba3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba3ea:	f000 fd27 	bl	bae3c <__aeabi_dmul>
   ba3ee:	ec41 0b10 	vmov	d0, r0, r1
   ba3f2:	e401      	b.n	b9bf8 <__ieee754_pow+0x98>
   ba3f4:	ed9f 7b1e 	vldr	d7, [pc, #120]	; ba470 <__ieee754_pow+0x910>
   ba3f8:	eeb0 8a47 	vmov.f32	s16, s14
   ba3fc:	eef0 8a67 	vmov.f32	s17, s15
   ba400:	e686      	b.n	ba110 <__ieee754_pow+0x5b0>
   ba402:	f1bb 0f00 	cmp.w	fp, #0
   ba406:	dacd      	bge.n	ba3a4 <__ieee754_pow+0x844>
   ba408:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   ba40c:	ee00 6a10 	vmov	s0, r6
   ba410:	ee00 3a90 	vmov	s1, r3
   ba414:	f7ff bbf0 	b.w	b9bf8 <__ieee754_pow+0x98>
   ba418:	652b82fe 	.word	0x652b82fe
   ba41c:	3c971547 	.word	0x3c971547
   ba420:	00000000 	.word	0x00000000
   ba424:	3fe62e43 	.word	0x3fe62e43
   ba428:	fefa39ef 	.word	0xfefa39ef
   ba42c:	3fe62e42 	.word	0x3fe62e42
   ba430:	0ca86c39 	.word	0x0ca86c39
   ba434:	be205c61 	.word	0xbe205c61
   ba438:	72bea4d0 	.word	0x72bea4d0
   ba43c:	3e663769 	.word	0x3e663769
   ba440:	c5d26bf1 	.word	0xc5d26bf1
   ba444:	3ebbbd41 	.word	0x3ebbbd41
   ba448:	af25de2c 	.word	0xaf25de2c
   ba44c:	3f11566a 	.word	0x3f11566a
   ba450:	16bebd93 	.word	0x16bebd93
   ba454:	3f66c16c 	.word	0x3f66c16c
   ba458:	5555553e 	.word	0x5555553e
   ba45c:	3fc55555 	.word	0x3fc55555
	...
   ba468:	c2f8f359 	.word	0xc2f8f359
   ba46c:	01a56e1f 	.word	0x01a56e1f
   ba470:	00000000 	.word	0x00000000
   ba474:	3ff00000 	.word	0x3ff00000
   ba478:	408fffff 	.word	0x408fffff
   ba47c:	000fffff 	.word	0x000fffff
   ba480:	3ff00000 	.word	0x3ff00000
   ba484:	3f6f3400 	.word	0x3f6f3400
   ba488:	4090cbff 	.word	0x4090cbff
   ba48c:	4598      	cmp	r8, r3
   ba48e:	db85      	blt.n	ba39c <__ieee754_pow+0x83c>
   ba490:	4b7d      	ldr	r3, [pc, #500]	; (ba688 <__ieee754_pow+0xb28>)
   ba492:	4598      	cmp	r8, r3
   ba494:	f73f ac22 	bgt.w	b9cdc <__ieee754_pow+0x17c>
   ba498:	ec51 0b10 	vmov	r0, r1, d0
   ba49c:	4b7a      	ldr	r3, [pc, #488]	; (ba688 <__ieee754_pow+0xb28>)
   ba49e:	2200      	movs	r2, #0
   ba4a0:	f000 fb14 	bl	baacc <__aeabi_dsub>
   ba4a4:	a368      	add	r3, pc, #416	; (adr r3, ba648 <__ieee754_pow+0xae8>)
   ba4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba4aa:	4604      	mov	r4, r0
   ba4ac:	460d      	mov	r5, r1
   ba4ae:	f000 fcc5 	bl	bae3c <__aeabi_dmul>
   ba4b2:	a367      	add	r3, pc, #412	; (adr r3, ba650 <__ieee754_pow+0xaf0>)
   ba4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba4b8:	4682      	mov	sl, r0
   ba4ba:	468b      	mov	fp, r1
   ba4bc:	4620      	mov	r0, r4
   ba4be:	4629      	mov	r1, r5
   ba4c0:	f000 fcbc 	bl	bae3c <__aeabi_dmul>
   ba4c4:	4b71      	ldr	r3, [pc, #452]	; (ba68c <__ieee754_pow+0xb2c>)
   ba4c6:	ec41 0b18 	vmov	d8, r0, r1
   ba4ca:	2200      	movs	r2, #0
   ba4cc:	4620      	mov	r0, r4
   ba4ce:	4629      	mov	r1, r5
   ba4d0:	f000 fcb4 	bl	bae3c <__aeabi_dmul>
   ba4d4:	4602      	mov	r2, r0
   ba4d6:	460b      	mov	r3, r1
   ba4d8:	a15f      	add	r1, pc, #380	; (adr r1, ba658 <__ieee754_pow+0xaf8>)
   ba4da:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba4de:	f000 faf5 	bl	baacc <__aeabi_dsub>
   ba4e2:	4622      	mov	r2, r4
   ba4e4:	462b      	mov	r3, r5
   ba4e6:	f000 fca9 	bl	bae3c <__aeabi_dmul>
   ba4ea:	4602      	mov	r2, r0
   ba4ec:	460b      	mov	r3, r1
   ba4ee:	2000      	movs	r0, #0
   ba4f0:	4967      	ldr	r1, [pc, #412]	; (ba690 <__ieee754_pow+0xb30>)
   ba4f2:	f000 faeb 	bl	baacc <__aeabi_dsub>
   ba4f6:	4622      	mov	r2, r4
   ba4f8:	4680      	mov	r8, r0
   ba4fa:	4689      	mov	r9, r1
   ba4fc:	462b      	mov	r3, r5
   ba4fe:	4620      	mov	r0, r4
   ba500:	4629      	mov	r1, r5
   ba502:	f000 fc9b 	bl	bae3c <__aeabi_dmul>
   ba506:	4602      	mov	r2, r0
   ba508:	460b      	mov	r3, r1
   ba50a:	4640      	mov	r0, r8
   ba50c:	4649      	mov	r1, r9
   ba50e:	f000 fc95 	bl	bae3c <__aeabi_dmul>
   ba512:	a353      	add	r3, pc, #332	; (adr r3, ba660 <__ieee754_pow+0xb00>)
   ba514:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba518:	f000 fc90 	bl	bae3c <__aeabi_dmul>
   ba51c:	4602      	mov	r2, r0
   ba51e:	460b      	mov	r3, r1
   ba520:	ec51 0b18 	vmov	r0, r1, d8
   ba524:	f000 fad2 	bl	baacc <__aeabi_dsub>
   ba528:	4680      	mov	r8, r0
   ba52a:	4689      	mov	r9, r1
   ba52c:	4642      	mov	r2, r8
   ba52e:	464b      	mov	r3, r9
   ba530:	4650      	mov	r0, sl
   ba532:	4659      	mov	r1, fp
   ba534:	f000 facc 	bl	baad0 <__adddf3>
   ba538:	2000      	movs	r0, #0
   ba53a:	4652      	mov	r2, sl
   ba53c:	465b      	mov	r3, fp
   ba53e:	4604      	mov	r4, r0
   ba540:	460d      	mov	r5, r1
   ba542:	e591      	b.n	ba068 <__ieee754_pow+0x508>
   ba544:	4622      	mov	r2, r4
   ba546:	462b      	mov	r3, r5
   ba548:	4620      	mov	r0, r4
   ba54a:	4629      	mov	r1, r5
   ba54c:	f000 fc76 	bl	bae3c <__aeabi_dmul>
   ba550:	ec41 0b10 	vmov	d0, r0, r1
   ba554:	f7ff bb50 	b.w	b9bf8 <__ieee754_pow+0x98>
   ba558:	494b      	ldr	r1, [pc, #300]	; (ba688 <__ieee754_pow+0xb28>)
   ba55a:	2000      	movs	r0, #0
   ba55c:	4622      	mov	r2, r4
   ba55e:	462b      	mov	r3, r5
   ba560:	f000 fd96 	bl	bb090 <__aeabi_ddiv>
   ba564:	ec41 0b10 	vmov	d0, r0, r1
   ba568:	f7ff bb46 	b.w	b9bf8 <__ieee754_pow+0x98>
   ba56c:	2b00      	cmp	r3, #0
   ba56e:	d144      	bne.n	ba5fa <__ieee754_pow+0xa9a>
   ba570:	f1c1 0114 	rsb	r1, r1, #20
   ba574:	fa4a f001 	asr.w	r0, sl, r1
   ba578:	fa00 f101 	lsl.w	r1, r0, r1
   ba57c:	4551      	cmp	r1, sl
   ba57e:	d05a      	beq.n	ba636 <__ieee754_pow+0xad6>
   ba580:	9300      	str	r3, [sp, #0]
   ba582:	f7ff bb17 	b.w	b9bb4 <__ieee754_pow+0x54>
   ba586:	4a42      	ldr	r2, [pc, #264]	; (ba690 <__ieee754_pow+0xb30>)
   ba588:	4293      	cmp	r3, r2
   ba58a:	dc5b      	bgt.n	ba644 <__ieee754_pow+0xae4>
   ba58c:	e9dd 1200 	ldrd	r1, r2, [sp]
   ba590:	9102      	str	r1, [sp, #8]
   ba592:	9100      	str	r1, [sp, #0]
   ba594:	e646      	b.n	ba224 <__ieee754_pow+0x6c4>
   ba596:	a334      	add	r3, pc, #208	; (adr r3, ba668 <__ieee754_pow+0xb08>)
   ba598:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba59c:	ec51 0b18 	vmov	r0, r1, d8
   ba5a0:	f000 fc4c 	bl	bae3c <__aeabi_dmul>
   ba5a4:	a330      	add	r3, pc, #192	; (adr r3, ba668 <__ieee754_pow+0xb08>)
   ba5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba5aa:	f000 fc47 	bl	bae3c <__aeabi_dmul>
   ba5ae:	ec41 0b10 	vmov	d0, r0, r1
   ba5b2:	f7ff bb21 	b.w	b9bf8 <__ieee754_pow+0x98>
   ba5b6:	9b00      	ldr	r3, [sp, #0]
   ba5b8:	2b01      	cmp	r3, #1
   ba5ba:	f47f ab1d 	bne.w	b9bf8 <__ieee754_pow+0x98>
   ba5be:	ee10 1a90 	vmov	r1, s1
   ba5c2:	ee10 2a10 	vmov	r2, s0
   ba5c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ba5ca:	ec43 2b10 	vmov	d0, r2, r3
   ba5ce:	f7ff bb13 	b.w	b9bf8 <__ieee754_pow+0x98>
   ba5d2:	ed9f 7b27 	vldr	d7, [pc, #156]	; ba670 <__ieee754_pow+0xb10>
   ba5d6:	eeb0 ca47 	vmov.f32	s24, s14
   ba5da:	eef0 ca67 	vmov.f32	s25, s15
   ba5de:	ed9f 7b26 	vldr	d7, [pc, #152]	; ba678 <__ieee754_pow+0xb18>
   ba5e2:	eeb0 da47 	vmov.f32	s26, s14
   ba5e6:	eef0 da67 	vmov.f32	s27, s15
   ba5ea:	ed9f 7b25 	vldr	d7, [pc, #148]	; ba680 <__ieee754_pow+0xb20>
   ba5ee:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   ba5f2:	ec53 2b17 	vmov	r2, r3, d7
   ba5f6:	f7ff bbeb 	b.w	b9dd0 <__ieee754_pow+0x270>
   ba5fa:	ec45 4b10 	vmov	d0, r4, r5
   ba5fe:	9200      	str	r2, [sp, #0]
   ba600:	f000 f914 	bl	ba82c <fabs>
   ba604:	9a00      	ldr	r2, [sp, #0]
   ba606:	2a00      	cmp	r2, #0
   ba608:	f47f ab92 	bne.w	b9d30 <__ieee754_pow+0x1d0>
   ba60c:	9200      	str	r2, [sp, #0]
   ba60e:	f7ff bb26 	b.w	b9c5e <__ieee754_pow+0xfe>
   ba612:	ec41 0b10 	vmov	d0, r0, r1
   ba616:	9800      	ldr	r0, [sp, #0]
   ba618:	f000 f9c2 	bl	ba9a0 <scalbn>
   ba61c:	ec51 0b10 	vmov	r0, r1, d0
   ba620:	e6b5      	b.n	ba38e <__ieee754_pow+0x82e>
   ba622:	f000 0001 	and.w	r0, r0, #1
   ba626:	f1c0 0102 	rsb	r1, r0, #2
   ba62a:	9100      	str	r1, [sp, #0]
   ba62c:	2b00      	cmp	r3, #0
   ba62e:	f43f aac1 	beq.w	b9bb4 <__ieee754_pow+0x54>
   ba632:	f7ff bb0d 	b.w	b9c50 <__ieee754_pow+0xf0>
   ba636:	f000 0001 	and.w	r0, r0, #1
   ba63a:	f1c0 0302 	rsb	r3, r0, #2
   ba63e:	9300      	str	r3, [sp, #0]
   ba640:	f7ff bab8 	b.w	b9bb4 <__ieee754_pow+0x54>
   ba644:	151b      	asrs	r3, r3, #20
   ba646:	e5bb      	b.n	ba1c0 <__ieee754_pow+0x660>
   ba648:	60000000 	.word	0x60000000
   ba64c:	3ff71547 	.word	0x3ff71547
   ba650:	f85ddf44 	.word	0xf85ddf44
   ba654:	3e54ae0b 	.word	0x3e54ae0b
   ba658:	55555555 	.word	0x55555555
   ba65c:	3fd55555 	.word	0x3fd55555
   ba660:	652b82fe 	.word	0x652b82fe
   ba664:	3ff71547 	.word	0x3ff71547
   ba668:	8800759c 	.word	0x8800759c
   ba66c:	7e37e43c 	.word	0x7e37e43c
   ba670:	40000000 	.word	0x40000000
   ba674:	3fe2b803 	.word	0x3fe2b803
   ba678:	43cfd006 	.word	0x43cfd006
   ba67c:	3e4cfdeb 	.word	0x3e4cfdeb
   ba680:	00000000 	.word	0x00000000
   ba684:	3ff80000 	.word	0x3ff80000
   ba688:	3ff00000 	.word	0x3ff00000
   ba68c:	3fd00000 	.word	0x3fd00000
   ba690:	3fe00000 	.word	0x3fe00000

000ba694 <__ieee754_sqrt>:
   ba694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba698:	4a63      	ldr	r2, [pc, #396]	; (ba828 <__ieee754_sqrt+0x194>)
   ba69a:	ec55 4b10 	vmov	r4, r5, d0
   ba69e:	43aa      	bics	r2, r5
   ba6a0:	f000 809f 	beq.w	ba7e2 <__ieee754_sqrt+0x14e>
   ba6a4:	2d00      	cmp	r5, #0
   ba6a6:	ee10 ca10 	vmov	ip, s0
   ba6aa:	462b      	mov	r3, r5
   ba6ac:	dd54      	ble.n	ba758 <__ieee754_sqrt+0xc4>
   ba6ae:	1529      	asrs	r1, r5, #20
   ba6b0:	d063      	beq.n	ba77a <__ieee754_sqrt+0xe6>
   ba6b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   ba6b6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   ba6ba:	07c9      	lsls	r1, r1, #31
   ba6bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba6c0:	d404      	bmi.n	ba6cc <__ieee754_sqrt+0x38>
   ba6c2:	005b      	lsls	r3, r3, #1
   ba6c4:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   ba6c8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba6cc:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   ba6d0:	2600      	movs	r6, #0
   ba6d2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   ba6d6:	107f      	asrs	r7, r7, #1
   ba6d8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba6dc:	f04f 0e16 	mov.w	lr, #22
   ba6e0:	4634      	mov	r4, r6
   ba6e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   ba6e6:	18a1      	adds	r1, r4, r2
   ba6e8:	4299      	cmp	r1, r3
   ba6ea:	dc02      	bgt.n	ba6f2 <__ieee754_sqrt+0x5e>
   ba6ec:	1a5b      	subs	r3, r3, r1
   ba6ee:	188c      	adds	r4, r1, r2
   ba6f0:	4416      	add	r6, r2
   ba6f2:	005b      	lsls	r3, r3, #1
   ba6f4:	f1be 0e01 	subs.w	lr, lr, #1
   ba6f8:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   ba6fc:	ea4f 0252 	mov.w	r2, r2, lsr #1
   ba700:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba704:	d1ef      	bne.n	ba6e6 <__ieee754_sqrt+0x52>
   ba706:	4675      	mov	r5, lr
   ba708:	2020      	movs	r0, #32
   ba70a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   ba70e:	e00a      	b.n	ba726 <__ieee754_sqrt+0x92>
   ba710:	d044      	beq.n	ba79c <__ieee754_sqrt+0x108>
   ba712:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   ba716:	3801      	subs	r0, #1
   ba718:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   ba71c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba720:	ea4f 0252 	mov.w	r2, r2, lsr #1
   ba724:	d043      	beq.n	ba7ae <__ieee754_sqrt+0x11a>
   ba726:	42a3      	cmp	r3, r4
   ba728:	eb02 010e 	add.w	r1, r2, lr
   ba72c:	ddf0      	ble.n	ba710 <__ieee754_sqrt+0x7c>
   ba72e:	2900      	cmp	r1, #0
   ba730:	eb01 0e02 	add.w	lr, r1, r2
   ba734:	db0a      	blt.n	ba74c <__ieee754_sqrt+0xb8>
   ba736:	46a0      	mov	r8, r4
   ba738:	1b1b      	subs	r3, r3, r4
   ba73a:	4561      	cmp	r1, ip
   ba73c:	bf88      	it	hi
   ba73e:	f103 33ff 	addhi.w	r3, r3, #4294967295
   ba742:	ebac 0c01 	sub.w	ip, ip, r1
   ba746:	4415      	add	r5, r2
   ba748:	4644      	mov	r4, r8
   ba74a:	e7e2      	b.n	ba712 <__ieee754_sqrt+0x7e>
   ba74c:	f1be 0f00 	cmp.w	lr, #0
   ba750:	dbf1      	blt.n	ba736 <__ieee754_sqrt+0xa2>
   ba752:	f104 0801 	add.w	r8, r4, #1
   ba756:	e7ef      	b.n	ba738 <__ieee754_sqrt+0xa4>
   ba758:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   ba75c:	4322      	orrs	r2, r4
   ba75e:	d038      	beq.n	ba7d2 <__ieee754_sqrt+0x13e>
   ba760:	2d00      	cmp	r5, #0
   ba762:	d14e      	bne.n	ba802 <__ieee754_sqrt+0x16e>
   ba764:	4629      	mov	r1, r5
   ba766:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   ba76a:	3915      	subs	r1, #21
   ba76c:	4613      	mov	r3, r2
   ba76e:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   ba772:	2a00      	cmp	r2, #0
   ba774:	d0f7      	beq.n	ba766 <__ieee754_sqrt+0xd2>
   ba776:	02d6      	lsls	r6, r2, #11
   ba778:	d450      	bmi.n	ba81c <__ieee754_sqrt+0x188>
   ba77a:	2000      	movs	r0, #0
   ba77c:	005b      	lsls	r3, r3, #1
   ba77e:	02dd      	lsls	r5, r3, #11
   ba780:	4604      	mov	r4, r0
   ba782:	f100 0001 	add.w	r0, r0, #1
   ba786:	d5f9      	bpl.n	ba77c <__ieee754_sqrt+0xe8>
   ba788:	461a      	mov	r2, r3
   ba78a:	4663      	mov	r3, ip
   ba78c:	fa0c fc00 	lsl.w	ip, ip, r0
   ba790:	f1c0 0020 	rsb	r0, r0, #32
   ba794:	40c3      	lsrs	r3, r0
   ba796:	1b09      	subs	r1, r1, r4
   ba798:	4313      	orrs	r3, r2
   ba79a:	e78a      	b.n	ba6b2 <__ieee754_sqrt+0x1e>
   ba79c:	4561      	cmp	r1, ip
   ba79e:	d8b8      	bhi.n	ba712 <__ieee754_sqrt+0x7e>
   ba7a0:	2900      	cmp	r1, #0
   ba7a2:	eb01 0e02 	add.w	lr, r1, r2
   ba7a6:	dbd1      	blt.n	ba74c <__ieee754_sqrt+0xb8>
   ba7a8:	4698      	mov	r8, r3
   ba7aa:	2300      	movs	r3, #0
   ba7ac:	e7c9      	b.n	ba742 <__ieee754_sqrt+0xae>
   ba7ae:	ea53 030c 	orrs.w	r3, r3, ip
   ba7b2:	d110      	bne.n	ba7d6 <__ieee754_sqrt+0x142>
   ba7b4:	0868      	lsrs	r0, r5, #1
   ba7b6:	1071      	asrs	r1, r6, #1
   ba7b8:	07f3      	lsls	r3, r6, #31
   ba7ba:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   ba7be:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   ba7c2:	bf48      	it	mi
   ba7c4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   ba7c8:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   ba7cc:	4602      	mov	r2, r0
   ba7ce:	ec43 2b10 	vmov	d0, r2, r3
   ba7d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba7d6:	1c6a      	adds	r2, r5, #1
   ba7d8:	bf16      	itet	ne
   ba7da:	1c68      	addne	r0, r5, #1
   ba7dc:	3601      	addeq	r6, #1
   ba7de:	0840      	lsrne	r0, r0, #1
   ba7e0:	e7e9      	b.n	ba7b6 <__ieee754_sqrt+0x122>
   ba7e2:	ee10 2a10 	vmov	r2, s0
   ba7e6:	ee10 0a10 	vmov	r0, s0
   ba7ea:	462b      	mov	r3, r5
   ba7ec:	4629      	mov	r1, r5
   ba7ee:	f000 fb25 	bl	bae3c <__aeabi_dmul>
   ba7f2:	4622      	mov	r2, r4
   ba7f4:	462b      	mov	r3, r5
   ba7f6:	f000 f96b 	bl	baad0 <__adddf3>
   ba7fa:	ec41 0b10 	vmov	d0, r0, r1
   ba7fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba802:	ee10 2a10 	vmov	r2, s0
   ba806:	4620      	mov	r0, r4
   ba808:	4629      	mov	r1, r5
   ba80a:	f000 f95f 	bl	baacc <__aeabi_dsub>
   ba80e:	4602      	mov	r2, r0
   ba810:	460b      	mov	r3, r1
   ba812:	f000 fc3d 	bl	bb090 <__aeabi_ddiv>
   ba816:	ec41 0b10 	vmov	d0, r0, r1
   ba81a:	e7da      	b.n	ba7d2 <__ieee754_sqrt+0x13e>
   ba81c:	4663      	mov	r3, ip
   ba81e:	2020      	movs	r0, #32
   ba820:	f04f 34ff 	mov.w	r4, #4294967295
   ba824:	e7b6      	b.n	ba794 <__ieee754_sqrt+0x100>
   ba826:	bf00      	nop
   ba828:	7ff00000 	.word	0x7ff00000

000ba82c <fabs>:
   ba82c:	ec51 0b10 	vmov	r0, r1, d0
   ba830:	ee10 2a10 	vmov	r2, s0
   ba834:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   ba838:	ec43 2b10 	vmov	d0, r2, r3
   ba83c:	4770      	bx	lr
   ba83e:	bf00      	nop

000ba840 <finite>:
   ba840:	b082      	sub	sp, #8
   ba842:	ed8d 0b00 	vstr	d0, [sp]
   ba846:	9801      	ldr	r0, [sp, #4]
   ba848:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   ba84c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   ba850:	0fc0      	lsrs	r0, r0, #31
   ba852:	b002      	add	sp, #8
   ba854:	4770      	bx	lr
   ba856:	bf00      	nop

000ba858 <nan>:
   ba858:	ed9f 0b01 	vldr	d0, [pc, #4]	; ba860 <nan+0x8>
   ba85c:	4770      	bx	lr
   ba85e:	bf00      	nop
   ba860:	00000000 	.word	0x00000000
   ba864:	7ff80000 	.word	0x7ff80000

000ba868 <rint>:
   ba868:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba86a:	ec53 2b10 	vmov	r2, r3, d0
   ba86e:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   ba872:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   ba876:	2913      	cmp	r1, #19
   ba878:	ee10 0a10 	vmov	r0, s0
   ba87c:	b083      	sub	sp, #12
   ba87e:	461c      	mov	r4, r3
   ba880:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   ba884:	dc3a      	bgt.n	ba8fc <rint+0x94>
   ba886:	2900      	cmp	r1, #0
   ba888:	db30      	blt.n	ba8ec <rint+0x84>
   ba88a:	4d42      	ldr	r5, [pc, #264]	; (ba994 <rint+0x12c>)
   ba88c:	fa45 fc01 	asr.w	ip, r5, r1
   ba890:	ea03 050c 	and.w	r5, r3, ip
   ba894:	4315      	orrs	r5, r2
   ba896:	d02d      	beq.n	ba8f4 <rint+0x8c>
   ba898:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   ba89c:	4318      	orrs	r0, r3
   ba89e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   ba8a2:	d00c      	beq.n	ba8be <rint+0x56>
   ba8a4:	ea24 0c0c 	bic.w	ip, r4, ip
   ba8a8:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   ba8ac:	2913      	cmp	r1, #19
   ba8ae:	fa44 f101 	asr.w	r1, r4, r1
   ba8b2:	bf0c      	ite	eq
   ba8b4:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   ba8b8:	2000      	movne	r0, #0
   ba8ba:	ea4c 0401 	orr.w	r4, ip, r1
   ba8be:	4936      	ldr	r1, [pc, #216]	; (ba998 <rint+0x130>)
   ba8c0:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   ba8c4:	4623      	mov	r3, r4
   ba8c6:	e9de 4500 	ldrd	r4, r5, [lr]
   ba8ca:	4602      	mov	r2, r0
   ba8cc:	4629      	mov	r1, r5
   ba8ce:	4620      	mov	r0, r4
   ba8d0:	f000 f8fe 	bl	baad0 <__adddf3>
   ba8d4:	e9cd 0100 	strd	r0, r1, [sp]
   ba8d8:	e9dd 0100 	ldrd	r0, r1, [sp]
   ba8dc:	4622      	mov	r2, r4
   ba8de:	462b      	mov	r3, r5
   ba8e0:	f000 f8f4 	bl	baacc <__aeabi_dsub>
   ba8e4:	ec41 0b10 	vmov	d0, r0, r1
   ba8e8:	b003      	add	sp, #12
   ba8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba8ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   ba8f0:	4311      	orrs	r1, r2
   ba8f2:	d124      	bne.n	ba93e <rint+0xd6>
   ba8f4:	ec43 2b10 	vmov	d0, r2, r3
   ba8f8:	b003      	add	sp, #12
   ba8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba8fc:	2933      	cmp	r1, #51	; 0x33
   ba8fe:	dd08      	ble.n	ba912 <rint+0xaa>
   ba900:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   ba904:	d1f6      	bne.n	ba8f4 <rint+0x8c>
   ba906:	4619      	mov	r1, r3
   ba908:	f000 f8e2 	bl	baad0 <__adddf3>
   ba90c:	ec41 0b10 	vmov	d0, r0, r1
   ba910:	e7f2      	b.n	ba8f8 <rint+0x90>
   ba912:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   ba916:	f04f 31ff 	mov.w	r1, #4294967295
   ba91a:	fa21 f10c 	lsr.w	r1, r1, ip
   ba91e:	420a      	tst	r2, r1
   ba920:	d0e8      	beq.n	ba8f4 <rint+0x8c>
   ba922:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   ba926:	ea4f 0351 	mov.w	r3, r1, lsr #1
   ba92a:	d0c8      	beq.n	ba8be <rint+0x56>
   ba92c:	ea20 0303 	bic.w	r3, r0, r3
   ba930:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   ba934:	fa40 fc0c 	asr.w	ip, r0, ip
   ba938:	ea43 000c 	orr.w	r0, r3, ip
   ba93c:	e7bf      	b.n	ba8be <rint+0x56>
   ba93e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   ba942:	4318      	orrs	r0, r3
   ba944:	4a14      	ldr	r2, [pc, #80]	; (ba998 <rint+0x130>)
   ba946:	4243      	negs	r3, r0
   ba948:	4303      	orrs	r3, r0
   ba94a:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   ba94e:	0b1b      	lsrs	r3, r3, #12
   ba950:	0c62      	lsrs	r2, r4, #17
   ba952:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   ba956:	0452      	lsls	r2, r2, #17
   ba958:	ea43 0702 	orr.w	r7, r3, r2
   ba95c:	463b      	mov	r3, r7
   ba95e:	e9de 6700 	ldrd	r6, r7, [lr]
   ba962:	ee10 2a10 	vmov	r2, s0
   ba966:	4630      	mov	r0, r6
   ba968:	4639      	mov	r1, r7
   ba96a:	f000 f8b1 	bl	baad0 <__adddf3>
   ba96e:	e9cd 0100 	strd	r0, r1, [sp]
   ba972:	4632      	mov	r2, r6
   ba974:	463b      	mov	r3, r7
   ba976:	e9dd 0100 	ldrd	r0, r1, [sp]
   ba97a:	f000 f8a7 	bl	baacc <__aeabi_dsub>
   ba97e:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   ba982:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ba986:	4602      	mov	r2, r0
   ba988:	ea41 0304 	orr.w	r3, r1, r4
   ba98c:	ec43 2b10 	vmov	d0, r2, r3
   ba990:	b003      	add	sp, #12
   ba992:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba994:	000fffff 	.word	0x000fffff
   ba998:	000bcca0 	.word	0x000bcca0
   ba99c:	00000000 	.word	0x00000000

000ba9a0 <scalbn>:
   ba9a0:	b538      	push	{r3, r4, r5, lr}
   ba9a2:	ec53 2b10 	vmov	r2, r3, d0
   ba9a6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   ba9aa:	4604      	mov	r4, r0
   ba9ac:	469c      	mov	ip, r3
   ba9ae:	bb89      	cbnz	r1, baa14 <scalbn+0x74>
   ba9b0:	ee10 1a10 	vmov	r1, s0
   ba9b4:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   ba9b8:	ea5c 0101 	orrs.w	r1, ip, r1
   ba9bc:	d029      	beq.n	baa12 <scalbn+0x72>
   ba9be:	4619      	mov	r1, r3
   ba9c0:	2200      	movs	r2, #0
   ba9c2:	4b3d      	ldr	r3, [pc, #244]	; (baab8 <scalbn+0x118>)
   ba9c4:	4d3d      	ldr	r5, [pc, #244]	; (baabc <scalbn+0x11c>)
   ba9c6:	ee10 0a10 	vmov	r0, s0
   ba9ca:	f000 fa37 	bl	bae3c <__aeabi_dmul>
   ba9ce:	42ac      	cmp	r4, r5
   ba9d0:	4602      	mov	r2, r0
   ba9d2:	460b      	mov	r3, r1
   ba9d4:	db16      	blt.n	baa04 <scalbn+0x64>
   ba9d6:	468c      	mov	ip, r1
   ba9d8:	f3c1 510a 	ubfx	r1, r1, #20, #11
   ba9dc:	3936      	subs	r1, #54	; 0x36
   ba9de:	4421      	add	r1, r4
   ba9e0:	f240 70fe 	movw	r0, #2046	; 0x7fe
   ba9e4:	4281      	cmp	r1, r0
   ba9e6:	dc21      	bgt.n	baa2c <scalbn+0x8c>
   ba9e8:	2900      	cmp	r1, #0
   ba9ea:	dc47      	bgt.n	baa7c <scalbn+0xdc>
   ba9ec:	f111 0f35 	cmn.w	r1, #53	; 0x35
   ba9f0:	da34      	bge.n	baa5c <scalbn+0xbc>
   ba9f2:	f24c 3150 	movw	r1, #50000	; 0xc350
   ba9f6:	428c      	cmp	r4, r1
   ba9f8:	dc18      	bgt.n	baa2c <scalbn+0x8c>
   ba9fa:	2b00      	cmp	r3, #0
   ba9fc:	a126      	add	r1, pc, #152	; (adr r1, baa98 <scalbn+0xf8>)
   ba9fe:	e9d1 0100 	ldrd	r0, r1, [r1]
   baa02:	db44      	blt.n	baa8e <scalbn+0xee>
   baa04:	a324      	add	r3, pc, #144	; (adr r3, baa98 <scalbn+0xf8>)
   baa06:	e9d3 2300 	ldrd	r2, r3, [r3]
   baa0a:	f000 fa17 	bl	bae3c <__aeabi_dmul>
   baa0e:	ec41 0b10 	vmov	d0, r0, r1
   baa12:	bd38      	pop	{r3, r4, r5, pc}
   baa14:	f240 70ff 	movw	r0, #2047	; 0x7ff
   baa18:	4281      	cmp	r1, r0
   baa1a:	d1e0      	bne.n	ba9de <scalbn+0x3e>
   baa1c:	ee10 0a10 	vmov	r0, s0
   baa20:	4619      	mov	r1, r3
   baa22:	f000 f855 	bl	baad0 <__adddf3>
   baa26:	ec41 0b10 	vmov	d0, r0, r1
   baa2a:	bd38      	pop	{r3, r4, r5, pc}
   baa2c:	2b00      	cmp	r3, #0
   baa2e:	a11c      	add	r1, pc, #112	; (adr r1, baaa0 <scalbn+0x100>)
   baa30:	e9d1 0100 	ldrd	r0, r1, [r1]
   baa34:	db07      	blt.n	baa46 <scalbn+0xa6>
   baa36:	a31a      	add	r3, pc, #104	; (adr r3, baaa0 <scalbn+0x100>)
   baa38:	e9d3 2300 	ldrd	r2, r3, [r3]
   baa3c:	f000 f9fe 	bl	bae3c <__aeabi_dmul>
   baa40:	ec41 0b10 	vmov	d0, r0, r1
   baa44:	bd38      	pop	{r3, r4, r5, pc}
   baa46:	a118      	add	r1, pc, #96	; (adr r1, baaa8 <scalbn+0x108>)
   baa48:	e9d1 0100 	ldrd	r0, r1, [r1]
   baa4c:	a314      	add	r3, pc, #80	; (adr r3, baaa0 <scalbn+0x100>)
   baa4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   baa52:	f000 f9f3 	bl	bae3c <__aeabi_dmul>
   baa56:	ec41 0b10 	vmov	d0, r0, r1
   baa5a:	e7f3      	b.n	baa44 <scalbn+0xa4>
   baa5c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   baa60:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   baa64:	3136      	adds	r1, #54	; 0x36
   baa66:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   baa6a:	4610      	mov	r0, r2
   baa6c:	4619      	mov	r1, r3
   baa6e:	2200      	movs	r2, #0
   baa70:	4b13      	ldr	r3, [pc, #76]	; (baac0 <scalbn+0x120>)
   baa72:	f000 f9e3 	bl	bae3c <__aeabi_dmul>
   baa76:	ec41 0b10 	vmov	d0, r0, r1
   baa7a:	bd38      	pop	{r3, r4, r5, pc}
   baa7c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   baa80:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   baa84:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   baa88:	ec43 2b10 	vmov	d0, r2, r3
   baa8c:	bd38      	pop	{r3, r4, r5, pc}
   baa8e:	a108      	add	r1, pc, #32	; (adr r1, baab0 <scalbn+0x110>)
   baa90:	e9d1 0100 	ldrd	r0, r1, [r1]
   baa94:	e7b6      	b.n	baa04 <scalbn+0x64>
   baa96:	bf00      	nop
   baa98:	c2f8f359 	.word	0xc2f8f359
   baa9c:	01a56e1f 	.word	0x01a56e1f
   baaa0:	8800759c 	.word	0x8800759c
   baaa4:	7e37e43c 	.word	0x7e37e43c
   baaa8:	8800759c 	.word	0x8800759c
   baaac:	fe37e43c 	.word	0xfe37e43c
   baab0:	c2f8f359 	.word	0xc2f8f359
   baab4:	81a56e1f 	.word	0x81a56e1f
   baab8:	43500000 	.word	0x43500000
   baabc:	ffff3cb0 	.word	0xffff3cb0
   baac0:	3c900000 	.word	0x3c900000

000baac4 <__aeabi_drsub>:
   baac4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   baac8:	e002      	b.n	baad0 <__adddf3>
   baaca:	bf00      	nop

000baacc <__aeabi_dsub>:
   baacc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000baad0 <__adddf3>:
   baad0:	b530      	push	{r4, r5, lr}
   baad2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   baad6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   baada:	ea94 0f05 	teq	r4, r5
   baade:	bf08      	it	eq
   baae0:	ea90 0f02 	teqeq	r0, r2
   baae4:	bf1f      	itttt	ne
   baae6:	ea54 0c00 	orrsne.w	ip, r4, r0
   baaea:	ea55 0c02 	orrsne.w	ip, r5, r2
   baaee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   baaf2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   baaf6:	f000 80e2 	beq.w	bacbe <__adddf3+0x1ee>
   baafa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   baafe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bab02:	bfb8      	it	lt
   bab04:	426d      	neglt	r5, r5
   bab06:	dd0c      	ble.n	bab22 <__adddf3+0x52>
   bab08:	442c      	add	r4, r5
   bab0a:	ea80 0202 	eor.w	r2, r0, r2
   bab0e:	ea81 0303 	eor.w	r3, r1, r3
   bab12:	ea82 0000 	eor.w	r0, r2, r0
   bab16:	ea83 0101 	eor.w	r1, r3, r1
   bab1a:	ea80 0202 	eor.w	r2, r0, r2
   bab1e:	ea81 0303 	eor.w	r3, r1, r3
   bab22:	2d36      	cmp	r5, #54	; 0x36
   bab24:	bf88      	it	hi
   bab26:	bd30      	pophi	{r4, r5, pc}
   bab28:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bab2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bab30:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bab34:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bab38:	d002      	beq.n	bab40 <__adddf3+0x70>
   bab3a:	4240      	negs	r0, r0
   bab3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bab40:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bab44:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bab48:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bab4c:	d002      	beq.n	bab54 <__adddf3+0x84>
   bab4e:	4252      	negs	r2, r2
   bab50:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bab54:	ea94 0f05 	teq	r4, r5
   bab58:	f000 80a7 	beq.w	bacaa <__adddf3+0x1da>
   bab5c:	f1a4 0401 	sub.w	r4, r4, #1
   bab60:	f1d5 0e20 	rsbs	lr, r5, #32
   bab64:	db0d      	blt.n	bab82 <__adddf3+0xb2>
   bab66:	fa02 fc0e 	lsl.w	ip, r2, lr
   bab6a:	fa22 f205 	lsr.w	r2, r2, r5
   bab6e:	1880      	adds	r0, r0, r2
   bab70:	f141 0100 	adc.w	r1, r1, #0
   bab74:	fa03 f20e 	lsl.w	r2, r3, lr
   bab78:	1880      	adds	r0, r0, r2
   bab7a:	fa43 f305 	asr.w	r3, r3, r5
   bab7e:	4159      	adcs	r1, r3
   bab80:	e00e      	b.n	baba0 <__adddf3+0xd0>
   bab82:	f1a5 0520 	sub.w	r5, r5, #32
   bab86:	f10e 0e20 	add.w	lr, lr, #32
   bab8a:	2a01      	cmp	r2, #1
   bab8c:	fa03 fc0e 	lsl.w	ip, r3, lr
   bab90:	bf28      	it	cs
   bab92:	f04c 0c02 	orrcs.w	ip, ip, #2
   bab96:	fa43 f305 	asr.w	r3, r3, r5
   bab9a:	18c0      	adds	r0, r0, r3
   bab9c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   baba0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   baba4:	d507      	bpl.n	babb6 <__adddf3+0xe6>
   baba6:	f04f 0e00 	mov.w	lr, #0
   babaa:	f1dc 0c00 	rsbs	ip, ip, #0
   babae:	eb7e 0000 	sbcs.w	r0, lr, r0
   babb2:	eb6e 0101 	sbc.w	r1, lr, r1
   babb6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   babba:	d31b      	bcc.n	babf4 <__adddf3+0x124>
   babbc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   babc0:	d30c      	bcc.n	babdc <__adddf3+0x10c>
   babc2:	0849      	lsrs	r1, r1, #1
   babc4:	ea5f 0030 	movs.w	r0, r0, rrx
   babc8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   babcc:	f104 0401 	add.w	r4, r4, #1
   babd0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   babd4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   babd8:	f080 809a 	bcs.w	bad10 <__adddf3+0x240>
   babdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   babe0:	bf08      	it	eq
   babe2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   babe6:	f150 0000 	adcs.w	r0, r0, #0
   babea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   babee:	ea41 0105 	orr.w	r1, r1, r5
   babf2:	bd30      	pop	{r4, r5, pc}
   babf4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   babf8:	4140      	adcs	r0, r0
   babfa:	eb41 0101 	adc.w	r1, r1, r1
   babfe:	3c01      	subs	r4, #1
   bac00:	bf28      	it	cs
   bac02:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bac06:	d2e9      	bcs.n	babdc <__adddf3+0x10c>
   bac08:	f091 0f00 	teq	r1, #0
   bac0c:	bf04      	itt	eq
   bac0e:	4601      	moveq	r1, r0
   bac10:	2000      	moveq	r0, #0
   bac12:	fab1 f381 	clz	r3, r1
   bac16:	bf08      	it	eq
   bac18:	3320      	addeq	r3, #32
   bac1a:	f1a3 030b 	sub.w	r3, r3, #11
   bac1e:	f1b3 0220 	subs.w	r2, r3, #32
   bac22:	da0c      	bge.n	bac3e <__adddf3+0x16e>
   bac24:	320c      	adds	r2, #12
   bac26:	dd08      	ble.n	bac3a <__adddf3+0x16a>
   bac28:	f102 0c14 	add.w	ip, r2, #20
   bac2c:	f1c2 020c 	rsb	r2, r2, #12
   bac30:	fa01 f00c 	lsl.w	r0, r1, ip
   bac34:	fa21 f102 	lsr.w	r1, r1, r2
   bac38:	e00c      	b.n	bac54 <__adddf3+0x184>
   bac3a:	f102 0214 	add.w	r2, r2, #20
   bac3e:	bfd8      	it	le
   bac40:	f1c2 0c20 	rsble	ip, r2, #32
   bac44:	fa01 f102 	lsl.w	r1, r1, r2
   bac48:	fa20 fc0c 	lsr.w	ip, r0, ip
   bac4c:	bfdc      	itt	le
   bac4e:	ea41 010c 	orrle.w	r1, r1, ip
   bac52:	4090      	lslle	r0, r2
   bac54:	1ae4      	subs	r4, r4, r3
   bac56:	bfa2      	ittt	ge
   bac58:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bac5c:	4329      	orrge	r1, r5
   bac5e:	bd30      	popge	{r4, r5, pc}
   bac60:	ea6f 0404 	mvn.w	r4, r4
   bac64:	3c1f      	subs	r4, #31
   bac66:	da1c      	bge.n	baca2 <__adddf3+0x1d2>
   bac68:	340c      	adds	r4, #12
   bac6a:	dc0e      	bgt.n	bac8a <__adddf3+0x1ba>
   bac6c:	f104 0414 	add.w	r4, r4, #20
   bac70:	f1c4 0220 	rsb	r2, r4, #32
   bac74:	fa20 f004 	lsr.w	r0, r0, r4
   bac78:	fa01 f302 	lsl.w	r3, r1, r2
   bac7c:	ea40 0003 	orr.w	r0, r0, r3
   bac80:	fa21 f304 	lsr.w	r3, r1, r4
   bac84:	ea45 0103 	orr.w	r1, r5, r3
   bac88:	bd30      	pop	{r4, r5, pc}
   bac8a:	f1c4 040c 	rsb	r4, r4, #12
   bac8e:	f1c4 0220 	rsb	r2, r4, #32
   bac92:	fa20 f002 	lsr.w	r0, r0, r2
   bac96:	fa01 f304 	lsl.w	r3, r1, r4
   bac9a:	ea40 0003 	orr.w	r0, r0, r3
   bac9e:	4629      	mov	r1, r5
   baca0:	bd30      	pop	{r4, r5, pc}
   baca2:	fa21 f004 	lsr.w	r0, r1, r4
   baca6:	4629      	mov	r1, r5
   baca8:	bd30      	pop	{r4, r5, pc}
   bacaa:	f094 0f00 	teq	r4, #0
   bacae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bacb2:	bf06      	itte	eq
   bacb4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bacb8:	3401      	addeq	r4, #1
   bacba:	3d01      	subne	r5, #1
   bacbc:	e74e      	b.n	bab5c <__adddf3+0x8c>
   bacbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bacc2:	bf18      	it	ne
   bacc4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bacc8:	d029      	beq.n	bad1e <__adddf3+0x24e>
   bacca:	ea94 0f05 	teq	r4, r5
   bacce:	bf08      	it	eq
   bacd0:	ea90 0f02 	teqeq	r0, r2
   bacd4:	d005      	beq.n	bace2 <__adddf3+0x212>
   bacd6:	ea54 0c00 	orrs.w	ip, r4, r0
   bacda:	bf04      	itt	eq
   bacdc:	4619      	moveq	r1, r3
   bacde:	4610      	moveq	r0, r2
   bace0:	bd30      	pop	{r4, r5, pc}
   bace2:	ea91 0f03 	teq	r1, r3
   bace6:	bf1e      	ittt	ne
   bace8:	2100      	movne	r1, #0
   bacea:	2000      	movne	r0, #0
   bacec:	bd30      	popne	{r4, r5, pc}
   bacee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bacf2:	d105      	bne.n	bad00 <__adddf3+0x230>
   bacf4:	0040      	lsls	r0, r0, #1
   bacf6:	4149      	adcs	r1, r1
   bacf8:	bf28      	it	cs
   bacfa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bacfe:	bd30      	pop	{r4, r5, pc}
   bad00:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bad04:	bf3c      	itt	cc
   bad06:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bad0a:	bd30      	popcc	{r4, r5, pc}
   bad0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bad10:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bad14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bad18:	f04f 0000 	mov.w	r0, #0
   bad1c:	bd30      	pop	{r4, r5, pc}
   bad1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bad22:	bf1a      	itte	ne
   bad24:	4619      	movne	r1, r3
   bad26:	4610      	movne	r0, r2
   bad28:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bad2c:	bf1c      	itt	ne
   bad2e:	460b      	movne	r3, r1
   bad30:	4602      	movne	r2, r0
   bad32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bad36:	bf06      	itte	eq
   bad38:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bad3c:	ea91 0f03 	teqeq	r1, r3
   bad40:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bad44:	bd30      	pop	{r4, r5, pc}
   bad46:	bf00      	nop

000bad48 <__aeabi_ui2d>:
   bad48:	f090 0f00 	teq	r0, #0
   bad4c:	bf04      	itt	eq
   bad4e:	2100      	moveq	r1, #0
   bad50:	4770      	bxeq	lr
   bad52:	b530      	push	{r4, r5, lr}
   bad54:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bad58:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bad5c:	f04f 0500 	mov.w	r5, #0
   bad60:	f04f 0100 	mov.w	r1, #0
   bad64:	e750      	b.n	bac08 <__adddf3+0x138>
   bad66:	bf00      	nop

000bad68 <__aeabi_i2d>:
   bad68:	f090 0f00 	teq	r0, #0
   bad6c:	bf04      	itt	eq
   bad6e:	2100      	moveq	r1, #0
   bad70:	4770      	bxeq	lr
   bad72:	b530      	push	{r4, r5, lr}
   bad74:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bad78:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bad7c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bad80:	bf48      	it	mi
   bad82:	4240      	negmi	r0, r0
   bad84:	f04f 0100 	mov.w	r1, #0
   bad88:	e73e      	b.n	bac08 <__adddf3+0x138>
   bad8a:	bf00      	nop

000bad8c <__aeabi_f2d>:
   bad8c:	0042      	lsls	r2, r0, #1
   bad8e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bad92:	ea4f 0131 	mov.w	r1, r1, rrx
   bad96:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bad9a:	bf1f      	itttt	ne
   bad9c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bada0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bada4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bada8:	4770      	bxne	lr
   badaa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   badae:	bf08      	it	eq
   badb0:	4770      	bxeq	lr
   badb2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   badb6:	bf04      	itt	eq
   badb8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   badbc:	4770      	bxeq	lr
   badbe:	b530      	push	{r4, r5, lr}
   badc0:	f44f 7460 	mov.w	r4, #896	; 0x380
   badc4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   badc8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   badcc:	e71c      	b.n	bac08 <__adddf3+0x138>
   badce:	bf00      	nop

000badd0 <__aeabi_ul2d>:
   badd0:	ea50 0201 	orrs.w	r2, r0, r1
   badd4:	bf08      	it	eq
   badd6:	4770      	bxeq	lr
   badd8:	b530      	push	{r4, r5, lr}
   badda:	f04f 0500 	mov.w	r5, #0
   badde:	e00a      	b.n	badf6 <__aeabi_l2d+0x16>

000bade0 <__aeabi_l2d>:
   bade0:	ea50 0201 	orrs.w	r2, r0, r1
   bade4:	bf08      	it	eq
   bade6:	4770      	bxeq	lr
   bade8:	b530      	push	{r4, r5, lr}
   badea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   badee:	d502      	bpl.n	badf6 <__aeabi_l2d+0x16>
   badf0:	4240      	negs	r0, r0
   badf2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   badf6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   badfa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   badfe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bae02:	f43f aed8 	beq.w	babb6 <__adddf3+0xe6>
   bae06:	f04f 0203 	mov.w	r2, #3
   bae0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bae0e:	bf18      	it	ne
   bae10:	3203      	addne	r2, #3
   bae12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bae16:	bf18      	it	ne
   bae18:	3203      	addne	r2, #3
   bae1a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bae1e:	f1c2 0320 	rsb	r3, r2, #32
   bae22:	fa00 fc03 	lsl.w	ip, r0, r3
   bae26:	fa20 f002 	lsr.w	r0, r0, r2
   bae2a:	fa01 fe03 	lsl.w	lr, r1, r3
   bae2e:	ea40 000e 	orr.w	r0, r0, lr
   bae32:	fa21 f102 	lsr.w	r1, r1, r2
   bae36:	4414      	add	r4, r2
   bae38:	e6bd      	b.n	babb6 <__adddf3+0xe6>
   bae3a:	bf00      	nop

000bae3c <__aeabi_dmul>:
   bae3c:	b570      	push	{r4, r5, r6, lr}
   bae3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bae42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bae46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bae4a:	bf1d      	ittte	ne
   bae4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bae50:	ea94 0f0c 	teqne	r4, ip
   bae54:	ea95 0f0c 	teqne	r5, ip
   bae58:	f000 f8de 	bleq	bb018 <__aeabi_dmul+0x1dc>
   bae5c:	442c      	add	r4, r5
   bae5e:	ea81 0603 	eor.w	r6, r1, r3
   bae62:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bae66:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bae6a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bae6e:	bf18      	it	ne
   bae70:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bae74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bae78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bae7c:	d038      	beq.n	baef0 <__aeabi_dmul+0xb4>
   bae7e:	fba0 ce02 	umull	ip, lr, r0, r2
   bae82:	f04f 0500 	mov.w	r5, #0
   bae86:	fbe1 e502 	umlal	lr, r5, r1, r2
   bae8a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bae8e:	fbe0 e503 	umlal	lr, r5, r0, r3
   bae92:	f04f 0600 	mov.w	r6, #0
   bae96:	fbe1 5603 	umlal	r5, r6, r1, r3
   bae9a:	f09c 0f00 	teq	ip, #0
   bae9e:	bf18      	it	ne
   baea0:	f04e 0e01 	orrne.w	lr, lr, #1
   baea4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   baea8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   baeac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   baeb0:	d204      	bcs.n	baebc <__aeabi_dmul+0x80>
   baeb2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   baeb6:	416d      	adcs	r5, r5
   baeb8:	eb46 0606 	adc.w	r6, r6, r6
   baebc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   baec0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   baec4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   baec8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   baecc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   baed0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   baed4:	bf88      	it	hi
   baed6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   baeda:	d81e      	bhi.n	baf1a <__aeabi_dmul+0xde>
   baedc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   baee0:	bf08      	it	eq
   baee2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   baee6:	f150 0000 	adcs.w	r0, r0, #0
   baeea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   baeee:	bd70      	pop	{r4, r5, r6, pc}
   baef0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   baef4:	ea46 0101 	orr.w	r1, r6, r1
   baef8:	ea40 0002 	orr.w	r0, r0, r2
   baefc:	ea81 0103 	eor.w	r1, r1, r3
   baf00:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   baf04:	bfc2      	ittt	gt
   baf06:	ebd4 050c 	rsbsgt	r5, r4, ip
   baf0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   baf0e:	bd70      	popgt	{r4, r5, r6, pc}
   baf10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   baf14:	f04f 0e00 	mov.w	lr, #0
   baf18:	3c01      	subs	r4, #1
   baf1a:	f300 80ab 	bgt.w	bb074 <__aeabi_dmul+0x238>
   baf1e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   baf22:	bfde      	ittt	le
   baf24:	2000      	movle	r0, #0
   baf26:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   baf2a:	bd70      	pople	{r4, r5, r6, pc}
   baf2c:	f1c4 0400 	rsb	r4, r4, #0
   baf30:	3c20      	subs	r4, #32
   baf32:	da35      	bge.n	bafa0 <__aeabi_dmul+0x164>
   baf34:	340c      	adds	r4, #12
   baf36:	dc1b      	bgt.n	baf70 <__aeabi_dmul+0x134>
   baf38:	f104 0414 	add.w	r4, r4, #20
   baf3c:	f1c4 0520 	rsb	r5, r4, #32
   baf40:	fa00 f305 	lsl.w	r3, r0, r5
   baf44:	fa20 f004 	lsr.w	r0, r0, r4
   baf48:	fa01 f205 	lsl.w	r2, r1, r5
   baf4c:	ea40 0002 	orr.w	r0, r0, r2
   baf50:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   baf54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   baf58:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   baf5c:	fa21 f604 	lsr.w	r6, r1, r4
   baf60:	eb42 0106 	adc.w	r1, r2, r6
   baf64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   baf68:	bf08      	it	eq
   baf6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   baf6e:	bd70      	pop	{r4, r5, r6, pc}
   baf70:	f1c4 040c 	rsb	r4, r4, #12
   baf74:	f1c4 0520 	rsb	r5, r4, #32
   baf78:	fa00 f304 	lsl.w	r3, r0, r4
   baf7c:	fa20 f005 	lsr.w	r0, r0, r5
   baf80:	fa01 f204 	lsl.w	r2, r1, r4
   baf84:	ea40 0002 	orr.w	r0, r0, r2
   baf88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   baf8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   baf90:	f141 0100 	adc.w	r1, r1, #0
   baf94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   baf98:	bf08      	it	eq
   baf9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   baf9e:	bd70      	pop	{r4, r5, r6, pc}
   bafa0:	f1c4 0520 	rsb	r5, r4, #32
   bafa4:	fa00 f205 	lsl.w	r2, r0, r5
   bafa8:	ea4e 0e02 	orr.w	lr, lr, r2
   bafac:	fa20 f304 	lsr.w	r3, r0, r4
   bafb0:	fa01 f205 	lsl.w	r2, r1, r5
   bafb4:	ea43 0302 	orr.w	r3, r3, r2
   bafb8:	fa21 f004 	lsr.w	r0, r1, r4
   bafbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bafc0:	fa21 f204 	lsr.w	r2, r1, r4
   bafc4:	ea20 0002 	bic.w	r0, r0, r2
   bafc8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bafcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bafd0:	bf08      	it	eq
   bafd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bafd6:	bd70      	pop	{r4, r5, r6, pc}
   bafd8:	f094 0f00 	teq	r4, #0
   bafdc:	d10f      	bne.n	baffe <__aeabi_dmul+0x1c2>
   bafde:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bafe2:	0040      	lsls	r0, r0, #1
   bafe4:	eb41 0101 	adc.w	r1, r1, r1
   bafe8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bafec:	bf08      	it	eq
   bafee:	3c01      	subeq	r4, #1
   baff0:	d0f7      	beq.n	bafe2 <__aeabi_dmul+0x1a6>
   baff2:	ea41 0106 	orr.w	r1, r1, r6
   baff6:	f095 0f00 	teq	r5, #0
   baffa:	bf18      	it	ne
   baffc:	4770      	bxne	lr
   baffe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bb002:	0052      	lsls	r2, r2, #1
   bb004:	eb43 0303 	adc.w	r3, r3, r3
   bb008:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bb00c:	bf08      	it	eq
   bb00e:	3d01      	subeq	r5, #1
   bb010:	d0f7      	beq.n	bb002 <__aeabi_dmul+0x1c6>
   bb012:	ea43 0306 	orr.w	r3, r3, r6
   bb016:	4770      	bx	lr
   bb018:	ea94 0f0c 	teq	r4, ip
   bb01c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb020:	bf18      	it	ne
   bb022:	ea95 0f0c 	teqne	r5, ip
   bb026:	d00c      	beq.n	bb042 <__aeabi_dmul+0x206>
   bb028:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb02c:	bf18      	it	ne
   bb02e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb032:	d1d1      	bne.n	bafd8 <__aeabi_dmul+0x19c>
   bb034:	ea81 0103 	eor.w	r1, r1, r3
   bb038:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb03c:	f04f 0000 	mov.w	r0, #0
   bb040:	bd70      	pop	{r4, r5, r6, pc}
   bb042:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb046:	bf06      	itte	eq
   bb048:	4610      	moveq	r0, r2
   bb04a:	4619      	moveq	r1, r3
   bb04c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb050:	d019      	beq.n	bb086 <__aeabi_dmul+0x24a>
   bb052:	ea94 0f0c 	teq	r4, ip
   bb056:	d102      	bne.n	bb05e <__aeabi_dmul+0x222>
   bb058:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bb05c:	d113      	bne.n	bb086 <__aeabi_dmul+0x24a>
   bb05e:	ea95 0f0c 	teq	r5, ip
   bb062:	d105      	bne.n	bb070 <__aeabi_dmul+0x234>
   bb064:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bb068:	bf1c      	itt	ne
   bb06a:	4610      	movne	r0, r2
   bb06c:	4619      	movne	r1, r3
   bb06e:	d10a      	bne.n	bb086 <__aeabi_dmul+0x24a>
   bb070:	ea81 0103 	eor.w	r1, r1, r3
   bb074:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb078:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb07c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb080:	f04f 0000 	mov.w	r0, #0
   bb084:	bd70      	pop	{r4, r5, r6, pc}
   bb086:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb08a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bb08e:	bd70      	pop	{r4, r5, r6, pc}

000bb090 <__aeabi_ddiv>:
   bb090:	b570      	push	{r4, r5, r6, lr}
   bb092:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb096:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb09a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb09e:	bf1d      	ittte	ne
   bb0a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb0a4:	ea94 0f0c 	teqne	r4, ip
   bb0a8:	ea95 0f0c 	teqne	r5, ip
   bb0ac:	f000 f8a7 	bleq	bb1fe <__aeabi_ddiv+0x16e>
   bb0b0:	eba4 0405 	sub.w	r4, r4, r5
   bb0b4:	ea81 0e03 	eor.w	lr, r1, r3
   bb0b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb0bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb0c0:	f000 8088 	beq.w	bb1d4 <__aeabi_ddiv+0x144>
   bb0c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb0c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bb0cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bb0d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bb0d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bb0d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bb0dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bb0e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bb0e4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bb0e8:	429d      	cmp	r5, r3
   bb0ea:	bf08      	it	eq
   bb0ec:	4296      	cmpeq	r6, r2
   bb0ee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bb0f2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bb0f6:	d202      	bcs.n	bb0fe <__aeabi_ddiv+0x6e>
   bb0f8:	085b      	lsrs	r3, r3, #1
   bb0fa:	ea4f 0232 	mov.w	r2, r2, rrx
   bb0fe:	1ab6      	subs	r6, r6, r2
   bb100:	eb65 0503 	sbc.w	r5, r5, r3
   bb104:	085b      	lsrs	r3, r3, #1
   bb106:	ea4f 0232 	mov.w	r2, r2, rrx
   bb10a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bb10e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bb112:	ebb6 0e02 	subs.w	lr, r6, r2
   bb116:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb11a:	bf22      	ittt	cs
   bb11c:	1ab6      	subcs	r6, r6, r2
   bb11e:	4675      	movcs	r5, lr
   bb120:	ea40 000c 	orrcs.w	r0, r0, ip
   bb124:	085b      	lsrs	r3, r3, #1
   bb126:	ea4f 0232 	mov.w	r2, r2, rrx
   bb12a:	ebb6 0e02 	subs.w	lr, r6, r2
   bb12e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb132:	bf22      	ittt	cs
   bb134:	1ab6      	subcs	r6, r6, r2
   bb136:	4675      	movcs	r5, lr
   bb138:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bb13c:	085b      	lsrs	r3, r3, #1
   bb13e:	ea4f 0232 	mov.w	r2, r2, rrx
   bb142:	ebb6 0e02 	subs.w	lr, r6, r2
   bb146:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb14a:	bf22      	ittt	cs
   bb14c:	1ab6      	subcs	r6, r6, r2
   bb14e:	4675      	movcs	r5, lr
   bb150:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bb154:	085b      	lsrs	r3, r3, #1
   bb156:	ea4f 0232 	mov.w	r2, r2, rrx
   bb15a:	ebb6 0e02 	subs.w	lr, r6, r2
   bb15e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb162:	bf22      	ittt	cs
   bb164:	1ab6      	subcs	r6, r6, r2
   bb166:	4675      	movcs	r5, lr
   bb168:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bb16c:	ea55 0e06 	orrs.w	lr, r5, r6
   bb170:	d018      	beq.n	bb1a4 <__aeabi_ddiv+0x114>
   bb172:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bb176:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bb17a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bb17e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bb182:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bb186:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bb18a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bb18e:	d1c0      	bne.n	bb112 <__aeabi_ddiv+0x82>
   bb190:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb194:	d10b      	bne.n	bb1ae <__aeabi_ddiv+0x11e>
   bb196:	ea41 0100 	orr.w	r1, r1, r0
   bb19a:	f04f 0000 	mov.w	r0, #0
   bb19e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bb1a2:	e7b6      	b.n	bb112 <__aeabi_ddiv+0x82>
   bb1a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb1a8:	bf04      	itt	eq
   bb1aa:	4301      	orreq	r1, r0
   bb1ac:	2000      	moveq	r0, #0
   bb1ae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb1b2:	bf88      	it	hi
   bb1b4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb1b8:	f63f aeaf 	bhi.w	baf1a <__aeabi_dmul+0xde>
   bb1bc:	ebb5 0c03 	subs.w	ip, r5, r3
   bb1c0:	bf04      	itt	eq
   bb1c2:	ebb6 0c02 	subseq.w	ip, r6, r2
   bb1c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb1ca:	f150 0000 	adcs.w	r0, r0, #0
   bb1ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb1d2:	bd70      	pop	{r4, r5, r6, pc}
   bb1d4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bb1d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bb1dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bb1e0:	bfc2      	ittt	gt
   bb1e2:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb1e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb1ea:	bd70      	popgt	{r4, r5, r6, pc}
   bb1ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb1f0:	f04f 0e00 	mov.w	lr, #0
   bb1f4:	3c01      	subs	r4, #1
   bb1f6:	e690      	b.n	baf1a <__aeabi_dmul+0xde>
   bb1f8:	ea45 0e06 	orr.w	lr, r5, r6
   bb1fc:	e68d      	b.n	baf1a <__aeabi_dmul+0xde>
   bb1fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb202:	ea94 0f0c 	teq	r4, ip
   bb206:	bf08      	it	eq
   bb208:	ea95 0f0c 	teqeq	r5, ip
   bb20c:	f43f af3b 	beq.w	bb086 <__aeabi_dmul+0x24a>
   bb210:	ea94 0f0c 	teq	r4, ip
   bb214:	d10a      	bne.n	bb22c <__aeabi_ddiv+0x19c>
   bb216:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb21a:	f47f af34 	bne.w	bb086 <__aeabi_dmul+0x24a>
   bb21e:	ea95 0f0c 	teq	r5, ip
   bb222:	f47f af25 	bne.w	bb070 <__aeabi_dmul+0x234>
   bb226:	4610      	mov	r0, r2
   bb228:	4619      	mov	r1, r3
   bb22a:	e72c      	b.n	bb086 <__aeabi_dmul+0x24a>
   bb22c:	ea95 0f0c 	teq	r5, ip
   bb230:	d106      	bne.n	bb240 <__aeabi_ddiv+0x1b0>
   bb232:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb236:	f43f aefd 	beq.w	bb034 <__aeabi_dmul+0x1f8>
   bb23a:	4610      	mov	r0, r2
   bb23c:	4619      	mov	r1, r3
   bb23e:	e722      	b.n	bb086 <__aeabi_dmul+0x24a>
   bb240:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb244:	bf18      	it	ne
   bb246:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb24a:	f47f aec5 	bne.w	bafd8 <__aeabi_dmul+0x19c>
   bb24e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bb252:	f47f af0d 	bne.w	bb070 <__aeabi_dmul+0x234>
   bb256:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bb25a:	f47f aeeb 	bne.w	bb034 <__aeabi_dmul+0x1f8>
   bb25e:	e712      	b.n	bb086 <__aeabi_dmul+0x24a>

000bb260 <__gedf2>:
   bb260:	f04f 3cff 	mov.w	ip, #4294967295
   bb264:	e006      	b.n	bb274 <__cmpdf2+0x4>
   bb266:	bf00      	nop

000bb268 <__ledf2>:
   bb268:	f04f 0c01 	mov.w	ip, #1
   bb26c:	e002      	b.n	bb274 <__cmpdf2+0x4>
   bb26e:	bf00      	nop

000bb270 <__cmpdf2>:
   bb270:	f04f 0c01 	mov.w	ip, #1
   bb274:	f84d cd04 	str.w	ip, [sp, #-4]!
   bb278:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb27c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb280:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb284:	bf18      	it	ne
   bb286:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bb28a:	d01b      	beq.n	bb2c4 <__cmpdf2+0x54>
   bb28c:	b001      	add	sp, #4
   bb28e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bb292:	bf0c      	ite	eq
   bb294:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bb298:	ea91 0f03 	teqne	r1, r3
   bb29c:	bf02      	ittt	eq
   bb29e:	ea90 0f02 	teqeq	r0, r2
   bb2a2:	2000      	moveq	r0, #0
   bb2a4:	4770      	bxeq	lr
   bb2a6:	f110 0f00 	cmn.w	r0, #0
   bb2aa:	ea91 0f03 	teq	r1, r3
   bb2ae:	bf58      	it	pl
   bb2b0:	4299      	cmppl	r1, r3
   bb2b2:	bf08      	it	eq
   bb2b4:	4290      	cmpeq	r0, r2
   bb2b6:	bf2c      	ite	cs
   bb2b8:	17d8      	asrcs	r0, r3, #31
   bb2ba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bb2be:	f040 0001 	orr.w	r0, r0, #1
   bb2c2:	4770      	bx	lr
   bb2c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb2c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb2cc:	d102      	bne.n	bb2d4 <__cmpdf2+0x64>
   bb2ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb2d2:	d107      	bne.n	bb2e4 <__cmpdf2+0x74>
   bb2d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb2d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb2dc:	d1d6      	bne.n	bb28c <__cmpdf2+0x1c>
   bb2de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb2e2:	d0d3      	beq.n	bb28c <__cmpdf2+0x1c>
   bb2e4:	f85d 0b04 	ldr.w	r0, [sp], #4
   bb2e8:	4770      	bx	lr
   bb2ea:	bf00      	nop

000bb2ec <__aeabi_cdrcmple>:
   bb2ec:	4684      	mov	ip, r0
   bb2ee:	4610      	mov	r0, r2
   bb2f0:	4662      	mov	r2, ip
   bb2f2:	468c      	mov	ip, r1
   bb2f4:	4619      	mov	r1, r3
   bb2f6:	4663      	mov	r3, ip
   bb2f8:	e000      	b.n	bb2fc <__aeabi_cdcmpeq>
   bb2fa:	bf00      	nop

000bb2fc <__aeabi_cdcmpeq>:
   bb2fc:	b501      	push	{r0, lr}
   bb2fe:	f7ff ffb7 	bl	bb270 <__cmpdf2>
   bb302:	2800      	cmp	r0, #0
   bb304:	bf48      	it	mi
   bb306:	f110 0f00 	cmnmi.w	r0, #0
   bb30a:	bd01      	pop	{r0, pc}

000bb30c <__aeabi_dcmpeq>:
   bb30c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb310:	f7ff fff4 	bl	bb2fc <__aeabi_cdcmpeq>
   bb314:	bf0c      	ite	eq
   bb316:	2001      	moveq	r0, #1
   bb318:	2000      	movne	r0, #0
   bb31a:	f85d fb08 	ldr.w	pc, [sp], #8
   bb31e:	bf00      	nop

000bb320 <__aeabi_dcmplt>:
   bb320:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb324:	f7ff ffea 	bl	bb2fc <__aeabi_cdcmpeq>
   bb328:	bf34      	ite	cc
   bb32a:	2001      	movcc	r0, #1
   bb32c:	2000      	movcs	r0, #0
   bb32e:	f85d fb08 	ldr.w	pc, [sp], #8
   bb332:	bf00      	nop

000bb334 <__aeabi_dcmple>:
   bb334:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb338:	f7ff ffe0 	bl	bb2fc <__aeabi_cdcmpeq>
   bb33c:	bf94      	ite	ls
   bb33e:	2001      	movls	r0, #1
   bb340:	2000      	movhi	r0, #0
   bb342:	f85d fb08 	ldr.w	pc, [sp], #8
   bb346:	bf00      	nop

000bb348 <__aeabi_dcmpge>:
   bb348:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb34c:	f7ff ffce 	bl	bb2ec <__aeabi_cdrcmple>
   bb350:	bf94      	ite	ls
   bb352:	2001      	movls	r0, #1
   bb354:	2000      	movhi	r0, #0
   bb356:	f85d fb08 	ldr.w	pc, [sp], #8
   bb35a:	bf00      	nop

000bb35c <__aeabi_dcmpgt>:
   bb35c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb360:	f7ff ffc4 	bl	bb2ec <__aeabi_cdrcmple>
   bb364:	bf34      	ite	cc
   bb366:	2001      	movcc	r0, #1
   bb368:	2000      	movcs	r0, #0
   bb36a:	f85d fb08 	ldr.w	pc, [sp], #8
   bb36e:	bf00      	nop

000bb370 <__aeabi_dcmpun>:
   bb370:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb374:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb378:	d102      	bne.n	bb380 <__aeabi_dcmpun+0x10>
   bb37a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb37e:	d10a      	bne.n	bb396 <__aeabi_dcmpun+0x26>
   bb380:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb384:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb388:	d102      	bne.n	bb390 <__aeabi_dcmpun+0x20>
   bb38a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb38e:	d102      	bne.n	bb396 <__aeabi_dcmpun+0x26>
   bb390:	f04f 0000 	mov.w	r0, #0
   bb394:	4770      	bx	lr
   bb396:	f04f 0001 	mov.w	r0, #1
   bb39a:	4770      	bx	lr

000bb39c <__aeabi_d2uiz>:
   bb39c:	004a      	lsls	r2, r1, #1
   bb39e:	d211      	bcs.n	bb3c4 <__aeabi_d2uiz+0x28>
   bb3a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bb3a4:	d211      	bcs.n	bb3ca <__aeabi_d2uiz+0x2e>
   bb3a6:	d50d      	bpl.n	bb3c4 <__aeabi_d2uiz+0x28>
   bb3a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bb3ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bb3b0:	d40e      	bmi.n	bb3d0 <__aeabi_d2uiz+0x34>
   bb3b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb3b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bb3ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bb3be:	fa23 f002 	lsr.w	r0, r3, r2
   bb3c2:	4770      	bx	lr
   bb3c4:	f04f 0000 	mov.w	r0, #0
   bb3c8:	4770      	bx	lr
   bb3ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bb3ce:	d102      	bne.n	bb3d6 <__aeabi_d2uiz+0x3a>
   bb3d0:	f04f 30ff 	mov.w	r0, #4294967295
   bb3d4:	4770      	bx	lr
   bb3d6:	f04f 0000 	mov.w	r0, #0
   bb3da:	4770      	bx	lr

000bb3dc <__aeabi_d2f>:
   bb3dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bb3e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bb3e4:	bf24      	itt	cs
   bb3e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bb3ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bb3ee:	d90d      	bls.n	bb40c <__aeabi_d2f+0x30>
   bb3f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bb3f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bb3f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bb3fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bb400:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bb404:	bf08      	it	eq
   bb406:	f020 0001 	biceq.w	r0, r0, #1
   bb40a:	4770      	bx	lr
   bb40c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bb410:	d121      	bne.n	bb456 <__aeabi_d2f+0x7a>
   bb412:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bb416:	bfbc      	itt	lt
   bb418:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bb41c:	4770      	bxlt	lr
   bb41e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb422:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bb426:	f1c2 0218 	rsb	r2, r2, #24
   bb42a:	f1c2 0c20 	rsb	ip, r2, #32
   bb42e:	fa10 f30c 	lsls.w	r3, r0, ip
   bb432:	fa20 f002 	lsr.w	r0, r0, r2
   bb436:	bf18      	it	ne
   bb438:	f040 0001 	orrne.w	r0, r0, #1
   bb43c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb440:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bb444:	fa03 fc0c 	lsl.w	ip, r3, ip
   bb448:	ea40 000c 	orr.w	r0, r0, ip
   bb44c:	fa23 f302 	lsr.w	r3, r3, r2
   bb450:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bb454:	e7cc      	b.n	bb3f0 <__aeabi_d2f+0x14>
   bb456:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bb45a:	d107      	bne.n	bb46c <__aeabi_d2f+0x90>
   bb45c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bb460:	bf1e      	ittt	ne
   bb462:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bb466:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bb46a:	4770      	bxne	lr
   bb46c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bb470:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bb474:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bb478:	4770      	bx	lr
   bb47a:	bf00      	nop

000bb47c <__aeabi_frsub>:
   bb47c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   bb480:	e002      	b.n	bb488 <__addsf3>
   bb482:	bf00      	nop

000bb484 <__aeabi_fsub>:
   bb484:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000bb488 <__addsf3>:
   bb488:	0042      	lsls	r2, r0, #1
   bb48a:	bf1f      	itttt	ne
   bb48c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   bb490:	ea92 0f03 	teqne	r2, r3
   bb494:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   bb498:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   bb49c:	d06a      	beq.n	bb574 <__addsf3+0xec>
   bb49e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   bb4a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   bb4a6:	bfc1      	itttt	gt
   bb4a8:	18d2      	addgt	r2, r2, r3
   bb4aa:	4041      	eorgt	r1, r0
   bb4ac:	4048      	eorgt	r0, r1
   bb4ae:	4041      	eorgt	r1, r0
   bb4b0:	bfb8      	it	lt
   bb4b2:	425b      	neglt	r3, r3
   bb4b4:	2b19      	cmp	r3, #25
   bb4b6:	bf88      	it	hi
   bb4b8:	4770      	bxhi	lr
   bb4ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   bb4be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bb4c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   bb4c6:	bf18      	it	ne
   bb4c8:	4240      	negne	r0, r0
   bb4ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bb4ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   bb4d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   bb4d6:	bf18      	it	ne
   bb4d8:	4249      	negne	r1, r1
   bb4da:	ea92 0f03 	teq	r2, r3
   bb4de:	d03f      	beq.n	bb560 <__addsf3+0xd8>
   bb4e0:	f1a2 0201 	sub.w	r2, r2, #1
   bb4e4:	fa41 fc03 	asr.w	ip, r1, r3
   bb4e8:	eb10 000c 	adds.w	r0, r0, ip
   bb4ec:	f1c3 0320 	rsb	r3, r3, #32
   bb4f0:	fa01 f103 	lsl.w	r1, r1, r3
   bb4f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   bb4f8:	d502      	bpl.n	bb500 <__addsf3+0x78>
   bb4fa:	4249      	negs	r1, r1
   bb4fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   bb500:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   bb504:	d313      	bcc.n	bb52e <__addsf3+0xa6>
   bb506:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   bb50a:	d306      	bcc.n	bb51a <__addsf3+0x92>
   bb50c:	0840      	lsrs	r0, r0, #1
   bb50e:	ea4f 0131 	mov.w	r1, r1, rrx
   bb512:	f102 0201 	add.w	r2, r2, #1
   bb516:	2afe      	cmp	r2, #254	; 0xfe
   bb518:	d251      	bcs.n	bb5be <__addsf3+0x136>
   bb51a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   bb51e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   bb522:	bf08      	it	eq
   bb524:	f020 0001 	biceq.w	r0, r0, #1
   bb528:	ea40 0003 	orr.w	r0, r0, r3
   bb52c:	4770      	bx	lr
   bb52e:	0049      	lsls	r1, r1, #1
   bb530:	eb40 0000 	adc.w	r0, r0, r0
   bb534:	3a01      	subs	r2, #1
   bb536:	bf28      	it	cs
   bb538:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   bb53c:	d2ed      	bcs.n	bb51a <__addsf3+0x92>
   bb53e:	fab0 fc80 	clz	ip, r0
   bb542:	f1ac 0c08 	sub.w	ip, ip, #8
   bb546:	ebb2 020c 	subs.w	r2, r2, ip
   bb54a:	fa00 f00c 	lsl.w	r0, r0, ip
   bb54e:	bfaa      	itet	ge
   bb550:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   bb554:	4252      	neglt	r2, r2
   bb556:	4318      	orrge	r0, r3
   bb558:	bfbc      	itt	lt
   bb55a:	40d0      	lsrlt	r0, r2
   bb55c:	4318      	orrlt	r0, r3
   bb55e:	4770      	bx	lr
   bb560:	f092 0f00 	teq	r2, #0
   bb564:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   bb568:	bf06      	itte	eq
   bb56a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   bb56e:	3201      	addeq	r2, #1
   bb570:	3b01      	subne	r3, #1
   bb572:	e7b5      	b.n	bb4e0 <__addsf3+0x58>
   bb574:	ea4f 0341 	mov.w	r3, r1, lsl #1
   bb578:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   bb57c:	bf18      	it	ne
   bb57e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   bb582:	d021      	beq.n	bb5c8 <__addsf3+0x140>
   bb584:	ea92 0f03 	teq	r2, r3
   bb588:	d004      	beq.n	bb594 <__addsf3+0x10c>
   bb58a:	f092 0f00 	teq	r2, #0
   bb58e:	bf08      	it	eq
   bb590:	4608      	moveq	r0, r1
   bb592:	4770      	bx	lr
   bb594:	ea90 0f01 	teq	r0, r1
   bb598:	bf1c      	itt	ne
   bb59a:	2000      	movne	r0, #0
   bb59c:	4770      	bxne	lr
   bb59e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   bb5a2:	d104      	bne.n	bb5ae <__addsf3+0x126>
   bb5a4:	0040      	lsls	r0, r0, #1
   bb5a6:	bf28      	it	cs
   bb5a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   bb5ac:	4770      	bx	lr
   bb5ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   bb5b2:	bf3c      	itt	cc
   bb5b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   bb5b8:	4770      	bxcc	lr
   bb5ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   bb5be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   bb5c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bb5c6:	4770      	bx	lr
   bb5c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   bb5cc:	bf16      	itet	ne
   bb5ce:	4608      	movne	r0, r1
   bb5d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   bb5d4:	4601      	movne	r1, r0
   bb5d6:	0242      	lsls	r2, r0, #9
   bb5d8:	bf06      	itte	eq
   bb5da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   bb5de:	ea90 0f01 	teqeq	r0, r1
   bb5e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   bb5e6:	4770      	bx	lr

000bb5e8 <__aeabi_ui2f>:
   bb5e8:	f04f 0300 	mov.w	r3, #0
   bb5ec:	e004      	b.n	bb5f8 <__aeabi_i2f+0x8>
   bb5ee:	bf00      	nop

000bb5f0 <__aeabi_i2f>:
   bb5f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   bb5f4:	bf48      	it	mi
   bb5f6:	4240      	negmi	r0, r0
   bb5f8:	ea5f 0c00 	movs.w	ip, r0
   bb5fc:	bf08      	it	eq
   bb5fe:	4770      	bxeq	lr
   bb600:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   bb604:	4601      	mov	r1, r0
   bb606:	f04f 0000 	mov.w	r0, #0
   bb60a:	e01c      	b.n	bb646 <__aeabi_l2f+0x2a>

000bb60c <__aeabi_ul2f>:
   bb60c:	ea50 0201 	orrs.w	r2, r0, r1
   bb610:	bf08      	it	eq
   bb612:	4770      	bxeq	lr
   bb614:	f04f 0300 	mov.w	r3, #0
   bb618:	e00a      	b.n	bb630 <__aeabi_l2f+0x14>
   bb61a:	bf00      	nop

000bb61c <__aeabi_l2f>:
   bb61c:	ea50 0201 	orrs.w	r2, r0, r1
   bb620:	bf08      	it	eq
   bb622:	4770      	bxeq	lr
   bb624:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   bb628:	d502      	bpl.n	bb630 <__aeabi_l2f+0x14>
   bb62a:	4240      	negs	r0, r0
   bb62c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb630:	ea5f 0c01 	movs.w	ip, r1
   bb634:	bf02      	ittt	eq
   bb636:	4684      	moveq	ip, r0
   bb638:	4601      	moveq	r1, r0
   bb63a:	2000      	moveq	r0, #0
   bb63c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   bb640:	bf08      	it	eq
   bb642:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   bb646:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   bb64a:	fabc f28c 	clz	r2, ip
   bb64e:	3a08      	subs	r2, #8
   bb650:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   bb654:	db10      	blt.n	bb678 <__aeabi_l2f+0x5c>
   bb656:	fa01 fc02 	lsl.w	ip, r1, r2
   bb65a:	4463      	add	r3, ip
   bb65c:	fa00 fc02 	lsl.w	ip, r0, r2
   bb660:	f1c2 0220 	rsb	r2, r2, #32
   bb664:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bb668:	fa20 f202 	lsr.w	r2, r0, r2
   bb66c:	eb43 0002 	adc.w	r0, r3, r2
   bb670:	bf08      	it	eq
   bb672:	f020 0001 	biceq.w	r0, r0, #1
   bb676:	4770      	bx	lr
   bb678:	f102 0220 	add.w	r2, r2, #32
   bb67c:	fa01 fc02 	lsl.w	ip, r1, r2
   bb680:	f1c2 0220 	rsb	r2, r2, #32
   bb684:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   bb688:	fa21 f202 	lsr.w	r2, r1, r2
   bb68c:	eb43 0002 	adc.w	r0, r3, r2
   bb690:	bf08      	it	eq
   bb692:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   bb696:	4770      	bx	lr

000bb698 <__aeabi_ldivmod>:
   bb698:	b97b      	cbnz	r3, bb6ba <__aeabi_ldivmod+0x22>
   bb69a:	b972      	cbnz	r2, bb6ba <__aeabi_ldivmod+0x22>
   bb69c:	2900      	cmp	r1, #0
   bb69e:	bfbe      	ittt	lt
   bb6a0:	2000      	movlt	r0, #0
   bb6a2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   bb6a6:	e006      	blt.n	bb6b6 <__aeabi_ldivmod+0x1e>
   bb6a8:	bf08      	it	eq
   bb6aa:	2800      	cmpeq	r0, #0
   bb6ac:	bf1c      	itt	ne
   bb6ae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   bb6b2:	f04f 30ff 	movne.w	r0, #4294967295
   bb6b6:	f000 b9db 	b.w	bba70 <__aeabi_idiv0>
   bb6ba:	f1ad 0c08 	sub.w	ip, sp, #8
   bb6be:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   bb6c2:	2900      	cmp	r1, #0
   bb6c4:	db09      	blt.n	bb6da <__aeabi_ldivmod+0x42>
   bb6c6:	2b00      	cmp	r3, #0
   bb6c8:	db1a      	blt.n	bb700 <__aeabi_ldivmod+0x68>
   bb6ca:	f000 f869 	bl	bb7a0 <__udivmoddi4>
   bb6ce:	f8dd e004 	ldr.w	lr, [sp, #4]
   bb6d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   bb6d6:	b004      	add	sp, #16
   bb6d8:	4770      	bx	lr
   bb6da:	4240      	negs	r0, r0
   bb6dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb6e0:	2b00      	cmp	r3, #0
   bb6e2:	db1b      	blt.n	bb71c <__aeabi_ldivmod+0x84>
   bb6e4:	f000 f85c 	bl	bb7a0 <__udivmoddi4>
   bb6e8:	f8dd e004 	ldr.w	lr, [sp, #4]
   bb6ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   bb6f0:	b004      	add	sp, #16
   bb6f2:	4240      	negs	r0, r0
   bb6f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb6f8:	4252      	negs	r2, r2
   bb6fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bb6fe:	4770      	bx	lr
   bb700:	4252      	negs	r2, r2
   bb702:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bb706:	f000 f84b 	bl	bb7a0 <__udivmoddi4>
   bb70a:	f8dd e004 	ldr.w	lr, [sp, #4]
   bb70e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   bb712:	b004      	add	sp, #16
   bb714:	4240      	negs	r0, r0
   bb716:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb71a:	4770      	bx	lr
   bb71c:	4252      	negs	r2, r2
   bb71e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bb722:	f000 f83d 	bl	bb7a0 <__udivmoddi4>
   bb726:	f8dd e004 	ldr.w	lr, [sp, #4]
   bb72a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   bb72e:	b004      	add	sp, #16
   bb730:	4252      	negs	r2, r2
   bb732:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bb736:	4770      	bx	lr

000bb738 <__aeabi_f2lz>:
   bb738:	ee07 0a90 	vmov	s15, r0
   bb73c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   bb740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb744:	d401      	bmi.n	bb74a <__aeabi_f2lz+0x12>
   bb746:	f000 b80b 	b.w	bb760 <__aeabi_f2ulz>
   bb74a:	eef1 7a67 	vneg.f32	s15, s15
   bb74e:	b508      	push	{r3, lr}
   bb750:	ee17 0a90 	vmov	r0, s15
   bb754:	f000 f804 	bl	bb760 <__aeabi_f2ulz>
   bb758:	4240      	negs	r0, r0
   bb75a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb75e:	bd08      	pop	{r3, pc}

000bb760 <__aeabi_f2ulz>:
   bb760:	b5d0      	push	{r4, r6, r7, lr}
   bb762:	f7ff fb13 	bl	bad8c <__aeabi_f2d>
   bb766:	4b0c      	ldr	r3, [pc, #48]	; (bb798 <__aeabi_f2ulz+0x38>)
   bb768:	2200      	movs	r2, #0
   bb76a:	4606      	mov	r6, r0
   bb76c:	460f      	mov	r7, r1
   bb76e:	f7ff fb65 	bl	bae3c <__aeabi_dmul>
   bb772:	f7ff fe13 	bl	bb39c <__aeabi_d2uiz>
   bb776:	4604      	mov	r4, r0
   bb778:	f7ff fae6 	bl	bad48 <__aeabi_ui2d>
   bb77c:	4b07      	ldr	r3, [pc, #28]	; (bb79c <__aeabi_f2ulz+0x3c>)
   bb77e:	2200      	movs	r2, #0
   bb780:	f7ff fb5c 	bl	bae3c <__aeabi_dmul>
   bb784:	4602      	mov	r2, r0
   bb786:	460b      	mov	r3, r1
   bb788:	4630      	mov	r0, r6
   bb78a:	4639      	mov	r1, r7
   bb78c:	f7ff f99e 	bl	baacc <__aeabi_dsub>
   bb790:	f7ff fe04 	bl	bb39c <__aeabi_d2uiz>
   bb794:	4621      	mov	r1, r4
   bb796:	bdd0      	pop	{r4, r6, r7, pc}
   bb798:	3df00000 	.word	0x3df00000
   bb79c:	41f00000 	.word	0x41f00000

000bb7a0 <__udivmoddi4>:
   bb7a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb7a4:	9d08      	ldr	r5, [sp, #32]
   bb7a6:	4604      	mov	r4, r0
   bb7a8:	468e      	mov	lr, r1
   bb7aa:	2b00      	cmp	r3, #0
   bb7ac:	d14d      	bne.n	bb84a <__udivmoddi4+0xaa>
   bb7ae:	428a      	cmp	r2, r1
   bb7b0:	4694      	mov	ip, r2
   bb7b2:	d969      	bls.n	bb888 <__udivmoddi4+0xe8>
   bb7b4:	fab2 f282 	clz	r2, r2
   bb7b8:	b152      	cbz	r2, bb7d0 <__udivmoddi4+0x30>
   bb7ba:	fa01 f302 	lsl.w	r3, r1, r2
   bb7be:	f1c2 0120 	rsb	r1, r2, #32
   bb7c2:	fa20 f101 	lsr.w	r1, r0, r1
   bb7c6:	fa0c fc02 	lsl.w	ip, ip, r2
   bb7ca:	ea41 0e03 	orr.w	lr, r1, r3
   bb7ce:	4094      	lsls	r4, r2
   bb7d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
   bb7d4:	0c21      	lsrs	r1, r4, #16
   bb7d6:	fbbe f6f8 	udiv	r6, lr, r8
   bb7da:	fa1f f78c 	uxth.w	r7, ip
   bb7de:	fb08 e316 	mls	r3, r8, r6, lr
   bb7e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   bb7e6:	fb06 f107 	mul.w	r1, r6, r7
   bb7ea:	4299      	cmp	r1, r3
   bb7ec:	d90a      	bls.n	bb804 <__udivmoddi4+0x64>
   bb7ee:	eb1c 0303 	adds.w	r3, ip, r3
   bb7f2:	f106 30ff 	add.w	r0, r6, #4294967295
   bb7f6:	f080 811f 	bcs.w	bba38 <__udivmoddi4+0x298>
   bb7fa:	4299      	cmp	r1, r3
   bb7fc:	f240 811c 	bls.w	bba38 <__udivmoddi4+0x298>
   bb800:	3e02      	subs	r6, #2
   bb802:	4463      	add	r3, ip
   bb804:	1a5b      	subs	r3, r3, r1
   bb806:	b2a4      	uxth	r4, r4
   bb808:	fbb3 f0f8 	udiv	r0, r3, r8
   bb80c:	fb08 3310 	mls	r3, r8, r0, r3
   bb810:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   bb814:	fb00 f707 	mul.w	r7, r0, r7
   bb818:	42a7      	cmp	r7, r4
   bb81a:	d90a      	bls.n	bb832 <__udivmoddi4+0x92>
   bb81c:	eb1c 0404 	adds.w	r4, ip, r4
   bb820:	f100 33ff 	add.w	r3, r0, #4294967295
   bb824:	f080 810a 	bcs.w	bba3c <__udivmoddi4+0x29c>
   bb828:	42a7      	cmp	r7, r4
   bb82a:	f240 8107 	bls.w	bba3c <__udivmoddi4+0x29c>
   bb82e:	4464      	add	r4, ip
   bb830:	3802      	subs	r0, #2
   bb832:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   bb836:	1be4      	subs	r4, r4, r7
   bb838:	2600      	movs	r6, #0
   bb83a:	b11d      	cbz	r5, bb844 <__udivmoddi4+0xa4>
   bb83c:	40d4      	lsrs	r4, r2
   bb83e:	2300      	movs	r3, #0
   bb840:	e9c5 4300 	strd	r4, r3, [r5]
   bb844:	4631      	mov	r1, r6
   bb846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb84a:	428b      	cmp	r3, r1
   bb84c:	d909      	bls.n	bb862 <__udivmoddi4+0xc2>
   bb84e:	2d00      	cmp	r5, #0
   bb850:	f000 80ef 	beq.w	bba32 <__udivmoddi4+0x292>
   bb854:	2600      	movs	r6, #0
   bb856:	e9c5 0100 	strd	r0, r1, [r5]
   bb85a:	4630      	mov	r0, r6
   bb85c:	4631      	mov	r1, r6
   bb85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb862:	fab3 f683 	clz	r6, r3
   bb866:	2e00      	cmp	r6, #0
   bb868:	d14a      	bne.n	bb900 <__udivmoddi4+0x160>
   bb86a:	428b      	cmp	r3, r1
   bb86c:	d302      	bcc.n	bb874 <__udivmoddi4+0xd4>
   bb86e:	4282      	cmp	r2, r0
   bb870:	f200 80f9 	bhi.w	bba66 <__udivmoddi4+0x2c6>
   bb874:	1a84      	subs	r4, r0, r2
   bb876:	eb61 0303 	sbc.w	r3, r1, r3
   bb87a:	2001      	movs	r0, #1
   bb87c:	469e      	mov	lr, r3
   bb87e:	2d00      	cmp	r5, #0
   bb880:	d0e0      	beq.n	bb844 <__udivmoddi4+0xa4>
   bb882:	e9c5 4e00 	strd	r4, lr, [r5]
   bb886:	e7dd      	b.n	bb844 <__udivmoddi4+0xa4>
   bb888:	b902      	cbnz	r2, bb88c <__udivmoddi4+0xec>
   bb88a:	deff      	udf	#255	; 0xff
   bb88c:	fab2 f282 	clz	r2, r2
   bb890:	2a00      	cmp	r2, #0
   bb892:	f040 8092 	bne.w	bb9ba <__udivmoddi4+0x21a>
   bb896:	eba1 010c 	sub.w	r1, r1, ip
   bb89a:	ea4f 471c 	mov.w	r7, ip, lsr #16
   bb89e:	fa1f fe8c 	uxth.w	lr, ip
   bb8a2:	2601      	movs	r6, #1
   bb8a4:	0c20      	lsrs	r0, r4, #16
   bb8a6:	fbb1 f3f7 	udiv	r3, r1, r7
   bb8aa:	fb07 1113 	mls	r1, r7, r3, r1
   bb8ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   bb8b2:	fb0e f003 	mul.w	r0, lr, r3
   bb8b6:	4288      	cmp	r0, r1
   bb8b8:	d908      	bls.n	bb8cc <__udivmoddi4+0x12c>
   bb8ba:	eb1c 0101 	adds.w	r1, ip, r1
   bb8be:	f103 38ff 	add.w	r8, r3, #4294967295
   bb8c2:	d202      	bcs.n	bb8ca <__udivmoddi4+0x12a>
   bb8c4:	4288      	cmp	r0, r1
   bb8c6:	f200 80cb 	bhi.w	bba60 <__udivmoddi4+0x2c0>
   bb8ca:	4643      	mov	r3, r8
   bb8cc:	1a09      	subs	r1, r1, r0
   bb8ce:	b2a4      	uxth	r4, r4
   bb8d0:	fbb1 f0f7 	udiv	r0, r1, r7
   bb8d4:	fb07 1110 	mls	r1, r7, r0, r1
   bb8d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   bb8dc:	fb0e fe00 	mul.w	lr, lr, r0
   bb8e0:	45a6      	cmp	lr, r4
   bb8e2:	d908      	bls.n	bb8f6 <__udivmoddi4+0x156>
   bb8e4:	eb1c 0404 	adds.w	r4, ip, r4
   bb8e8:	f100 31ff 	add.w	r1, r0, #4294967295
   bb8ec:	d202      	bcs.n	bb8f4 <__udivmoddi4+0x154>
   bb8ee:	45a6      	cmp	lr, r4
   bb8f0:	f200 80bb 	bhi.w	bba6a <__udivmoddi4+0x2ca>
   bb8f4:	4608      	mov	r0, r1
   bb8f6:	eba4 040e 	sub.w	r4, r4, lr
   bb8fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   bb8fe:	e79c      	b.n	bb83a <__udivmoddi4+0x9a>
   bb900:	f1c6 0720 	rsb	r7, r6, #32
   bb904:	40b3      	lsls	r3, r6
   bb906:	fa22 fc07 	lsr.w	ip, r2, r7
   bb90a:	ea4c 0c03 	orr.w	ip, ip, r3
   bb90e:	fa20 f407 	lsr.w	r4, r0, r7
   bb912:	fa01 f306 	lsl.w	r3, r1, r6
   bb916:	431c      	orrs	r4, r3
   bb918:	40f9      	lsrs	r1, r7
   bb91a:	ea4f 491c 	mov.w	r9, ip, lsr #16
   bb91e:	fa00 f306 	lsl.w	r3, r0, r6
   bb922:	fbb1 f8f9 	udiv	r8, r1, r9
   bb926:	0c20      	lsrs	r0, r4, #16
   bb928:	fa1f fe8c 	uxth.w	lr, ip
   bb92c:	fb09 1118 	mls	r1, r9, r8, r1
   bb930:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   bb934:	fb08 f00e 	mul.w	r0, r8, lr
   bb938:	4288      	cmp	r0, r1
   bb93a:	fa02 f206 	lsl.w	r2, r2, r6
   bb93e:	d90b      	bls.n	bb958 <__udivmoddi4+0x1b8>
   bb940:	eb1c 0101 	adds.w	r1, ip, r1
   bb944:	f108 3aff 	add.w	sl, r8, #4294967295
   bb948:	f080 8088 	bcs.w	bba5c <__udivmoddi4+0x2bc>
   bb94c:	4288      	cmp	r0, r1
   bb94e:	f240 8085 	bls.w	bba5c <__udivmoddi4+0x2bc>
   bb952:	f1a8 0802 	sub.w	r8, r8, #2
   bb956:	4461      	add	r1, ip
   bb958:	1a09      	subs	r1, r1, r0
   bb95a:	b2a4      	uxth	r4, r4
   bb95c:	fbb1 f0f9 	udiv	r0, r1, r9
   bb960:	fb09 1110 	mls	r1, r9, r0, r1
   bb964:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   bb968:	fb00 fe0e 	mul.w	lr, r0, lr
   bb96c:	458e      	cmp	lr, r1
   bb96e:	d908      	bls.n	bb982 <__udivmoddi4+0x1e2>
   bb970:	eb1c 0101 	adds.w	r1, ip, r1
   bb974:	f100 34ff 	add.w	r4, r0, #4294967295
   bb978:	d26c      	bcs.n	bba54 <__udivmoddi4+0x2b4>
   bb97a:	458e      	cmp	lr, r1
   bb97c:	d96a      	bls.n	bba54 <__udivmoddi4+0x2b4>
   bb97e:	3802      	subs	r0, #2
   bb980:	4461      	add	r1, ip
   bb982:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   bb986:	fba0 9402 	umull	r9, r4, r0, r2
   bb98a:	eba1 010e 	sub.w	r1, r1, lr
   bb98e:	42a1      	cmp	r1, r4
   bb990:	46c8      	mov	r8, r9
   bb992:	46a6      	mov	lr, r4
   bb994:	d356      	bcc.n	bba44 <__udivmoddi4+0x2a4>
   bb996:	d053      	beq.n	bba40 <__udivmoddi4+0x2a0>
   bb998:	b15d      	cbz	r5, bb9b2 <__udivmoddi4+0x212>
   bb99a:	ebb3 0208 	subs.w	r2, r3, r8
   bb99e:	eb61 010e 	sbc.w	r1, r1, lr
   bb9a2:	fa01 f707 	lsl.w	r7, r1, r7
   bb9a6:	fa22 f306 	lsr.w	r3, r2, r6
   bb9aa:	40f1      	lsrs	r1, r6
   bb9ac:	431f      	orrs	r7, r3
   bb9ae:	e9c5 7100 	strd	r7, r1, [r5]
   bb9b2:	2600      	movs	r6, #0
   bb9b4:	4631      	mov	r1, r6
   bb9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb9ba:	f1c2 0320 	rsb	r3, r2, #32
   bb9be:	40d8      	lsrs	r0, r3
   bb9c0:	fa0c fc02 	lsl.w	ip, ip, r2
   bb9c4:	fa21 f303 	lsr.w	r3, r1, r3
   bb9c8:	4091      	lsls	r1, r2
   bb9ca:	4301      	orrs	r1, r0
   bb9cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
   bb9d0:	fa1f fe8c 	uxth.w	lr, ip
   bb9d4:	fbb3 f0f7 	udiv	r0, r3, r7
   bb9d8:	fb07 3610 	mls	r6, r7, r0, r3
   bb9dc:	0c0b      	lsrs	r3, r1, #16
   bb9de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   bb9e2:	fb00 f60e 	mul.w	r6, r0, lr
   bb9e6:	429e      	cmp	r6, r3
   bb9e8:	fa04 f402 	lsl.w	r4, r4, r2
   bb9ec:	d908      	bls.n	bba00 <__udivmoddi4+0x260>
   bb9ee:	eb1c 0303 	adds.w	r3, ip, r3
   bb9f2:	f100 38ff 	add.w	r8, r0, #4294967295
   bb9f6:	d22f      	bcs.n	bba58 <__udivmoddi4+0x2b8>
   bb9f8:	429e      	cmp	r6, r3
   bb9fa:	d92d      	bls.n	bba58 <__udivmoddi4+0x2b8>
   bb9fc:	3802      	subs	r0, #2
   bb9fe:	4463      	add	r3, ip
   bba00:	1b9b      	subs	r3, r3, r6
   bba02:	b289      	uxth	r1, r1
   bba04:	fbb3 f6f7 	udiv	r6, r3, r7
   bba08:	fb07 3316 	mls	r3, r7, r6, r3
   bba0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   bba10:	fb06 f30e 	mul.w	r3, r6, lr
   bba14:	428b      	cmp	r3, r1
   bba16:	d908      	bls.n	bba2a <__udivmoddi4+0x28a>
   bba18:	eb1c 0101 	adds.w	r1, ip, r1
   bba1c:	f106 38ff 	add.w	r8, r6, #4294967295
   bba20:	d216      	bcs.n	bba50 <__udivmoddi4+0x2b0>
   bba22:	428b      	cmp	r3, r1
   bba24:	d914      	bls.n	bba50 <__udivmoddi4+0x2b0>
   bba26:	3e02      	subs	r6, #2
   bba28:	4461      	add	r1, ip
   bba2a:	1ac9      	subs	r1, r1, r3
   bba2c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   bba30:	e738      	b.n	bb8a4 <__udivmoddi4+0x104>
   bba32:	462e      	mov	r6, r5
   bba34:	4628      	mov	r0, r5
   bba36:	e705      	b.n	bb844 <__udivmoddi4+0xa4>
   bba38:	4606      	mov	r6, r0
   bba3a:	e6e3      	b.n	bb804 <__udivmoddi4+0x64>
   bba3c:	4618      	mov	r0, r3
   bba3e:	e6f8      	b.n	bb832 <__udivmoddi4+0x92>
   bba40:	454b      	cmp	r3, r9
   bba42:	d2a9      	bcs.n	bb998 <__udivmoddi4+0x1f8>
   bba44:	ebb9 0802 	subs.w	r8, r9, r2
   bba48:	eb64 0e0c 	sbc.w	lr, r4, ip
   bba4c:	3801      	subs	r0, #1
   bba4e:	e7a3      	b.n	bb998 <__udivmoddi4+0x1f8>
   bba50:	4646      	mov	r6, r8
   bba52:	e7ea      	b.n	bba2a <__udivmoddi4+0x28a>
   bba54:	4620      	mov	r0, r4
   bba56:	e794      	b.n	bb982 <__udivmoddi4+0x1e2>
   bba58:	4640      	mov	r0, r8
   bba5a:	e7d1      	b.n	bba00 <__udivmoddi4+0x260>
   bba5c:	46d0      	mov	r8, sl
   bba5e:	e77b      	b.n	bb958 <__udivmoddi4+0x1b8>
   bba60:	3b02      	subs	r3, #2
   bba62:	4461      	add	r1, ip
   bba64:	e732      	b.n	bb8cc <__udivmoddi4+0x12c>
   bba66:	4630      	mov	r0, r6
   bba68:	e709      	b.n	bb87e <__udivmoddi4+0xde>
   bba6a:	4464      	add	r4, ip
   bba6c:	3802      	subs	r0, #2
   bba6e:	e742      	b.n	bb8f6 <__udivmoddi4+0x156>

000bba70 <__aeabi_idiv0>:
   bba70:	4770      	bx	lr
   bba72:	bf00      	nop

000bba74 <asctime_r>:
   bba74:	b510      	push	{r4, lr}
   bba76:	460c      	mov	r4, r1
   bba78:	6941      	ldr	r1, [r0, #20]
   bba7a:	6903      	ldr	r3, [r0, #16]
   bba7c:	6982      	ldr	r2, [r0, #24]
   bba7e:	b086      	sub	sp, #24
   bba80:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bba84:	9104      	str	r1, [sp, #16]
   bba86:	6801      	ldr	r1, [r0, #0]
   bba88:	9103      	str	r1, [sp, #12]
   bba8a:	6841      	ldr	r1, [r0, #4]
   bba8c:	9102      	str	r1, [sp, #8]
   bba8e:	6881      	ldr	r1, [r0, #8]
   bba90:	9101      	str	r1, [sp, #4]
   bba92:	68c1      	ldr	r1, [r0, #12]
   bba94:	9100      	str	r1, [sp, #0]
   bba96:	4907      	ldr	r1, [pc, #28]	; (bbab4 <asctime_r+0x40>)
   bba98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bba9c:	440b      	add	r3, r1
   bba9e:	4906      	ldr	r1, [pc, #24]	; (bbab8 <asctime_r+0x44>)
   bbaa0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bbaa4:	440a      	add	r2, r1
   bbaa6:	4620      	mov	r0, r4
   bbaa8:	4904      	ldr	r1, [pc, #16]	; (bbabc <asctime_r+0x48>)
   bbaaa:	f7fc faa9 	bl	b8000 <siprintf>
   bbaae:	4620      	mov	r0, r4
   bbab0:	b006      	add	sp, #24
   bbab2:	bd10      	pop	{r4, pc}
   bbab4:	000bcce5 	.word	0x000bcce5
   bbab8:	000bccd0 	.word	0x000bccd0
   bbabc:	000bccb0 	.word	0x000bccb0

000bbac0 <atexit>:
   bbac0:	2300      	movs	r3, #0
   bbac2:	4601      	mov	r1, r0
   bbac4:	461a      	mov	r2, r3
   bbac6:	4618      	mov	r0, r3
   bbac8:	f000 b952 	b.w	bbd70 <__register_exitproc>

000bbacc <atoi>:
   bbacc:	220a      	movs	r2, #10
   bbace:	2100      	movs	r1, #0
   bbad0:	f000 b944 	b.w	bbd5c <strtol>

000bbad4 <ldiv>:
   bbad4:	2900      	cmp	r1, #0
   bbad6:	b510      	push	{r4, lr}
   bbad8:	fb91 f4f2 	sdiv	r4, r1, r2
   bbadc:	fb02 1314 	mls	r3, r2, r4, r1
   bbae0:	db06      	blt.n	bbaf0 <ldiv+0x1c>
   bbae2:	2b00      	cmp	r3, #0
   bbae4:	da01      	bge.n	bbaea <ldiv+0x16>
   bbae6:	3401      	adds	r4, #1
   bbae8:	1a9b      	subs	r3, r3, r2
   bbaea:	e9c0 4300 	strd	r4, r3, [r0]
   bbaee:	bd10      	pop	{r4, pc}
   bbaf0:	2b00      	cmp	r3, #0
   bbaf2:	bfc4      	itt	gt
   bbaf4:	f104 34ff 	addgt.w	r4, r4, #4294967295
   bbaf8:	189b      	addgt	r3, r3, r2
   bbafa:	e7f6      	b.n	bbaea <ldiv+0x16>

000bbafc <memcpy>:
   bbafc:	440a      	add	r2, r1
   bbafe:	4291      	cmp	r1, r2
   bbb00:	f100 33ff 	add.w	r3, r0, #4294967295
   bbb04:	d100      	bne.n	bbb08 <memcpy+0xc>
   bbb06:	4770      	bx	lr
   bbb08:	b510      	push	{r4, lr}
   bbb0a:	f811 4b01 	ldrb.w	r4, [r1], #1
   bbb0e:	f803 4f01 	strb.w	r4, [r3, #1]!
   bbb12:	4291      	cmp	r1, r2
   bbb14:	d1f9      	bne.n	bbb0a <memcpy+0xe>
   bbb16:	bd10      	pop	{r4, pc}

000bbb18 <memmove>:
   bbb18:	4288      	cmp	r0, r1
   bbb1a:	b510      	push	{r4, lr}
   bbb1c:	eb01 0402 	add.w	r4, r1, r2
   bbb20:	d902      	bls.n	bbb28 <memmove+0x10>
   bbb22:	4284      	cmp	r4, r0
   bbb24:	4623      	mov	r3, r4
   bbb26:	d807      	bhi.n	bbb38 <memmove+0x20>
   bbb28:	1e43      	subs	r3, r0, #1
   bbb2a:	42a1      	cmp	r1, r4
   bbb2c:	d008      	beq.n	bbb40 <memmove+0x28>
   bbb2e:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbb32:	f803 2f01 	strb.w	r2, [r3, #1]!
   bbb36:	e7f8      	b.n	bbb2a <memmove+0x12>
   bbb38:	4402      	add	r2, r0
   bbb3a:	4601      	mov	r1, r0
   bbb3c:	428a      	cmp	r2, r1
   bbb3e:	d100      	bne.n	bbb42 <memmove+0x2a>
   bbb40:	bd10      	pop	{r4, pc}
   bbb42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bbb46:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bbb4a:	e7f7      	b.n	bbb3c <memmove+0x24>

000bbb4c <memset>:
   bbb4c:	4402      	add	r2, r0
   bbb4e:	4603      	mov	r3, r0
   bbb50:	4293      	cmp	r3, r2
   bbb52:	d100      	bne.n	bbb56 <memset+0xa>
   bbb54:	4770      	bx	lr
   bbb56:	f803 1b01 	strb.w	r1, [r3], #1
   bbb5a:	e7f9      	b.n	bbb50 <memset+0x4>

000bbb5c <srand>:
   bbb5c:	b538      	push	{r3, r4, r5, lr}
   bbb5e:	4b10      	ldr	r3, [pc, #64]	; (bbba0 <srand+0x44>)
   bbb60:	681d      	ldr	r5, [r3, #0]
   bbb62:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbb64:	4604      	mov	r4, r0
   bbb66:	b9b3      	cbnz	r3, bbb96 <srand+0x3a>
   bbb68:	2018      	movs	r0, #24
   bbb6a:	f7fc fa29 	bl	b7fc0 <malloc>
   bbb6e:	4602      	mov	r2, r0
   bbb70:	63a8      	str	r0, [r5, #56]	; 0x38
   bbb72:	b920      	cbnz	r0, bbb7e <srand+0x22>
   bbb74:	4b0b      	ldr	r3, [pc, #44]	; (bbba4 <srand+0x48>)
   bbb76:	480c      	ldr	r0, [pc, #48]	; (bbba8 <srand+0x4c>)
   bbb78:	2142      	movs	r1, #66	; 0x42
   bbb7a:	f7fc fa59 	bl	b8030 <__assert_func>
   bbb7e:	490b      	ldr	r1, [pc, #44]	; (bbbac <srand+0x50>)
   bbb80:	4b0b      	ldr	r3, [pc, #44]	; (bbbb0 <srand+0x54>)
   bbb82:	e9c0 1300 	strd	r1, r3, [r0]
   bbb86:	4b0b      	ldr	r3, [pc, #44]	; (bbbb4 <srand+0x58>)
   bbb88:	6083      	str	r3, [r0, #8]
   bbb8a:	230b      	movs	r3, #11
   bbb8c:	8183      	strh	r3, [r0, #12]
   bbb8e:	2100      	movs	r1, #0
   bbb90:	2001      	movs	r0, #1
   bbb92:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bbb96:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbb98:	2200      	movs	r2, #0
   bbb9a:	611c      	str	r4, [r3, #16]
   bbb9c:	615a      	str	r2, [r3, #20]
   bbb9e:	bd38      	pop	{r3, r4, r5, pc}
   bbba0:	2003deb8 	.word	0x2003deb8
   bbba4:	000bcd09 	.word	0x000bcd09
   bbba8:	000bcd20 	.word	0x000bcd20
   bbbac:	abcd330e 	.word	0xabcd330e
   bbbb0:	e66d1234 	.word	0xe66d1234
   bbbb4:	0005deec 	.word	0x0005deec

000bbbb8 <strcmp>:
   bbbb8:	f810 2b01 	ldrb.w	r2, [r0], #1
   bbbbc:	f811 3b01 	ldrb.w	r3, [r1], #1
   bbbc0:	2a01      	cmp	r2, #1
   bbbc2:	bf28      	it	cs
   bbbc4:	429a      	cmpcs	r2, r3
   bbbc6:	d0f7      	beq.n	bbbb8 <strcmp>
   bbbc8:	1ad0      	subs	r0, r2, r3
   bbbca:	4770      	bx	lr

000bbbcc <strcpy>:
   bbbcc:	4603      	mov	r3, r0
   bbbce:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbbd2:	f803 2b01 	strb.w	r2, [r3], #1
   bbbd6:	2a00      	cmp	r2, #0
   bbbd8:	d1f9      	bne.n	bbbce <strcpy+0x2>
   bbbda:	4770      	bx	lr

000bbbdc <strlen>:
   bbbdc:	4603      	mov	r3, r0
   bbbde:	f813 2b01 	ldrb.w	r2, [r3], #1
   bbbe2:	2a00      	cmp	r2, #0
   bbbe4:	d1fb      	bne.n	bbbde <strlen+0x2>
   bbbe6:	1a18      	subs	r0, r3, r0
   bbbe8:	3801      	subs	r0, #1
   bbbea:	4770      	bx	lr

000bbbec <strncasecmp>:
   bbbec:	b570      	push	{r4, r5, r6, lr}
   bbbee:	4e0f      	ldr	r6, [pc, #60]	; (bbc2c <strncasecmp+0x40>)
   bbbf0:	4604      	mov	r4, r0
   bbbf2:	440a      	add	r2, r1
   bbbf4:	428a      	cmp	r2, r1
   bbbf6:	d101      	bne.n	bbbfc <strncasecmp+0x10>
   bbbf8:	2000      	movs	r0, #0
   bbbfa:	e013      	b.n	bbc24 <strncasecmp+0x38>
   bbbfc:	f814 3b01 	ldrb.w	r3, [r4], #1
   bbc00:	5d98      	ldrb	r0, [r3, r6]
   bbc02:	f000 0003 	and.w	r0, r0, #3
   bbc06:	2801      	cmp	r0, #1
   bbc08:	f811 0b01 	ldrb.w	r0, [r1], #1
   bbc0c:	5c35      	ldrb	r5, [r6, r0]
   bbc0e:	f005 0503 	and.w	r5, r5, #3
   bbc12:	bf08      	it	eq
   bbc14:	3320      	addeq	r3, #32
   bbc16:	2d01      	cmp	r5, #1
   bbc18:	bf08      	it	eq
   bbc1a:	3020      	addeq	r0, #32
   bbc1c:	1a1b      	subs	r3, r3, r0
   bbc1e:	d102      	bne.n	bbc26 <strncasecmp+0x3a>
   bbc20:	2800      	cmp	r0, #0
   bbc22:	d1e7      	bne.n	bbbf4 <strncasecmp+0x8>
   bbc24:	bd70      	pop	{r4, r5, r6, pc}
   bbc26:	4618      	mov	r0, r3
   bbc28:	e7fc      	b.n	bbc24 <strncasecmp+0x38>
   bbc2a:	bf00      	nop
   bbc2c:	000bcd9e 	.word	0x000bcd9e

000bbc30 <strncpy>:
   bbc30:	b510      	push	{r4, lr}
   bbc32:	3901      	subs	r1, #1
   bbc34:	4603      	mov	r3, r0
   bbc36:	b132      	cbz	r2, bbc46 <strncpy+0x16>
   bbc38:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bbc3c:	f803 4b01 	strb.w	r4, [r3], #1
   bbc40:	3a01      	subs	r2, #1
   bbc42:	2c00      	cmp	r4, #0
   bbc44:	d1f7      	bne.n	bbc36 <strncpy+0x6>
   bbc46:	441a      	add	r2, r3
   bbc48:	2100      	movs	r1, #0
   bbc4a:	4293      	cmp	r3, r2
   bbc4c:	d100      	bne.n	bbc50 <strncpy+0x20>
   bbc4e:	bd10      	pop	{r4, pc}
   bbc50:	f803 1b01 	strb.w	r1, [r3], #1
   bbc54:	e7f9      	b.n	bbc4a <strncpy+0x1a>
	...

000bbc58 <_strtol_l.constprop.0>:
   bbc58:	2b01      	cmp	r3, #1
   bbc5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbc5e:	d001      	beq.n	bbc64 <_strtol_l.constprop.0+0xc>
   bbc60:	2b24      	cmp	r3, #36	; 0x24
   bbc62:	d906      	bls.n	bbc72 <_strtol_l.constprop.0+0x1a>
   bbc64:	f7fc f9dc 	bl	b8020 <__errno>
   bbc68:	2316      	movs	r3, #22
   bbc6a:	6003      	str	r3, [r0, #0]
   bbc6c:	2000      	movs	r0, #0
   bbc6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbc72:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bbd58 <_strtol_l.constprop.0+0x100>
   bbc76:	460d      	mov	r5, r1
   bbc78:	462e      	mov	r6, r5
   bbc7a:	f815 4b01 	ldrb.w	r4, [r5], #1
   bbc7e:	f814 700c 	ldrb.w	r7, [r4, ip]
   bbc82:	f017 0708 	ands.w	r7, r7, #8
   bbc86:	d1f7      	bne.n	bbc78 <_strtol_l.constprop.0+0x20>
   bbc88:	2c2d      	cmp	r4, #45	; 0x2d
   bbc8a:	d132      	bne.n	bbcf2 <_strtol_l.constprop.0+0x9a>
   bbc8c:	782c      	ldrb	r4, [r5, #0]
   bbc8e:	2701      	movs	r7, #1
   bbc90:	1cb5      	adds	r5, r6, #2
   bbc92:	2b00      	cmp	r3, #0
   bbc94:	d05b      	beq.n	bbd4e <_strtol_l.constprop.0+0xf6>
   bbc96:	2b10      	cmp	r3, #16
   bbc98:	d109      	bne.n	bbcae <_strtol_l.constprop.0+0x56>
   bbc9a:	2c30      	cmp	r4, #48	; 0x30
   bbc9c:	d107      	bne.n	bbcae <_strtol_l.constprop.0+0x56>
   bbc9e:	782c      	ldrb	r4, [r5, #0]
   bbca0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bbca4:	2c58      	cmp	r4, #88	; 0x58
   bbca6:	d14d      	bne.n	bbd44 <_strtol_l.constprop.0+0xec>
   bbca8:	786c      	ldrb	r4, [r5, #1]
   bbcaa:	2310      	movs	r3, #16
   bbcac:	3502      	adds	r5, #2
   bbcae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bbcb2:	f108 38ff 	add.w	r8, r8, #4294967295
   bbcb6:	f04f 0c00 	mov.w	ip, #0
   bbcba:	fbb8 f9f3 	udiv	r9, r8, r3
   bbcbe:	4666      	mov	r6, ip
   bbcc0:	fb03 8a19 	mls	sl, r3, r9, r8
   bbcc4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bbcc8:	f1be 0f09 	cmp.w	lr, #9
   bbccc:	d816      	bhi.n	bbcfc <_strtol_l.constprop.0+0xa4>
   bbcce:	4674      	mov	r4, lr
   bbcd0:	42a3      	cmp	r3, r4
   bbcd2:	dd24      	ble.n	bbd1e <_strtol_l.constprop.0+0xc6>
   bbcd4:	f1bc 0f00 	cmp.w	ip, #0
   bbcd8:	db1e      	blt.n	bbd18 <_strtol_l.constprop.0+0xc0>
   bbcda:	45b1      	cmp	r9, r6
   bbcdc:	d31c      	bcc.n	bbd18 <_strtol_l.constprop.0+0xc0>
   bbcde:	d101      	bne.n	bbce4 <_strtol_l.constprop.0+0x8c>
   bbce0:	45a2      	cmp	sl, r4
   bbce2:	db19      	blt.n	bbd18 <_strtol_l.constprop.0+0xc0>
   bbce4:	fb06 4603 	mla	r6, r6, r3, r4
   bbce8:	f04f 0c01 	mov.w	ip, #1
   bbcec:	f815 4b01 	ldrb.w	r4, [r5], #1
   bbcf0:	e7e8      	b.n	bbcc4 <_strtol_l.constprop.0+0x6c>
   bbcf2:	2c2b      	cmp	r4, #43	; 0x2b
   bbcf4:	bf04      	itt	eq
   bbcf6:	782c      	ldrbeq	r4, [r5, #0]
   bbcf8:	1cb5      	addeq	r5, r6, #2
   bbcfa:	e7ca      	b.n	bbc92 <_strtol_l.constprop.0+0x3a>
   bbcfc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bbd00:	f1be 0f19 	cmp.w	lr, #25
   bbd04:	d801      	bhi.n	bbd0a <_strtol_l.constprop.0+0xb2>
   bbd06:	3c37      	subs	r4, #55	; 0x37
   bbd08:	e7e2      	b.n	bbcd0 <_strtol_l.constprop.0+0x78>
   bbd0a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bbd0e:	f1be 0f19 	cmp.w	lr, #25
   bbd12:	d804      	bhi.n	bbd1e <_strtol_l.constprop.0+0xc6>
   bbd14:	3c57      	subs	r4, #87	; 0x57
   bbd16:	e7db      	b.n	bbcd0 <_strtol_l.constprop.0+0x78>
   bbd18:	f04f 3cff 	mov.w	ip, #4294967295
   bbd1c:	e7e6      	b.n	bbcec <_strtol_l.constprop.0+0x94>
   bbd1e:	f1bc 0f00 	cmp.w	ip, #0
   bbd22:	da05      	bge.n	bbd30 <_strtol_l.constprop.0+0xd8>
   bbd24:	2322      	movs	r3, #34	; 0x22
   bbd26:	6003      	str	r3, [r0, #0]
   bbd28:	4646      	mov	r6, r8
   bbd2a:	b942      	cbnz	r2, bbd3e <_strtol_l.constprop.0+0xe6>
   bbd2c:	4630      	mov	r0, r6
   bbd2e:	e79e      	b.n	bbc6e <_strtol_l.constprop.0+0x16>
   bbd30:	b107      	cbz	r7, bbd34 <_strtol_l.constprop.0+0xdc>
   bbd32:	4276      	negs	r6, r6
   bbd34:	2a00      	cmp	r2, #0
   bbd36:	d0f9      	beq.n	bbd2c <_strtol_l.constprop.0+0xd4>
   bbd38:	f1bc 0f00 	cmp.w	ip, #0
   bbd3c:	d000      	beq.n	bbd40 <_strtol_l.constprop.0+0xe8>
   bbd3e:	1e69      	subs	r1, r5, #1
   bbd40:	6011      	str	r1, [r2, #0]
   bbd42:	e7f3      	b.n	bbd2c <_strtol_l.constprop.0+0xd4>
   bbd44:	2430      	movs	r4, #48	; 0x30
   bbd46:	2b00      	cmp	r3, #0
   bbd48:	d1b1      	bne.n	bbcae <_strtol_l.constprop.0+0x56>
   bbd4a:	2308      	movs	r3, #8
   bbd4c:	e7af      	b.n	bbcae <_strtol_l.constprop.0+0x56>
   bbd4e:	2c30      	cmp	r4, #48	; 0x30
   bbd50:	d0a5      	beq.n	bbc9e <_strtol_l.constprop.0+0x46>
   bbd52:	230a      	movs	r3, #10
   bbd54:	e7ab      	b.n	bbcae <_strtol_l.constprop.0+0x56>
   bbd56:	bf00      	nop
   bbd58:	000bcd9e 	.word	0x000bcd9e

000bbd5c <strtol>:
   bbd5c:	4613      	mov	r3, r2
   bbd5e:	460a      	mov	r2, r1
   bbd60:	4601      	mov	r1, r0
   bbd62:	4802      	ldr	r0, [pc, #8]	; (bbd6c <strtol+0x10>)
   bbd64:	6800      	ldr	r0, [r0, #0]
   bbd66:	f7ff bf77 	b.w	bbc58 <_strtol_l.constprop.0>
   bbd6a:	bf00      	nop
   bbd6c:	2003deb8 	.word	0x2003deb8

000bbd70 <__register_exitproc>:
   bbd70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbd74:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bbe30 <__register_exitproc+0xc0>
   bbd78:	4606      	mov	r6, r0
   bbd7a:	f8d8 0000 	ldr.w	r0, [r8]
   bbd7e:	461f      	mov	r7, r3
   bbd80:	460d      	mov	r5, r1
   bbd82:	4691      	mov	r9, r2
   bbd84:	f000 f856 	bl	bbe34 <__retarget_lock_acquire_recursive>
   bbd88:	4b25      	ldr	r3, [pc, #148]	; (bbe20 <__register_exitproc+0xb0>)
   bbd8a:	681c      	ldr	r4, [r3, #0]
   bbd8c:	b934      	cbnz	r4, bbd9c <__register_exitproc+0x2c>
   bbd8e:	4c25      	ldr	r4, [pc, #148]	; (bbe24 <__register_exitproc+0xb4>)
   bbd90:	601c      	str	r4, [r3, #0]
   bbd92:	4b25      	ldr	r3, [pc, #148]	; (bbe28 <__register_exitproc+0xb8>)
   bbd94:	b113      	cbz	r3, bbd9c <__register_exitproc+0x2c>
   bbd96:	681b      	ldr	r3, [r3, #0]
   bbd98:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bbd9c:	6863      	ldr	r3, [r4, #4]
   bbd9e:	2b1f      	cmp	r3, #31
   bbda0:	dd07      	ble.n	bbdb2 <__register_exitproc+0x42>
   bbda2:	f8d8 0000 	ldr.w	r0, [r8]
   bbda6:	f000 f847 	bl	bbe38 <__retarget_lock_release_recursive>
   bbdaa:	f04f 30ff 	mov.w	r0, #4294967295
   bbdae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbdb2:	b34e      	cbz	r6, bbe08 <__register_exitproc+0x98>
   bbdb4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bbdb8:	b988      	cbnz	r0, bbdde <__register_exitproc+0x6e>
   bbdba:	4b1c      	ldr	r3, [pc, #112]	; (bbe2c <__register_exitproc+0xbc>)
   bbdbc:	b923      	cbnz	r3, bbdc8 <__register_exitproc+0x58>
   bbdbe:	f8d8 0000 	ldr.w	r0, [r8]
   bbdc2:	f000 f838 	bl	bbe36 <__retarget_lock_release>
   bbdc6:	e7f0      	b.n	bbdaa <__register_exitproc+0x3a>
   bbdc8:	f44f 7084 	mov.w	r0, #264	; 0x108
   bbdcc:	f7fc f8f8 	bl	b7fc0 <malloc>
   bbdd0:	2800      	cmp	r0, #0
   bbdd2:	d0f4      	beq.n	bbdbe <__register_exitproc+0x4e>
   bbdd4:	2300      	movs	r3, #0
   bbdd6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bbdda:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bbdde:	6863      	ldr	r3, [r4, #4]
   bbde0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bbde4:	2201      	movs	r2, #1
   bbde6:	409a      	lsls	r2, r3
   bbde8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bbdec:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bbdf0:	4313      	orrs	r3, r2
   bbdf2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bbdf6:	2e02      	cmp	r6, #2
   bbdf8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bbdfc:	bf02      	ittt	eq
   bbdfe:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bbe02:	4313      	orreq	r3, r2
   bbe04:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bbe08:	6863      	ldr	r3, [r4, #4]
   bbe0a:	f8d8 0000 	ldr.w	r0, [r8]
   bbe0e:	1c5a      	adds	r2, r3, #1
   bbe10:	3302      	adds	r3, #2
   bbe12:	6062      	str	r2, [r4, #4]
   bbe14:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bbe18:	f000 f80e 	bl	bbe38 <__retarget_lock_release_recursive>
   bbe1c:	2000      	movs	r0, #0
   bbe1e:	e7c6      	b.n	bbdae <__register_exitproc+0x3e>
   bbe20:	2003e7e8 	.word	0x2003e7e8
   bbe24:	2003e75c 	.word	0x2003e75c
   bbe28:	00000000 	.word	0x00000000
   bbe2c:	000b7fc1 	.word	0x000b7fc1
   bbe30:	2003df1c 	.word	0x2003df1c

000bbe34 <__retarget_lock_acquire_recursive>:
   bbe34:	4770      	bx	lr

000bbe36 <__retarget_lock_release>:
   bbe36:	4770      	bx	lr

000bbe38 <__retarget_lock_release_recursive>:
   bbe38:	4770      	bx	lr

000bbe3a <link_code_end>:
	...

000bbe3c <dynalib_user>:
   bbe3c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bbe4c:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   bbe5c:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   bbe6c:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   bbe7c:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   bbe8c:	4f4d 4544 7525 003e 4d42 2045 3832 2030     MODE%u>.BME 280 
   bbe9c:	6964 2064 6f6e 2074 6e69 7469 6169 696c     did not initiali
   bbeac:	657a 6320 726f 6572 7463 796c 202e 5020     ze correctly.  P
   bbebc:	656c 7361 2065 6572 6573 2e74 000a 4d42     lease reset...BM
   bbecc:	2045 3832 2030 7572 6e6e 6e69 0a67 4300     E 280 running..C
   bbedc:	7261 2064 6166 6c69 6465 202c 726f 6e20     ard failed, or n
   bbeec:	746f 7020 6572 6573 746e 000a 5375 2044     ot present..uSD 
   bbefc:	6163 6472 6920 696e 6974 6c61 7a69 6465     card initialized
   bbf0c:	0a2e 2000 6954 656d 6920 3a73 2520 0a73     ... Time is: %s.
   bbf1c:	2000 2020 5420 6d65 3a70 2520 2e30 6632     .    Temp: %0.2f
   bbf2c:	000a 7548 696d 6964 7974 203a 3025 322e     ..Humidity: %0.2
   bbf3c:	0a66 4d00 696f 7473 7275 3a65 2520 0a69     f..Moisture: %i.
   bbf4c:	4100 7269 5120 6175 696c 7974 203a 200a     .Air Quality: . 
   bbf5c:	2520 0073 6f43 6e6e 6365 6974 676e 7420      %s.Connecting t
   bbf6c:	206f 514d 5454 2e2e 202e 5200 7465 7972     o MQTT... .Retry
   bbf7c:	6e69 2067 514d 5454 6320 6e6f 656e 7463     ing MQTT connect
   bbf8c:	6f69 206e 6e69 3520 7320 6365 6e6f 7364     ion in 5 seconds
   bbf9c:	2e2e 000a 514d 5454 4320 6e6f 656e 7463     ....MQTT Connect
   bbfac:	6465 0a21 4c00 4f50 2520 2c69 6320 6e6f     ed!..LPO %i, con
   bbfbc:	6563 206e 3025 322e 2c66 7220 7461 6f69     cen %0.2f, ratio
   bbfcc:	2520 2e30 6632 000a 2a2a 4f44 274e 2054      %0.2f..**DON'T 
   bbfdc:	5242 4145 4854 2a45 002a 4820 6769 2068     BREATHE**. High 
   bbfec:	6f70 6c6c 7475 6f69 216e 0020 4c20 776f     pollution! . Low
   bbffc:	7020 6c6f 756c 6974 6e6f 2021 0020 2121      pollution!  .!!
   bc00c:	2020 7246 7365 2068 6961 2072 2120 0021       Fresh air  !!.
   bc01c:	6157 6574 2072 656c 6576 3a6c 2520 2069     Water level: %i 
   bc02c:	000a 6157 6574 2072 654c 6576 206c 6925     ..Water Level %i
   bc03c:	0a20 5000 6e69 6967 676e 4d20 5451 2054      ..Pinging MQTT 
   bc04c:	000a 6944 6373 6e6f 656e 7463 6e69 2067     ..Disconnecting 
   bc05c:	000a 6552 6563 7669 6465 2520 2069 7266     ..Received %i fr
   bc06c:	6d6f 4120 6164 7266 6975 2e74 6f69 6620     om Adafruit.io f
   bc07c:	6565 2064 6157 6574 2072 000a 6572 6465     eed Water ..reed
   bc08c:	6573 7261 656c 6900 2e6f 6461 6661 7572     searle.io.adafru
   bc09c:	7469 632e 6d6f 6100 6f69 475f 7a66 3344     it.com.aio_GfzD3
   bc0ac:	6131 584f 724c 3659 414f 7933 6d54 664b     1aOXLrY6OA3yTmKf
   bc0bc:	6b69 384c 5647 004e 6572 6465 6573 7261     ikL8GVN.reedsear
   bc0cc:	656c 662f 6565 7364 542f 6d65 0070 6572     le/feeds/Temp.re
   bc0dc:	6465 6573 7261 656c 662f 6565 7364 482f     edsearle/feeds/H
   bc0ec:	6d75 6469 7469 0079 6572 6465 6573 7261     umidity.reedsear
   bc0fc:	656c 662f 6565 7364 502f 6572 7373 7275     le/feeds/Pressur
   bc10c:	0065 6572 6465 6573 7261 656c 662f 6565     e.reedsearle/fee
   bc11c:	7364 4d2f 696f 7473 7275 0065 6572 6465     ds/Moisture.reed
   bc12c:	6573 7261 656c 662f 6565 7364 572f 7461     searle/feeds/Wat
   bc13c:	7265 654c 6576 006c 6572 6465 6573 7261     erLevel.reedsear
   bc14c:	656c 662f 6565 7364 412f 7269 7551 6c61     le/feeds/AirQual
   bc15c:	7469 0079 6572 6465 6573 7261 656c 662f     ity.reedsearle/f
   bc16c:	6565 7364 442f 7375 0074 6572 6465 6573     eeds/Dust.reedse
   bc17c:	7261 656c 662f 6565 7364 572f 7461 7265     arle/feeds/Water
   bc18c:	0000 0000                                   ....

000bc190 <_ZTVN8particle11SPISettingsE>:
	...
   bc198:	4169 000b 40c9 000b 40e7 000b               iA...@...@..

000bc1a4 <_ZTV4File>:
	...
   bc1ac:	40e5 000b 40f5 000b 4135 000b 412f 000b     .@...@..5A../A..
   bc1bc:	40cb 000b 410f 000b 4109 000b 4103 000b     .@...A...A...A..

000bc1cc <CSWTCH.60>:
   bc1cc:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   bc1dc:	0050 0000                                   P...

000bc1e0 <_ZTV16Adafruit_SSD1306>:
	...
   bc1e8:	5cd9 000b 5d69 000b 63d5 000b 8619 000b     .\..i]...c......
   bc1f8:	5cdd 000b 60ed 000b 5b65 000b 59f5 000b     .\...`..e[...Y..
   bc208:	61ab 000b 6249 000b 627f 000b 629b 000b     .a..Ib...b...b..

000bc218 <_ZL4font>:
   bc218:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   bc228:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   bc238:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   bc248:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   bc258:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   bc268:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   bc278:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   bc288:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   bc298:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   bc2a8:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   bc2b8:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   bc2c8:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   bc2d8:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   bc2e8:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   bc2f8:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   bc308:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   bc318:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   bc328:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   bc338:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   bc348:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   bc358:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   bc368:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   bc378:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   bc388:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   bc398:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   bc3a8:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   bc3b8:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   bc3c8:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   bc3d8:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   bc3e8:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   bc3f8:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   bc408:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   bc418:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   bc428:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   bc438:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   bc448:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   bc458:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   bc468:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   bc478:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   bc488:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   bc498:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   bc4a8:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   bc4b8:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   bc4c8:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   bc4d8:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   bc4e8:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   bc4f8:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   bc508:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   bc518:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   bc528:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   bc538:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   bc548:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   bc558:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   bc568:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   bc578:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   bc588:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   bc598:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   bc5a8:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   bc5b8:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   bc5c8:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   bc5d8:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   bc5e8:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   bc5f8:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   bc608:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   bc618:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   bc628:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   bc638:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   bc648:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   bc658:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   bc668:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   bc678:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   bc688:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   bc698:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   bc6a8:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   bc6b8:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   bc6c8:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   bc6d8:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   bc6e8:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   bc6f8:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   bc708:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000bc714 <_ZTV12Adafruit_GFX>:
	...
   bc724:	63d5 000b 8619 000b 40a5 000b 60ed 000b     .c.......@...`..
   bc734:	6213 000b 622f 000b 61ab 000b 6249 000b     .b../b...a..Ib..
   bc744:	627f 000b 629b 000b                         .b...b..

000bc74c <_ZTV19Adafruit_MQTT_SPARK>:
	...
   bc754:	64b3 000b 653f 000b 645f 000b 650d 000b     .d..?e.._d...e..
   bc764:	654d 000b 6473 000b 64b5 000b 7244 706f     Me..sd...d..Drop
   bc774:	6570 2064 2061 6170 6b63 7465 5500 6b6e     ped a packet.Unk
   bc784:	6f6e 6e77 6520 7272 726f 4d00 5451 0054     nown error.MQTT.
   bc794:	2525 6425 252e 6664 4600 6961 656c 2064     %%%d.%df.Failed 
   bc7a4:	6f74 7320 6275 6373 6972 6562 4300 6e6f     to subscribe.Con
   bc7b4:	656e 7463 6f69 206e 6166 6c69 6465 5400     nection failed.T
   bc7c4:	6568 5320 7265 6576 2072 6f64 7365 6e20     he Server does n
   bc7d4:	746f 7320 7075 6f70 7472 7420 6568 6c20     ot support the l
   bc7e4:	7665 6c65 6f20 2066 6874 2065 514d 5454     evel of the MQTT
   bc7f4:	7020 6f72 6f74 6f63 206c 6572 7571 7365      protocol reques
   bc804:	6574 0064 6854 2065 6c43 6569 746e 6920     ted.The Client i
   bc814:	6564 746e 6669 6569 2072 7369 6320 726f     dentifier is cor
   bc824:	6572 7463 5520 4654 382d 6220 7475 6e20     rect UTF-8 but n
   bc834:	746f 6120 6c6c 776f 6465 6220 2079 6874     ot allowed by th
   bc844:	2065 6553 7672 7265 5400 6568 4d20 5451     e Server.The MQT
   bc854:	2054 6573 7672 6369 2065 7369 7520 616e     T service is una
   bc864:	6176 6c69 6261 656c 5400 6568 6420 7461     vailable.The dat
   bc874:	2061 6e69 7420 6568 7520 6573 2072 616e     a in the user na
   bc884:	656d 6f20 2072 6170 7373 6f77 6472 6920     me or password i
   bc894:	2073 616d 666c 726f 656d 0064 6f4e 2074     s malformed.Not 
   bc8a4:	7561 6874 726f 7a69 6465 7420 206f 6f63     authorized to co
   bc8b4:	6e6e 6365 0074 7845 6563 6465 6465 7220     nnect.Exceeded r
   bc8c4:	6365 6e6f 656e 7463 7220 7461 2065 696c     econnect rate li
   bc8d4:	696d 2e74 5020 656c 7361 2065 7274 2079     mit. Please try 
   bc8e4:	6761 6961 206e 616c 6574 2e72 5900 756f     again later..You
   bc8f4:	6820 7661 2065 6562 6e65 6220 6e61 656e      have been banne
   bc904:	2064 7266 6d6f 6320 6e6f 656e 7463 6e69     d from connectin
   bc914:	2e67 5020 656c 7361 2065 6f63 746e 6361     g. Please contac
   bc924:	2074 6874 2065 514d 5454 7320 7265 6576     t the MQTT serve
   bc934:	2072 6461 696d 696e 7473 6172 6f74 2072     r administrator 
   bc944:	6f66 2072 6f6d 6572 6420 7465 6961 736c     for more details
   bc954:	002e 0000                                   ....

000bc958 <_ZTV13Adafruit_MQTT>:
	...
   bc968:	40a5 000b 40a5 000b 40a5 000b 40a5 000b     .@...@...@...@..
   bc978:	40a5 000b                                   .@..

000bc97c <CSWTCH.44>:
   bc97c:	c79d 000b c7b1 000b c781 000b c7c3 000b     ................
   bc98c:	c808 000b c84d 000b c86d 000b c8a0 000b     ....M...m.......
   bc99c:	c8ba 000b c8f1 000b                         ........

000bc9a4 <_ZTVN5spark13EthernetClassE>:
	...
   bc9ac:	80bf 000b 80b5 000b 80ab 000b 80a1 000b     ................
   bc9bc:	8095 000b 8089 000b 940d 000b 9415 000b     ................
   bc9cc:	807d 000b 8075 000b 806b 000b 8061 000b     }...u...k...a...
   bc9dc:	9445 000b                                   E...

000bc9e0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bc9e0:	0800 1810 2820 3830                         .... (08

000bc9e8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bc9f0:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   bca00:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bca10 <_ZTV9IPAddress>:
	...
   bca18:	8a05 000b 89f5 000b 89f7 000b               ............

000bca24 <_ZTV9USBSerial>:
	...
   bca2c:	8b17 000b 8b7f 000b 8b55 000b 8619 000b     ........U.......
   bca3c:	8b47 000b 8b19 000b 8b29 000b 8b79 000b     G.......)...y...
   bca4c:	8b39 000b 8b11 000b                         9.......

000bca54 <_ZTV11USARTSerial>:
	...
   bca5c:	8c25 000b 8c91 000b 8c69 000b 8619 000b     %.......i.......
   bca6c:	8c39 000b 8c55 000b 8c47 000b 8c63 000b     9...U...G...c...
   bca7c:	8c27 000b 8c2b 000b                         '...+...

000bca84 <_ZTV7TwoWire>:
	...
   bca8c:	8cc9 000b 8d13 000b 8ceb 000b 8ccb 000b     ................
   bca9c:	8cf3 000b 8cfb 000b 8d03 000b 8d0b 000b     ................
   bcaac:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   bcabc:	2072 203d 6425 0000                         r = %d..

000bcac4 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bcacc:	8e49 000b 8e6d 000b 9357 000b 8e7b 000b     I...m...W...{...
   bcadc:	8e4d 000b                                   M...

000bcae0 <_ZTV9TCPClient>:
	...
   bcae8:	8885 000b 889d 000b 8dc5 000b 8ddf 000b     ................
   bcaf8:	91ed 000b 8e09 000b 9063 000b 8e3d 000b     ........c...=...
   bcb08:	90f5 000b 8f35 000b 9091 000b 92a1 000b     ....5...........
   bcb18:	9031 000b 8e3f 000b 8df1 000b 8e81 000b     1...?...........
   bcb28:	8f15 000b                                   ....

000bcb2c <_ZTVN5spark9WiFiClassE>:
	...
   bcb34:	93af 000b 93a5 000b 939b 000b 935d 000b     ............]...
   bcb44:	871d 000b 938f 000b 940d 000b 9415 000b     ................
   bcb54:	9383 000b 937b 000b 9371 000b 9367 000b     ....{...q...g...
   bcb64:	9445 000b                                   E...

000bcb68 <_ZTVN5spark12NetworkClassE>:
	...
   bcb70:	93cd 000b 93d7 000b 93e1 000b 93eb 000b     ................
   bcb80:	93f5 000b 9401 000b 940d 000b 9415 000b     ................
   bcb90:	941d 000b 9429 000b 9431 000b 943b 000b     ....)...1...;...
   bcba0:	9445 000b                                   E...

000bcba4 <_ZSt7nothrow>:
	...

000bcba5 <_ZTSSt19_Sp_make_shared_tag>:
   bcba5:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bcbb5:	6572 5f64 6174 0067 0000                     red_tag....

000bcbc0 <_ZTISt19_Sp_make_shared_tag>:
   bcbc0:	cc00 000b cba5 000b                         ........

000bcbc8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bcbc8:	cc60 000b cbd4 000b cc84 000b               `...........

000bcbd4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bcbd4:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bcbe4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bcbf4:	0045 0000                                   E...

000bcbf8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bcbf8:	0000 0000 cbc8 000b 97e1 000b 97f5 000b     ................
   bcc08:	9989 000b 9989 000b 985f 000b 97a1 000b     ........_.......
   bcc18:	9847 000b 9809 000b 97d3 000b               G...........

000bcc24 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bcc24:	cc60 000b cc30 000b cbc8 000b               `...0.......

000bcc30 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bcc30:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bcc40:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bcc50:	666e 456f 0000 0000                         nfoE....

000bcc58 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bcc58:	0000 0000 cc24 000b 9889 000b 989d 000b     ....$...........
   bcc68:	9989 000b 9989 000b 985f 000b 97a1 000b     ........_.......
   bcc78:	995d 000b 98e9 000b 98b1 000b               ]...........

000bcc84 <_ZTISt9type_info>:
   bcc84:	cc00 000b cc8c 000b                         ........

000bcc8c <_ZTSSt9type_info>:
   bcc8c:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....
   bcc9c:	0000 0000                                   ....

000bcca0 <TWO52>:
   bcca0:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   bccb0:	2e25 7333 2520 332e 2573 6433 2520 322e     %.3s %.3s%3d %.2
   bccc0:	3a64 2e25 6432 253a 322e 2064 6425 000a     d:%.2d:%.2d %d..

000bccd0 <day_name.1>:
   bccd0:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   bcce0:	6972 6153                                    riSat

000bcce5 <mon_name.0>:
   bcce5:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   bccf5:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   bcd05:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   bcd15:	7320 6375 6563 6465 6465 2f00 6e6d 2f74      succeeded./mnt/
   bcd25:	6f77 6b72 7073 6361 2f65 6f77 6b72 7073     workspace/worksp
   bcd35:	6361 2f65 4347 2d43 3031 702d 7069 6c65     ace/GCC-10-pipel
   bcd45:	6e69 2f65 656a 6b6e 6e69 2d73 4347 2d43     ine/jenkins-GCC-
   bcd55:	3031 702d 7069 6c65 6e69 2d65 3834 325f     10-pipeline-48_2
   bcd65:	3230 3130 3231 5f34 3631 3630 3831 3630     0201124_16061806
   bcd75:	3134 732f 6372 6e2f 7765 696c 2f62 656e     41/src/newlib/ne
   bcd85:	6c77 6269 6c2f 6269 2f63 7473 6c64 6269     wlib/libc/stdlib
   bcd95:	722f 6e61 2e64 0063                         /rand.c.

000bcd9d <_ctype_>:
   bcd9d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bcdad:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bcdbd:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bcdcd:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bcddd:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bcded:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bcdfd:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bce0d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bce1d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bce9e <link_const_variable_data_end>:
	...

000bcea0 <link_constructors_location>:
   bcea0:	000b4b19 	.word	0x000b4b19
   bcea4:	000b59e5 	.word	0x000b59e5
   bcea8:	000b80c9 	.word	0x000b80c9
   bceac:	000b8369 	.word	0x000b8369
   bceb0:	000b8609 	.word	0x000b8609
   bceb4:	000b8729 	.word	0x000b8729
   bceb8:	000b8869 	.word	0x000b8869
   bcebc:	000b88b1 	.word	0x000b88b1
   bcec0:	000b93b9 	.word	0x000b93b9
   bcec4:	000b951d 	.word	0x000b951d

000bcec8 <link_constructors_end>:
	...
