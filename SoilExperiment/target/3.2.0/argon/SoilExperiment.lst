
c:/Users/reed_/Documents/IoT/PredictiveWateringSystem/SoilExperiment/target/3.2.0/argon/SoilExperiment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000057e4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b9800  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000480  2003dca8  000b9804  0001dca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006c8  2003e128  2003e128  0002e128  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000b9c84  000b9c84  00029c84  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b9cac  000b9cac  00029cac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0017c81c  00000000  00000000  00029cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0001a11b  00000000  00000000  001a64cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    000444a3  00000000  00000000  001c05e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000031f0  00000000  00000000  00204a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 0000b5c0  00000000  00000000  00207c7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00044a70  00000000  00000000  0021323a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00056d75  00000000  00000000  00257caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0012e97b  00000000  00000000  002aea1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  000091dc  00000000  00000000  003dd39c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f004 fe45 	bl	b8cbc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f004 fe4d 	bl	b8cd8 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003dca8 	.word	0x2003dca8
   b4048:	000b9804 	.word	0x000b9804
   b404c:	2003e128 	.word	0x2003e128
   b4050:	2003e128 	.word	0x2003e128
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f003 fdaf 	bl	b7bc0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b97d8 	.word	0x000b97d8
   b407c:	000b97fc 	.word	0x000b97fc

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b898 	b.w	b41b4 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 fa6d 	bl	b4564 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 bd4f 	b.w	b7b30 <_post_loop>

000b4092 <_Znaj>:
   b4092:	f003 b977 	b.w	b7384 <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f003 b97d 	b.w	b7394 <free>
	...

000b409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b409e:	4a03      	ldr	r2, [pc, #12]	; (b40ac <__cxa_pure_virtual+0x10>)
   b40a0:	2100      	movs	r1, #0
   b40a2:	200c      	movs	r0, #12
   b40a4:	f003 f8aa 	bl	b71fc <panic_>
  while (1);
   b40a8:	e7fe      	b.n	b40a8 <__cxa_pure_virtual+0xc>
   b40aa:	bf00      	nop
   b40ac:	000b6f0d 	.word	0x000b6f0d

000b40b0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b0:	7800      	ldrb	r0, [r0, #0]
   b40b2:	fab0 f080 	clz	r0, r0
   b40b6:	0940      	lsrs	r0, r0, #5
   b40b8:	4770      	bx	lr

000b40ba <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ba:	2301      	movs	r3, #1
   b40bc:	7003      	strb	r3, [r0, #0]
   b40be:	4770      	bx	lr

000b40c0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40c0:	4770      	bx	lr

000b40c2 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40c2:	7c03      	ldrb	r3, [r0, #16]
   b40c4:	f013 0308 	ands.w	r3, r3, #8
   b40c8:	bf1e      	ittt	ne
   b40ca:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40cc:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40ce:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40d0:	2b00      	cmp	r3, #0
  }
   b40d2:	bfac      	ite	ge
   b40d4:	4618      	movge	r0, r3
   b40d6:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40da:	4770      	bx	lr

000b40dc <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40dc:	4770      	bx	lr

000b40de <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b40de:	b510      	push	{r4, lr}
  }
   b40e0:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b40e2:	4604      	mov	r4, r0
  }
   b40e4:	f7ff ffd7 	bl	b4096 <_ZdlPvj>
   b40e8:	4620      	mov	r0, r4
   b40ea:	bd10      	pop	{r4, pc}

000b40ec <_ZN4FileD0Ev>:
   b40ec:	b510      	push	{r4, lr}
   b40ee:	2134      	movs	r1, #52	; 0x34
   b40f0:	4604      	mov	r4, r0
   b40f2:	f7ff ffd0 	bl	b4096 <_ZdlPvj>
   b40f6:	4620      	mov	r0, r4
   b40f8:	bd10      	pop	{r4, pc}

000b40fa <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b40fa:	3010      	adds	r0, #16
   b40fc:	f002 b8e6 	b.w	b62cc <_ZN7FatFile4syncEv>

000b4100 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b4100:	3010      	adds	r0, #16
   b4102:	f002 b804 	b.w	b610e <_ZN7FatFile4peekEv>

000b4106 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b4106:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b4108:	2201      	movs	r2, #1
   b410a:	f10d 0107 	add.w	r1, sp, #7
   b410e:	3010      	adds	r0, #16
   b4110:	f001 ff4f 	bl	b5fb2 <_ZN7FatFile4readEPvj>
   b4114:	2801      	cmp	r0, #1
   b4116:	bf0c      	ite	eq
   b4118:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b411c:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   b4120:	b003      	add	sp, #12
   b4122:	f85d fb04 	ldr.w	pc, [sp], #4

000b4126 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4126:	3010      	adds	r0, #16
   b4128:	f002 b95a 	b.w	b63e0 <_ZN7FatFile5writeEPKvj>

000b412c <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b412c:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b412e:	2201      	movs	r2, #1
   b4130:	f88d 1007 	strb.w	r1, [sp, #7]
   b4134:	3010      	adds	r0, #16
   b4136:	f10d 0107 	add.w	r1, sp, #7
   b413a:	f002 f951 	bl	b63e0 <_ZN7FatFile5writeEPKvj>
  }
   b413e:	b003      	add	sp, #12
   b4140:	f85d fb04 	ldr.w	pc, [sp], #4

000b4144 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4144:	b40e      	push	{r1, r2, r3}
   b4146:	b503      	push	{r0, r1, lr}
   b4148:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b414a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b414c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4150:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4152:	f003 fbe0 	bl	b7916 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4156:	b002      	add	sp, #8
   b4158:	f85d eb04 	ldr.w	lr, [sp], #4
   b415c:	b003      	add	sp, #12
   b415e:	4770      	bx	lr

000b4160 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4160:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4162:	4604      	mov	r4, r0
   b4164:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4166:	7922      	ldrb	r2, [r4, #4]
   b4168:	68a3      	ldr	r3, [r4, #8]
   b416a:	b132      	cbz	r2, b417a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b416c:	b9a3      	cbnz	r3, b4198 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b416e:	490b      	ldr	r1, [pc, #44]	; (b419c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4170:	b002      	add	sp, #8
   b4172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4176:	f003 bb9d 	b.w	b78b4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b417a:	4a09      	ldr	r2, [pc, #36]	; (b41a0 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b417c:	7b26      	ldrb	r6, [r4, #12]
   b417e:	4d09      	ldr	r5, [pc, #36]	; (b41a4 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4180:	4909      	ldr	r1, [pc, #36]	; (b41a8 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4182:	7b64      	ldrb	r4, [r4, #13]
   b4184:	2e01      	cmp	r6, #1
   b4186:	bf18      	it	ne
   b4188:	4629      	movne	r1, r5
   b418a:	e9cd 1400 	strd	r1, r4, [sp]
   b418e:	4907      	ldr	r1, [pc, #28]	; (b41ac <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4190:	f7ff ffd8 	bl	b4144 <_ZN5Print6printfEPKcz>
  }
   b4194:	b002      	add	sp, #8
   b4196:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4198:	4a05      	ldr	r2, [pc, #20]	; (b41b0 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b419a:	e7ef      	b.n	b417c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b419c:	000b8e55 	.word	0x000b8e55
   b41a0:	000b8f32 	.word	0x000b8f32
   b41a4:	000b8e51 	.word	0x000b8e51
   b41a8:	000b8e4d 	.word	0x000b8e4d
   b41ac:	000b8e6b 	.word	0x000b8e6b
   b41b0:	000b8e44 	.word	0x000b8e44

000b41b4 <setup>:
//****************************
//****************************
//      SETUP
//****************************
//****************************  
void setup() {
   b41b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b41b8:	b08f      	sub	sp, #60	; 0x3c
  Serial.begin(9600);
   b41ba:	f003 fe0f 	bl	b7ddc <_Z16_fetch_usbserialv>
   b41be:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b41c2:	f003 fdf9 	bl	b7db8 <_ZN9USBSerial5beginEl>
  while(!Serial) {}
   b41c6:	f003 fe09 	bl	b7ddc <_Z16_fetch_usbserialv>
   b41ca:	f003 fdfc 	bl	b7dc6 <_ZN9USBSerialcvbEv>
   b41ce:	2800      	cmp	r0, #0
   b41d0:	d0f9      	beq.n	b41c6 <setup+0x12>
//  Initialize the BME280 
  status = bmeOne.begin(BMEADDRESS);
   b41d2:	4b66      	ldr	r3, [pc, #408]	; (b436c <setup+0x1b8>)
   b41d4:	4866      	ldr	r0, [pc, #408]	; (b4370 <setup+0x1bc>)
   b41d6:	7819      	ldrb	r1, [r3, #0]
   b41d8:	4d66      	ldr	r5, [pc, #408]	; (b4374 <setup+0x1c0>)
   b41da:	f000 fdd1 	bl	b4d80 <_ZN15Adafruit_BME2805beginEh>
   b41de:	6028      	str	r0, [r5, #0]
  if(!status){
   b41e0:	b928      	cbnz	r0, b41ee <setup+0x3a>
    Serial.printf("BME 280 did not initialize correctly.  Please reset.\n");
   b41e2:	f003 fdfb 	bl	b7ddc <_Z16_fetch_usbserialv>
   b41e6:	4964      	ldr	r1, [pc, #400]	; (b4378 <setup+0x1c4>)
   b41e8:	f7ff ffac 	bl	b4144 <_ZN5Print6printfEPKcz>
    while(1);  //  You shall not pass 
   b41ec:	e7fe      	b.n	b41ec <setup+0x38>
  }
  Serial.printf("BME 280 running\n");
   b41ee:	f003 fdf5 	bl	b7ddc <_Z16_fetch_usbserialv>
   b41f2:	4962      	ldr	r1, [pc, #392]	; (b437c <setup+0x1c8>)
//  Initialize the uSD Card
  // initialize uSD card module CS to off
  pinMode     (SD_CS_PIN,OUTPUT); 
  digitalWrite(SD_CS_PIN,HIGH);

  toldYa = 0;
   b41f4:	4e62      	ldr	r6, [pc, #392]	; (b4380 <setup+0x1cc>)
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b41f6:	4c63      	ldr	r4, [pc, #396]	; (b4384 <setup+0x1d0>)
class SPISettings : public Printable {
   b41f8:	f8df 81c8 	ldr.w	r8, [pc, #456]	; b43c4 <setup+0x210>
  Serial.printf("BME 280 running\n");
   b41fc:	f7ff ffa2 	bl	b4144 <_ZN5Print6printfEPKcz>
  pinMode     (SD_CS_PIN,OUTPUT); 
   b4200:	2101      	movs	r1, #1
   b4202:	200e      	movs	r0, #14
   b4204:	f004 f808 	bl	b8218 <pinMode>
  digitalWrite(SD_CS_PIN,HIGH);
   b4208:	2101      	movs	r1, #1
   b420a:	200e      	movs	r0, #14
   b420c:	f004 f815 	bl	b823a <digitalWrite>
  toldYa = 0;
   b4210:	2300      	movs	r3, #0
   b4212:	6033      	str	r3, [r6, #0]
  status = 0;
   b4214:	602b      	str	r3, [r5, #0]
   b4216:	f504 698c 	add.w	r9, r4, #1120	; 0x460
   b421a:	4b5b      	ldr	r3, [pc, #364]	; (b4388 <setup+0x1d4>)
   b421c:	495b      	ldr	r1, [pc, #364]	; (b438c <setup+0x1d8>)
   b421e:	9301      	str	r3, [sp, #4]
   b4220:	2300      	movs	r3, #0
   b4222:	f88d 3008 	strb.w	r3, [sp, #8]
   b4226:	2701      	movs	r7, #1
   b4228:	ab01      	add	r3, sp, #4
   b422a:	220e      	movs	r2, #14
   b422c:	f1a1 000c 	sub.w	r0, r1, #12
   b4230:	f8cd 800c 	str.w	r8, [sp, #12]
   b4234:	f8ad 7010 	strh.w	r7, [sp, #16]
   b4238:	f002 fc0e 	bl	b6a58 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b423c:	2800      	cmp	r0, #0
   b423e:	f000 8087 	beq.w	b4350 <setup+0x19c>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   b4242:	4853      	ldr	r0, [pc, #332]	; (b4390 <setup+0x1dc>)
    m_blockDev = blockDev;
   b4244:	f8c4 9000 	str.w	r9, [r4]
    vwd()->close();
   b4248:	f002 f876 	bl	b6338 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b424c:	4639      	mov	r1, r7
   b424e:	4620      	mov	r0, r4
   b4250:	f002 faac 	bl	b67ac <_ZN9FatVolume4initEh>
   b4254:	4601      	mov	r1, r0
   b4256:	2800      	cmp	r0, #0
   b4258:	d075      	beq.n	b4346 <setup+0x192>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b425a:	484d      	ldr	r0, [pc, #308]	; (b4390 <setup+0x1dc>)
   b425c:	4621      	mov	r1, r4
   b425e:	f001 fea2 	bl	b5fa6 <_ZN7FatFile8openRootEP9FatVolume>
   b4262:	2800      	cmp	r0, #0
   b4264:	d074      	beq.n	b4350 <setup+0x19c>
    if (!dir->isDir()) {
   b4266:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b426a:	f013 0f70 	tst.w	r3, #112	; 0x70
   b426e:	d06f      	beq.n	b4350 <setup+0x19c>
    m_cwd = dir;
   b4270:	4b48      	ldr	r3, [pc, #288]	; (b4394 <setup+0x1e0>)
   b4272:	4a47      	ldr	r2, [pc, #284]	; (b4390 <setup+0x1dc>)
   b4274:	601a      	str	r2, [r3, #0]
  while (!status) {
    status = SD.begin(SD_CS_PIN);
   b4276:	2301      	movs	r3, #1
   b4278:	602b      	str	r3, [r5, #0]
    if (!status && !toldYa) {  // if status is false
      Serial.printf("Card failed, or not present\n");
      toldYa = 1;
    }
    else if (status){
      Serial.printf("uSD card initialized.\n");
   b427a:	f003 fdaf 	bl	b7ddc <_Z16_fetch_usbserialv>
   b427e:	4946      	ldr	r1, [pc, #280]	; (b4398 <setup+0x1e4>)
   b4280:	f7ff ff60 	bl	b4144 <_ZN5Print6printfEPKcz>
  while (!status) {
   b4284:	682b      	ldr	r3, [r5, #0]
   b4286:	2b00      	cmp	r3, #0
   b4288:	d0c7      	beq.n	b421a <setup+0x66>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b428a:	2300      	movs	r3, #0
   b428c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4290:	e9cd 3202 	strd	r3, r2, [sp, #8]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4294:	9305      	str	r3, [sp, #20]
  File() {}
   b4296:	4b41      	ldr	r3, [pc, #260]	; (b439c <setup+0x1e8>)
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   b4298:	4a41      	ldr	r2, [pc, #260]	; (b43a0 <setup+0x1ec>)
   b429a:	493d      	ldr	r1, [pc, #244]	; (b4390 <setup+0x1dc>)
   b429c:	9301      	str	r3, [sp, #4]
   b429e:	a805      	add	r0, sp, #20
   b42a0:	f244 2302 	movw	r3, #16898	; 0x4202
class File : public FatFile, public Stream {
   b42a4:	ac05      	add	r4, sp, #20
   b42a6:	f002 f84e 	bl	b6346 <_ZN7FatFile4openEPS_PKci>
   b42aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b42ac:	4e3d      	ldr	r6, [pc, #244]	; (b43a4 <setup+0x1f0>)
   b42ae:	f106 0510 	add.w	r5, r6, #16
   b42b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b42b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b42b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b42b8:	6823      	ldr	r3, [r4, #0]
   b42ba:	602b      	str	r3, [r5, #0]
class Print
   b42bc:	9b02      	ldr	r3, [sp, #8]
   b42be:	6073      	str	r3, [r6, #4]
class Stream : public Print
   b42c0:	9b03      	ldr	r3, [sp, #12]
   b42c2:	60b3      	str	r3, [r6, #8]
   b42c4:	9b04      	ldr	r3, [sp, #16]
   b42c6:	60f3      	str	r3, [r6, #12]
    }
  }
    //  Print file headers to uSD
    testFile = SD.open("testFile.csv", FILE_WRITE);
    if (testFile) {
   b42c8:	7c33      	ldrb	r3, [r6, #16]
   b42ca:	b163      	cbz	r3, b42e6 <setup+0x132>
      testFile.printf("Time, Temp, Pres, MoistH, MoistL \n");
   b42cc:	4936      	ldr	r1, [pc, #216]	; (b43a8 <setup+0x1f4>)
   b42ce:	4630      	mov	r0, r6
   b42d0:	f7ff ff38 	bl	b4144 <_ZN5Print6printfEPKcz>
      testFile.close();
   b42d4:	f1a5 0020 	sub.w	r0, r5, #32
   b42d8:	f002 f82e 	bl	b6338 <_ZN7FatFile5closeEv>
      Serial.printf("Time, Temp, Pres, MoistH, MoistL \n");
   b42dc:	f003 fd7e 	bl	b7ddc <_Z16_fetch_usbserialv>
   b42e0:	4931      	ldr	r1, [pc, #196]	; (b43a8 <setup+0x1f4>)
   b42e2:	f7ff ff2f 	bl	b4144 <_ZN5Print6printfEPKcz>
    }

  Time.zone(-6);                  //  Set time zone to MDT -6 from UTC
   b42e6:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
   b42ea:	f003 fb61 	bl	b79b0 <_ZN9TimeClass4zoneEf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b42ee:	f003 f829 	bl	b7344 <spark_cloud_flag_connected>
        if (!connected()) {
   b42f2:	b110      	cbz	r0, b42fa <setup+0x146>
        return spark_sync_time(NULL);
   b42f4:	2000      	movs	r0, #0
   b42f6:	f003 f82d 	bl	b7354 <spark_sync_time>
  Particle.syncTime();

  pinMode(MOISTPIN, INPUT);       //  Moisture pin is an input
   b42fa:	2100      	movs	r1, #0
   b42fc:	2012      	movs	r0, #18
   b42fe:	f003 ff8b 	bl	b8218 <pinMode>
  

  //  Setup OLED
  displayOne.begin(SSD1306_SWITCHCAPVCC, OLEDADDRESS);  // initialize with the I2C addr above
   b4302:	4b2a      	ldr	r3, [pc, #168]	; (b43ac <setup+0x1f8>)
   b4304:	482a      	ldr	r0, [pc, #168]	; (b43b0 <setup+0x1fc>)
   b4306:	781a      	ldrb	r2, [r3, #0]
   b4308:	2102      	movs	r1, #2
   b430a:	f001 f833 	bl	b5374 <_ZN16Adafruit_SSD13065beginEhh>
  displayOne.setTextSize(1);
   b430e:	4828      	ldr	r0, [pc, #160]	; (b43b0 <setup+0x1fc>)
   b4310:	2101      	movs	r1, #1
   b4312:	f001 fab0 	bl	b5876 <_ZN12Adafruit_GFX11setTextSizeEh>
  displayOne.setTextColor(WHITE);
   b4316:	2101      	movs	r1, #1
   b4318:	4825      	ldr	r0, [pc, #148]	; (b43b0 <setup+0x1fc>)
   b431a:	f001 fab1 	bl	b5880 <_ZN12Adafruit_GFX12setTextColorEt>
  displayOne.clearDisplay();//  Clear the display before going further
   b431e:	4824      	ldr	r0, [pc, #144]	; (b43b0 <setup+0x1fc>)
   b4320:	f000 ff5c 	bl	b51dc <_ZN16Adafruit_SSD130612clearDisplayEv>
  displayOne.display(); // Force display
   b4324:	4822      	ldr	r0, [pc, #136]	; (b43b0 <setup+0x1fc>)
   b4326:	f000 ffb5 	bl	b5294 <_ZN16Adafruit_SSD13067displayEv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b432a:	f002 fdff 	bl	b6f2c <HAL_Timer_Get_Milli_Seconds>

  endTime = millis();
   b432e:	4b21      	ldr	r3, [pc, #132]	; (b43b4 <setup+0x200>)
   b4330:	6018      	str	r0, [r3, #0]
  moistureH = MOINSTINITH;  //  Reset moisture high & low indicators
   b4332:	4b21      	ldr	r3, [pc, #132]	; (b43b8 <setup+0x204>)
   b4334:	2200      	movs	r2, #0
   b4336:	601a      	str	r2, [r3, #0]
  moistureL = MOINSTINITL;
   b4338:	4b20      	ldr	r3, [pc, #128]	; (b43bc <setup+0x208>)
   b433a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   b433e:	601a      	str	r2, [r3, #0]
}
   b4340:	b00f      	add	sp, #60	; 0x3c
   b4342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (part ? init(part) : init(1) || init(0))
   b4346:	4620      	mov	r0, r4
   b4348:	f002 fa30 	bl	b67ac <_ZN9FatVolume4initEh>
   b434c:	2800      	cmp	r0, #0
   b434e:	d184      	bne.n	b425a <setup+0xa6>
    status = SD.begin(SD_CS_PIN);
   b4350:	2300      	movs	r3, #0
   b4352:	602b      	str	r3, [r5, #0]
    if (!status && !toldYa) {  // if status is false
   b4354:	6833      	ldr	r3, [r6, #0]
   b4356:	2b00      	cmp	r3, #0
   b4358:	f47f af5f 	bne.w	b421a <setup+0x66>
      Serial.printf("Card failed, or not present\n");
   b435c:	f003 fd3e 	bl	b7ddc <_Z16_fetch_usbserialv>
   b4360:	4917      	ldr	r1, [pc, #92]	; (b43c0 <setup+0x20c>)
   b4362:	f7ff feef 	bl	b4144 <_ZN5Print6printfEPKcz>
      toldYa = 1;
   b4366:	2301      	movs	r3, #1
   b4368:	6033      	str	r3, [r6, #0]
   b436a:	e78b      	b.n	b4284 <setup+0xd0>
   b436c:	2003dca8 	.word	0x2003dca8
   b4370:	2003e5c4 	.word	0x2003e5c4
   b4374:	2003e650 	.word	0x2003e650
   b4378:	000b8e88 	.word	0x000b8e88
   b437c:	000b8ebe 	.word	0x000b8ebe
   b4380:	2003e69c 	.word	0x2003e69c
   b4384:	2003e134 	.word	0x2003e134
   b4388:	000b8fd0 	.word	0x000b8fd0
   b438c:	2003e5a0 	.word	0x2003e5a0
   b4390:	2003e570 	.word	0x2003e570
   b4394:	2003e6a4 	.word	0x2003e6a4
   b4398:	000b8ecf 	.word	0x000b8ecf
   b439c:	000b8fe4 	.word	0x000b8fe4
   b43a0:	000b8f03 	.word	0x000b8f03
   b43a4:	2003e658 	.word	0x2003e658
   b43a8:	000b8f10 	.word	0x000b8f10
   b43ac:	2003dca9 	.word	0x2003dca9
   b43b0:	2003e618 	.word	0x2003e618
   b43b4:	2003e63c 	.word	0x2003e63c
   b43b8:	2003e648 	.word	0x2003e648
   b43bc:	2003e64c 	.word	0x2003e64c
   b43c0:	000b8ee6 	.word	0x000b8ee6
   b43c4:	02faf080 	.word	0x02faf080

000b43c8 <_Z16write_SFFII_ToSD6Stringffii>:
//****************************
//****************************
//      write_SFFII_ToSD
//****************************
//****************************
void write_SFFII_ToSD(String item1, float item2, float item3, int item4, int item5) {
   b43c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b43cc:	ed2d 8b02 	vpush	{d8}
   b43d0:	b095      	sub	sp, #84	; 0x54
    Stream() {_timeout=1000;}
   b43d2:	2300      	movs	r3, #0
   b43d4:	4691      	mov	r9, r2
   b43d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b43da:	e9cd 3208 	strd	r3, r2, [sp, #32]
   b43de:	930b      	str	r3, [sp, #44]	; 0x2c
  File() {}
   b43e0:	4b28      	ldr	r3, [pc, #160]	; (b4484 <_Z16write_SFFII_ToSD6Stringffii+0xbc>)
    tmpFile.open(vwd(), path, oflag);
   b43e2:	4a29      	ldr	r2, [pc, #164]	; (b4488 <_Z16write_SFFII_ToSD6Stringffii+0xc0>)
   b43e4:	9307      	str	r3, [sp, #28]
   b43e6:	4607      	mov	r7, r0
   b43e8:	f244 2302 	movw	r3, #16898	; 0x4202
   b43ec:	4688      	mov	r8, r1
   b43ee:	a80b      	add	r0, sp, #44	; 0x2c
   b43f0:	4926      	ldr	r1, [pc, #152]	; (b448c <_Z16write_SFFII_ToSD6Stringffii+0xc4>)
class File : public FatFile, public Stream {
   b43f2:	4e27      	ldr	r6, [pc, #156]	; (b4490 <_Z16write_SFFII_ToSD6Stringffii+0xc8>)
   b43f4:	ac0b      	add	r4, sp, #44	; 0x2c
   b43f6:	ee10 ba10 	vmov	fp, s0
   b43fa:	ee10 aa90 	vmov	sl, s1
   b43fe:	f001 ffa2 	bl	b6346 <_ZN7FatFile4openEPS_PKci>
   b4402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4404:	f106 0510 	add.w	r5, r6, #16
   b4408:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b440a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b440c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b440e:	6823      	ldr	r3, [r4, #0]
   b4410:	602b      	str	r3, [r5, #0]
   b4412:	9b08      	ldr	r3, [sp, #32]
   b4414:	6073      	str	r3, [r6, #4]
class Stream : public Print
   b4416:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4418:	60b3      	str	r3, [r6, #8]
   b441a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b441c:	60f3      	str	r3, [r6, #12]

  testFile = SD.open("testFile.csv", FILE_WRITE);

  // if the file is available, write to it:
  if (testFile) {
   b441e:	7c33      	ldrb	r3, [r6, #16]
   b4420:	b34b      	cbz	r3, b4476 <_Z16write_SFFII_ToSD6Stringffii+0xae>
    testFile.printf("%s, %0.2f, %0.2f, %i, %i \n", item1.c_str(), item2, item3, item4, item5);
   b4422:	4658      	mov	r0, fp
   b4424:	f004 f950 	bl	b86c8 <__aeabi_f2d>
   b4428:	ec41 0b18 	vmov	d8, r0, r1
   b442c:	4650      	mov	r0, sl
   b442e:	f004 f94b 	bl	b86c8 <__aeabi_f2d>
   b4432:	4682      	mov	sl, r0
   b4434:	468b      	mov	fp, r1
   b4436:	683a      	ldr	r2, [r7, #0]
   b4438:	4916      	ldr	r1, [pc, #88]	; (b4494 <_Z16write_SFFII_ToSD6Stringffii+0xcc>)
   b443a:	e9cd 8904 	strd	r8, r9, [sp, #16]
   b443e:	e9cd ab02 	strd	sl, fp, [sp, #8]
   b4442:	ed8d 8b00 	vstr	d8, [sp]
   b4446:	4630      	mov	r0, r6
   b4448:	f7ff fe7c 	bl	b4144 <_ZN5Print6printfEPKcz>
    testFile.close();
   b444c:	f1a5 0020 	sub.w	r0, r5, #32
   b4450:	f001 ff72 	bl	b6338 <_ZN7FatFile5closeEv>
    Serial.printf("%s, %0.2f, %0.2f, %i, %i \n", item1.c_str(), item2, item3, item4, item5);
   b4454:	f003 fcc2 	bl	b7ddc <_Z16_fetch_usbserialv>
   b4458:	e9cd 8904 	strd	r8, r9, [sp, #16]
   b445c:	e9cd ab02 	strd	sl, fp, [sp, #8]
   b4460:	ed8d 8b00 	vstr	d8, [sp]
   b4464:	683a      	ldr	r2, [r7, #0]
   b4466:	490b      	ldr	r1, [pc, #44]	; (b4494 <_Z16write_SFFII_ToSD6Stringffii+0xcc>)
   b4468:	f7ff fe6c 	bl	b4144 <_ZN5Print6printfEPKcz>
  }  
  else {
    Serial.printf("error opening testFile.csv \n");
  }
  return;
}
   b446c:	b015      	add	sp, #84	; 0x54
   b446e:	ecbd 8b02 	vpop	{d8}
   b4472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Serial.printf("error opening testFile.csv \n");
   b4476:	f003 fcb1 	bl	b7ddc <_Z16_fetch_usbserialv>
   b447a:	4907      	ldr	r1, [pc, #28]	; (b4498 <_Z16write_SFFII_ToSD6Stringffii+0xd0>)
   b447c:	f7ff fe62 	bl	b4144 <_ZN5Print6printfEPKcz>
  return;
   b4480:	e7f4      	b.n	b446c <_Z16write_SFFII_ToSD6Stringffii+0xa4>
   b4482:	bf00      	nop
   b4484:	000b8fe4 	.word	0x000b8fe4
   b4488:	000b8f03 	.word	0x000b8f03
   b448c:	2003e570 	.word	0x2003e570
   b4490:	2003e658 	.word	0x2003e658
   b4494:	000b8f33 	.word	0x000b8f33
   b4498:	000b8f4e 	.word	0x000b8f4e

000b449c <_Z18write_SFFII_ToOLED6Stringffii>:
//****************************
//****************************
//      write_SFFII_ToOLED
//****************************
//****************************
void write_SFFII_ToOLED(String item1, float item2, float item3, int item4, int item5) {
   b449c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Write to the OLED display
    displayOne.clearDisplay();//  Clear the display before going further
   b44a0:	4c2a      	ldr	r4, [pc, #168]	; (b454c <_Z18write_SFFII_ToOLED6Stringffii+0xb0>)
void write_SFFII_ToOLED(String item1, float item2, float item3, int item4, int item5) {
   b44a2:	4681      	mov	r9, r0
    displayOne.clearDisplay();//  Clear the display before going further
   b44a4:	4620      	mov	r0, r4
void write_SFFII_ToOLED(String item1, float item2, float item3, int item4, int item5) {
   b44a6:	ee10 8a10 	vmov	r8, s0
   b44aa:	ee10 7a90 	vmov	r7, s1
   b44ae:	460e      	mov	r6, r1
   b44b0:	4615      	mov	r5, r2
    displayOne.clearDisplay();//  Clear the display before going further
   b44b2:	f000 fe93 	bl	b51dc <_ZN16Adafruit_SSD130612clearDisplayEv>
    displayOne.drawRect(0,0,SCREENWIDTH,SCREENHEIGHT,WHITE);
   b44b6:	2340      	movs	r3, #64	; 0x40
   b44b8:	2201      	movs	r2, #1
   b44ba:	e9cd 3200 	strd	r3, r2, [sp]
   b44be:	2200      	movs	r2, #0
   b44c0:	2380      	movs	r3, #128	; 0x80
   b44c2:	4611      	mov	r1, r2
   b44c4:	4620      	mov	r0, r4
   b44c6:	f001 f88c 	bl	b55e2 <_ZN12Adafruit_GFX8drawRectEsssst>
    displayOne.setCursor(7,5);
   b44ca:	4620      	mov	r0, r4
   b44cc:	2205      	movs	r2, #5
   b44ce:	2107      	movs	r1, #7
   b44d0:	f001 f9ce 	bl	b5870 <_ZN12Adafruit_GFX9setCursorEss>
    displayOne.printf("    Time is: %s\n", item1.c_str());
   b44d4:	f8d9 2000 	ldr.w	r2, [r9]
   b44d8:	491d      	ldr	r1, [pc, #116]	; (b4550 <_Z18write_SFFII_ToOLED6Stringffii+0xb4>)
   b44da:	4620      	mov	r0, r4
   b44dc:	f7ff fe32 	bl	b4144 <_ZN5Print6printfEPKcz>
    displayOne.setCursor(7,15);
   b44e0:	220f      	movs	r2, #15
   b44e2:	4620      	mov	r0, r4
   b44e4:	2107      	movs	r1, #7
   b44e6:	f001 f9c3 	bl	b5870 <_ZN12Adafruit_GFX9setCursorEss>
    displayOne.printf("Temperature: %0.2f\n", item2);
   b44ea:	4640      	mov	r0, r8
   b44ec:	f004 f8ec 	bl	b86c8 <__aeabi_f2d>
   b44f0:	460b      	mov	r3, r1
   b44f2:	4602      	mov	r2, r0
   b44f4:	4917      	ldr	r1, [pc, #92]	; (b4554 <_Z18write_SFFII_ToOLED6Stringffii+0xb8>)
   b44f6:	4620      	mov	r0, r4
   b44f8:	f7ff fe24 	bl	b4144 <_ZN5Print6printfEPKcz>
    displayOne.setCursor(7,25);
   b44fc:	2219      	movs	r2, #25
   b44fe:	4620      	mov	r0, r4
   b4500:	2107      	movs	r1, #7
   b4502:	f001 f9b5 	bl	b5870 <_ZN12Adafruit_GFX9setCursorEss>
    displayOne.printf("   Humidity: %0.2f\n", item3);
   b4506:	4638      	mov	r0, r7
   b4508:	f004 f8de 	bl	b86c8 <__aeabi_f2d>
   b450c:	460b      	mov	r3, r1
   b450e:	4602      	mov	r2, r0
   b4510:	4911      	ldr	r1, [pc, #68]	; (b4558 <_Z18write_SFFII_ToOLED6Stringffii+0xbc>)
   b4512:	4620      	mov	r0, r4
   b4514:	f7ff fe16 	bl	b4144 <_ZN5Print6printfEPKcz>
    displayOne.setCursor(7,35);
   b4518:	4620      	mov	r0, r4
   b451a:	2223      	movs	r2, #35	; 0x23
   b451c:	2107      	movs	r1, #7
   b451e:	f001 f9a7 	bl	b5870 <_ZN12Adafruit_GFX9setCursorEss>
    displayOne.printf("Moisture Hi: %i\n", item4);
   b4522:	4632      	mov	r2, r6
   b4524:	490d      	ldr	r1, [pc, #52]	; (b455c <_Z18write_SFFII_ToOLED6Stringffii+0xc0>)
   b4526:	4620      	mov	r0, r4
   b4528:	f7ff fe0c 	bl	b4144 <_ZN5Print6printfEPKcz>
    displayOne.setCursor(7,45);
   b452c:	4620      	mov	r0, r4
   b452e:	222d      	movs	r2, #45	; 0x2d
   b4530:	2107      	movs	r1, #7
   b4532:	f001 f99d 	bl	b5870 <_ZN12Adafruit_GFX9setCursorEss>
    displayOne.printf("Moisture Lo: %i\n", item5);
   b4536:	490a      	ldr	r1, [pc, #40]	; (b4560 <_Z18write_SFFII_ToOLED6Stringffii+0xc4>)
   b4538:	462a      	mov	r2, r5
   b453a:	4620      	mov	r0, r4
   b453c:	f7ff fe02 	bl	b4144 <_ZN5Print6printfEPKcz>
    displayOne.display(); // Force display
   b4540:	4620      	mov	r0, r4
   b4542:	b003      	add	sp, #12
   b4544:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    displayOne.display(); // Force display
   b4548:	f000 bea4 	b.w	b5294 <_ZN16Adafruit_SSD13067displayEv>
   b454c:	2003e618 	.word	0x2003e618
   b4550:	000b8f6b 	.word	0x000b8f6b
   b4554:	000b8f7c 	.word	0x000b8f7c
   b4558:	000b8f90 	.word	0x000b8f90
   b455c:	000b8fa4 	.word	0x000b8fa4
   b4560:	000b8fb5 	.word	0x000b8fb5

000b4564 <loop>:
void loop() {
   b4564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4568:	b085      	sub	sp, #20
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b456a:	f003 fa9a 	bl	b7aa2 <_ZN9TimeClass3nowEv>
   b456e:	4602      	mov	r2, r0
   b4570:	17c3      	asrs	r3, r0, #31
   b4572:	4668      	mov	r0, sp
   b4574:	f003 fa3c 	bl	b79f0 <_ZN9TimeClass7timeStrEx>
  dateTime = Time.timeStr();                          //  get current value of date and time
   b4578:	4669      	mov	r1, sp
   b457a:	4834      	ldr	r0, [pc, #208]	; (b464c <loop+0xe8>)
  temp  = bmeOne.readTemperature();
   b457c:	4e34      	ldr	r6, [pc, #208]	; (b4650 <loop+0xec>)
  humid = bmeOne.readHumidity();
   b457e:	4f35      	ldr	r7, [pc, #212]	; (b4654 <loop+0xf0>)
  if (moisture > moistureH) {
   b4580:	4d35      	ldr	r5, [pc, #212]	; (b4658 <loop+0xf4>)
  if (moisture < moistureL) {
   b4582:	4c36      	ldr	r4, [pc, #216]	; (b465c <loop+0xf8>)
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4584:	f8df 90d8 	ldr.w	r9, [pc, #216]	; b4660 <loop+0xfc>
  if (millis() - endTime > SAMPLETIME) {
   b4588:	f8df 80e0 	ldr.w	r8, [pc, #224]	; b466c <loop+0x108>
  dateTime = Time.timeStr();                          //  get current value of date and time
   b458c:	f003 f94c 	bl	b7828 <_ZN6StringaSEOS_>
   b4590:	4668      	mov	r0, sp
   b4592:	f003 f8cd 	bl	b7730 <_ZN6StringD1Ev>
  timeOnly = dateTime.substring(11,19);               //  Extract value of time from dateTime
   b4596:	220b      	movs	r2, #11
   b4598:	2313      	movs	r3, #19
   b459a:	492c      	ldr	r1, [pc, #176]	; (b464c <loop+0xe8>)
   b459c:	4668      	mov	r0, sp
   b459e:	f003 f94b 	bl	b7838 <_ZNK6String9substringEjj>
   b45a2:	4669      	mov	r1, sp
   b45a4:	482e      	ldr	r0, [pc, #184]	; (b4660 <loop+0xfc>)
   b45a6:	f003 f93f 	bl	b7828 <_ZN6StringaSEOS_>
   b45aa:	4668      	mov	r0, sp
   b45ac:	f003 f8c0 	bl	b7730 <_ZN6StringD1Ev>
  temp  = bmeOne.readTemperature();
   b45b0:	482c      	ldr	r0, [pc, #176]	; (b4664 <loop+0x100>)
   b45b2:	f000 fb6b 	bl	b4c8c <_ZN15Adafruit_BME28015readTemperatureEv>
  humid = bmeOne.readHumidity();
   b45b6:	482b      	ldr	r0, [pc, #172]	; (b4664 <loop+0x100>)
  temp  = bmeOne.readTemperature();
   b45b8:	ed86 0a00 	vstr	s0, [r6]
  humid = bmeOne.readHumidity();
   b45bc:	f000 fb96 	bl	b4cec <_ZN15Adafruit_BME28012readHumidityEv>
  moisture = analogRead(MOISTPIN);
   b45c0:	2012      	movs	r0, #18
  humid = bmeOne.readHumidity();
   b45c2:	ed87 0a00 	vstr	s0, [r7]
  moisture = analogRead(MOISTPIN);
   b45c6:	f003 fe64 	bl	b8292 <analogRead>
   b45ca:	4b27      	ldr	r3, [pc, #156]	; (b4668 <loop+0x104>)
  write_SFFII_ToOLED(timeOnly.c_str(), temp, humid, moistureH, moistureL);
   b45cc:	f8d9 1000 	ldr.w	r1, [r9]
  moisture = analogRead(MOISTPIN);
   b45d0:	6018      	str	r0, [r3, #0]
  if (moisture > moistureH) {
   b45d2:	682b      	ldr	r3, [r5, #0]
   b45d4:	4298      	cmp	r0, r3
  if (moisture < moistureL) {
   b45d6:	6823      	ldr	r3, [r4, #0]
    moistureH = moisture;
   b45d8:	bfc8      	it	gt
   b45da:	6028      	strgt	r0, [r5, #0]
  if (moisture < moistureL) {
   b45dc:	4298      	cmp	r0, r3
    moistureL = moisture;
   b45de:	bfb8      	it	lt
   b45e0:	6020      	strlt	r0, [r4, #0]
  write_SFFII_ToOLED(timeOnly.c_str(), temp, humid, moistureH, moistureL);
   b45e2:	4668      	mov	r0, sp
   b45e4:	f003 f8ef 	bl	b77c6 <_ZN6StringC1EPK19__FlashStringHelper>
   b45e8:	6822      	ldr	r2, [r4, #0]
   b45ea:	6829      	ldr	r1, [r5, #0]
   b45ec:	edd7 0a00 	vldr	s1, [r7]
   b45f0:	ed96 0a00 	vldr	s0, [r6]
   b45f4:	4668      	mov	r0, sp
   b45f6:	f7ff ff51 	bl	b449c <_Z18write_SFFII_ToOLED6Stringffii>
   b45fa:	4668      	mov	r0, sp
   b45fc:	f003 f898 	bl	b7730 <_ZN6StringD1Ev>
   b4600:	f002 fc94 	bl	b6f2c <HAL_Timer_Get_Milli_Seconds>
  if (millis() - endTime > SAMPLETIME) {
   b4604:	f8d8 3000 	ldr.w	r3, [r8]
   b4608:	1ac0      	subs	r0, r0, r3
   b460a:	f64e 2360 	movw	r3, #60000	; 0xea60
   b460e:	4298      	cmp	r0, r3
   b4610:	d919      	bls.n	b4646 <loop+0xe2>
    write_SFFII_ToSD(timeOnly.c_str(), temp, humid, moistureH, moistureL);
   b4612:	f8d9 1000 	ldr.w	r1, [r9]
   b4616:	4668      	mov	r0, sp
   b4618:	f003 f8d5 	bl	b77c6 <_ZN6StringC1EPK19__FlashStringHelper>
   b461c:	6822      	ldr	r2, [r4, #0]
   b461e:	6829      	ldr	r1, [r5, #0]
   b4620:	edd7 0a00 	vldr	s1, [r7]
   b4624:	ed96 0a00 	vldr	s0, [r6]
   b4628:	4668      	mov	r0, sp
   b462a:	f7ff fecd 	bl	b43c8 <_Z16write_SFFII_ToSD6Stringffii>
   b462e:	4668      	mov	r0, sp
   b4630:	f003 f87e 	bl	b7730 <_ZN6StringD1Ev>
    moistureH = MOINSTINITH;  //  Reset moisture high & low indicators
   b4634:	2300      	movs	r3, #0
   b4636:	602b      	str	r3, [r5, #0]
    moistureL = MOINSTINITL;
   b4638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   b463c:	6023      	str	r3, [r4, #0]
   b463e:	f002 fc75 	bl	b6f2c <HAL_Timer_Get_Milli_Seconds>
    endTime = millis();
   b4642:	f8c8 0000 	str.w	r0, [r8]
}
   b4646:	b005      	add	sp, #20
   b4648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b464c:	2003e608 	.word	0x2003e608
   b4650:	2003e654 	.word	0x2003e654
   b4654:	2003e640 	.word	0x2003e640
   b4658:	2003e648 	.word	0x2003e648
   b465c:	2003e64c 	.word	0x2003e64c
   b4660:	2003e68c 	.word	0x2003e68c
   b4664:	2003e5c4 	.word	0x2003e5c4
   b4668:	2003e644 	.word	0x2003e644
   b466c:	2003e63c 	.word	0x2003e63c

000b4670 <_GLOBAL__sub_I_SystemMode>:

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4670:	4b25      	ldr	r3, [pc, #148]	; (b4708 <_GLOBAL__sub_I_SystemMode+0x98>)
   b4672:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4674:	2500      	movs	r5, #0
    SleepResult() {}
   b4676:	4a25      	ldr	r2, [pc, #148]	; (b470c <_GLOBAL__sub_I_SystemMode+0x9c>)
   b4678:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b467a:	e9c3 5500 	strd	r5, r5, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b467e:	2002      	movs	r0, #2
   b4680:	f002 fdcc 	bl	b721c <set_system_mode>
  String     dateTime, timeOnly;   
   b4684:	4922      	ldr	r1, [pc, #136]	; (b4710 <_GLOBAL__sub_I_SystemMode+0xa0>)
   b4686:	4823      	ldr	r0, [pc, #140]	; (b4714 <_GLOBAL__sub_I_SystemMode+0xa4>)
  SdFat() {
   b4688:	4c23      	ldr	r4, [pc, #140]	; (b4718 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b468a:	f003 f89c 	bl	b77c6 <_ZN6StringC1EPK19__FlashStringHelper>
   b468e:	4920      	ldr	r1, [pc, #128]	; (b4710 <_GLOBAL__sub_I_SystemMode+0xa0>)
   b4690:	4822      	ldr	r0, [pc, #136]	; (b471c <_GLOBAL__sub_I_SystemMode+0xac>)
   b4692:	f003 f898 	bl	b77c6 <_ZN6StringC1EPK19__FlashStringHelper>
    Print() : write_error(0) {}
   b4696:	4b22      	ldr	r3, [pc, #136]	; (b4720 <_GLOBAL__sub_I_SystemMode+0xb0>)
  Adafruit_SSD1306 displayOne(OLEDRESET);
   b4698:	4822      	ldr	r0, [pc, #136]	; (b4724 <_GLOBAL__sub_I_SystemMode+0xb4>)
   b469a:	605d      	str	r5, [r3, #4]
    Stream() {_timeout=1000;}
   b469c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b46a0:	609a      	str	r2, [r3, #8]
  File() {}
   b46a2:	4a21      	ldr	r2, [pc, #132]	; (b4728 <_GLOBAL__sub_I_SystemMode+0xb8>)
   b46a4:	611d      	str	r5, [r3, #16]
   b46a6:	601a      	str	r2, [r3, #0]
   b46a8:	f04f 31ff 	mov.w	r1, #4294967295
   b46ac:	f000 fd80 	bl	b51b0 <_ZN16Adafruit_SSD1306C1Ea>
  Adafruit_BME280    bmeOne;
   b46b0:	481e      	ldr	r0, [pc, #120]	; (b472c <_GLOBAL__sub_I_SystemMode+0xbc>)
   b46b2:	f000 f843 	bl	b473c <_ZN15Adafruit_BME280C1Ev>
   b46b6:	2364      	movs	r3, #100	; 0x64
   b46b8:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
  {
   b46bc:	4b1c      	ldr	r3, [pc, #112]	; (b4730 <_GLOBAL__sub_I_SystemMode+0xc0>)
   b46be:	6065      	str	r5, [r4, #4]
   b46c0:	f8c4 543c 	str.w	r5, [r4, #1084]	; 0x43c
   b46c4:	f8c4 5468 	str.w	r5, [r4, #1128]	; 0x468
   b46c8:	f8c4 3470 	str.w	r3, [r4, #1136]	; 0x470
   b46cc:	f8c4 5478 	str.w	r5, [r4, #1144]	; 0x478
   b46d0:	f8a4 547c 	strh.w	r5, [r4, #1148]	; 0x47c
   b46d4:	2301      	movs	r3, #1

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b46d6:	4d17      	ldr	r5, [pc, #92]	; (b4734 <_GLOBAL__sub_I_SystemMode+0xc4>)
   b46d8:	f884 3474 	strb.w	r3, [r4, #1140]	; 0x474
   b46dc:	7829      	ldrb	r1, [r5, #0]
   b46de:	f3bf 8f5b 	dmb	ish
   b46e2:	4019      	ands	r1, r3
   b46e4:	d10b      	bne.n	b46fe <_GLOBAL__sub_I_SystemMode+0x8e>
   b46e6:	4628      	mov	r0, r5
   b46e8:	9101      	str	r1, [sp, #4]
   b46ea:	f7ff fce1 	bl	b40b0 <__cxa_guard_acquire>
   b46ee:	9901      	ldr	r1, [sp, #4]
   b46f0:	b128      	cbz	r0, b46fe <_GLOBAL__sub_I_SystemMode+0x8e>
   b46f2:	4811      	ldr	r0, [pc, #68]	; (b4738 <_GLOBAL__sub_I_SystemMode+0xc8>)
   b46f4:	f002 feca 	bl	b748c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b46f8:	4628      	mov	r0, r5
   b46fa:	f7ff fcde 	bl	b40ba <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b46fe:	4b0e      	ldr	r3, [pc, #56]	; (b4738 <_GLOBAL__sub_I_SystemMode+0xc8>)
   b4700:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   b4704:	b003      	add	sp, #12
   b4706:	bd30      	pop	{r4, r5, pc}
   b4708:	2003e5b8 	.word	0x2003e5b8
   b470c:	ffff0000 	.word	0xffff0000
   b4710:	000b8f32 	.word	0x000b8f32
   b4714:	2003e608 	.word	0x2003e608
   b4718:	2003e134 	.word	0x2003e134
   b471c:	2003e68c 	.word	0x2003e68c
   b4720:	2003e658 	.word	0x2003e658
   b4724:	2003e618 	.word	0x2003e618
   b4728:	000b8fe4 	.word	0x000b8fe4
   b472c:	2003e5c4 	.word	0x2003e5c4
   b4730:	000b8fd0 	.word	0x000b8fd0
   b4734:	2003e128 	.word	0x2003e128
   b4738:	2003e12c 	.word	0x2003e12c

000b473c <_ZN15Adafruit_BME280C1Ev>:
#include "Adafruit_BME280.h"

/***************************************************************************
 PRIVATE FUNCTIONS
 ***************************************************************************/
Adafruit_BME280::Adafruit_BME280()
   b473c:	b510      	push	{r4, lr}
   b473e:	4604      	mov	r4, r0
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b4740:	f003 fe38 	bl	b83b4 <_Z19__fetch_global_Wirev>
   b4744:	f04f 33ff 	mov.w	r3, #4294967295
   b4748:	6020      	str	r0, [r4, #0]
   b474a:	6123      	str	r3, [r4, #16]
{ }
   b474c:	4620      	mov	r0, r4
   b474e:	bd10      	pop	{r4, pc}

000b4750 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   b4750:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b4752:	4c0b      	ldr	r4, [pc, #44]	; (b4780 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b4754:	7821      	ldrb	r1, [r4, #0]
   b4756:	f3bf 8f5b 	dmb	ish
   b475a:	f011 0101 	ands.w	r1, r1, #1
   b475e:	d10b      	bne.n	b4778 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4760:	4620      	mov	r0, r4
   b4762:	9101      	str	r1, [sp, #4]
   b4764:	f7ff fca4 	bl	b40b0 <__cxa_guard_acquire>
   b4768:	9901      	ldr	r1, [sp, #4]
   b476a:	b128      	cbz	r0, b4778 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b476c:	4805      	ldr	r0, [pc, #20]	; (b4784 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b476e:	f002 fe8d 	bl	b748c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4772:	4620      	mov	r0, r4
   b4774:	f7ff fca1 	bl	b40ba <__cxa_guard_release>
        return instance;
    }
   b4778:	4802      	ldr	r0, [pc, #8]	; (b4784 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b477a:	b002      	add	sp, #8
   b477c:	bd10      	pop	{r4, pc}
   b477e:	bf00      	nop
   b4780:	2003e128 	.word	0x2003e128
   b4784:	2003e12c 	.word	0x2003e12c

000b4788 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   b4788:	b508      	push	{r3, lr}
        instance().endTransaction();
   b478a:	f7ff ffe1 	bl	b4750 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b478e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b4792:	f002 bec1 	b.w	b7518 <_ZN8SPIClass14endTransactionEv>

000b4796 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b4796:	b507      	push	{r0, r1, r2, lr}
   b4798:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b479a:	f7ff ffd9 	bl	b4750 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b479e:	9901      	ldr	r1, [sp, #4]
    }
   b47a0:	b003      	add	sp, #12
   b47a2:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b47a6:	f002 bed1 	b.w	b754c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b47aa <_ZN15Adafruit_BME2807spixferEh>:
/**************************************************************************/
/*!
    @brief  Encapsulate hardware and software SPI transfer into one function
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b47aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   b47ae:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b47b2:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b47b4:	4605      	mov	r5, r0
   b47b6:	460f      	mov	r7, r1
    if (_sck == -1)
   b47b8:	d106      	bne.n	b47c8 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b47ba:	f7ff ffc9 	bl	b4750 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b47be:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   b47c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b47c4:	f002 bf88 	b.w	b76d8 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   b47c8:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   b47ca:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   b47cc:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   b47d0:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b47d4:	2100      	movs	r1, #0
   b47d6:	b280      	uxth	r0, r0
   b47d8:	f003 fd2f 	bl	b823a <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   b47dc:	f995 0011 	ldrsb.w	r0, [r5, #17]
   b47e0:	fa08 f106 	lsl.w	r1, r8, r6
   b47e4:	4039      	ands	r1, r7
   b47e6:	b280      	uxth	r0, r0
   b47e8:	f003 fd27 	bl	b823a <digitalWrite>
        digitalWrite(_sck, HIGH);
   b47ec:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b47f0:	2101      	movs	r1, #1
   b47f2:	b280      	uxth	r0, r0
   b47f4:	f003 fd21 	bl	b823a <digitalWrite>
        if (digitalRead(_miso))
   b47f8:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   b47fc:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   b47fe:	b280      	uxth	r0, r0
        reply <<= 1;
   b4800:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   b4802:	f003 fd33 	bl	b826c <digitalRead>
   b4806:	b108      	cbz	r0, b480c <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   b4808:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   b480c:	3e01      	subs	r6, #1
   b480e:	d2df      	bcs.n	b47d0 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   b4810:	4620      	mov	r0, r4
   b4812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4818 <_ZN15Adafruit_BME2806write8Ehh>:
/**************************************************************************/
/*!
    @brief  Writes an 8 bit value over I2C or SPI
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   b4818:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   b481a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b481e:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   b4820:	4604      	mov	r4, r0
   b4822:	460e      	mov	r6, r1
   b4824:	4615      	mov	r5, r2
    if (_cs == -1) {
   b4826:	d113      	bne.n	b4850 <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire.beginTransmission((uint8_t)_i2caddr);
   b4828:	7901      	ldrb	r1, [r0, #4]
   b482a:	6800      	ldr	r0, [r0, #0]
   b482c:	f003 fbbe 	bl	b7fac <_ZN7TwoWire17beginTransmissionEh>
        _wire.write((uint8_t)reg);
   b4830:	6820      	ldr	r0, [r4, #0]
   b4832:	6803      	ldr	r3, [r0, #0]
   b4834:	4631      	mov	r1, r6
   b4836:	689b      	ldr	r3, [r3, #8]
   b4838:	4798      	blx	r3
        _wire.write((uint8_t)value);
   b483a:	6820      	ldr	r0, [r4, #0]
   b483c:	6803      	ldr	r3, [r0, #0]
   b483e:	4629      	mov	r1, r5
   b4840:	689b      	ldr	r3, [r3, #8]
   b4842:	4798      	blx	r3
        _wire.endTransmission();
   b4844:	6820      	ldr	r0, [r4, #0]
        spixfer(value);
        digitalWrite(_cs, HIGH);
    if (_sck == -1)
        SPI.endTransaction(); // release the SPI bus
    }
}
   b4846:	b004      	add	sp, #16
   b4848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire.endTransmission();
   b484c:	f003 bbb9 	b.w	b7fc2 <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
   b4850:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4854:	3301      	adds	r3, #1
   b4856:	d10c      	bne.n	b4872 <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
   b4858:	4b16      	ldr	r3, [pc, #88]	; (b48b4 <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   b485a:	9300      	str	r3, [sp, #0]
   b485c:	2300      	movs	r3, #0
   b485e:	f88d 3004 	strb.w	r3, [sp, #4]
   b4862:	4b15      	ldr	r3, [pc, #84]	; (b48b8 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   b4864:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4866:	4668      	mov	r0, sp
   b4868:	2301      	movs	r3, #1
   b486a:	f8ad 300c 	strh.w	r3, [sp, #12]
   b486e:	f7ff ff92 	bl	b4796 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4872:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4876:	2100      	movs	r1, #0
   b4878:	b280      	uxth	r0, r0
   b487a:	f003 fcde 	bl	b823a <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   b487e:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b4882:	4620      	mov	r0, r4
   b4884:	f7ff ff91 	bl	b47aa <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   b4888:	4629      	mov	r1, r5
   b488a:	4620      	mov	r0, r4
   b488c:	f7ff ff8d 	bl	b47aa <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   b4890:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4894:	2101      	movs	r1, #1
   b4896:	b280      	uxth	r0, r0
   b4898:	f003 fccf 	bl	b823a <digitalWrite>
    if (_sck == -1)
   b489c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b48a0:	3301      	adds	r3, #1
   b48a2:	d104      	bne.n	b48ae <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
   b48a4:	b004      	add	sp, #16
   b48a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
   b48aa:	f7ff bf6d 	b.w	b4788 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b48ae:	b004      	add	sp, #16
   b48b0:	bd70      	pop	{r4, r5, r6, pc}
   b48b2:	bf00      	nop
   b48b4:	000b8fd0 	.word	0x000b8fd0
   b48b8:	0007a120 	.word	0x0007a120

000b48bc <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   b48bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   b48be:	00db      	lsls	r3, r3, #3
   b48c0:	f002 0207 	and.w	r2, r2, #7
   b48c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
   b48c8:	4313      	orrs	r3, r2
   b48ca:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   b48ce:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   b48d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   b48d6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   b48da:	f89d 501c 	ldrb.w	r5, [sp, #28]
   b48de:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   b48e2:	f366 1347 	bfi	r3, r6, #5, #3
   b48e6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   b48ea:	00ed      	lsls	r5, r5, #3
   b48ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b48f0:	f007 0707 	and.w	r7, r7, #7
   b48f4:	f005 0538 	and.w	r5, r5, #56	; 0x38
   b48f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   b48fc:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   b48fe:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   b4900:	431d      	orrs	r5, r3
   b4902:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   b4906:	f006 0207 	and.w	r2, r6, #7
   b490a:	21f2      	movs	r1, #242	; 0xf2
   b490c:	f7ff ff84 	bl	b4818 <_ZN15Adafruit_BME2806write8Ehh>
            // unused - don't set
            unsigned int none : 1;
            unsigned int spi3w_en : 1;

            unsigned int get() {
                return (t_sb << 5) | (filter << 3) | spi3w_en;
   b4910:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   b4914:	f002 0107 	and.w	r1, r2, #7
   b4918:	f002 0338 	and.w	r3, r2, #56	; 0x38
   b491c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   b4920:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   b4924:	4620      	mov	r0, r4
   b4926:	21f5      	movs	r1, #245	; 0xf5
   b4928:	f7ff ff76 	bl	b4818 <_ZN15Adafruit_BME2806write8Ehh>
            // 01 or 10 = forced
            // 11       = normal
            unsigned int mode : 2;

            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 3) | mode;
   b492c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b4930:	f002 0107 	and.w	r1, r2, #7
   b4934:	f002 0338 	and.w	r3, r2, #56	; 0x38
   b4938:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b493c:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   b4940:	4620      	mov	r0, r4
   b4942:	21f4      	movs	r1, #244	; 0xf4
}
   b4944:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4948:	f7ff bf66 	b.w	b4818 <_ZN15Adafruit_BME2806write8Ehh>

000b494c <_ZN15Adafruit_BME2805read8Eh>:
/**************************************************************************/
/*!
    @brief  Reads an 8 bit value over I2C or SPI
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   b494c:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   b494e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4952:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   b4954:	b085      	sub	sp, #20
   b4956:	4604      	mov	r4, r0
   b4958:	460d      	mov	r5, r1
    if (_cs == -1) {
   b495a:	d118      	bne.n	b498e <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire.beginTransmission((uint8_t)_i2caddr);
   b495c:	7901      	ldrb	r1, [r0, #4]
   b495e:	6800      	ldr	r0, [r0, #0]
   b4960:	f003 fb24 	bl	b7fac <_ZN7TwoWire17beginTransmissionEh>
        _wire.write((uint8_t)reg);
   b4964:	6820      	ldr	r0, [r4, #0]
   b4966:	6803      	ldr	r3, [r0, #0]
   b4968:	4629      	mov	r1, r5
   b496a:	689b      	ldr	r3, [r3, #8]
   b496c:	4798      	blx	r3
        _wire.endTransmission();
   b496e:	6820      	ldr	r0, [r4, #0]
   b4970:	f003 fb27 	bl	b7fc2 <_ZN7TwoWire15endTransmissionEv>
        _wire.requestFrom((uint8_t)_i2caddr, (byte)1);
   b4974:	7921      	ldrb	r1, [r4, #4]
   b4976:	6820      	ldr	r0, [r4, #0]
   b4978:	2201      	movs	r2, #1
   b497a:	f003 fb14 	bl	b7fa6 <_ZN7TwoWire11requestFromEhj>
        value = _wire.read();
   b497e:	6820      	ldr	r0, [r4, #0]
   b4980:	6803      	ldr	r3, [r0, #0]
   b4982:	695b      	ldr	r3, [r3, #20]
   b4984:	4798      	blx	r3
   b4986:	b2c5      	uxtb	r5, r0
        digitalWrite(_cs, HIGH);
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }
    return value;
}
   b4988:	4628      	mov	r0, r5
   b498a:	b005      	add	sp, #20
   b498c:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b498e:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4992:	3301      	adds	r3, #1
   b4994:	d10c      	bne.n	b49b0 <_ZN15Adafruit_BME2805read8Eh+0x64>
   b4996:	4b15      	ldr	r3, [pc, #84]	; (b49ec <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   b4998:	9300      	str	r3, [sp, #0]
   b499a:	2300      	movs	r3, #0
   b499c:	f88d 3004 	strb.w	r3, [sp, #4]
   b49a0:	4b13      	ldr	r3, [pc, #76]	; (b49f0 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   b49a2:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b49a4:	4668      	mov	r0, sp
   b49a6:	2301      	movs	r3, #1
   b49a8:	f8ad 300c 	strh.w	r3, [sp, #12]
   b49ac:	f7ff fef3 	bl	b4796 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b49b0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b49b4:	2100      	movs	r1, #0
   b49b6:	b280      	uxth	r0, r0
   b49b8:	f003 fc3f 	bl	b823a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b49bc:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b49c0:	4620      	mov	r0, r4
   b49c2:	f7ff fef2 	bl	b47aa <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b49c6:	2100      	movs	r1, #0
   b49c8:	4620      	mov	r0, r4
   b49ca:	f7ff feee 	bl	b47aa <_ZN15Adafruit_BME2807spixferEh>
   b49ce:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   b49d0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b49d4:	2101      	movs	r1, #1
   b49d6:	b280      	uxth	r0, r0
   b49d8:	f003 fc2f 	bl	b823a <digitalWrite>
        if (_sck == -1)
   b49dc:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b49e0:	3301      	adds	r3, #1
   b49e2:	d1d1      	bne.n	b4988 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   b49e4:	f7ff fed0 	bl	b4788 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b49e8:	e7ce      	b.n	b4988 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   b49ea:	bf00      	nop
   b49ec:	000b8fd0 	.word	0x000b8fd0
   b49f0:	0007a120 	.word	0x0007a120

000b49f4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
/*!
    @brief return true if chip is busy reading cal data
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   b49f4:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   b49f6:	21f3      	movs	r1, #243	; 0xf3
   b49f8:	f7ff ffa8 	bl	b494c <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   b49fc:	f000 0001 	and.w	r0, r0, #1
   b4a00:	bd08      	pop	{r3, pc}
	...

000b4a04 <_ZN15Adafruit_BME2806read16Eh>:
{
   b4a04:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4a06:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4a0a:	3301      	adds	r3, #1
{
   b4a0c:	b085      	sub	sp, #20
   b4a0e:	4604      	mov	r4, r0
   b4a10:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4a12:	d11f      	bne.n	b4a54 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire.beginTransmission((uint8_t)_i2caddr);
   b4a14:	7901      	ldrb	r1, [r0, #4]
   b4a16:	6800      	ldr	r0, [r0, #0]
   b4a18:	f003 fac8 	bl	b7fac <_ZN7TwoWire17beginTransmissionEh>
        _wire.write((uint8_t)reg);
   b4a1c:	6820      	ldr	r0, [r4, #0]
   b4a1e:	6803      	ldr	r3, [r0, #0]
   b4a20:	4629      	mov	r1, r5
   b4a22:	689b      	ldr	r3, [r3, #8]
   b4a24:	4798      	blx	r3
        _wire.endTransmission();
   b4a26:	6820      	ldr	r0, [r4, #0]
   b4a28:	f003 facb 	bl	b7fc2 <_ZN7TwoWire15endTransmissionEv>
        _wire.requestFrom((uint8_t)_i2caddr, (byte)2);
   b4a2c:	7921      	ldrb	r1, [r4, #4]
   b4a2e:	6820      	ldr	r0, [r4, #0]
   b4a30:	2202      	movs	r2, #2
   b4a32:	f003 fab8 	bl	b7fa6 <_ZN7TwoWire11requestFromEhj>
        value = (_wire.read() << 8) | _wire.read();
   b4a36:	6820      	ldr	r0, [r4, #0]
   b4a38:	6803      	ldr	r3, [r0, #0]
   b4a3a:	695b      	ldr	r3, [r3, #20]
   b4a3c:	4798      	blx	r3
   b4a3e:	4605      	mov	r5, r0
   b4a40:	6820      	ldr	r0, [r4, #0]
   b4a42:	6803      	ldr	r3, [r0, #0]
   b4a44:	695b      	ldr	r3, [r3, #20]
   b4a46:	4798      	blx	r3
   b4a48:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4a4c:	b285      	uxth	r5, r0
}
   b4a4e:	4628      	mov	r0, r5
   b4a50:	b005      	add	sp, #20
   b4a52:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4a54:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4a58:	3301      	adds	r3, #1
   b4a5a:	d10c      	bne.n	b4a76 <_ZN15Adafruit_BME2806read16Eh+0x72>
   b4a5c:	4b18      	ldr	r3, [pc, #96]	; (b4ac0 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   b4a5e:	9300      	str	r3, [sp, #0]
   b4a60:	2300      	movs	r3, #0
   b4a62:	f88d 3004 	strb.w	r3, [sp, #4]
   b4a66:	4b17      	ldr	r3, [pc, #92]	; (b4ac4 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   b4a68:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4a6a:	4668      	mov	r0, sp
   b4a6c:	2301      	movs	r3, #1
   b4a6e:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4a72:	f7ff fe90 	bl	b4796 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4a76:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4a7a:	2100      	movs	r1, #0
   b4a7c:	b280      	uxth	r0, r0
   b4a7e:	f003 fbdc 	bl	b823a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4a82:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4a86:	4620      	mov	r0, r4
   b4a88:	f7ff fe8f 	bl	b47aa <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   b4a8c:	2100      	movs	r1, #0
   b4a8e:	4620      	mov	r0, r4
   b4a90:	f7ff fe8b 	bl	b47aa <_ZN15Adafruit_BME2807spixferEh>
   b4a94:	2100      	movs	r1, #0
   b4a96:	4605      	mov	r5, r0
   b4a98:	4620      	mov	r0, r4
   b4a9a:	f7ff fe86 	bl	b47aa <_ZN15Adafruit_BME2807spixferEh>
   b4a9e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4aa2:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   b4aa4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4aa8:	2101      	movs	r1, #1
   b4aaa:	b280      	uxth	r0, r0
   b4aac:	f003 fbc5 	bl	b823a <digitalWrite>
        if (_sck == -1)
   b4ab0:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4ab4:	3301      	adds	r3, #1
   b4ab6:	d1ca      	bne.n	b4a4e <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   b4ab8:	f7ff fe66 	bl	b4788 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4abc:	e7c7      	b.n	b4a4e <_ZN15Adafruit_BME2806read16Eh+0x4a>
   b4abe:	bf00      	nop
   b4ac0:	000b8fd0 	.word	0x000b8fd0
   b4ac4:	0007a120 	.word	0x0007a120

000b4ac8 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   b4ac8:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   b4aca:	f7ff ff9b 	bl	b4a04 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   b4ace:	ba40      	rev16	r0, r0
}
   b4ad0:	b280      	uxth	r0, r0
   b4ad2:	bd08      	pop	{r3, pc}

000b4ad4 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   b4ad4:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4ad6:	2188      	movs	r1, #136	; 0x88
{
   b4ad8:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4ada:	f7ff fff5 	bl	b4ac8 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4ade:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4ae0:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   b4ae2:	4620      	mov	r0, r4
   b4ae4:	f7ff fff0 	bl	b4ac8 <_ZN15Adafruit_BME2809read16_LEEh>
   b4ae8:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   b4aea:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   b4aec:	4620      	mov	r0, r4
   b4aee:	f7ff ffeb 	bl	b4ac8 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4af2:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   b4af4:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4af6:	4620      	mov	r0, r4
   b4af8:	f7ff ffe6 	bl	b4ac8 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4afc:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4afe:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   b4b00:	4620      	mov	r0, r4
   b4b02:	f7ff ffe1 	bl	b4ac8 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b06:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   b4b08:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   b4b0a:	4620      	mov	r0, r4
   b4b0c:	f7ff ffdc 	bl	b4ac8 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b10:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   b4b12:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   b4b14:	4620      	mov	r0, r4
   b4b16:	f7ff ffd7 	bl	b4ac8 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b1a:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   b4b1c:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   b4b1e:	4620      	mov	r0, r4
   b4b20:	f7ff ffd2 	bl	b4ac8 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b24:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   b4b26:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   b4b28:	4620      	mov	r0, r4
   b4b2a:	f7ff ffcd 	bl	b4ac8 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b2e:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   b4b30:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   b4b32:	4620      	mov	r0, r4
   b4b34:	f7ff ffc8 	bl	b4ac8 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b38:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   b4b3a:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   b4b3c:	4620      	mov	r0, r4
   b4b3e:	f7ff ffc3 	bl	b4ac8 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b42:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   b4b44:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   b4b46:	4620      	mov	r0, r4
   b4b48:	f7ff ffbe 	bl	b4ac8 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4b4c:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   b4b4e:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4b50:	4620      	mov	r0, r4
   b4b52:	f7ff fefb 	bl	b494c <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   b4b56:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4b58:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   b4b5c:	4620      	mov	r0, r4
   b4b5e:	f7ff ffb3 	bl	b4ac8 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4b62:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   b4b64:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4b66:	4620      	mov	r0, r4
   b4b68:	f7ff fef0 	bl	b494c <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4b6c:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4b6e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4b72:	4620      	mov	r0, r4
   b4b74:	f7ff feea 	bl	b494c <_ZN15Adafruit_BME2805read8Eh>
   b4b78:	21e5      	movs	r1, #229	; 0xe5
   b4b7a:	4605      	mov	r5, r0
   b4b7c:	4620      	mov	r0, r4
   b4b7e:	f7ff fee5 	bl	b494c <_ZN15Adafruit_BME2805read8Eh>
   b4b82:	f000 030f 	and.w	r3, r0, #15
   b4b86:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4b8a:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   b4b8c:	21e6      	movs	r1, #230	; 0xe6
   b4b8e:	4620      	mov	r0, r4
   b4b90:	f7ff fedc 	bl	b494c <_ZN15Adafruit_BME2805read8Eh>
   b4b94:	21e5      	movs	r1, #229	; 0xe5
   b4b96:	4605      	mov	r5, r0
   b4b98:	4620      	mov	r0, r4
   b4b9a:	f7ff fed7 	bl	b494c <_ZN15Adafruit_BME2805read8Eh>
   b4b9e:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b4ba2:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4ba6:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   b4ba8:	21e7      	movs	r1, #231	; 0xe7
   b4baa:	4620      	mov	r0, r4
   b4bac:	f7ff fece 	bl	b494c <_ZN15Adafruit_BME2805read8Eh>
   b4bb0:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   b4bb4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4bb8 <_ZN15Adafruit_BME2806read24Eh>:
{
   b4bb8:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4bba:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4bbe:	3301      	adds	r3, #1
{
   b4bc0:	b085      	sub	sp, #20
   b4bc2:	4604      	mov	r4, r0
   b4bc4:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4bc6:	d123      	bne.n	b4c10 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire.beginTransmission((uint8_t)_i2caddr);
   b4bc8:	7901      	ldrb	r1, [r0, #4]
   b4bca:	6800      	ldr	r0, [r0, #0]
   b4bcc:	f003 f9ee 	bl	b7fac <_ZN7TwoWire17beginTransmissionEh>
        _wire.write((uint8_t)reg);
   b4bd0:	6820      	ldr	r0, [r4, #0]
   b4bd2:	6803      	ldr	r3, [r0, #0]
   b4bd4:	4629      	mov	r1, r5
   b4bd6:	689b      	ldr	r3, [r3, #8]
   b4bd8:	4798      	blx	r3
        _wire.endTransmission();
   b4bda:	6820      	ldr	r0, [r4, #0]
   b4bdc:	f003 f9f1 	bl	b7fc2 <_ZN7TwoWire15endTransmissionEv>
        _wire.requestFrom((uint8_t)_i2caddr, (byte)3);
   b4be0:	7921      	ldrb	r1, [r4, #4]
   b4be2:	6820      	ldr	r0, [r4, #0]
   b4be4:	2203      	movs	r2, #3
   b4be6:	f003 f9de 	bl	b7fa6 <_ZN7TwoWire11requestFromEhj>
        value = _wire.read();
   b4bea:	6820      	ldr	r0, [r4, #0]
   b4bec:	6803      	ldr	r3, [r0, #0]
   b4bee:	695b      	ldr	r3, [r3, #20]
   b4bf0:	4798      	blx	r3
        value <<= 8;
   b4bf2:	0205      	lsls	r5, r0, #8
        value |= _wire.read();
   b4bf4:	6820      	ldr	r0, [r4, #0]
   b4bf6:	6803      	ldr	r3, [r0, #0]
   b4bf8:	695b      	ldr	r3, [r3, #20]
   b4bfa:	4798      	blx	r3
   b4bfc:	4328      	orrs	r0, r5
        value <<= 8;
   b4bfe:	0205      	lsls	r5, r0, #8
        value |= _wire.read();
   b4c00:	6820      	ldr	r0, [r4, #0]
   b4c02:	6803      	ldr	r3, [r0, #0]
   b4c04:	695b      	ldr	r3, [r3, #20]
   b4c06:	4798      	blx	r3
   b4c08:	4305      	orrs	r5, r0
}
   b4c0a:	4628      	mov	r0, r5
   b4c0c:	b005      	add	sp, #20
   b4c0e:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4c10:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4c14:	3301      	adds	r3, #1
   b4c16:	d10c      	bne.n	b4c32 <_ZN15Adafruit_BME2806read24Eh+0x7a>
   b4c18:	4b1a      	ldr	r3, [pc, #104]	; (b4c84 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   b4c1a:	9300      	str	r3, [sp, #0]
   b4c1c:	2300      	movs	r3, #0
   b4c1e:	f88d 3004 	strb.w	r3, [sp, #4]
   b4c22:	4b19      	ldr	r3, [pc, #100]	; (b4c88 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   b4c24:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4c26:	4668      	mov	r0, sp
   b4c28:	2301      	movs	r3, #1
   b4c2a:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4c2e:	f7ff fdb2 	bl	b4796 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4c32:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4c36:	2100      	movs	r1, #0
   b4c38:	b280      	uxth	r0, r0
   b4c3a:	f003 fafe 	bl	b823a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4c3e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4c42:	4620      	mov	r0, r4
   b4c44:	f7ff fdb1 	bl	b47aa <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4c48:	2100      	movs	r1, #0
   b4c4a:	4620      	mov	r0, r4
   b4c4c:	f7ff fdad 	bl	b47aa <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   b4c50:	2100      	movs	r1, #0
        value <<= 8;
   b4c52:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4c54:	4620      	mov	r0, r4
   b4c56:	f7ff fda8 	bl	b47aa <_ZN15Adafruit_BME2807spixferEh>
   b4c5a:	4328      	orrs	r0, r5
        value <<= 8;
   b4c5c:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4c5e:	2100      	movs	r1, #0
   b4c60:	4620      	mov	r0, r4
   b4c62:	f7ff fda2 	bl	b47aa <_ZN15Adafruit_BME2807spixferEh>
   b4c66:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   b4c68:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4c6c:	2101      	movs	r1, #1
   b4c6e:	b280      	uxth	r0, r0
   b4c70:	f003 fae3 	bl	b823a <digitalWrite>
        if (_sck == -1)
   b4c74:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4c78:	3301      	adds	r3, #1
   b4c7a:	d1c6      	bne.n	b4c0a <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   b4c7c:	f7ff fd84 	bl	b4788 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   b4c80:	e7c3      	b.n	b4c0a <_ZN15Adafruit_BME2806read24Eh+0x52>
   b4c82:	bf00      	nop
   b4c84:	000b8fd0 	.word	0x000b8fd0
   b4c88:	0007a120 	.word	0x0007a120

000b4c8c <_ZN15Adafruit_BME28015readTemperatureEv>:
/*!
    @brief  Returns the temperature from the sensor
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   b4c8c:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4c8e:	21fa      	movs	r1, #250	; 0xfa
{
   b4c90:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4c92:	f7ff ff91 	bl	b4bb8 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   b4c96:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4c9a:	d01f      	beq.n	b4cdc <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4c9c:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   b4c9e:	ed9f 7a11 	vldr	s14, [pc, #68]	; b4ce4 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4ca2:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4ca4:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4ca8:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   b4cac:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4cb0:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4cb2:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   b4cb6:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   b4cba:	131b      	asrs	r3, r3, #12
   b4cbc:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4cbe:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   b4cc0:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b4cc4:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   b4cc6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4cca:	3380      	adds	r3, #128	; 0x80
   b4ccc:	121b      	asrs	r3, r3, #8
   b4cce:	ee07 3a90 	vmov	s15, r3
   b4cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   b4cd6:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b4cda:	bd10      	pop	{r4, pc}
        return NAN;
   b4cdc:	ed9f 0a02 	vldr	s0, [pc, #8]	; b4ce8 <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
   b4ce0:	e7fb      	b.n	b4cda <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
   b4ce2:	bf00      	nop
   b4ce4:	42c80000 	.word	0x42c80000
   b4ce8:	7fc00000 	.word	0x7fc00000

000b4cec <_ZN15Adafruit_BME28012readHumidityEv>:
/**************************************************************************/
/*!
    @brief  Returns the humidity from the sensor
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   b4cec:	b538      	push	{r3, r4, r5, lr}
   b4cee:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   b4cf0:	f7ff ffcc 	bl	b4c8c <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   b4cf4:	21fd      	movs	r1, #253	; 0xfd
   b4cf6:	4620      	mov	r0, r4
   b4cf8:	f7ff fe84 	bl	b4a04 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   b4cfc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   b4d00:	d038      	beq.n	b4d74 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4d02:	68e1      	ldr	r1, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4d04:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4d08:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4d0c:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
   b4d10:	0509      	lsls	r1, r1, #20
   b4d12:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b4d16:	fb05 3312 	mls	r3, r5, r2, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4d1a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   b4d1e:	13da      	asrs	r2, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d20:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4d24:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d28:	436b      	muls	r3, r5
   b4d2a:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4d2c:	4369      	muls	r1, r5
   b4d2e:	1289      	asrs	r1, r1, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d30:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4d34:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d36:	129b      	asrs	r3, r3, #10
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4d38:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d3c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4d40:	434b      	muls	r3, r1
   b4d42:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b4d46:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4d48:	4353      	muls	r3, r2

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4d4a:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   b4d4c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4d50:	4352      	muls	r2, r2
   b4d52:	11d2      	asrs	r2, r2, #7
   b4d54:	434a      	muls	r2, r1
   b4d56:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   b4d5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   b4d5e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b4d62:	bfa8      	it	ge
   b4d64:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   b4d68:	131b      	asrs	r3, r3, #12
   b4d6a:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   b4d6e:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b4d72:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   b4d74:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4d7c <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   b4d78:	e7fb      	b.n	b4d72 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   b4d7a:	bf00      	nop
   b4d7c:	7fc00000 	.word	0x7fc00000

000b4d80 <_ZN15Adafruit_BME2805beginEh>:
{
   b4d80:	b530      	push	{r4, r5, lr}
   b4d82:	4604      	mov	r4, r0
    _i2caddr = addr;
   b4d84:	7101      	strb	r1, [r0, #4]
    if (_cs == -1) {
   b4d86:	f990 0010 	ldrsb.w	r0, [r0, #16]
   b4d8a:	1c42      	adds	r2, r0, #1
{
   b4d8c:	b085      	sub	sp, #20
    if (_cs == -1) {
   b4d8e:	d118      	bne.n	b4dc2 <_ZN15Adafruit_BME2805beginEh+0x42>
        _wire.begin();
   b4d90:	6820      	ldr	r0, [r4, #0]
   b4d92:	f003 f8d9 	bl	b7f48 <_ZN7TwoWire5beginEv>
    if (read8(BME280_REGISTER_CHIPID) != 0x60)
   b4d96:	21d0      	movs	r1, #208	; 0xd0
   b4d98:	4620      	mov	r0, r4
   b4d9a:	f7ff fdd7 	bl	b494c <_ZN15Adafruit_BME2805read8Eh>
   b4d9e:	2860      	cmp	r0, #96	; 0x60
   b4da0:	d142      	bne.n	b4e28 <_ZN15Adafruit_BME2805beginEh+0xa8>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   b4da2:	4620      	mov	r0, r4
   b4da4:	22b6      	movs	r2, #182	; 0xb6
   b4da6:	21e0      	movs	r1, #224	; 0xe0
   b4da8:	f7ff fd36 	bl	b4818 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   b4dac:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4db0:	f002 fe92 	bl	b7ad8 <delay>
    while (isReadingCalibration())
   b4db4:	4620      	mov	r0, r4
   b4db6:	f7ff fe1d 	bl	b49f4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   b4dba:	4605      	mov	r5, r0
   b4dbc:	b328      	cbz	r0, b4e0a <_ZN15Adafruit_BME2805beginEh+0x8a>
          delay(100);
   b4dbe:	2064      	movs	r0, #100	; 0x64
   b4dc0:	e7f6      	b.n	b4db0 <_ZN15Adafruit_BME2805beginEh+0x30>
        digitalWrite(_cs, HIGH);
   b4dc2:	2101      	movs	r1, #1
   b4dc4:	b280      	uxth	r0, r0
   b4dc6:	f003 fa38 	bl	b823a <digitalWrite>
        pinMode(_cs, OUTPUT);
   b4dca:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4dce:	2101      	movs	r1, #1
   b4dd0:	b280      	uxth	r0, r0
   b4dd2:	f003 fa21 	bl	b8218 <pinMode>
        if (_sck == -1) {
   b4dd6:	f994 0013 	ldrsb.w	r0, [r4, #19]
   b4dda:	1c43      	adds	r3, r0, #1
   b4ddc:	d104      	bne.n	b4de8 <_ZN15Adafruit_BME2805beginEh+0x68>
        instance().begin();
   b4dde:	f7ff fcb7 	bl	b4750 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4de2:	f002 fb5d 	bl	b74a0 <_ZN8SPIClass5beginEv>
    }
   b4de6:	e7d6      	b.n	b4d96 <_ZN15Adafruit_BME2805beginEh+0x16>
            pinMode(_sck, OUTPUT);
   b4de8:	2101      	movs	r1, #1
   b4dea:	b280      	uxth	r0, r0
   b4dec:	f003 fa14 	bl	b8218 <pinMode>
            pinMode(_mosi, OUTPUT);
   b4df0:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b4df4:	2101      	movs	r1, #1
   b4df6:	b280      	uxth	r0, r0
   b4df8:	f003 fa0e 	bl	b8218 <pinMode>
            pinMode(_miso, INPUT);
   b4dfc:	f994 0012 	ldrsb.w	r0, [r4, #18]
   b4e00:	2100      	movs	r1, #0
   b4e02:	b280      	uxth	r0, r0
   b4e04:	f003 fa08 	bl	b8218 <pinMode>
   b4e08:	e7c5      	b.n	b4d96 <_ZN15Adafruit_BME2805beginEh+0x16>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   b4e0a:	4620      	mov	r0, r4
   b4e0c:	f7ff fe62 	bl	b4ad4 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   b4e10:	2305      	movs	r3, #5
   b4e12:	4620      	mov	r0, r4
   b4e14:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4e18:	9300      	str	r3, [sp, #0]
   b4e1a:	461a      	mov	r2, r3
   b4e1c:	2103      	movs	r1, #3
   b4e1e:	f7ff fd4d 	bl	b48bc <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    return true;
   b4e22:	2001      	movs	r0, #1
}
   b4e24:	b005      	add	sp, #20
   b4e26:	bd30      	pop	{r4, r5, pc}
        return false;
   b4e28:	2000      	movs	r0, #0
   b4e2a:	e7fb      	b.n	b4e24 <_ZN15Adafruit_BME2805beginEh+0xa4>

000b4e2c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b4e2e:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4e30:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4e34:	2d02      	cmp	r5, #2
   b4e36:	d069      	beq.n	b4f0c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b4e38:	2d03      	cmp	r5, #3
   b4e3a:	f000 8099 	beq.w	b4f70 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b4e3e:	2d01      	cmp	r5, #1
   b4e40:	d16c      	bne.n	b4f1c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b4e42:	8905      	ldrh	r5, [r0, #8]
   b4e44:	43d2      	mvns	r2, r2
   b4e46:	442a      	add	r2, r5
   b4e48:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b4e4a:	2a00      	cmp	r2, #0
   b4e4c:	db5d      	blt.n	b4f0a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4e4e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4e52:	4295      	cmp	r5, r2
   b4e54:	dd59      	ble.n	b4f0a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b4e56:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b4e58:	bfbe      	ittt	lt
   b4e5a:	185b      	addlt	r3, r3, r1
   b4e5c:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4e5e:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b4e60:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4e64:	18cd      	adds	r5, r1, r3
   b4e66:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4e68:	bfc4      	itt	gt
   b4e6a:	1a43      	subgt	r3, r0, r1
   b4e6c:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b4e6e:	2b00      	cmp	r3, #0
   b4e70:	dd4b      	ble.n	b4f0a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b4e72:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b4e76:	f8df c120 	ldr.w	ip, [pc, #288]	; b4f98 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b4e7a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b4e7e:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b4e82:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4e84:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b4e88:	d01a      	beq.n	b4ec0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b4e8a:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b4e8e:	4e40      	ldr	r6, [pc, #256]	; (b4f90 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b4e90:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b4e92:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4e94:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4e96:	bf3f      	itttt	cc
   b4e98:	eba5 0e03 	subcc.w	lr, r5, r3
   b4e9c:	26ff      	movcc	r6, #255	; 0xff
   b4e9e:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4ea2:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b4ea4:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b4ea8:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4eaa:	bf0c      	ite	eq
   b4eac:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b4eae:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b4eb0:	42ab      	cmp	r3, r5
   b4eb2:	f80c 6002 	strb.w	r6, [ip, r2]
   b4eb6:	d328      	bcc.n	b4f0a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b4eb8:	3908      	subs	r1, #8
   b4eba:	440b      	add	r3, r1
   b4ebc:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b4ebe:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b4ec0:	2b07      	cmp	r3, #7
   b4ec2:	d919      	bls.n	b4ef8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4ec4:	2c01      	cmp	r4, #1
   b4ec6:	f04f 35ff 	mov.w	r5, #4294967295
   b4eca:	bf18      	it	ne
   b4ecc:	2500      	movne	r5, #0
   b4ece:	b2ed      	uxtb	r5, r5
   b4ed0:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4ed4:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b4ed6:	3a08      	subs	r2, #8
   b4ed8:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4eda:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4edc:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b4ee0:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4ee4:	d8f7      	bhi.n	b4ed6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b4ee6:	f1a3 0208 	sub.w	r2, r3, #8
   b4eea:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b4eee:	3201      	adds	r2, #1
   b4ef0:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4ef4:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b4ef8:	b13b      	cbz	r3, b4f0a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b4efa:	4a26      	ldr	r2, [pc, #152]	; (b4f94 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b4efc:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b4efe:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4f00:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4f02:	bf0c      	ite	eq
   b4f04:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b4f06:	4393      	bicne	r3, r2
   b4f08:	7003      	strb	r3, [r0, #0]
}
   b4f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4f0c:	8945      	ldrh	r5, [r0, #10]
   b4f0e:	43d2      	mvns	r2, r2
   b4f10:	442a      	add	r2, r5
      x -= (w-1);
   b4f12:	18cd      	adds	r5, r1, r3
   b4f14:	8901      	ldrh	r1, [r0, #8]
   b4f16:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b4f18:	b212      	sxth	r2, r2
      x -= (w-1);
   b4f1a:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b4f1c:	2a00      	cmp	r2, #0
   b4f1e:	dbf4      	blt.n	b4f0a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4f20:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4f24:	4295      	cmp	r5, r2
   b4f26:	ddf0      	ble.n	b4f0a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b4f28:	2900      	cmp	r1, #0
    w += x;
   b4f2a:	bfbe      	ittt	lt
   b4f2c:	185b      	addlt	r3, r3, r1
   b4f2e:	b21b      	sxthlt	r3, r3
    x = 0;
   b4f30:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b4f32:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4f36:	18ce      	adds	r6, r1, r3
   b4f38:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4f3a:	bfc4      	itt	gt
   b4f3c:	1a6b      	subgt	r3, r5, r1
   b4f3e:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4f40:	2b00      	cmp	r3, #0
   b4f42:	dde2      	ble.n	b4f0a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4f44:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b4f46:	2580      	movs	r5, #128	; 0x80
   b4f48:	fb10 1105 	smlabb	r1, r0, r5, r1
   b4f4c:	4812      	ldr	r0, [pc, #72]	; (b4f98 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b4f4e:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b4f50:	f002 0007 	and.w	r0, r2, #7
   b4f54:	2201      	movs	r2, #1
   b4f56:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b4f58:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4f5a:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b4f5c:	440b      	add	r3, r1
   b4f5e:	d10c      	bne.n	b4f7a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b4f60:	428b      	cmp	r3, r1
   b4f62:	d0d2      	beq.n	b4f0a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4f64:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4f68:	4310      	orrs	r0, r2
   b4f6a:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4f6e:	e7f7      	b.n	b4f60 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b4f70:	18cd      	adds	r5, r1, r3
   b4f72:	8941      	ldrh	r1, [r0, #10]
   b4f74:	1b49      	subs	r1, r1, r5
   b4f76:	b209      	sxth	r1, r1
      break;
   b4f78:	e767      	b.n	b4e4a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b4f7a:	43d2      	mvns	r2, r2
   b4f7c:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b4f7e:	428b      	cmp	r3, r1
   b4f80:	d0c3      	beq.n	b4f0a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4f82:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4f86:	4010      	ands	r0, r2
   b4f88:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4f8c:	e7f7      	b.n	b4f7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b4f8e:	bf00      	nop
   b4f90:	2003dcb2 	.word	0x2003dcb2
   b4f94:	2003dcaa 	.word	0x2003dcaa
   b4f98:	2003dcba 	.word	0x2003dcba

000b4f9c <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b4f9e:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4fa0:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4fa4:	2d02      	cmp	r5, #2
   b4fa6:	d034      	beq.n	b5012 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b4fa8:	2d03      	cmp	r5, #3
   b4faa:	f000 809b 	beq.w	b50e4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b4fae:	2d01      	cmp	r5, #1
   b4fb0:	d137      	bne.n	b5022 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b4fb2:	18d5      	adds	r5, r2, r3
   b4fb4:	8902      	ldrh	r2, [r0, #8]
   b4fb6:	1b52      	subs	r2, r2, r5
   b4fb8:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b4fba:	2900      	cmp	r1, #0
   b4fbc:	f2c0 8091 	blt.w	b50e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4fc0:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4fc4:	428d      	cmp	r5, r1
   b4fc6:	f340 808c 	ble.w	b50e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b4fca:	2a00      	cmp	r2, #0
    w += x;
   b4fcc:	bfbe      	ittt	lt
   b4fce:	189b      	addlt	r3, r3, r2
   b4fd0:	b21b      	sxthlt	r3, r3
    x = 0;
   b4fd2:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b4fd4:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4fd8:	18d6      	adds	r6, r2, r3
   b4fda:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4fdc:	bfc4      	itt	gt
   b4fde:	1aab      	subgt	r3, r5, r2
   b4fe0:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4fe2:	2b00      	cmp	r3, #0
   b4fe4:	dd7d      	ble.n	b50e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4fe6:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b4fe8:	2580      	movs	r5, #128	; 0x80
   b4fea:	fb10 2205 	smlabb	r2, r0, r5, r2
   b4fee:	4845      	ldr	r0, [pc, #276]	; (b5104 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b4ff0:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b4ff2:	f001 0007 	and.w	r0, r1, #7
   b4ff6:	2101      	movs	r1, #1
   b4ff8:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b4ffa:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4ffc:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b4ffe:	4413      	add	r3, r2
   b5000:	d175      	bne.n	b50ee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b5002:	429a      	cmp	r2, r3
   b5004:	d06d      	beq.n	b50e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5006:	f812 0b01 	ldrb.w	r0, [r2], #1
   b500a:	4308      	orrs	r0, r1
   b500c:	f802 0c01 	strb.w	r0, [r2, #-1]
   b5010:	e7f7      	b.n	b5002 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b5012:	8905      	ldrh	r5, [r0, #8]
   b5014:	43c9      	mvns	r1, r1
   b5016:	4429      	add	r1, r5
      y -= (h-1);
   b5018:	18d5      	adds	r5, r2, r3
   b501a:	8942      	ldrh	r2, [r0, #10]
   b501c:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b501e:	b209      	sxth	r1, r1
      y -= (h-1);
   b5020:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b5022:	2900      	cmp	r1, #0
   b5024:	db5d      	blt.n	b50e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5026:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b502a:	428d      	cmp	r5, r1
   b502c:	dd59      	ble.n	b50e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b502e:	2a00      	cmp	r2, #0
    __h += __y;
   b5030:	bfbe      	ittt	lt
   b5032:	189b      	addlt	r3, r3, r2
   b5034:	b21b      	sxthlt	r3, r3
    __y = 0;
   b5036:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b5038:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b503c:	18d5      	adds	r5, r2, r3
   b503e:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b5040:	bfc4      	itt	gt
   b5042:	1a83      	subgt	r3, r0, r2
   b5044:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b5046:	2b00      	cmp	r3, #0
   b5048:	dd4b      	ble.n	b50e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b504a:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b504e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b5104 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b5052:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b5056:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b505a:	b2db      	uxtb	r3, r3
  pBuf += x;
   b505c:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b5060:	d01a      	beq.n	b5098 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b5062:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b5066:	4e28      	ldr	r6, [pc, #160]	; (b5108 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b5068:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b506a:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b506c:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b506e:	bf3f      	itttt	cc
   b5070:	eba5 0e03 	subcc.w	lr, r5, r3
   b5074:	26ff      	movcc	r6, #255	; 0xff
   b5076:	fa46 f60e 	asrcc.w	r6, r6, lr
   b507a:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b507c:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b5080:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5082:	bf0c      	ite	eq
   b5084:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b5086:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b5088:	42ab      	cmp	r3, r5
   b508a:	f80c 6001 	strb.w	r6, [ip, r1]
   b508e:	d328      	bcc.n	b50e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b5090:	3a08      	subs	r2, #8
   b5092:	4413      	add	r3, r2
   b5094:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b5096:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b5098:	2b07      	cmp	r3, #7
   b509a:	d919      	bls.n	b50d0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b509c:	2c01      	cmp	r4, #1
   b509e:	f04f 35ff 	mov.w	r5, #4294967295
   b50a2:	bf18      	it	ne
   b50a4:	2500      	movne	r5, #0
   b50a6:	b2ed      	uxtb	r5, r5
   b50a8:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b50ac:	461a      	mov	r2, r3
      h -= 8;
   b50ae:	3a08      	subs	r2, #8
   b50b0:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b50b2:	2a07      	cmp	r2, #7
      *pBuf = val;
   b50b4:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b50b8:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b50bc:	d8f7      	bhi.n	b50ae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b50be:	f1a3 0208 	sub.w	r2, r3, #8
   b50c2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b50c6:	3201      	adds	r2, #1
   b50c8:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b50cc:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b50d0:	b13b      	cbz	r3, b50e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b50d2:	4a0e      	ldr	r2, [pc, #56]	; (b510c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b50d4:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b50d6:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b50d8:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b50da:	bf0c      	ite	eq
   b50dc:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b50de:	4393      	bicne	r3, r2
   b50e0:	7003      	strb	r3, [r0, #0]
}
   b50e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b50e4:	8945      	ldrh	r5, [r0, #10]
   b50e6:	43c9      	mvns	r1, r1
   b50e8:	4429      	add	r1, r5
   b50ea:	b209      	sxth	r1, r1
      break;
   b50ec:	e765      	b.n	b4fba <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b50ee:	43c9      	mvns	r1, r1
   b50f0:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b50f2:	429a      	cmp	r2, r3
   b50f4:	d0f5      	beq.n	b50e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b50f6:	f812 0b01 	ldrb.w	r0, [r2], #1
   b50fa:	4008      	ands	r0, r1
   b50fc:	f802 0c01 	strb.w	r0, [r2, #-1]
   b5100:	e7f7      	b.n	b50f2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b5102:	bf00      	nop
   b5104:	2003dcba 	.word	0x2003dcba
   b5108:	2003dcb2 	.word	0x2003dcb2
   b510c:	2003dcaa 	.word	0x2003dcaa

000b5110 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b5110:	4770      	bx	lr
	...

000b5114 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b5116:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5118:	4606      	mov	r6, r0
   b511a:	4614      	mov	r4, r2
   b511c:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b511e:	db2d      	blt.n	b517c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5120:	f000 fbb3 	bl	b588a <_ZN12Adafruit_GFX5widthEv>
   b5124:	42a8      	cmp	r0, r5
   b5126:	dd29      	ble.n	b517c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5128:	2c00      	cmp	r4, #0
   b512a:	db27      	blt.n	b517c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b512c:	4630      	mov	r0, r6
   b512e:	f000 fbaf 	bl	b5890 <_ZN12Adafruit_GFX6heightEv>
   b5132:	42a0      	cmp	r0, r4
   b5134:	dd22      	ble.n	b517c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b5136:	4630      	mov	r0, r6
   b5138:	f000 fba5 	bl	b5886 <_ZN12Adafruit_GFX11getRotationEv>
   b513c:	2802      	cmp	r0, #2
   b513e:	d01e      	beq.n	b517e <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b5140:	2803      	cmp	r0, #3
   b5142:	d025      	beq.n	b5190 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b5144:	2801      	cmp	r0, #1
   b5146:	d104      	bne.n	b5152 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b5148:	8933      	ldrh	r3, [r6, #8]
   b514a:	43e2      	mvns	r2, r4
   b514c:	441a      	add	r2, r3
    break;
   b514e:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b5150:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b5152:	2c00      	cmp	r4, #0
   b5154:	4622      	mov	r2, r4
   b5156:	bfb8      	it	lt
   b5158:	1de2      	addlt	r2, r4, #7
   b515a:	10d2      	asrs	r2, r2, #3
   b515c:	2180      	movs	r1, #128	; 0x80
   b515e:	fb12 5501 	smlabb	r5, r2, r1, r5
   b5162:	490e      	ldr	r1, [pc, #56]	; (b519c <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b5164:	2201      	movs	r2, #1
   b5166:	f004 0407 	and.w	r4, r4, #7
   b516a:	574b      	ldrsb	r3, [r1, r5]
   b516c:	fa02 f404 	lsl.w	r4, r2, r4
   b5170:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b5172:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b5174:	bf0c      	ite	eq
   b5176:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b5178:	43a3      	bicne	r3, r4
   b517a:	554b      	strb	r3, [r1, r5]
}
   b517c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b517e:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b5180:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b5182:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b5184:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b5186:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b5188:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b518a:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b518c:	b224      	sxth	r4, r4
    break;
   b518e:	e7e0      	b.n	b5152 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b5190:	8973      	ldrh	r3, [r6, #10]
   b5192:	3b01      	subs	r3, #1
   b5194:	1b5b      	subs	r3, r3, r5
    break;
   b5196:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b5198:	b21c      	sxth	r4, r3
    break;
   b519a:	e7da      	b.n	b5152 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b519c:	2003dcba 	.word	0x2003dcba

000b51a0 <_ZN16Adafruit_SSD1306D0Ev>:
   b51a0:	b510      	push	{r4, lr}
   b51a2:	2124      	movs	r1, #36	; 0x24
   b51a4:	4604      	mov	r4, r0
   b51a6:	f7fe ff76 	bl	b4096 <_ZdlPvj>
   b51aa:	4620      	mov	r0, r4
   b51ac:	bd10      	pop	{r4, pc}
	...

000b51b0 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b51b0:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b51b2:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b51b4:	4604      	mov	r4, r0
   b51b6:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b51b8:	2180      	movs	r1, #128	; 0x80
   b51ba:	f000 fa8b 	bl	b56d4 <_ZN12Adafruit_GFXC1Ess>
   b51be:	4b06      	ldr	r3, [pc, #24]	; (b51d8 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b51c0:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b51c2:	23ff      	movs	r3, #255	; 0xff
   b51c4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b51c8:	7763      	strb	r3, [r4, #29]
   b51ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b51ce:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b51d0:	f884 5020 	strb.w	r5, [r4, #32]
}
   b51d4:	4620      	mov	r0, r4
   b51d6:	bd38      	pop	{r3, r4, r5, pc}
   b51d8:	000b900c 	.word	0x000b900c

000b51dc <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b51dc:	4802      	ldr	r0, [pc, #8]	; (b51e8 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b51de:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b51e2:	2100      	movs	r1, #0
   b51e4:	f003 bd78 	b.w	b8cd8 <memset>
   b51e8:	2003dcba 	.word	0x2003dcba

000b51ec <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b51ec:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b51ee:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b51f2:	b143      	cbz	r3, b5206 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b51f4:	9101      	str	r1, [sp, #4]
        return instance().transfer(data);
   b51f6:	f7ff faab 	bl	b4750 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b51fa:	9901      	ldr	r1, [sp, #4]
}
   b51fc:	b003      	add	sp, #12
   b51fe:	f85d eb04 	ldr.w	lr, [sp], #4
   b5202:	f002 ba69 	b.w	b76d8 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b5206:	460b      	mov	r3, r1
   b5208:	7f81      	ldrb	r1, [r0, #30]
   b520a:	7f40      	ldrb	r0, [r0, #29]
   b520c:	2201      	movs	r2, #1
}
   b520e:	b003      	add	sp, #12
   b5210:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b5214:	f003 b854 	b.w	b82c0 <shiftOut>

000b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b5218:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b521a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b521e:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b5220:	4604      	mov	r4, r0
   b5222:	460d      	mov	r5, r1
  if (sid != -1)
   b5224:	d01d      	beq.n	b5262 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b5226:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b522a:	2101      	movs	r1, #1
   b522c:	b280      	uxth	r0, r0
   b522e:	f003 f804 	bl	b823a <digitalWrite>
    digitalWrite(dc, LOW);
   b5232:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5236:	2100      	movs	r1, #0
   b5238:	b280      	uxth	r0, r0
   b523a:	f002 fffe 	bl	b823a <digitalWrite>
    digitalWrite(cs, LOW);
   b523e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5242:	2100      	movs	r1, #0
   b5244:	b280      	uxth	r0, r0
   b5246:	f002 fff8 	bl	b823a <digitalWrite>
    fastSPIwrite(c);
   b524a:	4629      	mov	r1, r5
   b524c:	4620      	mov	r0, r4
   b524e:	f7ff ffcd 	bl	b51ec <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b5252:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5256:	2101      	movs	r1, #1
}
   b5258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b525c:	b280      	uxth	r0, r0
   b525e:	f002 bfec 	b.w	b823a <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b5262:	f003 f8a7 	bl	b83b4 <_Z19__fetch_global_Wirev>
   b5266:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b526a:	f002 fea3 	bl	b7fb4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b526e:	f003 f8a1 	bl	b83b4 <_Z19__fetch_global_Wirev>
   b5272:	6803      	ldr	r3, [r0, #0]
   b5274:	2100      	movs	r1, #0
   b5276:	689b      	ldr	r3, [r3, #8]
   b5278:	4798      	blx	r3
    Wire.write(c);
   b527a:	f003 f89b 	bl	b83b4 <_Z19__fetch_global_Wirev>
   b527e:	6803      	ldr	r3, [r0, #0]
   b5280:	4629      	mov	r1, r5
   b5282:	689b      	ldr	r3, [r3, #8]
   b5284:	4798      	blx	r3
    Wire.endTransmission();
   b5286:	f003 f895 	bl	b83b4 <_Z19__fetch_global_Wirev>
}
   b528a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b528e:	f002 be98 	b.w	b7fc2 <_ZN7TwoWire15endTransmissionEv>
	...

000b5294 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b5294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b5296:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b5298:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b529a:	f7ff ffbd 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b529e:	2100      	movs	r1, #0
   b52a0:	4620      	mov	r0, r4
   b52a2:	f7ff ffb9 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b52a6:	217f      	movs	r1, #127	; 0x7f
   b52a8:	4620      	mov	r0, r4
   b52aa:	f7ff ffb5 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b52ae:	2122      	movs	r1, #34	; 0x22
   b52b0:	4620      	mov	r0, r4
   b52b2:	f7ff ffb1 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b52b6:	2100      	movs	r1, #0
   b52b8:	4620      	mov	r0, r4
   b52ba:	f7ff ffad 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b52be:	2107      	movs	r1, #7
   b52c0:	4620      	mov	r0, r4
   b52c2:	f7ff ffa9 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b52c6:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b52ca:	4f29      	ldr	r7, [pc, #164]	; (b5370 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b52cc:	3301      	adds	r3, #1
   b52ce:	d02a      	beq.n	b5326 <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b52d0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b52d4:	2101      	movs	r1, #1
   b52d6:	b280      	uxth	r0, r0
   b52d8:	f002 ffaf 	bl	b823a <digitalWrite>
    digitalWrite(dc, HIGH);
   b52dc:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b52e0:	2101      	movs	r1, #1
   b52e2:	b280      	uxth	r0, r0
   b52e4:	f002 ffa9 	bl	b823a <digitalWrite>
    digitalWrite(cs, LOW);
   b52e8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b52ec:	2100      	movs	r1, #0
   b52ee:	b280      	uxth	r0, r0
   b52f0:	f002 ffa3 	bl	b823a <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b52f4:	2001      	movs	r0, #1
   b52f6:	f001 fe09 	bl	b6f0c <HAL_Delay_Microseconds>
   b52fa:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b52fe:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b5300:	f817 1b01 	ldrb.w	r1, [r7], #1
   b5304:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5306:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b5308:	f7ff ff70 	bl	b51ec <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b530c:	2d00      	cmp	r5, #0
   b530e:	d1f6      	bne.n	b52fe <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b5310:	2001      	movs	r0, #1
   b5312:	f001 fdfb 	bl	b6f0c <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b5316:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b531a:	2101      	movs	r1, #1
}
   b531c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b5320:	b280      	uxth	r0, r0
   b5322:	f002 bf8a 	b.w	b823a <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5326:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b5328:	f003 f844 	bl	b83b4 <_Z19__fetch_global_Wirev>
   b532c:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b5330:	f002 fe40 	bl	b7fb4 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b5334:	f003 f83e 	bl	b83b4 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5338:	6803      	ldr	r3, [r0, #0]
   b533a:	2140      	movs	r1, #64	; 0x40
   b533c:	689b      	ldr	r3, [r3, #8]
   b533e:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b5340:	f105 0610 	add.w	r6, r5, #16
   b5344:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b5346:	f003 f835 	bl	b83b4 <_Z19__fetch_global_Wirev>
   b534a:	6803      	ldr	r3, [r0, #0]
   b534c:	5d79      	ldrb	r1, [r7, r5]
   b534e:	689b      	ldr	r3, [r3, #8]
   b5350:	4798      	blx	r3
		i++;
   b5352:	1c6b      	adds	r3, r5, #1
   b5354:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b5356:	42ae      	cmp	r6, r5
   b5358:	d1f5      	bne.n	b5346 <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b535a:	f003 f82b 	bl	b83b4 <_Z19__fetch_global_Wirev>
   b535e:	f002 fe30 	bl	b7fc2 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5362:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b5366:	d100      	bne.n	b536a <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b5368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b536a:	4635      	mov	r5, r6
   b536c:	e7dc      	b.n	b5328 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b536e:	bf00      	nop
   b5370:	2003dcba 	.word	0x2003dcba

000b5374 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b5374:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b5376:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b537a:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b537c:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b537e:	4604      	mov	r4, r0
   b5380:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b5382:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b5384:	f000 80c9 	beq.w	b551a <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b5388:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b538c:	2101      	movs	r1, #1
   b538e:	b280      	uxth	r0, r0
   b5390:	f002 ff42 	bl	b8218 <pinMode>
    pinMode(cs, OUTPUT);
   b5394:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5398:	2101      	movs	r1, #1
   b539a:	b280      	uxth	r0, r0
   b539c:	f002 ff3c 	bl	b8218 <pinMode>
    if (!hwSPI){
   b53a0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b53a4:	2b00      	cmp	r3, #0
   b53a6:	f000 80a6 	beq.w	b54f6 <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b53aa:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b53ae:	2101      	movs	r1, #1
   b53b0:	b280      	uxth	r0, r0
   b53b2:	f002 ff42 	bl	b823a <digitalWrite>
        instance().setBitOrder(order);
   b53b6:	f7ff f9cb 	bl	b4750 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b53ba:	2101      	movs	r1, #1
   b53bc:	f002 f884 	bl	b74c8 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b53c0:	f7ff f9c6 	bl	b4750 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b53c4:	2110      	movs	r1, #16
   b53c6:	f002 f961 	bl	b768c <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b53ca:	f7ff f9c1 	bl	b4750 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b53ce:	2100      	movs	r1, #0
   b53d0:	f002 f88e 	bl	b74f0 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b53d4:	f7ff f9bc 	bl	b4750 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b53d8:	f002 f862 	bl	b74a0 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b53dc:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b53e0:	2101      	movs	r1, #1
   b53e2:	b280      	uxth	r0, r0
   b53e4:	f002 ff18 	bl	b8218 <pinMode>
  digitalWrite(rst, HIGH);
   b53e8:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b53ec:	2101      	movs	r1, #1
   b53ee:	b280      	uxth	r0, r0
   b53f0:	f002 ff23 	bl	b823a <digitalWrite>
  delay(1);
   b53f4:	2001      	movs	r0, #1
   b53f6:	f002 fb6f 	bl	b7ad8 <delay>
  digitalWrite(rst, LOW);
   b53fa:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b53fe:	2100      	movs	r1, #0
   b5400:	b280      	uxth	r0, r0
   b5402:	f002 ff1a 	bl	b823a <digitalWrite>
  delay(10);
   b5406:	200a      	movs	r0, #10
   b5408:	f002 fb66 	bl	b7ad8 <delay>
  digitalWrite(rst, HIGH);
   b540c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5410:	2101      	movs	r1, #1
   b5412:	b280      	uxth	r0, r0
   b5414:	f002 ff11 	bl	b823a <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b5418:	4620      	mov	r0, r4
   b541a:	21ae      	movs	r1, #174	; 0xae
   b541c:	f7ff fefc 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b5420:	4620      	mov	r0, r4
   b5422:	21d5      	movs	r1, #213	; 0xd5
   b5424:	f7ff fef8 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b5428:	4620      	mov	r0, r4
   b542a:	2180      	movs	r1, #128	; 0x80
   b542c:	f7ff fef4 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b5430:	4620      	mov	r0, r4
   b5432:	21a8      	movs	r1, #168	; 0xa8
   b5434:	f7ff fef0 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b5438:	4620      	mov	r0, r4
   b543a:	213f      	movs	r1, #63	; 0x3f
   b543c:	f7ff feec 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b5440:	4620      	mov	r0, r4
   b5442:	21d3      	movs	r1, #211	; 0xd3
   b5444:	f7ff fee8 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b5448:	4620      	mov	r0, r4
   b544a:	2100      	movs	r1, #0
   b544c:	f7ff fee4 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b5450:	4620      	mov	r0, r4
   b5452:	2140      	movs	r1, #64	; 0x40
   b5454:	f7ff fee0 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b5458:	218d      	movs	r1, #141	; 0x8d
   b545a:	4620      	mov	r0, r4
   b545c:	f7ff fedc 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5460:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b5462:	bf0c      	ite	eq
   b5464:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b5466:	2114      	movne	r1, #20
   b5468:	4620      	mov	r0, r4
   b546a:	f7ff fed5 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b546e:	4620      	mov	r0, r4
   b5470:	2120      	movs	r1, #32
   b5472:	f7ff fed1 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b5476:	4620      	mov	r0, r4
   b5478:	2100      	movs	r1, #0
   b547a:	f7ff fecd 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b547e:	4620      	mov	r0, r4
   b5480:	21a1      	movs	r1, #161	; 0xa1
   b5482:	f7ff fec9 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b5486:	4620      	mov	r0, r4
   b5488:	21c8      	movs	r1, #200	; 0xc8
   b548a:	f7ff fec5 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b548e:	4620      	mov	r0, r4
   b5490:	21da      	movs	r1, #218	; 0xda
   b5492:	f7ff fec1 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b5496:	4620      	mov	r0, r4
   b5498:	2112      	movs	r1, #18
   b549a:	f7ff febd 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b549e:	2181      	movs	r1, #129	; 0x81
   b54a0:	4620      	mov	r0, r4
   b54a2:	f7ff feb9 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b54a6:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b54a8:	bf0c      	ite	eq
   b54aa:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b54ac:	21cf      	movne	r1, #207	; 0xcf
   b54ae:	4620      	mov	r0, r4
   b54b0:	f7ff feb2 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b54b4:	21d9      	movs	r1, #217	; 0xd9
   b54b6:	4620      	mov	r0, r4
   b54b8:	f7ff feae 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b54bc:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b54be:	bf0c      	ite	eq
   b54c0:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b54c2:	21f1      	movne	r1, #241	; 0xf1
   b54c4:	4620      	mov	r0, r4
   b54c6:	f7ff fea7 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b54ca:	4620      	mov	r0, r4
   b54cc:	21db      	movs	r1, #219	; 0xdb
   b54ce:	f7ff fea3 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b54d2:	4620      	mov	r0, r4
   b54d4:	2140      	movs	r1, #64	; 0x40
   b54d6:	f7ff fe9f 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b54da:	4620      	mov	r0, r4
   b54dc:	21a4      	movs	r1, #164	; 0xa4
   b54de:	f7ff fe9b 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b54e2:	4620      	mov	r0, r4
   b54e4:	21a6      	movs	r1, #166	; 0xa6
   b54e6:	f7ff fe97 	bl	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b54ea:	4620      	mov	r0, r4
   b54ec:	21af      	movs	r1, #175	; 0xaf
}
   b54ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b54f2:	f7ff be91 	b.w	b5218 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b54f6:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b54fa:	2101      	movs	r1, #1
   b54fc:	b280      	uxth	r0, r0
   b54fe:	f002 fe8b 	bl	b8218 <pinMode>
    	pinMode(sclk, OUTPUT);
   b5502:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b5506:	2101      	movs	r1, #1
   b5508:	b280      	uxth	r0, r0
   b550a:	f002 fe85 	bl	b8218 <pinMode>
    if (hwSPI){
   b550e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b5512:	2b00      	cmp	r3, #0
   b5514:	f43f af62 	beq.w	b53dc <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b5518:	e747      	b.n	b53aa <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b551a:	f002 ff4b 	bl	b83b4 <_Z19__fetch_global_Wirev>
   b551e:	f002 fd13 	bl	b7f48 <_ZN7TwoWire5beginEv>
   b5522:	e75b      	b.n	b53dc <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b5524 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b5524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5528:	b085      	sub	sp, #20
   b552a:	461f      	mov	r7, r3
   b552c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b5530:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b5534:	eba8 0902 	sub.w	r9, r8, r2
   b5538:	eba7 0a01 	sub.w	sl, r7, r1
   b553c:	f1b9 0f00 	cmp.w	r9, #0
   b5540:	bfb8      	it	lt
   b5542:	f1c9 0900 	rsblt	r9, r9, #0
   b5546:	f1ba 0f00 	cmp.w	sl, #0
   b554a:	bfb8      	it	lt
   b554c:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b5550:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b5552:	4683      	mov	fp, r0
   b5554:	460c      	mov	r4, r1
   b5556:	4615      	mov	r5, r2
  if (steep) {
   b5558:	dd04      	ble.n	b5564 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b555a:	463a      	mov	r2, r7
    swap(x0, y0);
   b555c:	462c      	mov	r4, r5
    swap(x1, y1);
   b555e:	4647      	mov	r7, r8
    swap(x0, y0);
   b5560:	460d      	mov	r5, r1
    swap(x1, y1);
   b5562:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b5564:	42bc      	cmp	r4, r7
   b5566:	dd05      	ble.n	b5574 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b5568:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b556a:	4645      	mov	r5, r8
   b556c:	4690      	mov	r8, r2
  if (x0 > x1) {
   b556e:	4622      	mov	r2, r4
   b5570:	463c      	mov	r4, r7
   b5572:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b5574:	1b3e      	subs	r6, r7, r4
   b5576:	b2b2      	uxth	r2, r6
   b5578:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b557a:	eba8 0205 	sub.w	r2, r8, r5
   b557e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b5582:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b5586:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b558a:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b558e:	4545      	cmp	r5, r8
   b5590:	bfb4      	ite	lt
   b5592:	2201      	movlt	r2, #1
   b5594:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
   b5598:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b559a:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b559c:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b559e:	42bc      	cmp	r4, r7
   b55a0:	dc1c      	bgt.n	b55dc <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b55a2:	f8db 2000 	ldr.w	r2, [fp]
   b55a6:	9303      	str	r3, [sp, #12]
    if (steep) {
   b55a8:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b55aa:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b55ae:	bfc7      	ittee	gt
   b55b0:	4629      	movgt	r1, r5
   b55b2:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b55b4:	462a      	movle	r2, r5
   b55b6:	4621      	movle	r1, r4
   b55b8:	4658      	mov	r0, fp
   b55ba:	47c0      	blx	r8
    }
    err -= dy;
   b55bc:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b55be:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b55c0:	1ab6      	subs	r6, r6, r2
   b55c2:	b2b1      	uxth	r1, r6
   b55c4:	b236      	sxth	r6, r6
    if (err < 0) {
   b55c6:	2e00      	cmp	r6, #0
   b55c8:	da05      	bge.n	b55d6 <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b55ca:	9a02      	ldr	r2, [sp, #8]
   b55cc:	4415      	add	r5, r2
      err += dx;
   b55ce:	9a00      	ldr	r2, [sp, #0]
   b55d0:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b55d2:	b22d      	sxth	r5, r5
      err += dx;
   b55d4:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b55d6:	3401      	adds	r4, #1
   b55d8:	b224      	sxth	r4, r4
   b55da:	e7e0      	b.n	b559e <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b55dc:	b005      	add	sp, #20
   b55de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b55e2 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b55e2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b55e6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b55ea:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b55ec:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b55f0:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b55f4:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b55f6:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b55f8:	4616      	mov	r6, r2
   b55fa:	468a      	mov	sl, r1
   b55fc:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b55fe:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b5600:	6823      	ldr	r3, [r4, #0]
   b5602:	f8cd 8000 	str.w	r8, [sp]
   b5606:	f109 32ff 	add.w	r2, r9, #4294967295
   b560a:	4432      	add	r2, r6
   b560c:	69df      	ldr	r7, [r3, #28]
   b560e:	4651      	mov	r1, sl
   b5610:	462b      	mov	r3, r5
   b5612:	4620      	mov	r0, r4
   b5614:	b212      	sxth	r2, r2
   b5616:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b5618:	6823      	ldr	r3, [r4, #0]
   b561a:	f8cd 8000 	str.w	r8, [sp]
   b561e:	699f      	ldr	r7, [r3, #24]
   b5620:	4632      	mov	r2, r6
   b5622:	464b      	mov	r3, r9
   b5624:	4651      	mov	r1, sl
   b5626:	4620      	mov	r0, r4
   b5628:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b562a:	1e6b      	subs	r3, r5, #1
   b562c:	eb03 010a 	add.w	r1, r3, sl
   b5630:	6823      	ldr	r3, [r4, #0]
   b5632:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b5636:	699d      	ldr	r5, [r3, #24]
   b5638:	4632      	mov	r2, r6
   b563a:	464b      	mov	r3, r9
   b563c:	b209      	sxth	r1, r1
   b563e:	4620      	mov	r0, r4
   b5640:	46ac      	mov	ip, r5
}
   b5642:	b002      	add	sp, #8
   b5644:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b5648:	4760      	bx	ip

000b564a <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b564a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b564c:	3b01      	subs	r3, #1
   b564e:	4413      	add	r3, r2
   b5650:	6804      	ldr	r4, [r0, #0]
   b5652:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b5656:	9501      	str	r5, [sp, #4]
   b5658:	b21b      	sxth	r3, r3
   b565a:	9300      	str	r3, [sp, #0]
   b565c:	6964      	ldr	r4, [r4, #20]
   b565e:	460b      	mov	r3, r1
   b5660:	47a0      	blx	r4
}
   b5662:	b003      	add	sp, #12
   b5664:	bd30      	pop	{r4, r5, pc}

000b5666 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b5666:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b5668:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b566c:	6804      	ldr	r4, [r0, #0]
   b566e:	e9cd 2500 	strd	r2, r5, [sp]
   b5672:	3b01      	subs	r3, #1
   b5674:	440b      	add	r3, r1
   b5676:	6964      	ldr	r4, [r4, #20]
   b5678:	b21b      	sxth	r3, r3
   b567a:	47a0      	blx	r4
}
   b567c:	b003      	add	sp, #12
   b567e:	bd30      	pop	{r4, r5, pc}

000b5680 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b5680:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5684:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5688:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b568c:	4605      	mov	r5, r0
   b568e:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b5690:	460c      	mov	r4, r1
   b5692:	18ce      	adds	r6, r1, r3
   b5694:	42b4      	cmp	r4, r6
   b5696:	da0b      	bge.n	b56b0 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b5698:	682b      	ldr	r3, [r5, #0]
   b569a:	f8cd 8000 	str.w	r8, [sp]
   b569e:	699f      	ldr	r7, [r3, #24]
   b56a0:	4621      	mov	r1, r4
   b56a2:	464b      	mov	r3, r9
   b56a4:	4652      	mov	r2, sl
   b56a6:	4628      	mov	r0, r5
   b56a8:	3401      	adds	r4, #1
   b56aa:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b56ac:	b224      	sxth	r4, r4
   b56ae:	e7f1      	b.n	b5694 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b56b0:	b002      	add	sp, #8
   b56b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b56b6 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b56b6:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b56b8:	6802      	ldr	r2, [r0, #0]
   b56ba:	9101      	str	r1, [sp, #4]
   b56bc:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b56c0:	9100      	str	r1, [sp, #0]
   b56c2:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b56c4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b56c8:	2200      	movs	r2, #0
   b56ca:	4611      	mov	r1, r2
   b56cc:	47a0      	blx	r4
}
   b56ce:	b002      	add	sp, #8
   b56d0:	bd10      	pop	{r4, pc}

000b56d2 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b56d2:	4770      	bx	lr

000b56d4 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b56d4:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b56d6:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b56d8:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b56da:	f04f 32ff 	mov.w	r2, #4294967295
   b56de:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b56e0:	4d05      	ldr	r5, [pc, #20]	; (b56f8 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b56e2:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b56e4:	2201      	movs	r2, #1
   b56e6:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b56e8:	6005      	str	r5, [r0, #0]
   b56ea:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b56ec:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b56ee:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b56f0:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b56f2:	7682      	strb	r2, [r0, #26]
}
   b56f4:	bd30      	pop	{r4, r5, pc}
   b56f6:	bf00      	nop
   b56f8:	000b9540 	.word	0x000b9540

000b56fc <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b56fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5700:	ed2d 8b02 	vpush	{d8}
   b5704:	b08d      	sub	sp, #52	; 0x34
   b5706:	4607      	mov	r7, r0
   b5708:	9104      	str	r1, [sp, #16]
   b570a:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b570e:	9105      	str	r1, [sp, #20]
   b5710:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b5714:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b5716:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b571a:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b571c:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b5720:	4281      	cmp	r1, r0
   b5722:	dd52      	ble.n	b57ca <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b5724:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b5728:	4291      	cmp	r1, r2
   b572a:	dd4e      	ble.n	b57ca <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b572c:	2106      	movs	r1, #6
   b572e:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b5732:	2c00      	cmp	r4, #0
   b5734:	dd49      	ble.n	b57ca <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b5736:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b573a:	2c00      	cmp	r4, #0
   b573c:	dd45      	ble.n	b57ca <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b573e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b5742:	930b      	str	r3, [sp, #44]	; 0x2c
   b5744:	b293      	uxth	r3, r2
   b5746:	9307      	str	r3, [sp, #28]
   b5748:	3308      	adds	r3, #8
   b574a:	b29b      	uxth	r3, r3
   b574c:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b574e:	2400      	movs	r4, #0
   b5750:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b5752:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b5754:	bf1c      	itt	ne
   b5756:	4b2c      	ldrne	r3, [pc, #176]	; (b5808 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b5758:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b575a:	9e07      	ldr	r6, [sp, #28]
   b575c:	bf16      	itet	ne
   b575e:	191b      	addne	r3, r3, r4
      line = 0x0;
   b5760:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b5762:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b5764:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5766:	9a04      	ldr	r2, [sp, #16]
   b5768:	b2ab      	uxth	r3, r5
   b576a:	930a      	str	r3, [sp, #40]	; 0x28
   b576c:	fb04 f305 	mul.w	r3, r4, r5
   b5770:	fa13 f382 	uxtah	r3, r3, r2
   b5774:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b5776:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b577a:	ee08 3a10 	vmov	s16, r3
   b577e:	46b0      	mov	r8, r6
   b5780:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b5784:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b5788:	9b03      	ldr	r3, [sp, #12]
   b578a:	07db      	lsls	r3, r3, #31
   b578c:	d52f      	bpl.n	b57ee <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b578e:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5790:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b5792:	d11f      	bne.n	b57d4 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b5794:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5798:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b579a:	b232      	sxth	r2, r6
   b579c:	4651      	mov	r1, sl
   b579e:	4638      	mov	r0, r7
   b57a0:	47d8      	blx	fp
      line >>= 1;
   b57a2:	9b03      	ldr	r3, [sp, #12]
   b57a4:	085b      	lsrs	r3, r3, #1
   b57a6:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b57a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b57aa:	3601      	adds	r6, #1
   b57ac:	4498      	add	r8, r3
   b57ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b57b0:	b2b6      	uxth	r6, r6
   b57b2:	42b3      	cmp	r3, r6
   b57b4:	fa1f f888 	uxth.w	r8, r8
   b57b8:	d1e6      	bne.n	b5788 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b57ba:	9b08      	ldr	r3, [sp, #32]
   b57bc:	3b01      	subs	r3, #1
   b57be:	3401      	adds	r4, #1
   b57c0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b57c4:	b264      	sxtb	r4, r4
   b57c6:	9308      	str	r3, [sp, #32]
   b57c8:	d1c3      	bne.n	b5752 <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b57ca:	b00d      	add	sp, #52	; 0x34
   b57cc:	ecbd 8b02 	vpop	{d8}
   b57d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b57d4:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b57d6:	e9cd 9200 	strd	r9, r2, [sp]
   b57da:	ee18 1a10 	vmov	r1, s16
   b57de:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b57e2:	fa0f f288 	sxth.w	r2, r8
   b57e6:	464b      	mov	r3, r9
   b57e8:	4638      	mov	r0, r7
   b57ea:	47d8      	blx	fp
   b57ec:	e7d9      	b.n	b57a2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b57ee:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b57f2:	4293      	cmp	r3, r2
   b57f4:	d0d5      	beq.n	b57a2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b57f6:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b57f8:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b57fa:	d103      	bne.n	b5804 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b57fc:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5800:	9b06      	ldr	r3, [sp, #24]
   b5802:	e7ca      	b.n	b579a <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5804:	9a06      	ldr	r2, [sp, #24]
   b5806:	e7e6      	b.n	b57d6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b5808:	000b903c 	.word	0x000b903c

000b580c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b580c:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b580e:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b5810:	b085      	sub	sp, #20
   b5812:	4604      	mov	r4, r0
  if (c == '\n') {
   b5814:	d107      	bne.n	b5826 <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b5816:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b5818:	8a63      	ldrh	r3, [r4, #18]
   b581a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b581e:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b5820:	2300      	movs	r3, #0
   b5822:	8223      	strh	r3, [r4, #16]
   b5824:	e021      	b.n	b586a <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b5826:	290d      	cmp	r1, #13
   b5828:	d01f      	beq.n	b586a <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b582a:	7e03      	ldrb	r3, [r0, #24]
   b582c:	9302      	str	r3, [sp, #8]
   b582e:	8ac3      	ldrh	r3, [r0, #22]
   b5830:	9301      	str	r3, [sp, #4]
   b5832:	8a83      	ldrh	r3, [r0, #20]
   b5834:	9300      	str	r3, [sp, #0]
   b5836:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b583a:	460b      	mov	r3, r1
   b583c:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b5840:	f7ff ff5c 	bl	b56fc <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b5844:	7e20      	ldrb	r0, [r4, #24]
   b5846:	8a23      	ldrh	r3, [r4, #16]
   b5848:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b584c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5850:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b5852:	b21b      	sxth	r3, r3
   b5854:	4602      	mov	r2, r0
   b5856:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5858:	b139      	cbz	r1, b586a <_ZN12Adafruit_GFX5writeEh+0x5e>
   b585a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b585e:	f06f 0505 	mvn.w	r5, #5
   b5862:	fb05 1100 	mla	r1, r5, r0, r1
   b5866:	428b      	cmp	r3, r1
   b5868:	dcd6      	bgt.n	b5818 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b586a:	2001      	movs	r0, #1
   b586c:	b005      	add	sp, #20
   b586e:	bd30      	pop	{r4, r5, pc}

000b5870 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b5870:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b5872:	8242      	strh	r2, [r0, #18]
}
   b5874:	4770      	bx	lr

000b5876 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b5876:	2901      	cmp	r1, #1
   b5878:	bf38      	it	cc
   b587a:	2101      	movcc	r1, #1
   b587c:	7601      	strb	r1, [r0, #24]
}
   b587e:	4770      	bx	lr

000b5880 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b5880:	82c1      	strh	r1, [r0, #22]
   b5882:	8281      	strh	r1, [r0, #20]
}
   b5884:	4770      	bx	lr

000b5886 <_ZN12Adafruit_GFX11getRotationEv>:
}
   b5886:	7e40      	ldrb	r0, [r0, #25]
   b5888:	4770      	bx	lr

000b588a <_ZN12Adafruit_GFX5widthEv>:
}
   b588a:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b588e:	4770      	bx	lr

000b5890 <_ZN12Adafruit_GFX6heightEv>:
}
   b5890:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b5894:	4770      	bx	lr

000b5896 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b5896:	2904      	cmp	r1, #4
   b5898:	d804      	bhi.n	b58a4 <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b589a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b589e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b58a2:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b58a4:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b58a6:	bf9b      	ittet	ls
   b58a8:	f101 31ff 	addls.w	r1, r1, #4294967295
   b58ac:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b58b0:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b58b2:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b58b4:	bf84      	itt	hi
   b58b6:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b58ba:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b58bc:	4770      	bx	lr

000b58be <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b58be:	b510      	push	{r4, lr}
   b58c0:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b58c2:	3024      	adds	r0, #36	; 0x24
   b58c4:	f000 fe64 	bl	b6590 <_ZN8FatCache4syncEv>
   b58c8:	b128      	cbz	r0, b58d6 <_ZN9FatVolume9cacheSyncEv+0x18>
   b58ca:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b58ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b58d2:	f000 be5d 	b.w	b6590 <_ZN8FatCache4syncEv>
  }
   b58d6:	bd10      	pop	{r4, pc}

000b58d8 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b58d8:	1e41      	subs	r1, r0, #1
   b58da:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b58de:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b58e0:	0842      	lsrs	r2, r0, #1
   b58e2:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b58e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b58ea:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b58ee:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b58f0:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b58f2:	d1f5      	bne.n	b58e0 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b58f4:	4770      	bx	lr
	...

000b58f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b58f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b58fc:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b58fe:	f810 3b01 	ldrb.w	r3, [r0], #1
   b5902:	2b20      	cmp	r3, #32
   b5904:	d0fa      	beq.n	b58fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5906:	4d6a      	ldr	r5, [pc, #424]	; (b5ab0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b5908:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b590a:	2400      	movs	r4, #0
    c = path[len];
   b590c:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b590e:	b1c3      	cbz	r3, b5942 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b5910:	2b2f      	cmp	r3, #47	; 0x2f
   b5912:	d016      	beq.n	b5942 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5914:	2b5c      	cmp	r3, #92	; 0x5c
   b5916:	d102      	bne.n	b591e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b5918:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b591a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b591e:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b5922:	b2c0      	uxtb	r0, r0
   b5924:	281d      	cmp	r0, #29
   b5926:	d803      	bhi.n	b5930 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b5928:	fa25 f000 	lsr.w	r0, r5, r0
   b592c:	07c0      	lsls	r0, r0, #31
   b592e:	d4f3      	bmi.n	b5918 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b5930:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b5934:	283c      	cmp	r0, #60	; 0x3c
   b5936:	d0ef      	beq.n	b5918 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b5938:	3b20      	subs	r3, #32
   b593a:	2b5e      	cmp	r3, #94	; 0x5e
   b593c:	d8ec      	bhi.n	b5918 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b593e:	3401      	adds	r4, #1
    c = path[len];
   b5940:	e7e4      	b.n	b590c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b5942:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b5944:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b5946:	4607      	mov	r7, r0
   b5948:	f810 5b01 	ldrb.w	r5, [r0], #1
   b594c:	2d20      	cmp	r5, #32
   b594e:	d0fa      	beq.n	b5946 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b5950:	2d2f      	cmp	r5, #47	; 0x2f
   b5952:	d0f8      	beq.n	b5946 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b5954:	6017      	str	r7, [r2, #0]
  while (len) {
   b5956:	b14c      	cbz	r4, b596c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b5958:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b595c:	2a2e      	cmp	r2, #46	; 0x2e
   b595e:	d001      	beq.n	b5964 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b5960:	2a20      	cmp	r2, #32
   b5962:	d101      	bne.n	b5968 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b5964:	3c01      	subs	r4, #1
  while (len) {
   b5966:	e7f6      	b.n	b5956 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b5968:	2cff      	cmp	r4, #255	; 0xff
   b596a:	dcd5      	bgt.n	b5918 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b596c:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b5970:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b5974:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b5976:	f8c1 300d 	str.w	r3, [r1, #13]
   b597a:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b597c:	f04f 0800 	mov.w	r8, #0
   b5980:	f816 3008 	ldrb.w	r3, [r6, r8]
   b5984:	2b2e      	cmp	r3, #46	; 0x2e
   b5986:	d001      	beq.n	b598c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b5988:	2b20      	cmp	r3, #32
   b598a:	d102      	bne.n	b5992 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b598c:	f108 0801 	add.w	r8, r8, #1
   b5990:	e7f6      	b.n	b5980 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b5992:	fab8 f088 	clz	r0, r8
   b5996:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b5998:	1e65      	subs	r5, r4, #1
   b599a:	1c6b      	adds	r3, r5, #1
   b599c:	d002      	beq.n	b59a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b599e:	5d73      	ldrb	r3, [r6, r5]
   b59a0:	2b2e      	cmp	r3, #46	; 0x2e
   b59a2:	d114      	bne.n	b59ce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b59a4:	f04f 0900 	mov.w	r9, #0
   b59a8:	2707      	movs	r7, #7
   b59aa:	464a      	mov	r2, r9
   b59ac:	46ca      	mov	sl, r9
   b59ae:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b59b2:	45a0      	cmp	r8, r4
   b59b4:	da68      	bge.n	b5a88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b59b6:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b59ba:	2b20      	cmp	r3, #32
   b59bc:	d003      	beq.n	b59c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b59be:	2b2e      	cmp	r3, #46	; 0x2e
   b59c0:	d107      	bne.n	b59d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b59c2:	45a8      	cmp	r8, r5
   b59c4:	d012      	beq.n	b59ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b59c6:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b59c8:	f108 0801 	add.w	r8, r8, #1
   b59cc:	e7f1      	b.n	b59b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b59ce:	3d01      	subs	r5, #1
   b59d0:	e7e3      	b.n	b599a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b59d2:	2b22      	cmp	r3, #34	; 0x22
   b59d4:	d008      	beq.n	b59e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b59d6:	2b7c      	cmp	r3, #124	; 0x7c
   b59d8:	d006      	beq.n	b59e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b59da:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b59de:	f1bc 0f05 	cmp.w	ip, #5
   b59e2:	d80a      	bhi.n	b59fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b59e4:	2b2d      	cmp	r3, #45	; 0x2d
   b59e6:	d012      	beq.n	b5a0e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b59e8:	45a8      	cmp	r8, r5
   b59ea:	d15b      	bne.n	b5aa4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b59ec:	2f0a      	cmp	r7, #10
   b59ee:	d04a      	beq.n	b5a86 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b59f0:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b59f2:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b59f4:	f04f 0e10 	mov.w	lr, #16
   b59f8:	e7e6      	b.n	b59c8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b59fa:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b59fe:	f1bc 0f05 	cmp.w	ip, #5
   b5a02:	d9f1      	bls.n	b59e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b5a04:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b5a08:	f1bc 0f02 	cmp.w	ip, #2
   b5a0c:	d9ec      	bls.n	b59e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b5a0e:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b5a12:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b5a16:	d8e7      	bhi.n	b59e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b5a18:	45a8      	cmp	r8, r5
   b5a1a:	d0e7      	beq.n	b59ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b5a1c:	42ba      	cmp	r2, r7
   b5a1e:	d830      	bhi.n	b5a82 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b5a20:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b5a24:	f1bc 0f19 	cmp.w	ip, #25
   b5a28:	d81a      	bhi.n	b5a60 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b5a2a:	3b20      	subs	r3, #32
        lc |= bit;
   b5a2c:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b5a30:	b2db      	uxtb	r3, r3
        lc |= bit;
   b5a32:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b5a36:	f102 0c01 	add.w	ip, r2, #1
   b5a3a:	fa5f fc8c 	uxtb.w	ip, ip
   b5a3e:	440a      	add	r2, r1
      if (i < 7) {
   b5a40:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b5a44:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b5a46:	d801      	bhi.n	b5a4c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b5a48:	f881 c00c 	strb.w	ip, [r1, #12]
   b5a4c:	4662      	mov	r2, ip
   b5a4e:	e7bb      	b.n	b59c8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b5a50:	45a8      	cmp	r8, r5
   b5a52:	dc18      	bgt.n	b5a86 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b5a54:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b5a56:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b5a58:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b5a5a:	f04f 0e10 	mov.w	lr, #16
   b5a5e:	e7b2      	b.n	b59c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b5a60:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b5a64:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b5a68:	bf98      	it	ls
   b5a6a:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b5a6e:	e7e2      	b.n	b5a36 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b5a70:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b5a72:	2001      	movs	r0, #1
   b5a74:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b5a76:	4419      	add	r1, r3
   b5a78:	237e      	movs	r3, #126	; 0x7e
   b5a7a:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b5a7c:	2331      	movs	r3, #49	; 0x31
   b5a7e:	738b      	strb	r3, [r1, #14]
   b5a80:	e74b      	b.n	b591a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b5a82:	2f0a      	cmp	r7, #10
   b5a84:	d1e4      	bne.n	b5a50 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b5a86:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b5a88:	7b4b      	ldrb	r3, [r1, #13]
   b5a8a:	2b20      	cmp	r3, #32
   b5a8c:	f43f af44 	beq.w	b5918 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b5a90:	2800      	cmp	r0, #0
   b5a92:	d0ed      	beq.n	b5a70 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b5a94:	ea1a 0f09 	tst.w	sl, r9
   b5a98:	bf18      	it	ne
   b5a9a:	f04f 0902 	movne.w	r9, #2
   b5a9e:	f881 9000 	strb.w	r9, [r1]
   b5aa2:	e73a      	b.n	b591a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b5aa4:	42ba      	cmp	r2, r7
   b5aa6:	d8ec      	bhi.n	b5a82 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b5aa8:	2000      	movs	r0, #0
      c = '_';
   b5aaa:	235f      	movs	r3, #95	; 0x5f
   b5aac:	e7c3      	b.n	b5a36 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b5aae:	bf00      	nop
   b5ab0:	31000101 	.word	0x31000101

000b5ab4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b5ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b5ab8:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b5abc:	4606      	mov	r6, r0
   b5abe:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b5ac0:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b5ac2:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b5ac4:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b5ac8:	6861      	ldr	r1, [r4, #4]
   b5aca:	68a2      	ldr	r2, [r4, #8]
   b5acc:	186b      	adds	r3, r5, r1
   b5ace:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b5ad0:	4411      	add	r1, r2
   b5ad2:	4291      	cmp	r1, r2
   b5ad4:	d006      	beq.n	b5ae4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b5ad6:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5ada:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b5ade:	4043      	eors	r3, r0
   b5ae0:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b5ae2:	e7f6      	b.n	b5ad2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b5ae4:	f1b9 0f03 	cmp.w	r9, #3
   b5ae8:	bf28      	it	cs
   b5aea:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5aee:	f109 0204 	add.w	r2, r9, #4
   b5af2:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b5af4:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5af8:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5afa:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5afc:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5afe:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5b00:	bf94      	ite	ls
   b5b02:	3130      	addls	r1, #48	; 0x30
   b5b04:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5b06:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5b08:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b5b0a:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5b0e:	d1f1      	bne.n	b5af4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b5b10:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b5b14:	2100      	movs	r1, #0
   b5b16:	735f      	strb	r7, [r3, #13]
   b5b18:	4630      	mov	r0, r6
   b5b1a:	f000 fb2a 	bl	b6172 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b5b1e:	2101      	movs	r1, #1
   b5b20:	4630      	mov	r0, r6
   b5b22:	f000 fb07 	bl	b6134 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b5b26:	4601      	mov	r1, r0
   b5b28:	b928      	cbnz	r0, b5b36 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b5b2a:	7870      	ldrb	r0, [r6, #1]
   b5b2c:	fab0 f080 	clz	r0, r0
   b5b30:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b5b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b5b36:	7803      	ldrb	r3, [r0, #0]
   b5b38:	b16b      	cbz	r3, b5b56 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b5b3a:	7ac3      	ldrb	r3, [r0, #11]
   b5b3c:	071b      	lsls	r3, r3, #28
   b5b3e:	d4ee      	bmi.n	b5b1e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b5b40:	220b      	movs	r2, #11
   b5b42:	4640      	mov	r0, r8
   b5b44:	f003 f8aa 	bl	b8c9c <memcmp>
   b5b48:	2800      	cmp	r0, #0
   b5b4a:	d1e8      	bne.n	b5b1e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b5b4c:	3501      	adds	r5, #1
   b5b4e:	b2ad      	uxth	r5, r5
   b5b50:	2d64      	cmp	r5, #100	; 0x64
   b5b52:	d1b9      	bne.n	b5ac8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b5b54:	e7ed      	b.n	b5b32 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b5b56:	2001      	movs	r0, #1
   b5b58:	e7eb      	b.n	b5b32 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b5b5c <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b5b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5b60:	ed2d 8b02 	vpush	{d8}
   b5b64:	b08b      	sub	sp, #44	; 0x2c
   b5b66:	460d      	mov	r5, r1
   b5b68:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b5b6a:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b5b6c:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b5b6e:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b5b72:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b5b74:	d105      	bne.n	b5b82 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b5b76:	2000      	movs	r0, #0
}
   b5b78:	b00b      	add	sp, #44	; 0x2c
   b5b7a:	ecbd 8b02 	vpop	{d8}
   b5b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b5b82:	9b07      	ldr	r3, [sp, #28]
   b5b84:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b5b86:	2b00      	cmp	r3, #0
   b5b88:	d1f5      	bne.n	b5b76 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b5b8a:	6853      	ldr	r3, [r2, #4]
   b5b8c:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b5b8e:	7813      	ldrb	r3, [r2, #0]
   b5b90:	079c      	lsls	r4, r3, #30
   b5b92:	bf1f      	itttt	ne
   b5b94:	9b05      	ldrne	r3, [sp, #20]
   b5b96:	330c      	addne	r3, #12
   b5b98:	220d      	movne	r2, #13
   b5b9a:	fbb3 f3f2 	udivne	r3, r3, r2
   b5b9e:	bf1a      	itte	ne
   b5ba0:	3301      	addne	r3, #1
   b5ba2:	b2db      	uxtbne	r3, r3
   b5ba4:	2301      	moveq	r3, #1
    seekSet(0);
   b5ba6:	2100      	movs	r1, #0
   b5ba8:	4628      	mov	r0, r5
   b5baa:	9303      	str	r3, [sp, #12]
   b5bac:	f000 fae1 	bl	b6172 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b5bb0:	f107 030d 	add.w	r3, r7, #13
  }
   b5bb4:	f04f 0b00 	mov.w	fp, #0
   b5bb8:	ee08 3a10 	vmov	s16, r3
   b5bbc:	46da      	mov	sl, fp
   b5bbe:	465c      	mov	r4, fp
   b5bc0:	465e      	mov	r6, fp
   b5bc2:	f8cd b010 	str.w	fp, [sp, #16]
   b5bc6:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b5bc8:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b5bca:	2101      	movs	r1, #1
   b5bcc:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b5bce:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b5bd2:	f000 faaf 	bl	b6134 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b5bd6:	4603      	mov	r3, r0
   b5bd8:	2800      	cmp	r0, #0
   b5bda:	d171      	bne.n	b5cc0 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b5bdc:	786b      	ldrb	r3, [r5, #1]
   b5bde:	2b00      	cmp	r3, #0
   b5be0:	d1c9      	bne.n	b5b76 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b5be2:	9b06      	ldr	r3, [sp, #24]
   b5be4:	059a      	lsls	r2, r3, #22
   b5be6:	d5c6      	bpl.n	b5b76 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b5be8:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b5bec:	3b01      	subs	r3, #1
   b5bee:	2b01      	cmp	r3, #1
   b5bf0:	d8c1      	bhi.n	b5b76 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b5bf2:	9b04      	ldr	r3, [sp, #16]
   b5bf4:	2c00      	cmp	r4, #0
   b5bf6:	bf08      	it	eq
   b5bf8:	4643      	moveq	r3, r8
   b5bfa:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b5bfc:	9b03      	ldr	r3, [sp, #12]
   b5bfe:	429c      	cmp	r4, r3
   b5c00:	f0c0 80f1 	bcc.w	b5de6 <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b5c04:	f1b9 0f00 	cmp.w	r9, #0
   b5c08:	f040 810a 	bne.w	b5e20 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b5c0c:	9b04      	ldr	r3, [sp, #16]
   b5c0e:	4628      	mov	r0, r5
   b5c10:	0159      	lsls	r1, r3, #5
   b5c12:	f000 faae 	bl	b6172 <_ZN7FatFile7seekSetEm>
   b5c16:	2800      	cmp	r0, #0
   b5c18:	d0ad      	beq.n	b5b76 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b5c1a:	9b03      	ldr	r3, [sp, #12]
   b5c1c:	f103 39ff 	add.w	r9, r3, #4294967295
   b5c20:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b5c24:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b5c26:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b5c2a:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b5c2e:	2e00      	cmp	r6, #0
   b5c30:	f000 810d 	beq.w	b5e4e <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b5c34:	2100      	movs	r1, #0
   b5c36:	4628      	mov	r0, r5
   b5c38:	f000 fa7c 	bl	b6134 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b5c3c:	4604      	mov	r4, r0
   b5c3e:	2800      	cmp	r0, #0
   b5c40:	d099      	beq.n	b5b76 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b5c42:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b5c44:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b5c48:	454e      	cmp	r6, r9
   b5c4a:	f043 0301 	orr.w	r3, r3, #1
   b5c4e:	bf0c      	ite	eq
   b5c50:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b5c54:	46b3      	movne	fp, r6
   b5c56:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b5c5a:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b5c5e:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b5c62:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b5c66:	f107 000d 	add.w	r0, r7, #13
   b5c6a:	f7ff fe35 	bl	b58d8 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b5c6e:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b5c72:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b5c74:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b5c78:	f00b 031f 	and.w	r3, fp, #31
   b5c7c:	220d      	movs	r2, #13
   b5c7e:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b5c80:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b5c84:	4353      	muls	r3, r2
   b5c86:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b5c88:	9905      	ldr	r1, [sp, #20]
   b5c8a:	4299      	cmp	r1, r3
   b5c8c:	f240 80d0 	bls.w	b5e30 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b5c90:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b5c94:	2a04      	cmp	r2, #4
   b5c96:	fa5f fe82 	uxtb.w	lr, r2
   b5c9a:	f102 0001 	add.w	r0, r2, #1
   b5c9e:	f200 80cd 	bhi.w	b5e3c <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b5ca2:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b5ca6:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b5caa:	280d      	cmp	r0, #13
   b5cac:	f103 0301 	add.w	r3, r3, #1
   b5cb0:	4602      	mov	r2, r0
   b5cb2:	d1e9      	bne.n	b5c88 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b5cb4:	3e01      	subs	r6, #1
   b5cb6:	b2f6      	uxtb	r6, r6
   b5cb8:	e7b9      	b.n	b5c2e <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b5cba:	f04f 0901 	mov.w	r9, #1
   b5cbe:	e783      	b.n	b5bc8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b5cc0:	7802      	ldrb	r2, [r0, #0]
   b5cc2:	2ae5      	cmp	r2, #229	; 0xe5
   b5cc4:	d000      	beq.n	b5cc8 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b5cc6:	b97a      	cbnz	r2, b5ce8 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b5cc8:	9904      	ldr	r1, [sp, #16]
   b5cca:	2c00      	cmp	r4, #0
   b5ccc:	bf08      	it	eq
   b5cce:	4641      	moveq	r1, r8
   b5cd0:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b5cd2:	9903      	ldr	r1, [sp, #12]
   b5cd4:	428c      	cmp	r4, r1
        freeFound++;
   b5cd6:	bf3c      	itt	cc
   b5cd8:	3401      	addcc	r4, #1
   b5cda:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b5cdc:	2a00      	cmp	r2, #0
   b5cde:	d080      	beq.n	b5be2 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b5ce0:	2ae5      	cmp	r2, #229	; 0xe5
   b5ce2:	d105      	bne.n	b5cf0 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b5ce4:	2600      	movs	r6, #0
   b5ce6:	e76f      	b.n	b5bc8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b5ce8:	9903      	ldr	r1, [sp, #12]
   b5cea:	428c      	cmp	r4, r1
   b5cec:	bf38      	it	cc
   b5cee:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b5cf0:	2a2e      	cmp	r2, #46	; 0x2e
   b5cf2:	d0f7      	beq.n	b5ce4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b5cf4:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b5cf6:	290f      	cmp	r1, #15
   b5cf8:	d14a      	bne.n	b5d90 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b5cfa:	bb16      	cbnz	r6, b5d42 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b5cfc:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b5d00:	f43f af62 	beq.w	b5bc8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b5d04:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b5d08:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b5d0c:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b5d0e:	220d      	movs	r2, #13
   b5d10:	f10a 38ff 	add.w	r8, sl, #4294967295
   b5d14:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b5d18:	9a05      	ldr	r2, [sp, #20]
   b5d1a:	4542      	cmp	r2, r8
   b5d1c:	d9e2      	bls.n	b5ce4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b5d1e:	eba2 0208 	sub.w	r2, r2, r8
   b5d22:	9208      	str	r2, [sp, #32]
   b5d24:	2200      	movs	r2, #0
   b5d26:	eb02 0108 	add.w	r1, r2, r8
   b5d2a:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b5d2c:	4618      	mov	r0, r3
   b5d2e:	b2d1      	uxtb	r1, r2
   b5d30:	f7ff fdb1 	bl	b5896 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b5d34:	9908      	ldr	r1, [sp, #32]
   b5d36:	428a      	cmp	r2, r1
   b5d38:	d10d      	bne.n	b5d56 <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b5d3a:	2800      	cmp	r0, #0
   b5d3c:	bf18      	it	ne
   b5d3e:	2600      	movne	r6, #0
   b5d40:	e742      	b.n	b5bc8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b5d42:	f10a 3aff 	add.w	sl, sl, #4294967295
   b5d46:	fa5f fa8a 	uxtb.w	sl, sl
   b5d4a:	4552      	cmp	r2, sl
   b5d4c:	d1ca      	bne.n	b5ce4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b5d4e:	7b5a      	ldrb	r2, [r3, #13]
   b5d50:	455a      	cmp	r2, fp
   b5d52:	d0dc      	beq.n	b5d0e <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b5d54:	e7c6      	b.n	b5ce4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b5d56:	28ff      	cmp	r0, #255	; 0xff
   b5d58:	d8c4      	bhi.n	b5ce4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b5d5a:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b5d5e:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b5d62:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b5d64:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b5d66:	bf9c      	itt	ls
   b5d68:	f10e 0020 	addls.w	r0, lr, #32
   b5d6c:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b5d70:	4608      	mov	r0, r1
   b5d72:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5d74:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b5d76:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b5d7a:	f1bc 0f19 	cmp.w	ip, #25
   b5d7e:	bf9c      	itt	ls
   b5d80:	3120      	addls	r1, #32
   b5d82:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b5d84:	4571      	cmp	r1, lr
   b5d86:	d1ad      	bne.n	b5ce4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b5d88:	3201      	adds	r2, #1
   b5d8a:	2a0d      	cmp	r2, #13
   b5d8c:	d1cb      	bne.n	b5d26 <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b5d8e:	e71b      	b.n	b5bc8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b5d90:	0708      	lsls	r0, r1, #28
   b5d92:	d4a7      	bmi.n	b5ce4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b5d94:	b15e      	cbz	r6, b5dae <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b5d96:	f1ba 0f01 	cmp.w	sl, #1
   b5d9a:	f47f aeec 	bne.w	b5b76 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b5d9e:	4618      	mov	r0, r3
   b5da0:	f7ff fd9a 	bl	b58d8 <_ZN7FatFile11lfnChecksumEPh>
   b5da4:	4558      	cmp	r0, fp
   b5da6:	f47f aee6 	bne.w	b5b76 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b5daa:	46b1      	mov	r9, r6
   b5dac:	e00e      	b.n	b5dcc <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b5dae:	ee18 1a10 	vmov	r1, s16
   b5db2:	220b      	movs	r2, #11
   b5db4:	4618      	mov	r0, r3
   b5db6:	f002 ff71 	bl	b8c9c <memcmp>
   b5dba:	2800      	cmp	r0, #0
   b5dbc:	f47f af04 	bne.w	b5bc8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b5dc0:	f897 9000 	ldrb.w	r9, [r7]
   b5dc4:	f019 0901 	ands.w	r9, r9, #1
   b5dc8:	f47f af77 	bne.w	b5cba <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b5dcc:	9b06      	ldr	r3, [sp, #24]
   b5dce:	0519      	lsls	r1, r3, #20
   b5dd0:	f53f aed1 	bmi.w	b5b76 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b5dd4:	9b06      	ldr	r3, [sp, #24]
   b5dd6:	9807      	ldr	r0, [sp, #28]
   b5dd8:	f8cd 9000 	str.w	r9, [sp]
   b5ddc:	4642      	mov	r2, r8
   b5dde:	4629      	mov	r1, r5
   b5de0:	f000 fa0a 	bl	b61f8 <_ZN7FatFile15openCachedEntryEPS_tih>
   b5de4:	e6c8      	b.n	b5b78 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b5de6:	2100      	movs	r1, #0
   b5de8:	4628      	mov	r0, r5
   b5dea:	f000 f9a3 	bl	b6134 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b5dee:	b9a0      	cbnz	r0, b5e1a <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b5df0:	786b      	ldrb	r3, [r5, #1]
   b5df2:	2b00      	cmp	r3, #0
   b5df4:	f47f aebf 	bne.w	b5b76 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b5df8:	4628      	mov	r0, r5
   b5dfa:	f000 f887 	bl	b5f0c <_ZN7FatFile13addDirClusterEv>
   b5dfe:	2800      	cmp	r0, #0
   b5e00:	f43f aeb9 	beq.w	b5b76 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b5e04:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b5e06:	791b      	ldrb	r3, [r3, #4]
   b5e08:	2b01      	cmp	r3, #1
   b5e0a:	f63f aefb 	bhi.w	b5c04 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b5e0e:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b5e10:	3410      	adds	r4, #16
   b5e12:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b5e14:	42a3      	cmp	r3, r4
   b5e16:	d8ef      	bhi.n	b5df8 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b5e18:	e6f4      	b.n	b5c04 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b5e1a:	3401      	adds	r4, #1
   b5e1c:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b5e1e:	e6ed      	b.n	b5bfc <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b5e20:	4639      	mov	r1, r7
   b5e22:	4628      	mov	r0, r5
   b5e24:	f7ff fe46 	bl	b5ab4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b5e28:	2800      	cmp	r0, #0
   b5e2a:	f47f aeef 	bne.w	b5c0c <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b5e2e:	e6a2      	b.n	b5b76 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b5e30:	bf14      	ite	ne
   b5e32:	f04f 31ff 	movne.w	r1, #4294967295
   b5e36:	2100      	moveq	r1, #0
   b5e38:	b289      	uxth	r1, r1
   b5e3a:	e72b      	b.n	b5c94 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b5e3c:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b5e40:	bf94      	ite	ls
   b5e42:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b5e46:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b5e4a:	8091      	strh	r1, [r2, #4]
   b5e4c:	e72d      	b.n	b5caa <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b5e4e:	4631      	mov	r1, r6
   b5e50:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b5e52:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b5e56:	f000 f96d 	bl	b6134 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b5e5a:	4604      	mov	r4, r0
   b5e5c:	2800      	cmp	r0, #0
   b5e5e:	f43f ae8a 	beq.w	b5b76 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b5e62:	2220      	movs	r2, #32
   b5e64:	4631      	mov	r1, r6
   b5e66:	f002 ff37 	bl	b8cd8 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b5e6a:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b5e6e:	6023      	str	r3, [r4, #0]
   b5e70:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b5e74:	6063      	str	r3, [r4, #4]
   b5e76:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b5e7a:	8123      	strh	r3, [r4, #8]
   b5e7c:	7dfb      	ldrb	r3, [r7, #23]
   b5e7e:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b5e80:	783b      	ldrb	r3, [r7, #0]
   b5e82:	f003 0318 	and.w	r3, r3, #24
   b5e86:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b5e88:	4b0f      	ldr	r3, [pc, #60]	; (b5ec8 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b5e8a:	681b      	ldr	r3, [r3, #0]
   b5e8c:	b19b      	cbz	r3, b5eb6 <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b5e8e:	f104 010e 	add.w	r1, r4, #14
   b5e92:	f104 0010 	add.w	r0, r4, #16
   b5e96:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b5e98:	8a23      	ldrh	r3, [r4, #16]
   b5e9a:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b5e9c:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b5e9e:	89e3      	ldrh	r3, [r4, #14]
   b5ea0:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b5ea2:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b5ea4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b5ea8:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b5eac:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b5eb0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
   b5eb4:	e78e      	b.n	b5dd4 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b5eb6:	2321      	movs	r3, #33	; 0x21
   b5eb8:	7423      	strb	r3, [r4, #16]
   b5eba:	2328      	movs	r3, #40	; 0x28
   b5ebc:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b5ebe:	2308      	movs	r3, #8
   b5ec0:	73a6      	strb	r6, [r4, #14]
   b5ec2:	73e3      	strb	r3, [r4, #15]
   b5ec4:	e7e8      	b.n	b5e98 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b5ec6:	bf00      	nop
   b5ec8:	2003e6a0 	.word	0x2003e6a0

000b5ecc <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b5ecc:	b538      	push	{r3, r4, r5, lr}
   b5ece:	4604      	mov	r4, r0
   b5ed0:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b5ed2:	2224      	movs	r2, #36	; 0x24
   b5ed4:	2100      	movs	r1, #0
   b5ed6:	f002 feff 	bl	b8cd8 <memset>

  m_vol = vol;
   b5eda:	60a5      	str	r5, [r4, #8]
    return m_fatType;
   b5edc:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b5ede:	2b10      	cmp	r3, #16
   b5ee0:	d003      	beq.n	b5eea <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b5ee2:	2b20      	cmp	r3, #32
   b5ee4:	d006      	beq.n	b5ef4 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b5ee6:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b5ee8:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b5eea:	2320      	movs	r3, #32
  m_flags = F_READ;
   b5eec:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b5eee:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b5ef0:	70a0      	strb	r0, [r4, #2]
  return true;
   b5ef2:	e7f9      	b.n	b5ee8 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b5ef4:	2340      	movs	r3, #64	; 0x40
   b5ef6:	e7f9      	b.n	b5eec <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b5ef8 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b5ef8:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b5efa:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b5efc:	f043 0304 	orr.w	r3, r3, #4
   b5f00:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b5f02:	f100 0210 	add.w	r2, r0, #16
   b5f06:	6880      	ldr	r0, [r0, #8]
   b5f08:	f000 bbf8 	b.w	b66fc <_ZN9FatVolume15allocateClusterEmPm>

000b5f0c <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b5f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b5f10:	7801      	ldrb	r1, [r0, #0]
   b5f12:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b5f16:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b5f18:	d003      	beq.n	b5f22 <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b5f1a:	2600      	movs	r6, #0
}
   b5f1c:	4630      	mov	r0, r6
   b5f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b5f22:	6942      	ldr	r2, [r0, #20]
   b5f24:	4b17      	ldr	r3, [pc, #92]	; (b5f84 <_ZN7FatFile13addDirClusterEv+0x78>)
   b5f26:	429a      	cmp	r2, r3
   b5f28:	d2f7      	bcs.n	b5f1a <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b5f2a:	f7ff ffe5 	bl	b5ef8 <_ZN7FatFile10addClusterEv>
   b5f2e:	4606      	mov	r6, r0
   b5f30:	2800      	cmp	r0, #0
   b5f32:	d0f2      	beq.n	b5f1a <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b5f34:	6921      	ldr	r1, [r4, #16]
   b5f36:	68a0      	ldr	r0, [r4, #8]
   b5f38:	f000 fb75 	bl	b6626 <_ZNK9FatVolume17clusterFirstBlockEm>
   b5f3c:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
   b5f3e:	68a0      	ldr	r0, [r4, #8]
   b5f40:	2205      	movs	r2, #5
   b5f42:	4639      	mov	r1, r7
   b5f44:	3024      	adds	r0, #36	; 0x24
   b5f46:	f000 fb4b 	bl	b65e0 <_ZN8FatCache4readEmh>
  if (!pc) {
   b5f4a:	4680      	mov	r8, r0
   b5f4c:	2800      	cmp	r0, #0
   b5f4e:	d0e4      	beq.n	b5f1a <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b5f50:	4629      	mov	r1, r5
   b5f52:	f44f 7200 	mov.w	r2, #512	; 0x200
   b5f56:	f002 febf 	bl	b8cd8 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b5f5a:	2501      	movs	r5, #1
   b5f5c:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b5f5e:	791a      	ldrb	r2, [r3, #4]
   b5f60:	42aa      	cmp	r2, r5
   b5f62:	d909      	bls.n	b5f78 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b5f64:	6818      	ldr	r0, [r3, #0]
   b5f66:	4642      	mov	r2, r8
   b5f68:	19e9      	adds	r1, r5, r7
   b5f6a:	f000 fea6 	bl	b6cba <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b5f6e:	2800      	cmp	r0, #0
   b5f70:	d0d3      	beq.n	b5f1a <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b5f72:	3501      	adds	r5, #1
   b5f74:	b2ed      	uxtb	r5, r5
   b5f76:	e7f1      	b.n	b5f5c <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b5f78:	6963      	ldr	r3, [r4, #20]
   b5f7a:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b5f7e:	6163      	str	r3, [r4, #20]
  return true;
   b5f80:	e7cc      	b.n	b5f1c <_ZN7FatFile13addDirClusterEv+0x10>
   b5f82:	bf00      	nop
   b5f84:	001ffe00 	.word	0x001ffe00

000b5f88 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b5f88:	b510      	push	{r4, lr}
   b5f8a:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b5f8c:	6880      	ldr	r0, [r0, #8]
   b5f8e:	460a      	mov	r2, r1
   b5f90:	3024      	adds	r0, #36	; 0x24
   b5f92:	69a1      	ldr	r1, [r4, #24]
   b5f94:	f000 fb24 	bl	b65e0 <_ZN8FatCache4readEmh>
  if (!pc) {
   b5f98:	b120      	cbz	r0, b5fa4 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b5f9a:	88a3      	ldrh	r3, [r4, #4]
   b5f9c:	f003 030f 	and.w	r3, r3, #15
   b5fa0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b5fa4:	bd10      	pop	{r4, pc}

000b5fa6 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b5fa6:	7803      	ldrb	r3, [r0, #0]
   b5fa8:	b90b      	cbnz	r3, b5fae <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b5faa:	f7ff bf8f 	b.w	b5ecc <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b5fae:	2000      	movs	r0, #0
   b5fb0:	4770      	bx	lr

000b5fb2 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b5fb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b5fb6:	7803      	ldrb	r3, [r0, #0]
   b5fb8:	4604      	mov	r4, r0
   b5fba:	4688      	mov	r8, r1
   b5fbc:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b5fbe:	2b00      	cmp	r3, #0
   b5fc0:	d05d      	beq.n	b607e <_ZN7FatFile4readEPvj+0xcc>
   b5fc2:	7882      	ldrb	r2, [r0, #2]
   b5fc4:	07d1      	lsls	r1, r2, #31
   b5fc6:	d55a      	bpl.n	b607e <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b5fc8:	071a      	lsls	r2, r3, #28
   b5fca:	d52d      	bpl.n	b6028 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b5fcc:	69c3      	ldr	r3, [r0, #28]
   b5fce:	6942      	ldr	r2, [r0, #20]
   b5fd0:	1a9b      	subs	r3, r3, r2
   b5fd2:	429d      	cmp	r5, r3
   b5fd4:	bf28      	it	cs
   b5fd6:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b5fd8:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b5fda:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5fde:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b5fe2:	2e00      	cmp	r6, #0
   b5fe4:	f000 808f 	beq.w	b6106 <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b5fe8:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b5fea:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b5fec:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b5fee:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b5ff0:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b5ff4:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b5ff8:	d51f      	bpl.n	b603a <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b5ffa:	6a00      	ldr	r0, [r0, #32]
   b5ffc:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b5ffe:	68a0      	ldr	r0, [r4, #8]
   b6000:	f1ba 0f00 	cmp.w	sl, #0
   b6004:	d142      	bne.n	b608c <_ZN7FatFile4readEPvj+0xda>
   b6006:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b600a:	d33f      	bcc.n	b608c <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b600c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b600e:	4299      	cmp	r1, r3
   b6010:	d03c      	beq.n	b608c <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b6012:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b6016:	d252      	bcs.n	b60be <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b6018:	6800      	ldr	r0, [r0, #0]
   b601a:	4642      	mov	r2, r8
   b601c:	f000 fdc4 	bl	b6ba8 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b6020:	b368      	cbz	r0, b607e <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b6022:	f44f 7700 	mov.w	r7, #512	; 0x200
   b6026:	e044      	b.n	b60b2 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b6028:	069b      	lsls	r3, r3, #26
   b602a:	d5d5      	bpl.n	b5fd8 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b602c:	6883      	ldr	r3, [r0, #8]
   b602e:	891a      	ldrh	r2, [r3, #8]
   b6030:	6943      	ldr	r3, [r0, #20]
   b6032:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b6036:	b29b      	uxth	r3, r3
   b6038:	e7cb      	b.n	b5fd2 <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b603a:	f890 9005 	ldrb.w	r9, [r0, #5]
   b603e:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b6042:	f1ba 0f00 	cmp.w	sl, #0
   b6046:	d108      	bne.n	b605a <_ZN7FatFile4readEPvj+0xa8>
   b6048:	f1b9 0f00 	cmp.w	r9, #0
   b604c:	d105      	bne.n	b605a <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b604e:	b95b      	cbnz	r3, b6068 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6050:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b6052:	bf4c      	ite	mi
   b6054:	6a03      	ldrmi	r3, [r0, #32]
   b6056:	6a23      	ldrpl	r3, [r4, #32]
   b6058:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b605a:	6921      	ldr	r1, [r4, #16]
   b605c:	68a0      	ldr	r0, [r4, #8]
   b605e:	f000 fae2 	bl	b6626 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6062:	eb09 0100 	add.w	r1, r9, r0
   b6066:	e7ca      	b.n	b5ffe <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6068:	6921      	ldr	r1, [r4, #16]
   b606a:	465a      	mov	r2, fp
   b606c:	f000 fae1 	bl	b6632 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b6070:	2800      	cmp	r0, #0
   b6072:	db04      	blt.n	b607e <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b6074:	d1f1      	bne.n	b605a <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b6076:	7823      	ldrb	r3, [r4, #0]
   b6078:	f013 0f70 	tst.w	r3, #112	; 0x70
   b607c:	d143      	bne.n	b6106 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b607e:	7863      	ldrb	r3, [r4, #1]
   b6080:	f043 0302 	orr.w	r3, r3, #2
   b6084:	7063      	strb	r3, [r4, #1]
  return -1;
   b6086:	f04f 30ff 	mov.w	r0, #4294967295
   b608a:	e03d      	b.n	b6108 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b608c:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b6090:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b6092:	f04f 0200 	mov.w	r2, #0
   b6096:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b609a:	bf28      	it	cs
   b609c:	4637      	movcs	r7, r6
   b609e:	f000 fa9f 	bl	b65e0 <_ZN8FatCache4readEmh>
      if (!pc) {
   b60a2:	2800      	cmp	r0, #0
   b60a4:	d0eb      	beq.n	b607e <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b60a6:	eb00 010a 	add.w	r1, r0, sl
   b60aa:	463a      	mov	r2, r7
   b60ac:	4640      	mov	r0, r8
   b60ae:	f002 fe05 	bl	b8cbc <memcpy>
    m_curPosition += n;
   b60b2:	6963      	ldr	r3, [r4, #20]
   b60b4:	443b      	add	r3, r7
    dst += n;
   b60b6:	44b8      	add	r8, r7
    m_curPosition += n;
   b60b8:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b60ba:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b60bc:	e791      	b.n	b5fe2 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b60be:	7822      	ldrb	r2, [r4, #0]
   b60c0:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b60c2:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b60c6:	d406      	bmi.n	b60d6 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b60c8:	7902      	ldrb	r2, [r0, #4]
   b60ca:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b60ce:	b2d2      	uxtb	r2, r2
   b60d0:	4592      	cmp	sl, r2
   b60d2:	bf28      	it	cs
   b60d4:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b60d6:	4299      	cmp	r1, r3
      n = 512*nb;
   b60d8:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b60dc:	d208      	bcs.n	b60f0 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b60de:	68a0      	ldr	r0, [r4, #8]
   b60e0:	4653      	mov	r3, sl
   b60e2:	6800      	ldr	r0, [r0, #0]
   b60e4:	4642      	mov	r2, r8
   b60e6:	f000 fda7 	bl	b6c38 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b60ea:	2800      	cmp	r0, #0
   b60ec:	d1e1      	bne.n	b60b2 <_ZN7FatFile4readEPvj+0x100>
   b60ee:	e7c6      	b.n	b607e <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b60f0:	4453      	add	r3, sl
   b60f2:	428b      	cmp	r3, r1
   b60f4:	d9f3      	bls.n	b60de <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b60f6:	3024      	adds	r0, #36	; 0x24
   b60f8:	9101      	str	r1, [sp, #4]
   b60fa:	f000 fa49 	bl	b6590 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b60fe:	9901      	ldr	r1, [sp, #4]
   b6100:	2800      	cmp	r0, #0
   b6102:	d1ec      	bne.n	b60de <_ZN7FatFile4readEPvj+0x12c>
   b6104:	e7bb      	b.n	b607e <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b6106:	1ba8      	subs	r0, r5, r6
}
   b6108:	b003      	add	sp, #12
   b610a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b610e <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b610e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b6110:	2201      	movs	r2, #1
   b6112:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b6116:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b611a:	4604      	mov	r4, r0
   b611c:	f7ff ff49 	bl	b5fb2 <_ZN7FatFile4readEPvj>
   b6120:	2801      	cmp	r0, #1
   b6122:	bf0a      	itet	eq
   b6124:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b6128:	f04f 30ff 	movne.w	r0, #4294967295
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b612c:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b6130:	b002      	add	sp, #8
   b6132:	bd70      	pop	{r4, r5, r6, pc}

000b6134 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b6134:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6136:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b6138:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b613c:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b613e:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b6142:	d000      	beq.n	b6146 <_ZN7FatFile12readDirCacheEb+0x12>
   b6144:	b999      	cbnz	r1, b616e <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b6146:	2201      	movs	r2, #1
   b6148:	f10d 0107 	add.w	r1, sp, #7
   b614c:	4620      	mov	r0, r4
   b614e:	f7ff ff30 	bl	b5fb2 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b6152:	b240      	sxtb	r0, r0
   b6154:	2801      	cmp	r0, #1
   b6156:	d002      	beq.n	b615e <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b6158:	2000      	movs	r0, #0
}
   b615a:	b003      	add	sp, #12
   b615c:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b615e:	6963      	ldr	r3, [r4, #20]
   b6160:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b6162:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b6164:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b6166:	3030      	adds	r0, #48	; 0x30
   b6168:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b616c:	e7f5      	b.n	b615a <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b616e:	3320      	adds	r3, #32
   b6170:	e7f7      	b.n	b6162 <_ZN7FatFile12readDirCacheEb+0x2e>

000b6172 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b6172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b6176:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b6178:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b617a:	4604      	mov	r4, r0
   b617c:	460d      	mov	r5, r1
  if (!isOpen()) {
   b617e:	b162      	cbz	r2, b619a <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b6180:	6940      	ldr	r0, [r0, #20]
   b6182:	4288      	cmp	r0, r1
   b6184:	d002      	beq.n	b618c <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b6186:	b919      	cbnz	r1, b6190 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b6188:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b618a:	6165      	str	r5, [r4, #20]
    return true;
   b618c:	2001      	movs	r0, #1
   b618e:	e006      	b.n	b619e <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b6190:	0716      	lsls	r6, r2, #28
   b6192:	d506      	bpl.n	b61a2 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b6194:	69e3      	ldr	r3, [r4, #28]
   b6196:	428b      	cmp	r3, r1
   b6198:	d20b      	bcs.n	b61b2 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b619a:	6127      	str	r7, [r4, #16]
  return false;
   b619c:	2000      	movs	r0, #0
}
   b619e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b61a2:	0691      	lsls	r1, r2, #26
   b61a4:	d505      	bpl.n	b61b2 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b61a6:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b61a8:	891b      	ldrh	r3, [r3, #8]
   b61aa:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b61ae:	d9ec      	bls.n	b618a <_ZN7FatFile7seekSetEm+0x18>
   b61b0:	e7f3      	b.n	b619a <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b61b2:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b61b6:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b61ba:	1e43      	subs	r3, r0, #1
   b61bc:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b61c0:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b61c2:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b61c4:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b61c6:	42b3      	cmp	r3, r6
   b61c8:	d800      	bhi.n	b61cc <_ZN7FatFile7seekSetEm+0x5a>
   b61ca:	b998      	cbnz	r0, b61f4 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b61cc:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b61ce:	bf4c      	ite	mi
   b61d0:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b61d4:	6a23      	ldrpl	r3, [r4, #32]
   b61d6:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b61d8:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b61dc:	2e00      	cmp	r6, #0
   b61de:	d0d4      	beq.n	b618a <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b61e0:	6921      	ldr	r1, [r4, #16]
   b61e2:	68a0      	ldr	r0, [r4, #8]
   b61e4:	4642      	mov	r2, r8
   b61e6:	f000 fa24 	bl	b6632 <_ZN9FatVolume6fatGetEmPm>
   b61ea:	2800      	cmp	r0, #0
   b61ec:	f106 36ff 	add.w	r6, r6, #4294967295
   b61f0:	dcf4      	bgt.n	b61dc <_ZN7FatFile7seekSetEm+0x6a>
   b61f2:	e7d2      	b.n	b619a <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b61f4:	1af6      	subs	r6, r6, r3
   b61f6:	e7ef      	b.n	b61d8 <_ZN7FatFile7seekSetEm+0x66>

000b61f8 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b61f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b61fa:	460f      	mov	r7, r1
   b61fc:	4604      	mov	r4, r0
   b61fe:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b6200:	2100      	movs	r1, #0
   b6202:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b6204:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b6206:	f002 fd67 	bl	b8cd8 <memset>
  m_vol = dirFile->m_vol;
   b620a:	68b8      	ldr	r0, [r7, #8]
   b620c:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b620e:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b6210:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b6214:	6a3b      	ldr	r3, [r7, #32]
   b6216:	60e3      	str	r3, [r4, #12]
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b6218:	016a      	lsls	r2, r5, #5
   b621a:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b621e:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6222:	071f      	lsls	r7, r3, #28
   b6224:	d444      	bmi.n	b62b0 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b6226:	f003 0317 	and.w	r3, r3, #23
   b622a:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b622c:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b6230:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b6234:	bf04      	itt	eq
   b6236:	f043 0308 	orreq.w	r3, r3, #8
   b623a:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b623c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b6240:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b6242:	f006 0303 	and.w	r3, r6, #3
   b6246:	2b01      	cmp	r3, #1
   b6248:	d02c      	beq.n	b62a4 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b624a:	2b02      	cmp	r3, #2
   b624c:	d028      	beq.n	b62a0 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b624e:	bb7b      	cbnz	r3, b62b0 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b6250:	0571      	lsls	r1, r6, #21
   b6252:	d42d      	bmi.n	b62b0 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b6254:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b6256:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b6258:	78a1      	ldrb	r1, [r4, #2]
   b625a:	078b      	lsls	r3, r1, #30
   b625c:	d504      	bpl.n	b6268 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b625e:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b6260:	06df      	lsls	r7, r3, #27
   b6262:	d425      	bmi.n	b62b0 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b6264:	07dd      	lsls	r5, r3, #31
   b6266:	d423      	bmi.n	b62b0 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b6268:	11b3      	asrs	r3, r6, #6
   b626a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b626e:	f006 0508 	and.w	r5, r6, #8
   b6272:	432b      	orrs	r3, r5
   b6274:	430b      	orrs	r3, r1
   b6276:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b6278:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b627a:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b627c:	1883      	adds	r3, r0, r2
   b627e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b6282:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b6286:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b628a:	0572      	lsls	r2, r6, #21
   b628c:	d513      	bpl.n	b62b6 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b628e:	b959      	cbnz	r1, b62a8 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b6290:	78a3      	ldrb	r3, [r4, #2]
   b6292:	f043 0304 	orr.w	r3, r3, #4
   b6296:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b6298:	0473      	lsls	r3, r6, #17
   b629a:	d410      	bmi.n	b62be <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b629c:	2001      	movs	r0, #1
}
   b629e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b62a0:	2303      	movs	r3, #3
   b62a2:	e7d8      	b.n	b6256 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b62a4:	2302      	movs	r3, #2
   b62a6:	e7d6      	b.n	b6256 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b62a8:	f000 fa63 	bl	b6772 <_ZN9FatVolume9freeChainEm>
   b62ac:	2800      	cmp	r0, #0
   b62ae:	d1ef      	bne.n	b6290 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b62b0:	2000      	movs	r0, #0
   b62b2:	7020      	strb	r0, [r4, #0]
  return false;
   b62b4:	e7f3      	b.n	b629e <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b62b6:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b62b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b62ba:	61e3      	str	r3, [r4, #28]
   b62bc:	e7ec      	b.n	b6298 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b62be:	69e1      	ldr	r1, [r4, #28]
   b62c0:	4620      	mov	r0, r4
   b62c2:	f7ff ff56 	bl	b6172 <_ZN7FatFile7seekSetEm>
   b62c6:	2800      	cmp	r0, #0
   b62c8:	d1e8      	bne.n	b629c <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b62ca:	e7f1      	b.n	b62b0 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b62cc <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b62cc:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b62ce:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b62d0:	4604      	mov	r4, r0
  if (!isOpen()) {
   b62d2:	b90b      	cbnz	r3, b62d8 <_ZN7FatFile4syncEv+0xc>
    return true;
   b62d4:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b62d6:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b62d8:	7883      	ldrb	r3, [r0, #2]
   b62da:	075a      	lsls	r2, r3, #29
   b62dc:	d523      	bpl.n	b6326 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b62de:	2101      	movs	r1, #1
   b62e0:	f7ff fe52 	bl	b5f88 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b62e4:	4605      	mov	r5, r0
   b62e6:	b928      	cbnz	r0, b62f4 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b62e8:	7863      	ldrb	r3, [r4, #1]
   b62ea:	f043 0301 	orr.w	r3, r3, #1
   b62ee:	7063      	strb	r3, [r4, #1]
  return false;
   b62f0:	2000      	movs	r0, #0
   b62f2:	e7f0      	b.n	b62d6 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b62f4:	7803      	ldrb	r3, [r0, #0]
   b62f6:	2be5      	cmp	r3, #229	; 0xe5
   b62f8:	d0f6      	beq.n	b62e8 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b62fa:	7823      	ldrb	r3, [r4, #0]
   b62fc:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b62fe:	bf44      	itt	mi
   b6300:	69e3      	ldrmi	r3, [r4, #28]
   b6302:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b6304:	6a23      	ldr	r3, [r4, #32]
   b6306:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b6308:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b630a:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b630c:	4b09      	ldr	r3, [pc, #36]	; (b6334 <_ZN7FatFile4syncEv+0x68>)
   b630e:	681b      	ldr	r3, [r3, #0]
   b6310:	b12b      	cbz	r3, b631e <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b6312:	f100 0116 	add.w	r1, r0, #22
   b6316:	3018      	adds	r0, #24
   b6318:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b631a:	8b2b      	ldrh	r3, [r5, #24]
   b631c:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b631e:	78a3      	ldrb	r3, [r4, #2]
   b6320:	f023 0304 	bic.w	r3, r3, #4
   b6324:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b6326:	68a0      	ldr	r0, [r4, #8]
   b6328:	f7ff fac9 	bl	b58be <_ZN9FatVolume9cacheSyncEv>
   b632c:	2800      	cmp	r0, #0
   b632e:	d0db      	beq.n	b62e8 <_ZN7FatFile4syncEv+0x1c>
   b6330:	e7d0      	b.n	b62d4 <_ZN7FatFile4syncEv+0x8>
   b6332:	bf00      	nop
   b6334:	2003e6a0 	.word	0x2003e6a0

000b6338 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b6338:	b510      	push	{r4, lr}
   b633a:	4604      	mov	r4, r0
  bool rtn = sync();
   b633c:	f7ff ffc6 	bl	b62cc <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b6340:	2300      	movs	r3, #0
   b6342:	7023      	strb	r3, [r4, #0]
}
   b6344:	bd10      	pop	{r4, pc}

000b6346 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b6346:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6348:	b093      	sub	sp, #76	; 0x4c
   b634a:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b634c:	2300      	movs	r3, #0
   b634e:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b6350:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b6352:	9201      	str	r2, [sp, #4]
   b6354:	4606      	mov	r6, r0
   b6356:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b6358:	b113      	cbz	r3, b6360 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b635a:	2000      	movs	r0, #0
}
   b635c:	b013      	add	sp, #76	; 0x4c
   b635e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b6360:	780b      	ldrb	r3, [r1, #0]
   b6362:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6366:	d0f8      	beq.n	b635a <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b6368:	7813      	ldrb	r3, [r2, #0]
   b636a:	2b2f      	cmp	r3, #47	; 0x2f
   b636c:	d112      	bne.n	b6394 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b636e:	9a01      	ldr	r2, [sp, #4]
   b6370:	7813      	ldrb	r3, [r2, #0]
   b6372:	2b2f      	cmp	r3, #47	; 0x2f
   b6374:	d102      	bne.n	b637c <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b6376:	3201      	adds	r2, #1
   b6378:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b637a:	e7f8      	b.n	b636e <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b637c:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b637e:	b91b      	cbnz	r3, b6388 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b6380:	4630      	mov	r0, r6
   b6382:	f7ff fe10 	bl	b5fa6 <_ZN7FatFile8openRootEP9FatVolume>
   b6386:	e7e9      	b.n	b635c <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b6388:	a809      	add	r0, sp, #36	; 0x24
   b638a:	f7ff fd9f 	bl	b5ecc <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b638e:	2800      	cmp	r0, #0
   b6390:	d0e3      	beq.n	b635a <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b6392:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b6394:	9801      	ldr	r0, [sp, #4]
   b6396:	aa01      	add	r2, sp, #4
   b6398:	a903      	add	r1, sp, #12
   b639a:	f7ff faad 	bl	b58f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b639e:	2800      	cmp	r0, #0
   b63a0:	d0db      	beq.n	b635a <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b63a2:	9b01      	ldr	r3, [sp, #4]
   b63a4:	781b      	ldrb	r3, [r3, #0]
   b63a6:	b19b      	cbz	r3, b63d0 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b63a8:	2300      	movs	r3, #0
   b63aa:	aa03      	add	r2, sp, #12
   b63ac:	4621      	mov	r1, r4
   b63ae:	4630      	mov	r0, r6
   b63b0:	f7ff fbd4 	bl	b5b5c <_ZN7FatFile4openEPS_P7fname_ti>
   b63b4:	2800      	cmp	r0, #0
   b63b6:	d0d0      	beq.n	b635a <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b63b8:	4635      	mov	r5, r6
   b63ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b63bc:	ac09      	add	r4, sp, #36	; 0x24
   b63be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b63c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b63c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b63c4:	682b      	ldr	r3, [r5, #0]
   b63c6:	6023      	str	r3, [r4, #0]
    close();
   b63c8:	4630      	mov	r0, r6
   b63ca:	f7ff ffb5 	bl	b6338 <_ZN7FatFile5closeEv>
  while (1) {
   b63ce:	e7e0      	b.n	b6392 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b63d0:	463b      	mov	r3, r7
   b63d2:	aa03      	add	r2, sp, #12
   b63d4:	4621      	mov	r1, r4
   b63d6:	4630      	mov	r0, r6
   b63d8:	f7ff fbc0 	bl	b5b5c <_ZN7FatFile4openEPS_P7fname_ti>
   b63dc:	e7be      	b.n	b635c <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b63e0 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b63e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b63e4:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b63e6:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b63e8:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b63ea:	4604      	mov	r4, r0
   b63ec:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b63ee:	d55b      	bpl.n	b64a8 <_ZN7FatFile5writeEPKvj+0xc8>
   b63f0:	7883      	ldrb	r3, [r0, #2]
   b63f2:	079a      	lsls	r2, r3, #30
   b63f4:	d558      	bpl.n	b64a8 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b63f6:	071b      	lsls	r3, r3, #28
   b63f8:	d451      	bmi.n	b649e <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b63fa:	6963      	ldr	r3, [r4, #20]
   b63fc:	43db      	mvns	r3, r3
   b63fe:	42bb      	cmp	r3, r7
   b6400:	d352      	bcc.n	b64a8 <_ZN7FatFile5writeEPKvj+0xc8>
   b6402:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6404:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b6408:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b640a:	f1b8 0f00 	cmp.w	r8, #0
   b640e:	f000 8091 	beq.w	b6534 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b6412:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b6414:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b6416:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b641a:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b641e:	d10e      	bne.n	b643e <_ZN7FatFile5writeEPKvj+0x5e>
   b6420:	b96d      	cbnz	r5, b643e <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b6422:	6921      	ldr	r1, [r4, #16]
   b6424:	2900      	cmp	r1, #0
   b6426:	d046      	beq.n	b64b6 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6428:	4652      	mov	r2, sl
   b642a:	f000 f902 	bl	b6632 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b642e:	2800      	cmp	r0, #0
   b6430:	db3a      	blt.n	b64a8 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b6432:	d104      	bne.n	b643e <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b6434:	4620      	mov	r0, r4
   b6436:	f7ff fd5f 	bl	b5ef8 <_ZN7FatFile10addClusterEv>
   b643a:	2800      	cmp	r0, #0
   b643c:	d034      	beq.n	b64a8 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b643e:	6921      	ldr	r1, [r4, #16]
   b6440:	68a0      	ldr	r0, [r4, #8]
   b6442:	f000 f8f0 	bl	b6626 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6446:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b6448:	68a0      	ldr	r0, [r4, #8]
   b644a:	b915      	cbnz	r5, b6452 <_ZN7FatFile5writeEPKvj+0x72>
   b644c:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b6450:	d23f      	bcs.n	b64d2 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b6452:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b6456:	4546      	cmp	r6, r8
   b6458:	bf28      	it	cs
   b645a:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b645c:	2d00      	cmp	r5, #0
   b645e:	d136      	bne.n	b64ce <_ZN7FatFile5writeEPKvj+0xee>
   b6460:	6962      	ldr	r2, [r4, #20]
   b6462:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b6464:	429a      	cmp	r2, r3
   b6466:	bf34      	ite	cc
   b6468:	2201      	movcc	r2, #1
   b646a:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b646c:	3024      	adds	r0, #36	; 0x24
   b646e:	f000 f8b7 	bl	b65e0 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b6472:	b1c8      	cbz	r0, b64a8 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b6474:	4428      	add	r0, r5
   b6476:	4632      	mov	r2, r6
   b6478:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b647a:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b647c:	f002 fc1e 	bl	b8cbc <memcpy>
      if (512 == (n + blockOffset)) {
   b6480:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b6484:	d104      	bne.n	b6490 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b6486:	68a0      	ldr	r0, [r4, #8]
   b6488:	3024      	adds	r0, #36	; 0x24
   b648a:	f000 f881 	bl	b6590 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b648e:	b158      	cbz	r0, b64a8 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b6490:	6963      	ldr	r3, [r4, #20]
   b6492:	4433      	add	r3, r6
   b6494:	6163      	str	r3, [r4, #20]
    src += n;
   b6496:	44b1      	add	r9, r6
    nToWrite -= n;
   b6498:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b649c:	e7b4      	b.n	b6408 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b649e:	69c1      	ldr	r1, [r0, #28]
   b64a0:	f7ff fe67 	bl	b6172 <_ZN7FatFile7seekSetEm>
   b64a4:	2800      	cmp	r0, #0
   b64a6:	d1a8      	bne.n	b63fa <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b64a8:	7863      	ldrb	r3, [r4, #1]
   b64aa:	f043 0301 	orr.w	r3, r3, #1
   b64ae:	7063      	strb	r3, [r4, #1]
  return -1;
   b64b0:	f04f 30ff 	mov.w	r0, #4294967295
   b64b4:	e050      	b.n	b6558 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b64b6:	6a23      	ldr	r3, [r4, #32]
   b64b8:	b93b      	cbnz	r3, b64ca <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b64ba:	4620      	mov	r0, r4
   b64bc:	f7ff fd1c 	bl	b5ef8 <_ZN7FatFile10addClusterEv>
   b64c0:	2800      	cmp	r0, #0
   b64c2:	d0f1      	beq.n	b64a8 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b64c4:	6923      	ldr	r3, [r4, #16]
   b64c6:	6223      	str	r3, [r4, #32]
   b64c8:	e7b9      	b.n	b643e <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b64ca:	6123      	str	r3, [r4, #16]
   b64cc:	e7b7      	b.n	b643e <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b64ce:	2201      	movs	r2, #1
   b64d0:	e7cc      	b.n	b646c <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b64d2:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b64d6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b64d8:	d31b      	bcc.n	b6512 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b64da:	f890 c004 	ldrb.w	ip, [r0, #4]
   b64de:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b64e2:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b64e4:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b64e8:	4573      	cmp	r3, lr
   b64ea:	bf28      	it	cs
   b64ec:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b64ee:	4291      	cmp	r1, r2
      n = 512*nb;
   b64f0:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b64f4:	d307      	bcc.n	b6506 <_ZN7FatFile5writeEPKvj+0x126>
   b64f6:	441a      	add	r2, r3
   b64f8:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b64fa:	bf82      	ittt	hi
   b64fc:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
   b6500:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6504:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b6506:	68a5      	ldr	r5, [r4, #8]
   b6508:	464a      	mov	r2, r9
   b650a:	6828      	ldr	r0, [r5, #0]
   b650c:	f000 fc4b 	bl	b6da6 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b6510:	e7bd      	b.n	b648e <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b6512:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b6514:	bf02      	ittt	eq
   b6516:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
   b651a:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b651e:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b6520:	68a3      	ldr	r3, [r4, #8]
   b6522:	464a      	mov	r2, r9
   b6524:	6818      	ldr	r0, [r3, #0]
   b6526:	f000 fbc8 	bl	b6cba <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b652a:	2800      	cmp	r0, #0
   b652c:	d0bc      	beq.n	b64a8 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b652e:	f44f 7600 	mov.w	r6, #512	; 0x200
   b6532:	e7ad      	b.n	b6490 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b6534:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b6536:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b6538:	42b2      	cmp	r2, r6
   b653a:	d204      	bcs.n	b6546 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b653c:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b653e:	f043 0304 	orr.w	r3, r3, #4
   b6542:	70a3      	strb	r3, [r4, #2]
   b6544:	e003      	b.n	b654e <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b6546:	4a08      	ldr	r2, [pc, #32]	; (b6568 <_ZN7FatFile5writeEPKvj+0x188>)
   b6548:	6812      	ldr	r2, [r2, #0]
   b654a:	2a00      	cmp	r2, #0
   b654c:	d1f7      	bne.n	b653e <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b654e:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b6552:	2b00      	cmp	r3, #0
   b6554:	db02      	blt.n	b655c <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b6556:	4638      	mov	r0, r7
}
   b6558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b655c:	4620      	mov	r0, r4
   b655e:	f7ff feb5 	bl	b62cc <_ZN7FatFile4syncEv>
   b6562:	2800      	cmp	r0, #0
   b6564:	d1f7      	bne.n	b6556 <_ZN7FatFile5writeEPKvj+0x176>
   b6566:	e79f      	b.n	b64a8 <_ZN7FatFile5writeEPKvj+0xc8>
   b6568:	2003e6a0 	.word	0x2003e6a0

000b656c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b656c:	b513      	push	{r0, r1, r4, lr}
   b656e:	4604      	mov	r4, r0
    }
   b6570:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6572:	b159      	cbz	r1, b658c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6574:	9101      	str	r1, [sp, #4]
   b6576:	f002 fbed 	bl	b8d54 <strlen>
   b657a:	6823      	ldr	r3, [r4, #0]
   b657c:	9901      	ldr	r1, [sp, #4]
   b657e:	68db      	ldr	r3, [r3, #12]
   b6580:	4602      	mov	r2, r0
   b6582:	4620      	mov	r0, r4
    }
   b6584:	b002      	add	sp, #8
   b6586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b658a:	4718      	bx	r3
    }
   b658c:	b002      	add	sp, #8
   b658e:	bd10      	pop	{r4, pc}

000b6590 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b6590:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b6592:	7803      	ldrb	r3, [r0, #0]
   b6594:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b6596:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b6598:	d520      	bpl.n	b65dc <_ZN8FatCache4syncEv+0x4c>
   b659a:	6843      	ldr	r3, [r0, #4]
   b659c:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b659e:	f100 020c 	add.w	r2, r0, #12
   b65a2:	6818      	ldr	r0, [r3, #0]
   b65a4:	9201      	str	r2, [sp, #4]
   b65a6:	f000 fb88 	bl	b6cba <_ZN9SdSpiCard10writeBlockEmPKh>
   b65aa:	9a01      	ldr	r2, [sp, #4]
   b65ac:	4605      	mov	r5, r0
   b65ae:	b918      	cbnz	r0, b65b8 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b65b0:	2500      	movs	r5, #0
}
   b65b2:	4628      	mov	r0, r5
   b65b4:	b003      	add	sp, #12
   b65b6:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b65b8:	7823      	ldrb	r3, [r4, #0]
   b65ba:	079b      	lsls	r3, r3, #30
   b65bc:	d404      	bmi.n	b65c8 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b65be:	7823      	ldrb	r3, [r4, #0]
   b65c0:	f023 0301 	bic.w	r3, r3, #1
   b65c4:	7023      	strb	r3, [r4, #0]
   b65c6:	e7f4      	b.n	b65b2 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b65c8:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b65cc:	6919      	ldr	r1, [r3, #16]
   b65ce:	4401      	add	r1, r0
   b65d0:	6818      	ldr	r0, [r3, #0]
   b65d2:	f000 fb72 	bl	b6cba <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b65d6:	2800      	cmp	r0, #0
   b65d8:	d1f1      	bne.n	b65be <_ZN8FatCache4syncEv+0x2e>
   b65da:	e7e9      	b.n	b65b0 <_ZN8FatCache4syncEv+0x20>
  return true;
   b65dc:	2501      	movs	r5, #1
   b65de:	e7e8      	b.n	b65b2 <_ZN8FatCache4syncEv+0x22>

000b65e0 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b65e0:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b65e2:	6883      	ldr	r3, [r0, #8]
   b65e4:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b65e6:	4604      	mov	r4, r0
   b65e8:	460e      	mov	r6, r1
   b65ea:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b65ec:	d009      	beq.n	b6602 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b65ee:	f7ff ffcf 	bl	b6590 <_ZN8FatCache4syncEv>
   b65f2:	b908      	cbnz	r0, b65f8 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b65f4:	2000      	movs	r0, #0
}
   b65f6:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b65f8:	076b      	lsls	r3, r5, #29
   b65fa:	d50a      	bpl.n	b6612 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b65fc:	2300      	movs	r3, #0
   b65fe:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b6600:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b6602:	7822      	ldrb	r2, [r4, #0]
   b6604:	f005 0503 	and.w	r5, r5, #3
   b6608:	4620      	mov	r0, r4
   b660a:	4315      	orrs	r5, r2
   b660c:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b6610:	e7f1      	b.n	b65f6 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b6612:	6863      	ldr	r3, [r4, #4]
   b6614:	f104 020c 	add.w	r2, r4, #12
   b6618:	6818      	ldr	r0, [r3, #0]
   b661a:	4631      	mov	r1, r6
   b661c:	f000 fac4 	bl	b6ba8 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b6620:	2800      	cmp	r0, #0
   b6622:	d1eb      	bne.n	b65fc <_ZN8FatCache4readEmh+0x1c>
   b6624:	e7e6      	b.n	b65f4 <_ZN8FatCache4readEmh+0x14>

000b6626 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b6626:	7983      	ldrb	r3, [r0, #6]
   b6628:	6940      	ldr	r0, [r0, #20]
   b662a:	3902      	subs	r1, #2
   b662c:	4099      	lsls	r1, r3
}
   b662e:	4408      	add	r0, r1
   b6630:	4770      	bx	lr

000b6632 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b6632:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b6634:	b570      	push	{r4, r5, r6, lr}
   b6636:	4605      	mov	r5, r0
   b6638:	460c      	mov	r4, r1
   b663a:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b663c:	d802      	bhi.n	b6644 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b663e:	f04f 30ff 	mov.w	r0, #4294967295
}
   b6642:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b6644:	69c3      	ldr	r3, [r0, #28]
   b6646:	428b      	cmp	r3, r1
   b6648:	d3f9      	bcc.n	b663e <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b664a:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b664c:	2b20      	cmp	r3, #32
   b664e:	d116      	bne.n	b667e <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b6650:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b6652:	2202      	movs	r2, #2
   b6654:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b6658:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b665c:	f7ff ffc0 	bl	b65e0 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6660:	2800      	cmp	r0, #0
   b6662:	d0ec      	beq.n	b663e <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b6664:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b6668:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b666c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b6670:	69ea      	ldr	r2, [r5, #28]
   b6672:	429a      	cmp	r2, r3
  *value = next;
   b6674:	bf26      	itte	cs
   b6676:	6033      	strcs	r3, [r6, #0]
  return 1;
   b6678:	2001      	movcs	r0, #1
    return 0;
   b667a:	2000      	movcc	r0, #0
   b667c:	e7e1      	b.n	b6642 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b667e:	2b10      	cmp	r3, #16
   b6680:	d1dd      	bne.n	b663e <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b6682:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b6686:	6981      	ldr	r1, [r0, #24]
   b6688:	2202      	movs	r2, #2
   b668a:	4419      	add	r1, r3
   b668c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6690:	f7ff ffa6 	bl	b65e0 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6694:	2800      	cmp	r0, #0
   b6696:	d0d2      	beq.n	b663e <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b6698:	b2e4      	uxtb	r4, r4
   b669a:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b669e:	e7e7      	b.n	b6670 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b66a0 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b66a0:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b66a2:	b538      	push	{r3, r4, r5, lr}
   b66a4:	460c      	mov	r4, r1
   b66a6:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b66a8:	d801      	bhi.n	b66ae <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b66aa:	2000      	movs	r0, #0
}
   b66ac:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b66ae:	69c3      	ldr	r3, [r0, #28]
   b66b0:	428b      	cmp	r3, r1
   b66b2:	d3fa      	bcc.n	b66aa <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b66b4:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b66b6:	2b20      	cmp	r3, #32
   b66b8:	d10f      	bne.n	b66da <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b66ba:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b66bc:	2203      	movs	r2, #3
   b66be:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b66c2:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b66c6:	f7ff ff8b 	bl	b65e0 <_ZN8FatCache4readEmh>
    if (!pc) {
   b66ca:	2800      	cmp	r0, #0
   b66cc:	d0ed      	beq.n	b66aa <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b66ce:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b66d2:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b66d6:	2001      	movs	r0, #1
   b66d8:	e7e8      	b.n	b66ac <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b66da:	2b10      	cmp	r3, #16
   b66dc:	d1e5      	bne.n	b66aa <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b66de:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b66e2:	6981      	ldr	r1, [r0, #24]
   b66e4:	2203      	movs	r2, #3
   b66e6:	4419      	add	r1, r3
   b66e8:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b66ec:	f7ff ff78 	bl	b65e0 <_ZN8FatCache4readEmh>
    if (!pc) {
   b66f0:	2800      	cmp	r0, #0
   b66f2:	d0da      	beq.n	b66aa <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b66f4:	b2e4      	uxtb	r4, r4
   b66f6:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b66fa:	e7ec      	b.n	b66d6 <_ZN9FatVolume6fatPutEmm+0x36>

000b66fc <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b66fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b6700:	68c4      	ldr	r4, [r0, #12]
   b6702:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b6704:	4605      	mov	r5, r0
   b6706:	460e      	mov	r6, r1
   b6708:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b670a:	d301      	bcc.n	b6710 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b670c:	2701      	movs	r7, #1
   b670e:	e001      	b.n	b6714 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b6710:	460c      	mov	r4, r1
    setStart = false;
   b6712:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b6714:	69eb      	ldr	r3, [r5, #28]
    find++;
   b6716:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b6718:	42a3      	cmp	r3, r4
   b671a:	d202      	bcs.n	b6722 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b671c:	b9c7      	cbnz	r7, b6750 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b671e:	68ec      	ldr	r4, [r5, #12]
   b6720:	e7f4      	b.n	b670c <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b6722:	42a6      	cmp	r6, r4
   b6724:	d014      	beq.n	b6750 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b6726:	aa01      	add	r2, sp, #4
   b6728:	4621      	mov	r1, r4
   b672a:	4628      	mov	r0, r5
   b672c:	f7ff ff81 	bl	b6632 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b6730:	2800      	cmp	r0, #0
   b6732:	db0d      	blt.n	b6750 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b6734:	d0ee      	beq.n	b6714 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b6736:	9b01      	ldr	r3, [sp, #4]
   b6738:	2b00      	cmp	r3, #0
   b673a:	d1eb      	bne.n	b6714 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b673c:	b107      	cbz	r7, b6740 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b673e:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b6740:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b6744:	4621      	mov	r1, r4
   b6746:	4628      	mov	r0, r5
   b6748:	f7ff ffaa 	bl	b66a0 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b674c:	4607      	mov	r7, r0
   b674e:	b920      	cbnz	r0, b675a <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b6750:	2700      	movs	r7, #0
}
   b6752:	4638      	mov	r0, r7
   b6754:	b002      	add	sp, #8
   b6756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b675a:	b916      	cbnz	r6, b6762 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b675c:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b6760:	e7f7      	b.n	b6752 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b6762:	4622      	mov	r2, r4
   b6764:	4631      	mov	r1, r6
   b6766:	4628      	mov	r0, r5
   b6768:	f7ff ff9a 	bl	b66a0 <_ZN9FatVolume6fatPutEmm>
   b676c:	2800      	cmp	r0, #0
   b676e:	d1f5      	bne.n	b675c <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b6770:	e7ee      	b.n	b6750 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b6772 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b6772:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6774:	4605      	mov	r5, r0
   b6776:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b6778:	aa01      	add	r2, sp, #4
   b677a:	4621      	mov	r1, r4
   b677c:	4628      	mov	r0, r5
   b677e:	f7ff ff58 	bl	b6632 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b6782:	1e06      	subs	r6, r0, #0
   b6784:	db10      	blt.n	b67a8 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b6786:	2200      	movs	r2, #0
   b6788:	4621      	mov	r1, r4
   b678a:	4628      	mov	r0, r5
   b678c:	f7ff ff88 	bl	b66a0 <_ZN9FatVolume6fatPutEmm>
   b6790:	b150      	cbz	r0, b67a8 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b6792:	68eb      	ldr	r3, [r5, #12]
   b6794:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b6796:	bf24      	itt	cs
   b6798:	f104 34ff 	addcs.w	r4, r4, #4294967295
   b679c:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b679e:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b67a0:	2e00      	cmp	r6, #0
   b67a2:	d1e9      	bne.n	b6778 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b67a4:	b002      	add	sp, #8
   b67a6:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b67a8:	2000      	movs	r0, #0
   b67aa:	e7fb      	b.n	b67a4 <_ZN9FatVolume9freeChainEm+0x32>

000b67ac <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b67ac:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b67ae:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b67b0:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b67b2:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b67b4:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
   b67b8:	4604      	mov	r4, r0
  m_fatType = 0;
   b67ba:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b67bc:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b67c0:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b67c2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b67c6:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b67c8:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b67cc:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b67d0:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b67d4:	460d      	mov	r5, r1
   b67d6:	b1b9      	cbz	r1, b6808 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b67d8:	2904      	cmp	r1, #4
   b67da:	d901      	bls.n	b67e0 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b67dc:	2000      	movs	r0, #0
}
   b67de:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b67e0:	4611      	mov	r1, r2
   b67e2:	4630      	mov	r0, r6
   b67e4:	f7ff fefc 	bl	b65e0 <_ZN8FatCache4readEmh>
    if (!pc) {
   b67e8:	2800      	cmp	r0, #0
   b67ea:	d0f7      	beq.n	b67dc <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b67ec:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b67f0:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b67f4:	065b      	lsls	r3, r3, #25
   b67f6:	d1f1      	bne.n	b67dc <_ZN9FatVolume4initEh+0x30>
   b67f8:	f105 011b 	add.w	r1, r5, #27
   b67fc:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b6800:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b6804:	2d00      	cmp	r5, #0
   b6806:	d0e9      	beq.n	b67dc <_ZN9FatVolume4initEh+0x30>
   b6808:	2200      	movs	r2, #0
   b680a:	4629      	mov	r1, r5
   b680c:	4630      	mov	r0, r6
   b680e:	f7ff fee7 	bl	b65e0 <_ZN8FatCache4readEmh>
  if (!pc) {
   b6812:	2800      	cmp	r0, #0
   b6814:	d0e2      	beq.n	b67dc <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b6816:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b681a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b681e:	d1dd      	bne.n	b67dc <_ZN9FatVolume4initEh+0x30>
   b6820:	7c03      	ldrb	r3, [r0, #16]
   b6822:	2b02      	cmp	r3, #2
   b6824:	d1da      	bne.n	b67dc <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b6826:	89c3      	ldrh	r3, [r0, #14]
   b6828:	2b00      	cmp	r3, #0
   b682a:	d0d7      	beq.n	b67dc <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b682c:	7b41      	ldrb	r1, [r0, #13]
   b682e:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b6830:	1e4b      	subs	r3, r1, #1
   b6832:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b6834:	2300      	movs	r3, #0
   b6836:	71a3      	strb	r3, [r4, #6]
   b6838:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b683a:	2301      	movs	r3, #1
   b683c:	4299      	cmp	r1, r3
   b683e:	d007      	beq.n	b6850 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b6840:	3e01      	subs	r6, #1
   b6842:	d0cb      	beq.n	b67dc <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b6844:	79a2      	ldrb	r2, [r4, #6]
   b6846:	005b      	lsls	r3, r3, #1
   b6848:	3201      	adds	r2, #1
   b684a:	b2db      	uxtb	r3, r3
   b684c:	71a2      	strb	r2, [r4, #6]
   b684e:	e7f5      	b.n	b683c <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b6850:	8ac1      	ldrh	r1, [r0, #22]
   b6852:	b901      	cbnz	r1, b6856 <_ZN9FatVolume4initEh+0xaa>
   b6854:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b6856:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b6858:	89c3      	ldrh	r3, [r0, #14]
   b685a:	442b      	add	r3, r5
   b685c:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b685e:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b6862:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b6864:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b6868:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b686a:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b686e:	0149      	lsls	r1, r1, #5
   b6870:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b6874:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b6878:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b687a:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b687e:	b902      	cbnz	r2, b6882 <_ZN9FatVolume4initEh+0xd6>
   b6880:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b6882:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b6884:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b6886:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b6888:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b688a:	1c4b      	adds	r3, r1, #1
   b688c:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b688e:	f640 73f4 	movw	r3, #4084	; 0xff4
   b6892:	4299      	cmp	r1, r3
   b6894:	d802      	bhi.n	b689c <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b6896:	230c      	movs	r3, #12
   b6898:	71e3      	strb	r3, [r4, #7]
   b689a:	e79f      	b.n	b67dc <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b689c:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b68a0:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b68a2:	bf85      	ittet	hi
   b68a4:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b68a6:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b68a8:	2310      	movls	r3, #16
    m_fatType = 32;
   b68aa:	2320      	movhi	r3, #32
   b68ac:	71e3      	strb	r3, [r4, #7]
  return true;
   b68ae:	2001      	movs	r0, #1
   b68b0:	e795      	b.n	b67de <_ZN9FatVolume4initEh+0x32>

000b68b2 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b68b2:	f000 bacb 	b.w	b6e4c <_ZN14SdSpiAltDriver4sendEh>

000b68b6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b68b6:	f000 baae 	b.w	b6e16 <_ZN14SdSpiAltDriver7receiveEv>
	...

000b68bc <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b68bc:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b68be:	4e0e      	ldr	r6, [pc, #56]	; (b68f8 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b68c0:	460d      	mov	r5, r1
   b68c2:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b68c4:	f000 fb2a 	bl	b6f1c <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b68c8:	6833      	ldr	r3, [r6, #0]
   b68ca:	1ac0      	subs	r0, r0, r3
   b68cc:	4b0b      	ldr	r3, [pc, #44]	; (b68fc <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b68ce:	4298      	cmp	r0, r3
   b68d0:	d908      	bls.n	b68e4 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b68d2:	f000 fb2b 	bl	b6f2c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b68d6:	4b0a      	ldr	r3, [pc, #40]	; (b6900 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b68d8:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b68da:	f000 fd2b 	bl	b7334 <spark_process>
   b68de:	f000 fb1d 	bl	b6f1c <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b68e2:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b68e4:	f000 fb22 	bl	b6f2c <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b68e8:	b280      	uxth	r0, r0
   b68ea:	1b40      	subs	r0, r0, r5
}
   b68ec:	42a0      	cmp	r0, r4
   b68ee:	bfd4      	ite	le
   b68f0:	2000      	movle	r0, #0
   b68f2:	2001      	movgt	r0, #1
   b68f4:	bd70      	pop	{r4, r5, r6, pc}
   b68f6:	bf00      	nop
   b68f8:	2003e6a8 	.word	0x2003e6a8
   b68fc:	000186a0 	.word	0x000186a0
   b6900:	2003e740 	.word	0x2003e740

000b6904 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b6904:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b6906:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b6908:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b690a:	b94d      	cbnz	r5, b6920 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b690c:	6840      	ldr	r0, [r0, #4]
   b690e:	f000 fa6b 	bl	b6de8 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b6912:	6863      	ldr	r3, [r4, #4]
   b6914:	4629      	mov	r1, r5
   b6916:	7d18      	ldrb	r0, [r3, #20]
   b6918:	f001 fc8f 	bl	b823a <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b691c:	2301      	movs	r3, #1
   b691e:	7223      	strb	r3, [r4, #8]
  }
}
   b6920:	bd38      	pop	{r3, r4, r5, pc}

000b6922 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b6922:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b6924:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b6926:	4604      	mov	r4, r0
  if (m_spiActive) {
   b6928:	b16b      	cbz	r3, b6946 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b692a:	6843      	ldr	r3, [r0, #4]
   b692c:	2101      	movs	r1, #1
   b692e:	7d18      	ldrb	r0, [r3, #20]
   b6930:	f001 fc83 	bl	b823a <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b6934:	6860      	ldr	r0, [r4, #4]
   b6936:	21ff      	movs	r1, #255	; 0xff
   b6938:	f7ff ffbb 	bl	b68b2 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b693c:	6860      	ldr	r0, [r4, #4]
   b693e:	f000 fa67 	bl	b6e10 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b6942:	2300      	movs	r3, #0
   b6944:	7223      	strb	r3, [r4, #8]
  }
}
   b6946:	bd10      	pop	{r4, pc}

000b6948 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b6948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b694a:	4604      	mov	r4, r0
   b694c:	460d      	mov	r5, r1
   b694e:	4616      	mov	r6, r2
   b6950:	f000 faec 	bl	b6f2c <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b6954:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b6956:	6860      	ldr	r0, [r4, #4]
   b6958:	f7ff ffad 	bl	b68b6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b695c:	28ff      	cmp	r0, #255	; 0xff
   b695e:	7260      	strb	r0, [r4, #9]
   b6960:	d10e      	bne.n	b6980 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b6962:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6966:	4639      	mov	r1, r7
   b6968:	4620      	mov	r0, r4
   b696a:	f7ff ffa7 	bl	b68bc <_ZN9SdSpiCard10isTimedOutEtt>
   b696e:	2800      	cmp	r0, #0
   b6970:	d0f1      	beq.n	b6956 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b6972:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b6974:	4620      	mov	r0, r4
   b6976:	7023      	strb	r3, [r4, #0]
   b6978:	f7ff ffd3 	bl	b6922 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b697c:	2000      	movs	r0, #0
}
   b697e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b6980:	28fe      	cmp	r0, #254	; 0xfe
   b6982:	d001      	beq.n	b6988 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b6984:	2350      	movs	r3, #80	; 0x50
   b6986:	e7f5      	b.n	b6974 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b6988:	6860      	ldr	r0, [r4, #4]
   b698a:	4632      	mov	r2, r6
   b698c:	4629      	mov	r1, r5
   b698e:	f000 fa47 	bl	b6e20 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b6992:	7260      	strb	r0, [r4, #9]
   b6994:	b108      	cbz	r0, b699a <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b6996:	2360      	movs	r3, #96	; 0x60
   b6998:	e7ec      	b.n	b6974 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b699a:	6860      	ldr	r0, [r4, #4]
   b699c:	f7ff ff8b 	bl	b68b6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b69a0:	6860      	ldr	r0, [r4, #4]
   b69a2:	f7ff ff88 	bl	b68b6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b69a6:	2001      	movs	r0, #1
   b69a8:	e7e9      	b.n	b697e <_ZN9SdSpiCard8readDataEPhj+0x36>

000b69aa <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b69aa:	b570      	push	{r4, r5, r6, lr}
   b69ac:	4604      	mov	r4, r0
   b69ae:	460e      	mov	r6, r1
   b69b0:	f000 fabc 	bl	b6f2c <HAL_Timer_Get_Milli_Seconds>
   b69b4:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b69b6:	4632      	mov	r2, r6
   b69b8:	4629      	mov	r1, r5
   b69ba:	4620      	mov	r0, r4
   b69bc:	f7ff ff7e 	bl	b68bc <_ZN9SdSpiCard10isTimedOutEtt>
   b69c0:	b930      	cbnz	r0, b69d0 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b69c2:	6860      	ldr	r0, [r4, #4]
   b69c4:	f7ff ff77 	bl	b68b6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b69c8:	28ff      	cmp	r0, #255	; 0xff
   b69ca:	d1f4      	bne.n	b69b6 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b69cc:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b69ce:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b69d0:	2000      	movs	r0, #0
   b69d2:	e7fc      	b.n	b69ce <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b69d4 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b69d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b69d6:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b69d8:	9201      	str	r2, [sp, #4]
   b69da:	4604      	mov	r4, r0
   b69dc:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b69de:	b90b      	cbnz	r3, b69e4 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b69e0:	f7ff ff90 	bl	b6904 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b69e4:	b125      	cbz	r5, b69f0 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b69e6:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b69ea:	4620      	mov	r0, r4
   b69ec:	f7ff ffdd 	bl	b69aa <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b69f0:	6860      	ldr	r0, [r4, #4]
   b69f2:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b69f6:	f7ff ff5c 	bl	b68b2 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b69fa:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b69fc:	af01      	add	r7, sp, #4
   b69fe:	5db9      	ldrb	r1, [r7, r6]
   b6a00:	6860      	ldr	r0, [r4, #4]
   b6a02:	f7ff ff56 	bl	b68b2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b6a06:	3e01      	subs	r6, #1
   b6a08:	d2f9      	bcs.n	b69fe <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b6a0a:	2d00      	cmp	r5, #0
   b6a0c:	6860      	ldr	r0, [r4, #4]
   b6a0e:	bf0c      	ite	eq
   b6a10:	2195      	moveq	r1, #149	; 0x95
   b6a12:	2187      	movne	r1, #135	; 0x87
   b6a14:	f7ff ff4d 	bl	b68b2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b6a18:	6860      	ldr	r0, [r4, #4]
   b6a1a:	f7ff ff4c 	bl	b68b6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6a1e:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b6a20:	6860      	ldr	r0, [r4, #4]
   b6a22:	f7ff ff48 	bl	b68b6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6a26:	0603      	lsls	r3, r0, #24
   b6a28:	7260      	strb	r0, [r4, #9]
   b6a2a:	d503      	bpl.n	b6a34 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b6a2c:	3d01      	subs	r5, #1
   b6a2e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b6a32:	d1f5      	bne.n	b6a20 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b6a34:	b003      	add	sp, #12
   b6a36:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6a38 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b6a38:	b570      	push	{r4, r5, r6, lr}
   b6a3a:	4604      	mov	r4, r0
   b6a3c:	460d      	mov	r5, r1
   b6a3e:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b6a40:	2137      	movs	r1, #55	; 0x37
   b6a42:	2200      	movs	r2, #0
   b6a44:	f7ff ffc6 	bl	b69d4 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b6a48:	4632      	mov	r2, r6
   b6a4a:	4629      	mov	r1, r5
   b6a4c:	4620      	mov	r0, r4
  }
   b6a4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b6a52:	f7ff bfbf 	b.w	b69d4 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b6a58 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b6a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b6a5c:	2500      	movs	r5, #0
   b6a5e:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b6a60:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b6a62:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b6a64:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b6a66:	4604      	mov	r4, r0
   b6a68:	4690      	mov	r8, r2
   b6a6a:	461e      	mov	r6, r3
   b6a6c:	f000 fa5e 	bl	b6f2c <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b6a70:	4641      	mov	r1, r8
   b6a72:	4607      	mov	r7, r0
   b6a74:	6860      	ldr	r0, [r4, #4]
   b6a76:	f000 f9bb 	bl	b6df0 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b6a7a:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b6a7c:	4a49      	ldr	r2, [pc, #292]	; (b6ba4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b6a7e:	721d      	strb	r5, [r3, #8]
   b6a80:	2501      	movs	r5, #1
   b6a82:	60da      	str	r2, [r3, #12]
   b6a84:	821d      	strh	r5, [r3, #16]
  spiStart();
   b6a86:	4620      	mov	r0, r4
   b6a88:	f7ff ff3c 	bl	b6904 <_ZN9SdSpiCard8spiStartEv>
   b6a8c:	6863      	ldr	r3, [r4, #4]
   b6a8e:	4629      	mov	r1, r5
   b6a90:	7d18      	ldrb	r0, [r3, #20]
   b6a92:	f001 fbd2 	bl	b823a <digitalWrite>
   b6a96:	250a      	movs	r5, #10
    spiSend(0XFF);
   b6a98:	6860      	ldr	r0, [r4, #4]
   b6a9a:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b6a9c:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b6a9e:	f7ff ff08 	bl	b68b2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b6aa2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b6aa6:	d1f7      	bne.n	b6a98 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b6aa8:	6863      	ldr	r3, [r4, #4]
   b6aaa:	4629      	mov	r1, r5
   b6aac:	7d18      	ldrb	r0, [r3, #20]
   b6aae:	f001 fbc4 	bl	b823a <digitalWrite>
  }
   b6ab2:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b6ab4:	2200      	movs	r2, #0
   b6ab6:	4611      	mov	r1, r2
   b6ab8:	4620      	mov	r0, r4
   b6aba:	f7ff ff8b 	bl	b69d4 <_ZN9SdSpiCard11cardCommandEhm>
   b6abe:	2801      	cmp	r0, #1
   b6ac0:	4680      	mov	r8, r0
   b6ac2:	d018      	beq.n	b6af6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b6ac4:	3d01      	subs	r5, #1
   b6ac6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b6aca:	d107      	bne.n	b6adc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b6acc:	2320      	movs	r3, #32
  spiStop();
   b6ace:	4620      	mov	r0, r4
   b6ad0:	7023      	strb	r3, [r4, #0]
   b6ad2:	f7ff ff26 	bl	b6922 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6ad6:	2000      	movs	r0, #0
}
   b6ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b6adc:	6860      	ldr	r0, [r4, #4]
   b6ade:	21fd      	movs	r1, #253	; 0xfd
   b6ae0:	f7ff fee7 	bl	b68b2 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b6ae4:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b6ae8:	6860      	ldr	r0, [r4, #4]
   b6aea:	f7ff fee4 	bl	b68b6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b6aee:	f1b8 0801 	subs.w	r8, r8, #1
   b6af2:	d1f9      	bne.n	b6ae8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b6af4:	e7de      	b.n	b6ab4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b6af6:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b6afa:	2108      	movs	r1, #8
   b6afc:	4620      	mov	r0, r4
   b6afe:	f7ff ff69 	bl	b69d4 <_ZN9SdSpiCard11cardCommandEhm>
   b6b02:	2805      	cmp	r0, #5
   b6b04:	d114      	bne.n	b6b30 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b6b06:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b6b0a:	2500      	movs	r5, #0
   b6b0c:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b6b0e:	462a      	mov	r2, r5
   b6b10:	2129      	movs	r1, #41	; 0x29
   b6b12:	4620      	mov	r0, r4
   b6b14:	f7ff ff90 	bl	b6a38 <_ZN9SdSpiCard8cardAcmdEhm>
   b6b18:	4602      	mov	r2, r0
   b6b1a:	b1d8      	cbz	r0, b6b54 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b6b1c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b6b20:	4639      	mov	r1, r7
   b6b22:	4620      	mov	r0, r4
   b6b24:	f7ff feca 	bl	b68bc <_ZN9SdSpiCard10isTimedOutEtt>
   b6b28:	2800      	cmp	r0, #0
   b6b2a:	d0f0      	beq.n	b6b0e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b6b2c:	2343      	movs	r3, #67	; 0x43
   b6b2e:	e7ce      	b.n	b6ace <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b6b30:	2504      	movs	r5, #4
      m_status = spiReceive();
   b6b32:	6860      	ldr	r0, [r4, #4]
   b6b34:	f7ff febf 	bl	b68b6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b6b38:	3d01      	subs	r5, #1
   b6b3a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b6b3e:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b6b40:	d1f7      	bne.n	b6b32 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b6b42:	28aa      	cmp	r0, #170	; 0xaa
   b6b44:	d104      	bne.n	b6b50 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b6b46:	2302      	movs	r3, #2
   b6b48:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b6b4a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b6b4e:	e7dd      	b.n	b6b0c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b6b50:	2325      	movs	r3, #37	; 0x25
   b6b52:	e7bc      	b.n	b6ace <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b6b54:	7aa3      	ldrb	r3, [r4, #10]
   b6b56:	2b02      	cmp	r3, #2
   b6b58:	d118      	bne.n	b6b8c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b6b5a:	213a      	movs	r1, #58	; 0x3a
   b6b5c:	4620      	mov	r0, r4
   b6b5e:	f7ff ff39 	bl	b69d4 <_ZN9SdSpiCard11cardCommandEhm>
   b6b62:	b108      	cbz	r0, b6b68 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b6b64:	2337      	movs	r3, #55	; 0x37
   b6b66:	e7b2      	b.n	b6ace <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b6b68:	6860      	ldr	r0, [r4, #4]
   b6b6a:	f7ff fea4 	bl	b68b6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6b6e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b6b72:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b6b74:	bf04      	itt	eq
   b6b76:	2303      	moveq	r3, #3
   b6b78:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b6b7a:	6860      	ldr	r0, [r4, #4]
   b6b7c:	f7ff fe9b 	bl	b68b6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6b80:	6860      	ldr	r0, [r4, #4]
   b6b82:	f7ff fe98 	bl	b68b6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6b86:	6860      	ldr	r0, [r4, #4]
   b6b88:	f7ff fe95 	bl	b68b6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b6b8c:	4620      	mov	r0, r4
   b6b8e:	f7ff fec8 	bl	b6922 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b6b92:	6863      	ldr	r3, [r4, #4]
   b6b94:	7930      	ldrb	r0, [r6, #4]
   b6b96:	68b1      	ldr	r1, [r6, #8]
   b6b98:	89b2      	ldrh	r2, [r6, #12]
   b6b9a:	821a      	strh	r2, [r3, #16]
   b6b9c:	7218      	strb	r0, [r3, #8]
   b6b9e:	60d9      	str	r1, [r3, #12]
  return true;
   b6ba0:	2001      	movs	r0, #1
   b6ba2:	e799      	b.n	b6ad8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b6ba4:	0003d090 	.word	0x0003d090

000b6ba8 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b6ba8:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b6baa:	7a83      	ldrb	r3, [r0, #10]
   b6bac:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b6bae:	bf18      	it	ne
   b6bb0:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b6bb2:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b6bb4:	460a      	mov	r2, r1
   b6bb6:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b6bb8:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b6bba:	f7ff ff0b 	bl	b69d4 <_ZN9SdSpiCard11cardCommandEhm>
   b6bbe:	b130      	cbz	r0, b6bce <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b6bc0:	2330      	movs	r3, #48	; 0x30
   b6bc2:	7023      	strb	r3, [r4, #0]
  spiStop();
   b6bc4:	4620      	mov	r0, r4
   b6bc6:	f7ff feac 	bl	b6922 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6bca:	2500      	movs	r5, #0
   b6bcc:	e00b      	b.n	b6be6 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b6bce:	4629      	mov	r1, r5
   b6bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6bd4:	4620      	mov	r0, r4
   b6bd6:	f7ff feb7 	bl	b6948 <_ZN9SdSpiCard8readDataEPhj>
   b6bda:	4605      	mov	r5, r0
   b6bdc:	2800      	cmp	r0, #0
   b6bde:	d0f1      	beq.n	b6bc4 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b6be0:	4620      	mov	r0, r4
   b6be2:	f7ff fe9e 	bl	b6922 <_ZN9SdSpiCard7spiStopEv>
}
   b6be6:	4628      	mov	r0, r5
   b6be8:	bd38      	pop	{r3, r4, r5, pc}

000b6bea <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b6bea:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b6bec:	7a83      	ldrb	r3, [r0, #10]
   b6bee:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b6bf0:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b6bf2:	bf18      	it	ne
   b6bf4:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b6bf6:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b6bf8:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b6bfa:	f7ff feeb 	bl	b69d4 <_ZN9SdSpiCard11cardCommandEhm>
   b6bfe:	b130      	cbz	r0, b6c0e <_ZN9SdSpiCard9readStartEm+0x24>
   b6c00:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b6c02:	4620      	mov	r0, r4
   b6c04:	7023      	strb	r3, [r4, #0]
   b6c06:	f7ff fe8c 	bl	b6922 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6c0a:	2000      	movs	r0, #0
}
   b6c0c:	bd10      	pop	{r4, pc}
  return true;
   b6c0e:	2001      	movs	r0, #1
   b6c10:	e7fc      	b.n	b6c0c <_ZN9SdSpiCard9readStartEm+0x22>

000b6c12 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b6c12:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b6c14:	2200      	movs	r2, #0
   b6c16:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b6c18:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b6c1a:	f7ff fedb 	bl	b69d4 <_ZN9SdSpiCard11cardCommandEhm>
   b6c1e:	b130      	cbz	r0, b6c2e <_ZN9SdSpiCard8readStopEv+0x1c>
   b6c20:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b6c22:	4620      	mov	r0, r4
   b6c24:	7023      	strb	r3, [r4, #0]
   b6c26:	f7ff fe7c 	bl	b6922 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6c2a:	2000      	movs	r0, #0
}
   b6c2c:	bd10      	pop	{r4, pc}
  spiStop();
   b6c2e:	4620      	mov	r0, r4
   b6c30:	f7ff fe77 	bl	b6922 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b6c34:	2001      	movs	r0, #1
   b6c36:	e7f9      	b.n	b6c2c <_ZN9SdSpiCard8readStopEv+0x1a>

000b6c38 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b6c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6c3a:	4604      	mov	r4, r0
   b6c3c:	4616      	mov	r6, r2
   b6c3e:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b6c40:	f7ff ffd3 	bl	b6bea <_ZN9SdSpiCard9readStartEm>
   b6c44:	b168      	cbz	r0, b6c62 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b6c46:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b6c48:	b2ab      	uxth	r3, r5
   b6c4a:	429f      	cmp	r7, r3
   b6c4c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b6c50:	d909      	bls.n	b6c66 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b6c52:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6c56:	4620      	mov	r0, r4
   b6c58:	f7ff fe76 	bl	b6948 <_ZN9SdSpiCard8readDataEPhj>
   b6c5c:	3501      	adds	r5, #1
   b6c5e:	2800      	cmp	r0, #0
   b6c60:	d1f2      	bne.n	b6c48 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b6c62:	2000      	movs	r0, #0
   b6c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b6c66:	4620      	mov	r0, r4
}
   b6c68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b6c6c:	f7ff bfd1 	b.w	b6c12 <_ZN9SdSpiCard8readStopEv>

000b6c70 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b6c70:	b538      	push	{r3, r4, r5, lr}
   b6c72:	4604      	mov	r4, r0
   b6c74:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b6c76:	6840      	ldr	r0, [r0, #4]
   b6c78:	f7ff fe1b 	bl	b68b2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b6c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6c80:	6860      	ldr	r0, [r4, #4]
   b6c82:	4629      	mov	r1, r5
   b6c84:	f000 f8e6 	bl	b6e54 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b6c88:	6860      	ldr	r0, [r4, #4]
   b6c8a:	21ff      	movs	r1, #255	; 0xff
   b6c8c:	f7ff fe11 	bl	b68b2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b6c90:	6860      	ldr	r0, [r4, #4]
   b6c92:	21ff      	movs	r1, #255	; 0xff
   b6c94:	f7ff fe0d 	bl	b68b2 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b6c98:	6860      	ldr	r0, [r4, #4]
   b6c9a:	f7ff fe0c 	bl	b68b6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6c9e:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b6ca0:	f000 001f 	and.w	r0, r0, #31
   b6ca4:	2805      	cmp	r0, #5
   b6ca6:	d006      	beq.n	b6cb6 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b6ca8:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b6caa:	4620      	mov	r0, r4
   b6cac:	7023      	strb	r3, [r4, #0]
   b6cae:	f7ff fe38 	bl	b6922 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6cb2:	2000      	movs	r0, #0
}
   b6cb4:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b6cb6:	2001      	movs	r0, #1
   b6cb8:	e7fc      	b.n	b6cb4 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b6cba <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b6cba:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b6cbc:	7a83      	ldrb	r3, [r0, #10]
   b6cbe:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b6cc0:	bf18      	it	ne
   b6cc2:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b6cc4:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b6cc6:	460a      	mov	r2, r1
   b6cc8:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b6cca:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b6ccc:	f7ff fe82 	bl	b69d4 <_ZN9SdSpiCard11cardCommandEhm>
   b6cd0:	4606      	mov	r6, r0
   b6cd2:	b130      	cbz	r0, b6ce2 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b6cd4:	2332      	movs	r3, #50	; 0x32
   b6cd6:	7023      	strb	r3, [r4, #0]
  spiStop();
   b6cd8:	4620      	mov	r0, r4
   b6cda:	f7ff fe22 	bl	b6922 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6cde:	2500      	movs	r5, #0
   b6ce0:	e01f      	b.n	b6d22 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b6ce2:	462a      	mov	r2, r5
   b6ce4:	21fe      	movs	r1, #254	; 0xfe
   b6ce6:	4620      	mov	r0, r4
   b6ce8:	f7ff ffc2 	bl	b6c70 <_ZN9SdSpiCard9writeDataEhPKh>
   b6cec:	2800      	cmp	r0, #0
   b6cee:	d0f3      	beq.n	b6cd8 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6cf0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b6cf4:	4620      	mov	r0, r4
   b6cf6:	f7ff fe58 	bl	b69aa <_ZN9SdSpiCard11waitNotBusyEt>
   b6cfa:	4605      	mov	r5, r0
   b6cfc:	b908      	cbnz	r0, b6d02 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b6cfe:	235a      	movs	r3, #90	; 0x5a
   b6d00:	e7e9      	b.n	b6cd6 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b6d02:	4632      	mov	r2, r6
   b6d04:	210d      	movs	r1, #13
   b6d06:	4620      	mov	r0, r4
   b6d08:	f7ff fe64 	bl	b69d4 <_ZN9SdSpiCard11cardCommandEhm>
   b6d0c:	b108      	cbz	r0, b6d12 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b6d0e:	2329      	movs	r3, #41	; 0x29
   b6d10:	e7e1      	b.n	b6cd6 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b6d12:	6860      	ldr	r0, [r4, #4]
   b6d14:	f7ff fdcf 	bl	b68b6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6d18:	2800      	cmp	r0, #0
   b6d1a:	d1f8      	bne.n	b6d0e <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b6d1c:	4620      	mov	r0, r4
   b6d1e:	f7ff fe00 	bl	b6922 <_ZN9SdSpiCard7spiStopEv>
}
   b6d22:	4628      	mov	r0, r5
   b6d24:	bd70      	pop	{r4, r5, r6, pc}

000b6d26 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b6d26:	b513      	push	{r0, r1, r4, lr}
   b6d28:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6d2a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b6d2e:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6d30:	f7ff fe3b 	bl	b69aa <_ZN9SdSpiCard11waitNotBusyEt>
   b6d34:	9a01      	ldr	r2, [sp, #4]
   b6d36:	b930      	cbnz	r0, b6d46 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b6d38:	235b      	movs	r3, #91	; 0x5b
   b6d3a:	7023      	strb	r3, [r4, #0]
  spiStop();
   b6d3c:	4620      	mov	r0, r4
   b6d3e:	f7ff fdf0 	bl	b6922 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6d42:	2000      	movs	r0, #0
   b6d44:	e005      	b.n	b6d52 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b6d46:	21fc      	movs	r1, #252	; 0xfc
   b6d48:	4620      	mov	r0, r4
   b6d4a:	f7ff ff91 	bl	b6c70 <_ZN9SdSpiCard9writeDataEhPKh>
   b6d4e:	2800      	cmp	r0, #0
   b6d50:	d0f4      	beq.n	b6d3c <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b6d52:	b002      	add	sp, #8
   b6d54:	bd10      	pop	{r4, pc}

000b6d56 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b6d56:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b6d58:	7a83      	ldrb	r3, [r0, #10]
   b6d5a:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b6d5c:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b6d5e:	bf18      	it	ne
   b6d60:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b6d62:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b6d64:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b6d66:	f7ff fe35 	bl	b69d4 <_ZN9SdSpiCard11cardCommandEhm>
   b6d6a:	b130      	cbz	r0, b6d7a <_ZN9SdSpiCard10writeStartEm+0x24>
   b6d6c:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b6d6e:	4620      	mov	r0, r4
   b6d70:	7023      	strb	r3, [r4, #0]
   b6d72:	f7ff fdd6 	bl	b6922 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6d76:	2000      	movs	r0, #0
}
   b6d78:	bd10      	pop	{r4, pc}
  return true;
   b6d7a:	2001      	movs	r0, #1
   b6d7c:	e7fc      	b.n	b6d78 <_ZN9SdSpiCard10writeStartEm+0x22>

000b6d7e <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b6d7e:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6d80:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b6d84:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6d86:	f7ff fe10 	bl	b69aa <_ZN9SdSpiCard11waitNotBusyEt>
   b6d8a:	4605      	mov	r5, r0
   b6d8c:	b930      	cbnz	r0, b6d9c <_ZN9SdSpiCard9writeStopEv+0x1e>
   b6d8e:	2356      	movs	r3, #86	; 0x56
   b6d90:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b6d92:	4620      	mov	r0, r4
   b6d94:	f7ff fdc5 	bl	b6922 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b6d98:	4628      	mov	r0, r5
   b6d9a:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b6d9c:	6860      	ldr	r0, [r4, #4]
   b6d9e:	21fd      	movs	r1, #253	; 0xfd
   b6da0:	f7ff fd87 	bl	b68b2 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b6da4:	e7f5      	b.n	b6d92 <_ZN9SdSpiCard9writeStopEv+0x14>

000b6da6 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b6da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6da8:	4604      	mov	r4, r0
   b6daa:	4616      	mov	r6, r2
   b6dac:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b6dae:	f7ff ffd2 	bl	b6d56 <_ZN9SdSpiCard10writeStartEm>
   b6db2:	b170      	cbz	r0, b6dd2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b6db4:	2500      	movs	r5, #0
   b6db6:	42bd      	cmp	r5, r7
   b6db8:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b6dbc:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b6dbe:	d004      	beq.n	b6dca <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b6dc0:	f7ff ffb1 	bl	b6d26 <_ZN9SdSpiCard9writeDataEPKh>
   b6dc4:	b128      	cbz	r0, b6dd2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b6dc6:	3501      	adds	r5, #1
   b6dc8:	e7f5      	b.n	b6db6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b6dca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b6dce:	f7ff bfd6 	b.w	b6d7e <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b6dd2:	4620      	mov	r0, r4
   b6dd4:	f7ff fda5 	bl	b6922 <_ZN9SdSpiCard7spiStopEv>
}
   b6dd8:	2000      	movs	r0, #0
   b6dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6ddc <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b6ddc:	4b01      	ldr	r3, [pc, #4]	; (b6de4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b6dde:	2201      	movs	r2, #1
   b6de0:	701a      	strb	r2, [r3, #0]
}
   b6de2:	4770      	bx	lr
   b6de4:	2003e6ac 	.word	0x2003e6ac

000b6de8 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b6de8:	1d01      	adds	r1, r0, #4
   b6dea:	6800      	ldr	r0, [r0, #0]
   b6dec:	f000 bbae 	b.w	b754c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b6df0 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b6df0:	b510      	push	{r4, lr}
   b6df2:	4604      	mov	r4, r0
  m_csPin = csPin;
   b6df4:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b6df6:	6800      	ldr	r0, [r0, #0]
   b6df8:	f000 fb52 	bl	b74a0 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b6dfc:	7d20      	ldrb	r0, [r4, #20]
   b6dfe:	2101      	movs	r1, #1
   b6e00:	f001 fa0a 	bl	b8218 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b6e04:	7d20      	ldrb	r0, [r4, #20]
   b6e06:	2101      	movs	r1, #1
}
   b6e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b6e0c:	f001 ba15 	b.w	b823a <digitalWrite>

000b6e10 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b6e10:	6800      	ldr	r0, [r0, #0]
   b6e12:	f000 bb81 	b.w	b7518 <_ZN8SPIClass14endTransactionEv>

000b6e16 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b6e16:	6800      	ldr	r0, [r0, #0]
   b6e18:	21ff      	movs	r1, #255	; 0xff
   b6e1a:	f000 bc5d 	b.w	b76d8 <_ZN8SPIClass8transferEh>
	...

000b6e20 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b6e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6e22:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b6e24:	4a07      	ldr	r2, [pc, #28]	; (b6e44 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b6e26:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b6e28:	2500      	movs	r5, #0
   b6e2a:	4c07      	ldr	r4, [pc, #28]	; (b6e48 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b6e2c:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b6e2e:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b6e30:	460a      	mov	r2, r1
   b6e32:	4629      	mov	r1, r5
   b6e34:	f000 fc56 	bl	b76e4 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b6e38:	7823      	ldrb	r3, [r4, #0]
   b6e3a:	2b00      	cmp	r3, #0
   b6e3c:	d0fc      	beq.n	b6e38 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b6e3e:	2000      	movs	r0, #0
   b6e40:	b003      	add	sp, #12
   b6e42:	bd30      	pop	{r4, r5, pc}
   b6e44:	000b6ddd 	.word	0x000b6ddd
   b6e48:	2003e6ac 	.word	0x2003e6ac

000b6e4c <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b6e4c:	6800      	ldr	r0, [r0, #0]
   b6e4e:	f000 bc43 	b.w	b76d8 <_ZN8SPIClass8transferEh>
	...

000b6e54 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b6e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6e56:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b6e58:	4a06      	ldr	r2, [pc, #24]	; (b6e74 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b6e5a:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b6e5c:	2500      	movs	r5, #0
   b6e5e:	4c06      	ldr	r4, [pc, #24]	; (b6e78 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b6e60:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b6e62:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b6e64:	462a      	mov	r2, r5
   b6e66:	f000 fc3d 	bl	b76e4 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b6e6a:	7823      	ldrb	r3, [r4, #0]
   b6e6c:	2b00      	cmp	r3, #0
   b6e6e:	d0fc      	beq.n	b6e6a <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b6e70:	b003      	add	sp, #12
   b6e72:	bd30      	pop	{r4, r5, pc}
   b6e74:	000b6ddd 	.word	0x000b6ddd
   b6e78:	2003e6ac 	.word	0x2003e6ac

000b6e7c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6e7c:	b508      	push	{r3, lr}
   b6e7e:	4b02      	ldr	r3, [pc, #8]	; (b6e88 <netdb_freeaddrinfo+0xc>)
   b6e80:	681b      	ldr	r3, [r3, #0]
   b6e82:	689b      	ldr	r3, [r3, #8]
   b6e84:	9301      	str	r3, [sp, #4]
   b6e86:	bd08      	pop	{r3, pc}
   b6e88:	00030268 	.word	0x00030268

000b6e8c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6e8c:	b508      	push	{r3, lr}
   b6e8e:	4b02      	ldr	r3, [pc, #8]	; (b6e98 <netdb_getaddrinfo+0xc>)
   b6e90:	681b      	ldr	r3, [r3, #0]
   b6e92:	68db      	ldr	r3, [r3, #12]
   b6e94:	9301      	str	r3, [sp, #4]
   b6e96:	bd08      	pop	{r3, pc}
   b6e98:	00030268 	.word	0x00030268

000b6e9c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b6e9c:	b508      	push	{r3, lr}
   b6e9e:	4b02      	ldr	r3, [pc, #8]	; (b6ea8 <HAL_Validate_Pin_Function+0xc>)
   b6ea0:	681b      	ldr	r3, [r3, #0]
   b6ea2:	685b      	ldr	r3, [r3, #4]
   b6ea4:	9301      	str	r3, [sp, #4]
   b6ea6:	bd08      	pop	{r3, pc}
   b6ea8:	0003022c 	.word	0x0003022c

000b6eac <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6eac:	b508      	push	{r3, lr}
   b6eae:	4b02      	ldr	r3, [pc, #8]	; (b6eb8 <HAL_Pin_Mode+0xc>)
   b6eb0:	681b      	ldr	r3, [r3, #0]
   b6eb2:	689b      	ldr	r3, [r3, #8]
   b6eb4:	9301      	str	r3, [sp, #4]
   b6eb6:	bd08      	pop	{r3, pc}
   b6eb8:	0003022c 	.word	0x0003022c

000b6ebc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6ebc:	b508      	push	{r3, lr}
   b6ebe:	4b02      	ldr	r3, [pc, #8]	; (b6ec8 <HAL_Get_Pin_Mode+0xc>)
   b6ec0:	681b      	ldr	r3, [r3, #0]
   b6ec2:	68db      	ldr	r3, [r3, #12]
   b6ec4:	9301      	str	r3, [sp, #4]
   b6ec6:	bd08      	pop	{r3, pc}
   b6ec8:	0003022c 	.word	0x0003022c

000b6ecc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6ecc:	b508      	push	{r3, lr}
   b6ece:	4b02      	ldr	r3, [pc, #8]	; (b6ed8 <HAL_GPIO_Write+0xc>)
   b6ed0:	681b      	ldr	r3, [r3, #0]
   b6ed2:	691b      	ldr	r3, [r3, #16]
   b6ed4:	9301      	str	r3, [sp, #4]
   b6ed6:	bd08      	pop	{r3, pc}
   b6ed8:	0003022c 	.word	0x0003022c

000b6edc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b6edc:	b508      	push	{r3, lr}
   b6ede:	4b02      	ldr	r3, [pc, #8]	; (b6ee8 <HAL_GPIO_Read+0xc>)
   b6ee0:	681b      	ldr	r3, [r3, #0]
   b6ee2:	695b      	ldr	r3, [r3, #20]
   b6ee4:	9301      	str	r3, [sp, #4]
   b6ee6:	bd08      	pop	{r3, pc}
   b6ee8:	0003022c 	.word	0x0003022c

000b6eec <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b6eec:	b508      	push	{r3, lr}
   b6eee:	4b02      	ldr	r3, [pc, #8]	; (b6ef8 <hal_adc_read+0xc>)
   b6ef0:	681b      	ldr	r3, [r3, #0]
   b6ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6ef4:	9301      	str	r3, [sp, #4]
   b6ef6:	bd08      	pop	{r3, pc}
   b6ef8:	0003022c 	.word	0x0003022c

000b6efc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6efc:	b508      	push	{r3, lr}
   b6efe:	4b02      	ldr	r3, [pc, #8]	; (b6f08 <HAL_RNG_GetRandomNumber+0xc>)
   b6f00:	681b      	ldr	r3, [r3, #0]
   b6f02:	685b      	ldr	r3, [r3, #4]
   b6f04:	9301      	str	r3, [sp, #4]
   b6f06:	bd08      	pop	{r3, pc}
   b6f08:	00030218 	.word	0x00030218

000b6f0c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6f0c:	b508      	push	{r3, lr}
   b6f0e:	4b02      	ldr	r3, [pc, #8]	; (b6f18 <HAL_Delay_Microseconds+0xc>)
   b6f10:	681b      	ldr	r3, [r3, #0]
   b6f12:	68db      	ldr	r3, [r3, #12]
   b6f14:	9301      	str	r3, [sp, #4]
   b6f16:	bd08      	pop	{r3, pc}
   b6f18:	00030218 	.word	0x00030218

000b6f1c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b6f1c:	b508      	push	{r3, lr}
   b6f1e:	4b02      	ldr	r3, [pc, #8]	; (b6f28 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b6f20:	681b      	ldr	r3, [r3, #0]
   b6f22:	691b      	ldr	r3, [r3, #16]
   b6f24:	9301      	str	r3, [sp, #4]
   b6f26:	bd08      	pop	{r3, pc}
   b6f28:	00030218 	.word	0x00030218

000b6f2c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6f2c:	b508      	push	{r3, lr}
   b6f2e:	4b02      	ldr	r3, [pc, #8]	; (b6f38 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6f30:	681b      	ldr	r3, [r3, #0]
   b6f32:	695b      	ldr	r3, [r3, #20]
   b6f34:	9301      	str	r3, [sp, #4]
   b6f36:	bd08      	pop	{r3, pc}
   b6f38:	00030218 	.word	0x00030218

000b6f3c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b6f3c:	b508      	push	{r3, lr}
   b6f3e:	4b02      	ldr	r3, [pc, #8]	; (b6f48 <hal_rtc_time_is_valid+0xc>)
   b6f40:	681b      	ldr	r3, [r3, #0]
   b6f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6f44:	9301      	str	r3, [sp, #4]
   b6f46:	bd08      	pop	{r3, pc}
   b6f48:	00030218 	.word	0x00030218

000b6f4c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b6f4c:	b508      	push	{r3, lr}
   b6f4e:	4b02      	ldr	r3, [pc, #8]	; (b6f58 <hal_rtc_get_time+0xc>)
   b6f50:	681b      	ldr	r3, [r3, #0]
   b6f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b6f54:	9301      	str	r3, [sp, #4]
   b6f56:	bd08      	pop	{r3, pc}
   b6f58:	00030218 	.word	0x00030218

000b6f5c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6f5c:	b508      	push	{r3, lr}
   b6f5e:	4b02      	ldr	r3, [pc, #8]	; (b6f68 <os_mutex_recursive_create+0xc>)
   b6f60:	681b      	ldr	r3, [r3, #0]
   b6f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6f64:	9301      	str	r3, [sp, #4]
   b6f66:	bd08      	pop	{r3, pc}
   b6f68:	00030248 	.word	0x00030248

000b6f6c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6f6c:	b508      	push	{r3, lr}
   b6f6e:	4b02      	ldr	r3, [pc, #8]	; (b6f78 <inet_inet_ntop+0xc>)
   b6f70:	681b      	ldr	r3, [r3, #0]
   b6f72:	695b      	ldr	r3, [r3, #20]
   b6f74:	9301      	str	r3, [sp, #4]
   b6f76:	bd08      	pop	{r3, pc}
   b6f78:	00030264 	.word	0x00030264

000b6f7c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6f7c:	b508      	push	{r3, lr}
   b6f7e:	4b02      	ldr	r3, [pc, #8]	; (b6f88 <hal_usart_write+0xc>)
   b6f80:	681b      	ldr	r3, [r3, #0]
   b6f82:	68db      	ldr	r3, [r3, #12]
   b6f84:	9301      	str	r3, [sp, #4]
   b6f86:	bd08      	pop	{r3, pc}
   b6f88:	0003023c 	.word	0x0003023c

000b6f8c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6f8c:	b508      	push	{r3, lr}
   b6f8e:	4b02      	ldr	r3, [pc, #8]	; (b6f98 <hal_usart_available+0xc>)
   b6f90:	681b      	ldr	r3, [r3, #0]
   b6f92:	691b      	ldr	r3, [r3, #16]
   b6f94:	9301      	str	r3, [sp, #4]
   b6f96:	bd08      	pop	{r3, pc}
   b6f98:	0003023c 	.word	0x0003023c

000b6f9c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6f9c:	b508      	push	{r3, lr}
   b6f9e:	4b02      	ldr	r3, [pc, #8]	; (b6fa8 <hal_usart_read+0xc>)
   b6fa0:	681b      	ldr	r3, [r3, #0]
   b6fa2:	695b      	ldr	r3, [r3, #20]
   b6fa4:	9301      	str	r3, [sp, #4]
   b6fa6:	bd08      	pop	{r3, pc}
   b6fa8:	0003023c 	.word	0x0003023c

000b6fac <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6fac:	b508      	push	{r3, lr}
   b6fae:	4b02      	ldr	r3, [pc, #8]	; (b6fb8 <hal_usart_peek+0xc>)
   b6fb0:	681b      	ldr	r3, [r3, #0]
   b6fb2:	699b      	ldr	r3, [r3, #24]
   b6fb4:	9301      	str	r3, [sp, #4]
   b6fb6:	bd08      	pop	{r3, pc}
   b6fb8:	0003023c 	.word	0x0003023c

000b6fbc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6fbc:	b508      	push	{r3, lr}
   b6fbe:	4b02      	ldr	r3, [pc, #8]	; (b6fc8 <hal_usart_flush+0xc>)
   b6fc0:	681b      	ldr	r3, [r3, #0]
   b6fc2:	69db      	ldr	r3, [r3, #28]
   b6fc4:	9301      	str	r3, [sp, #4]
   b6fc6:	bd08      	pop	{r3, pc}
   b6fc8:	0003023c 	.word	0x0003023c

000b6fcc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6fcc:	b508      	push	{r3, lr}
   b6fce:	4b02      	ldr	r3, [pc, #8]	; (b6fd8 <hal_usart_is_enabled+0xc>)
   b6fd0:	681b      	ldr	r3, [r3, #0]
   b6fd2:	6a1b      	ldr	r3, [r3, #32]
   b6fd4:	9301      	str	r3, [sp, #4]
   b6fd6:	bd08      	pop	{r3, pc}
   b6fd8:	0003023c 	.word	0x0003023c

000b6fdc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6fdc:	b508      	push	{r3, lr}
   b6fde:	4b02      	ldr	r3, [pc, #8]	; (b6fe8 <hal_usart_available_data_for_write+0xc>)
   b6fe0:	681b      	ldr	r3, [r3, #0]
   b6fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6fe4:	9301      	str	r3, [sp, #4]
   b6fe6:	bd08      	pop	{r3, pc}
   b6fe8:	0003023c 	.word	0x0003023c

000b6fec <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6fec:	b508      	push	{r3, lr}
   b6fee:	4b02      	ldr	r3, [pc, #8]	; (b6ff8 <hal_usart_init_ex+0xc>)
   b6ff0:	681b      	ldr	r3, [r3, #0]
   b6ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6ff4:	9301      	str	r3, [sp, #4]
   b6ff6:	bd08      	pop	{r3, pc}
   b6ff8:	0003023c 	.word	0x0003023c

000b6ffc <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6ffc:	b508      	push	{r3, lr}
   b6ffe:	4b02      	ldr	r3, [pc, #8]	; (b7008 <hal_i2c_begin+0xc>)
   b7000:	681b      	ldr	r3, [r3, #0]
   b7002:	68db      	ldr	r3, [r3, #12]
   b7004:	9301      	str	r3, [sp, #4]
   b7006:	bd08      	pop	{r3, pc}
   b7008:	00030228 	.word	0x00030228

000b700c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b700c:	b508      	push	{r3, lr}
   b700e:	4b02      	ldr	r3, [pc, #8]	; (b7018 <hal_i2c_begin_transmission+0xc>)
   b7010:	681b      	ldr	r3, [r3, #0]
   b7012:	699b      	ldr	r3, [r3, #24]
   b7014:	9301      	str	r3, [sp, #4]
   b7016:	bd08      	pop	{r3, pc}
   b7018:	00030228 	.word	0x00030228

000b701c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b701c:	b508      	push	{r3, lr}
   b701e:	4b02      	ldr	r3, [pc, #8]	; (b7028 <hal_i2c_end_transmission+0xc>)
   b7020:	681b      	ldr	r3, [r3, #0]
   b7022:	69db      	ldr	r3, [r3, #28]
   b7024:	9301      	str	r3, [sp, #4]
   b7026:	bd08      	pop	{r3, pc}
   b7028:	00030228 	.word	0x00030228

000b702c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b702c:	b508      	push	{r3, lr}
   b702e:	4b02      	ldr	r3, [pc, #8]	; (b7038 <hal_i2c_write+0xc>)
   b7030:	681b      	ldr	r3, [r3, #0]
   b7032:	6a1b      	ldr	r3, [r3, #32]
   b7034:	9301      	str	r3, [sp, #4]
   b7036:	bd08      	pop	{r3, pc}
   b7038:	00030228 	.word	0x00030228

000b703c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b703c:	b508      	push	{r3, lr}
   b703e:	4b02      	ldr	r3, [pc, #8]	; (b7048 <hal_i2c_available+0xc>)
   b7040:	681b      	ldr	r3, [r3, #0]
   b7042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7044:	9301      	str	r3, [sp, #4]
   b7046:	bd08      	pop	{r3, pc}
   b7048:	00030228 	.word	0x00030228

000b704c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b704c:	b508      	push	{r3, lr}
   b704e:	4b02      	ldr	r3, [pc, #8]	; (b7058 <hal_i2c_read+0xc>)
   b7050:	681b      	ldr	r3, [r3, #0]
   b7052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7054:	9301      	str	r3, [sp, #4]
   b7056:	bd08      	pop	{r3, pc}
   b7058:	00030228 	.word	0x00030228

000b705c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b705c:	b508      	push	{r3, lr}
   b705e:	4b02      	ldr	r3, [pc, #8]	; (b7068 <hal_i2c_peek+0xc>)
   b7060:	681b      	ldr	r3, [r3, #0]
   b7062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7064:	9301      	str	r3, [sp, #4]
   b7066:	bd08      	pop	{r3, pc}
   b7068:	00030228 	.word	0x00030228

000b706c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b706c:	b508      	push	{r3, lr}
   b706e:	4b02      	ldr	r3, [pc, #8]	; (b7078 <hal_i2c_flush+0xc>)
   b7070:	681b      	ldr	r3, [r3, #0]
   b7072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7074:	9301      	str	r3, [sp, #4]
   b7076:	bd08      	pop	{r3, pc}
   b7078:	00030228 	.word	0x00030228

000b707c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b707c:	b508      	push	{r3, lr}
   b707e:	4b02      	ldr	r3, [pc, #8]	; (b7088 <hal_i2c_is_enabled+0xc>)
   b7080:	681b      	ldr	r3, [r3, #0]
   b7082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7084:	9301      	str	r3, [sp, #4]
   b7086:	bd08      	pop	{r3, pc}
   b7088:	00030228 	.word	0x00030228

000b708c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b708c:	b508      	push	{r3, lr}
   b708e:	4b02      	ldr	r3, [pc, #8]	; (b7098 <hal_i2c_init+0xc>)
   b7090:	681b      	ldr	r3, [r3, #0]
   b7092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7094:	9301      	str	r3, [sp, #4]
   b7096:	bd08      	pop	{r3, pc}
   b7098:	00030228 	.word	0x00030228

000b709c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b709c:	b508      	push	{r3, lr}
   b709e:	4b02      	ldr	r3, [pc, #8]	; (b70a8 <hal_i2c_request_ex+0xc>)
   b70a0:	681b      	ldr	r3, [r3, #0]
   b70a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b70a4:	9301      	str	r3, [sp, #4]
   b70a6:	bd08      	pop	{r3, pc}
   b70a8:	00030228 	.word	0x00030228

000b70ac <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b70ac:	b508      	push	{r3, lr}
   b70ae:	4b02      	ldr	r3, [pc, #8]	; (b70b8 <hal_spi_begin+0xc>)
   b70b0:	681b      	ldr	r3, [r3, #0]
   b70b2:	681b      	ldr	r3, [r3, #0]
   b70b4:	9301      	str	r3, [sp, #4]
   b70b6:	bd08      	pop	{r3, pc}
   b70b8:	00030230 	.word	0x00030230

000b70bc <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b70bc:	b508      	push	{r3, lr}
   b70be:	4b02      	ldr	r3, [pc, #8]	; (b70c8 <hal_spi_set_bit_order+0xc>)
   b70c0:	681b      	ldr	r3, [r3, #0]
   b70c2:	689b      	ldr	r3, [r3, #8]
   b70c4:	9301      	str	r3, [sp, #4]
   b70c6:	bd08      	pop	{r3, pc}
   b70c8:	00030230 	.word	0x00030230

000b70cc <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b70cc:	b508      	push	{r3, lr}
   b70ce:	4b02      	ldr	r3, [pc, #8]	; (b70d8 <hal_spi_set_data_mode+0xc>)
   b70d0:	681b      	ldr	r3, [r3, #0]
   b70d2:	68db      	ldr	r3, [r3, #12]
   b70d4:	9301      	str	r3, [sp, #4]
   b70d6:	bd08      	pop	{r3, pc}
   b70d8:	00030230 	.word	0x00030230

000b70dc <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b70dc:	b508      	push	{r3, lr}
   b70de:	4b02      	ldr	r3, [pc, #8]	; (b70e8 <hal_spi_set_clock_divider+0xc>)
   b70e0:	681b      	ldr	r3, [r3, #0]
   b70e2:	691b      	ldr	r3, [r3, #16]
   b70e4:	9301      	str	r3, [sp, #4]
   b70e6:	bd08      	pop	{r3, pc}
   b70e8:	00030230 	.word	0x00030230

000b70ec <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b70ec:	b508      	push	{r3, lr}
   b70ee:	4b02      	ldr	r3, [pc, #8]	; (b70f8 <hal_spi_transfer+0xc>)
   b70f0:	681b      	ldr	r3, [r3, #0]
   b70f2:	695b      	ldr	r3, [r3, #20]
   b70f4:	9301      	str	r3, [sp, #4]
   b70f6:	bd08      	pop	{r3, pc}
   b70f8:	00030230 	.word	0x00030230

000b70fc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b70fc:	b508      	push	{r3, lr}
   b70fe:	4b02      	ldr	r3, [pc, #8]	; (b7108 <hal_spi_init+0xc>)
   b7100:	681b      	ldr	r3, [r3, #0]
   b7102:	69db      	ldr	r3, [r3, #28]
   b7104:	9301      	str	r3, [sp, #4]
   b7106:	bd08      	pop	{r3, pc}
   b7108:	00030230 	.word	0x00030230

000b710c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b710c:	b508      	push	{r3, lr}
   b710e:	4b02      	ldr	r3, [pc, #8]	; (b7118 <hal_spi_is_enabled+0xc>)
   b7110:	681b      	ldr	r3, [r3, #0]
   b7112:	6a1b      	ldr	r3, [r3, #32]
   b7114:	9301      	str	r3, [sp, #4]
   b7116:	bd08      	pop	{r3, pc}
   b7118:	00030230 	.word	0x00030230

000b711c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b711c:	b508      	push	{r3, lr}
   b711e:	4b02      	ldr	r3, [pc, #8]	; (b7128 <hal_spi_info+0xc>)
   b7120:	681b      	ldr	r3, [r3, #0]
   b7122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7124:	9301      	str	r3, [sp, #4]
   b7126:	bd08      	pop	{r3, pc}
   b7128:	00030230 	.word	0x00030230

000b712c <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b712c:	b508      	push	{r3, lr}
   b712e:	4b02      	ldr	r3, [pc, #8]	; (b7138 <hal_spi_transfer_dma+0xc>)
   b7130:	681b      	ldr	r3, [r3, #0]
   b7132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7134:	9301      	str	r3, [sp, #4]
   b7136:	bd08      	pop	{r3, pc}
   b7138:	00030230 	.word	0x00030230

000b713c <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b713c:	b508      	push	{r3, lr}
   b713e:	4b02      	ldr	r3, [pc, #8]	; (b7148 <hal_spi_transfer_dma_status+0xc>)
   b7140:	681b      	ldr	r3, [r3, #0]
   b7142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7144:	9301      	str	r3, [sp, #4]
   b7146:	bd08      	pop	{r3, pc}
   b7148:	00030230 	.word	0x00030230

000b714c <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b714c:	b508      	push	{r3, lr}
   b714e:	4b02      	ldr	r3, [pc, #8]	; (b7158 <hal_spi_set_settings+0xc>)
   b7150:	681b      	ldr	r3, [r3, #0]
   b7152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7154:	9301      	str	r3, [sp, #4]
   b7156:	bd08      	pop	{r3, pc}
   b7158:	00030230 	.word	0x00030230

000b715c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b715c:	b508      	push	{r3, lr}
   b715e:	4b02      	ldr	r3, [pc, #8]	; (b7168 <hal_spi_acquire+0xc>)
   b7160:	681b      	ldr	r3, [r3, #0]
   b7162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7164:	9301      	str	r3, [sp, #4]
   b7166:	bd08      	pop	{r3, pc}
   b7168:	00030230 	.word	0x00030230

000b716c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b716c:	b508      	push	{r3, lr}
   b716e:	4b02      	ldr	r3, [pc, #8]	; (b7178 <hal_spi_release+0xc>)
   b7170:	681b      	ldr	r3, [r3, #0]
   b7172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7174:	9301      	str	r3, [sp, #4]
   b7176:	bd08      	pop	{r3, pc}
   b7178:	00030230 	.word	0x00030230

000b717c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b717c:	b508      	push	{r3, lr}
   b717e:	4b02      	ldr	r3, [pc, #8]	; (b7188 <HAL_USB_USART_Init+0xc>)
   b7180:	681b      	ldr	r3, [r3, #0]
   b7182:	681b      	ldr	r3, [r3, #0]
   b7184:	9301      	str	r3, [sp, #4]
   b7186:	bd08      	pop	{r3, pc}
   b7188:	0003024c 	.word	0x0003024c

000b718c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b718c:	b508      	push	{r3, lr}
   b718e:	4b02      	ldr	r3, [pc, #8]	; (b7198 <HAL_USB_USART_Begin+0xc>)
   b7190:	681b      	ldr	r3, [r3, #0]
   b7192:	685b      	ldr	r3, [r3, #4]
   b7194:	9301      	str	r3, [sp, #4]
   b7196:	bd08      	pop	{r3, pc}
   b7198:	0003024c 	.word	0x0003024c

000b719c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b719c:	b508      	push	{r3, lr}
   b719e:	4b02      	ldr	r3, [pc, #8]	; (b71a8 <HAL_USB_USART_Available_Data+0xc>)
   b71a0:	681b      	ldr	r3, [r3, #0]
   b71a2:	691b      	ldr	r3, [r3, #16]
   b71a4:	9301      	str	r3, [sp, #4]
   b71a6:	bd08      	pop	{r3, pc}
   b71a8:	0003024c 	.word	0x0003024c

000b71ac <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b71ac:	b508      	push	{r3, lr}
   b71ae:	4b02      	ldr	r3, [pc, #8]	; (b71b8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b71b0:	681b      	ldr	r3, [r3, #0]
   b71b2:	695b      	ldr	r3, [r3, #20]
   b71b4:	9301      	str	r3, [sp, #4]
   b71b6:	bd08      	pop	{r3, pc}
   b71b8:	0003024c 	.word	0x0003024c

000b71bc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b71bc:	b508      	push	{r3, lr}
   b71be:	4b02      	ldr	r3, [pc, #8]	; (b71c8 <HAL_USB_USART_Receive_Data+0xc>)
   b71c0:	681b      	ldr	r3, [r3, #0]
   b71c2:	699b      	ldr	r3, [r3, #24]
   b71c4:	9301      	str	r3, [sp, #4]
   b71c6:	bd08      	pop	{r3, pc}
   b71c8:	0003024c 	.word	0x0003024c

000b71cc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b71cc:	b508      	push	{r3, lr}
   b71ce:	4b02      	ldr	r3, [pc, #8]	; (b71d8 <HAL_USB_USART_Send_Data+0xc>)
   b71d0:	681b      	ldr	r3, [r3, #0]
   b71d2:	69db      	ldr	r3, [r3, #28]
   b71d4:	9301      	str	r3, [sp, #4]
   b71d6:	bd08      	pop	{r3, pc}
   b71d8:	0003024c 	.word	0x0003024c

000b71dc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b71dc:	b508      	push	{r3, lr}
   b71de:	4b02      	ldr	r3, [pc, #8]	; (b71e8 <HAL_USB_USART_Flush_Data+0xc>)
   b71e0:	681b      	ldr	r3, [r3, #0]
   b71e2:	6a1b      	ldr	r3, [r3, #32]
   b71e4:	9301      	str	r3, [sp, #4]
   b71e6:	bd08      	pop	{r3, pc}
   b71e8:	0003024c 	.word	0x0003024c

000b71ec <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   b71ec:	b508      	push	{r3, lr}
   b71ee:	4b02      	ldr	r3, [pc, #8]	; (b71f8 <HAL_USB_USART_Is_Enabled+0xc>)
   b71f0:	681b      	ldr	r3, [r3, #0]
   b71f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b71f4:	9301      	str	r3, [sp, #4]
   b71f6:	bd08      	pop	{r3, pc}
   b71f8:	0003024c 	.word	0x0003024c

000b71fc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b71fc:	b508      	push	{r3, lr}
   b71fe:	4b02      	ldr	r3, [pc, #8]	; (b7208 <panic_+0xc>)
   b7200:	681b      	ldr	r3, [r3, #0]
   b7202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7204:	9301      	str	r3, [sp, #4]
   b7206:	bd08      	pop	{r3, pc}
   b7208:	00030260 	.word	0x00030260

000b720c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b720c:	b508      	push	{r3, lr}
   b720e:	4b02      	ldr	r3, [pc, #8]	; (b7218 <system_mode+0xc>)
   b7210:	681b      	ldr	r3, [r3, #0]
   b7212:	681b      	ldr	r3, [r3, #0]
   b7214:	9301      	str	r3, [sp, #4]
   b7216:	bd08      	pop	{r3, pc}
   b7218:	00030220 	.word	0x00030220

000b721c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b721c:	b508      	push	{r3, lr}
   b721e:	4b02      	ldr	r3, [pc, #8]	; (b7228 <set_system_mode+0xc>)
   b7220:	681b      	ldr	r3, [r3, #0]
   b7222:	685b      	ldr	r3, [r3, #4]
   b7224:	9301      	str	r3, [sp, #4]
   b7226:	bd08      	pop	{r3, pc}
   b7228:	00030220 	.word	0x00030220

000b722c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b722c:	b508      	push	{r3, lr}
   b722e:	4b02      	ldr	r3, [pc, #8]	; (b7238 <system_delay_ms+0xc>)
   b7230:	681b      	ldr	r3, [r3, #0]
   b7232:	695b      	ldr	r3, [r3, #20]
   b7234:	9301      	str	r3, [sp, #4]
   b7236:	bd08      	pop	{r3, pc}
   b7238:	00030220 	.word	0x00030220

000b723c <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b723c:	b508      	push	{r3, lr}
   b723e:	4b02      	ldr	r3, [pc, #8]	; (b7248 <system_thread_get_state+0xc>)
   b7240:	681b      	ldr	r3, [r3, #0]
   b7242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7244:	9301      	str	r3, [sp, #4]
   b7246:	bd08      	pop	{r3, pc}
   b7248:	00030220 	.word	0x00030220

000b724c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b724c:	b508      	push	{r3, lr}
   b724e:	4b03      	ldr	r3, [pc, #12]	; (b725c <system_ctrl_set_app_request_handler+0x10>)
   b7250:	681b      	ldr	r3, [r3, #0]
   b7252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7256:	9301      	str	r3, [sp, #4]
   b7258:	bd08      	pop	{r3, pc}
   b725a:	0000      	.short	0x0000
   b725c:	00030220 	.word	0x00030220

000b7260 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7260:	b508      	push	{r3, lr}
   b7262:	4b03      	ldr	r3, [pc, #12]	; (b7270 <system_ctrl_set_result+0x10>)
   b7264:	681b      	ldr	r3, [r3, #0]
   b7266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b726a:	9301      	str	r3, [sp, #4]
   b726c:	bd08      	pop	{r3, pc}
   b726e:	0000      	.short	0x0000
   b7270:	00030220 	.word	0x00030220

000b7274 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7274:	b508      	push	{r3, lr}
   b7276:	4b02      	ldr	r3, [pc, #8]	; (b7280 <network_connect+0xc>)
   b7278:	681b      	ldr	r3, [r3, #0]
   b727a:	685b      	ldr	r3, [r3, #4]
   b727c:	9301      	str	r3, [sp, #4]
   b727e:	bd08      	pop	{r3, pc}
   b7280:	00030240 	.word	0x00030240

000b7284 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7284:	b508      	push	{r3, lr}
   b7286:	4b02      	ldr	r3, [pc, #8]	; (b7290 <network_connecting+0xc>)
   b7288:	681b      	ldr	r3, [r3, #0]
   b728a:	689b      	ldr	r3, [r3, #8]
   b728c:	9301      	str	r3, [sp, #4]
   b728e:	bd08      	pop	{r3, pc}
   b7290:	00030240 	.word	0x00030240

000b7294 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7294:	b508      	push	{r3, lr}
   b7296:	4b02      	ldr	r3, [pc, #8]	; (b72a0 <network_disconnect+0xc>)
   b7298:	681b      	ldr	r3, [r3, #0]
   b729a:	68db      	ldr	r3, [r3, #12]
   b729c:	9301      	str	r3, [sp, #4]
   b729e:	bd08      	pop	{r3, pc}
   b72a0:	00030240 	.word	0x00030240

000b72a4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b72a4:	b508      	push	{r3, lr}
   b72a6:	4b02      	ldr	r3, [pc, #8]	; (b72b0 <network_ready+0xc>)
   b72a8:	681b      	ldr	r3, [r3, #0]
   b72aa:	691b      	ldr	r3, [r3, #16]
   b72ac:	9301      	str	r3, [sp, #4]
   b72ae:	bd08      	pop	{r3, pc}
   b72b0:	00030240 	.word	0x00030240

000b72b4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b72b4:	b508      	push	{r3, lr}
   b72b6:	4b02      	ldr	r3, [pc, #8]	; (b72c0 <network_on+0xc>)
   b72b8:	681b      	ldr	r3, [r3, #0]
   b72ba:	695b      	ldr	r3, [r3, #20]
   b72bc:	9301      	str	r3, [sp, #4]
   b72be:	bd08      	pop	{r3, pc}
   b72c0:	00030240 	.word	0x00030240

000b72c4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b72c4:	b508      	push	{r3, lr}
   b72c6:	4b02      	ldr	r3, [pc, #8]	; (b72d0 <network_off+0xc>)
   b72c8:	681b      	ldr	r3, [r3, #0]
   b72ca:	699b      	ldr	r3, [r3, #24]
   b72cc:	9301      	str	r3, [sp, #4]
   b72ce:	bd08      	pop	{r3, pc}
   b72d0:	00030240 	.word	0x00030240

000b72d4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b72d4:	b508      	push	{r3, lr}
   b72d6:	4b02      	ldr	r3, [pc, #8]	; (b72e0 <network_listen+0xc>)
   b72d8:	681b      	ldr	r3, [r3, #0]
   b72da:	69db      	ldr	r3, [r3, #28]
   b72dc:	9301      	str	r3, [sp, #4]
   b72de:	bd08      	pop	{r3, pc}
   b72e0:	00030240 	.word	0x00030240

000b72e4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b72e4:	b508      	push	{r3, lr}
   b72e6:	4b02      	ldr	r3, [pc, #8]	; (b72f0 <network_listening+0xc>)
   b72e8:	681b      	ldr	r3, [r3, #0]
   b72ea:	6a1b      	ldr	r3, [r3, #32]
   b72ec:	9301      	str	r3, [sp, #4]
   b72ee:	bd08      	pop	{r3, pc}
   b72f0:	00030240 	.word	0x00030240

000b72f4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b72f4:	b508      	push	{r3, lr}
   b72f6:	4b02      	ldr	r3, [pc, #8]	; (b7300 <network_set_listen_timeout+0xc>)
   b72f8:	681b      	ldr	r3, [r3, #0]
   b72fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b72fc:	9301      	str	r3, [sp, #4]
   b72fe:	bd08      	pop	{r3, pc}
   b7300:	00030240 	.word	0x00030240

000b7304 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7304:	b508      	push	{r3, lr}
   b7306:	4b02      	ldr	r3, [pc, #8]	; (b7310 <network_get_listen_timeout+0xc>)
   b7308:	681b      	ldr	r3, [r3, #0]
   b730a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b730c:	9301      	str	r3, [sp, #4]
   b730e:	bd08      	pop	{r3, pc}
   b7310:	00030240 	.word	0x00030240

000b7314 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7314:	b508      	push	{r3, lr}
   b7316:	4b02      	ldr	r3, [pc, #8]	; (b7320 <network_is_on+0xc>)
   b7318:	681b      	ldr	r3, [r3, #0]
   b731a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b731c:	9301      	str	r3, [sp, #4]
   b731e:	bd08      	pop	{r3, pc}
   b7320:	00030240 	.word	0x00030240

000b7324 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7324:	b508      	push	{r3, lr}
   b7326:	4b02      	ldr	r3, [pc, #8]	; (b7330 <network_is_off+0xc>)
   b7328:	681b      	ldr	r3, [r3, #0]
   b732a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b732c:	9301      	str	r3, [sp, #4]
   b732e:	bd08      	pop	{r3, pc}
   b7330:	00030240 	.word	0x00030240

000b7334 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b7334:	b508      	push	{r3, lr}
   b7336:	4b02      	ldr	r3, [pc, #8]	; (b7340 <spark_process+0xc>)
   b7338:	681b      	ldr	r3, [r3, #0]
   b733a:	689b      	ldr	r3, [r3, #8]
   b733c:	9301      	str	r3, [sp, #4]
   b733e:	bd08      	pop	{r3, pc}
   b7340:	00030244 	.word	0x00030244

000b7344 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b7344:	b508      	push	{r3, lr}
   b7346:	4b02      	ldr	r3, [pc, #8]	; (b7350 <spark_cloud_flag_connected+0xc>)
   b7348:	681b      	ldr	r3, [r3, #0]
   b734a:	695b      	ldr	r3, [r3, #20]
   b734c:	9301      	str	r3, [sp, #4]
   b734e:	bd08      	pop	{r3, pc}
   b7350:	00030244 	.word	0x00030244

000b7354 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b7354:	b508      	push	{r3, lr}
   b7356:	4b02      	ldr	r3, [pc, #8]	; (b7360 <spark_sync_time+0xc>)
   b7358:	681b      	ldr	r3, [r3, #0]
   b735a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b735c:	9301      	str	r3, [sp, #4]
   b735e:	bd08      	pop	{r3, pc}
   b7360:	00030244 	.word	0x00030244

000b7364 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b7364:	b508      	push	{r3, lr}
   b7366:	4b02      	ldr	r3, [pc, #8]	; (b7370 <spark_sync_time_pending+0xc>)
   b7368:	681b      	ldr	r3, [r3, #0]
   b736a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b736c:	9301      	str	r3, [sp, #4]
   b736e:	bd08      	pop	{r3, pc}
   b7370:	00030244 	.word	0x00030244

000b7374 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7374:	b508      	push	{r3, lr}
   b7376:	4b02      	ldr	r3, [pc, #8]	; (b7380 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7378:	681b      	ldr	r3, [r3, #0]
   b737a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b737c:	9301      	str	r3, [sp, #4]
   b737e:	bd08      	pop	{r3, pc}
   b7380:	00030244 	.word	0x00030244

000b7384 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7384:	b508      	push	{r3, lr}
   b7386:	4b02      	ldr	r3, [pc, #8]	; (b7390 <malloc+0xc>)
   b7388:	681b      	ldr	r3, [r3, #0]
   b738a:	681b      	ldr	r3, [r3, #0]
   b738c:	9301      	str	r3, [sp, #4]
   b738e:	bd08      	pop	{r3, pc}
   b7390:	0003021c 	.word	0x0003021c

000b7394 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7394:	b508      	push	{r3, lr}
   b7396:	4b02      	ldr	r3, [pc, #8]	; (b73a0 <free+0xc>)
   b7398:	681b      	ldr	r3, [r3, #0]
   b739a:	685b      	ldr	r3, [r3, #4]
   b739c:	9301      	str	r3, [sp, #4]
   b739e:	bd08      	pop	{r3, pc}
   b73a0:	0003021c 	.word	0x0003021c

000b73a4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b73a4:	b508      	push	{r3, lr}
   b73a6:	4b02      	ldr	r3, [pc, #8]	; (b73b0 <realloc+0xc>)
   b73a8:	681b      	ldr	r3, [r3, #0]
   b73aa:	689b      	ldr	r3, [r3, #8]
   b73ac:	9301      	str	r3, [sp, #4]
   b73ae:	bd08      	pop	{r3, pc}
   b73b0:	0003021c 	.word	0x0003021c

000b73b4 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b73b4:	b508      	push	{r3, lr}
   b73b6:	4b02      	ldr	r3, [pc, #8]	; (b73c0 <siprintf+0xc>)
   b73b8:	681b      	ldr	r3, [r3, #0]
   b73ba:	691b      	ldr	r3, [r3, #16]
   b73bc:	9301      	str	r3, [sp, #4]
   b73be:	bd08      	pop	{r3, pc}
   b73c0:	0003021c 	.word	0x0003021c

000b73c4 <vsnprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b73c4:	b508      	push	{r3, lr}
   b73c6:	4b02      	ldr	r3, [pc, #8]	; (b73d0 <vsnprintf+0xc>)
   b73c8:	681b      	ldr	r3, [r3, #0]
   b73ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b73cc:	9301      	str	r3, [sp, #4]
   b73ce:	bd08      	pop	{r3, pc}
   b73d0:	0003021c 	.word	0x0003021c

000b73d4 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b73d4:	b508      	push	{r3, lr}
   b73d6:	4b02      	ldr	r3, [pc, #8]	; (b73e0 <__assert_func+0xc>)
   b73d8:	681b      	ldr	r3, [r3, #0]
   b73da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b73dc:	9301      	str	r3, [sp, #4]
   b73de:	bd08      	pop	{r3, pc}
   b73e0:	0003021c 	.word	0x0003021c

000b73e4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b73e4:	b508      	push	{r3, lr}
   b73e6:	4b02      	ldr	r3, [pc, #8]	; (b73f0 <newlib_impure_ptr_callback+0xc>)
   b73e8:	681b      	ldr	r3, [r3, #0]
   b73ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b73ec:	9301      	str	r3, [sp, #4]
   b73ee:	bd08      	pop	{r3, pc}
   b73f0:	0003021c 	.word	0x0003021c

000b73f4 <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b73f4:	b508      	push	{r3, lr}
   b73f6:	4b02      	ldr	r3, [pc, #8]	; (b7400 <localtime_r+0xc>)
   b73f8:	681b      	ldr	r3, [r3, #0]
   b73fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b73fc:	9301      	str	r3, [sp, #4]
   b73fe:	bd08      	pop	{r3, pc}
   b7400:	0003021c 	.word	0x0003021c

000b7404 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7404:	2200      	movs	r2, #0
   b7406:	6840      	ldr	r0, [r0, #4]
   b7408:	4611      	mov	r1, r2
   b740a:	f7ff bf6b 	b.w	b72e4 <network_listening>

000b740e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b740e:	2200      	movs	r2, #0
   b7410:	6840      	ldr	r0, [r0, #4]
   b7412:	4611      	mov	r1, r2
   b7414:	f7ff bf76 	b.w	b7304 <network_get_listen_timeout>

000b7418 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7418:	6840      	ldr	r0, [r0, #4]
   b741a:	2200      	movs	r2, #0
   b741c:	f7ff bf6a 	b.w	b72f4 <network_set_listen_timeout>

000b7420 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7420:	6840      	ldr	r0, [r0, #4]
   b7422:	2200      	movs	r2, #0
   b7424:	f081 0101 	eor.w	r1, r1, #1
   b7428:	f7ff bf54 	b.w	b72d4 <network_listen>

000b742c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b742c:	2300      	movs	r3, #0
   b742e:	6840      	ldr	r0, [r0, #4]
   b7430:	461a      	mov	r2, r3
   b7432:	4619      	mov	r1, r3
   b7434:	f7ff bf46 	b.w	b72c4 <network_off>

000b7438 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7438:	2300      	movs	r3, #0
   b743a:	6840      	ldr	r0, [r0, #4]
   b743c:	461a      	mov	r2, r3
   b743e:	4619      	mov	r1, r3
   b7440:	f7ff bf38 	b.w	b72b4 <network_on>

000b7444 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7444:	2200      	movs	r2, #0
   b7446:	6840      	ldr	r0, [r0, #4]
   b7448:	4611      	mov	r1, r2
   b744a:	f7ff bf2b 	b.w	b72a4 <network_ready>

000b744e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b744e:	2200      	movs	r2, #0
   b7450:	6840      	ldr	r0, [r0, #4]
   b7452:	4611      	mov	r1, r2
   b7454:	f7ff bf16 	b.w	b7284 <network_connecting>

000b7458 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7458:	6840      	ldr	r0, [r0, #4]
   b745a:	2200      	movs	r2, #0
   b745c:	2102      	movs	r1, #2
   b745e:	f7ff bf19 	b.w	b7294 <network_disconnect>

000b7462 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7462:	2300      	movs	r3, #0
   b7464:	6840      	ldr	r0, [r0, #4]
   b7466:	461a      	mov	r2, r3
   b7468:	f7ff bf04 	b.w	b7274 <network_connect>

000b746c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b746c:	4b02      	ldr	r3, [pc, #8]	; (b7478 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b746e:	2203      	movs	r2, #3
   b7470:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7472:	4a02      	ldr	r2, [pc, #8]	; (b747c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7474:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7476:	4770      	bx	lr
   b7478:	2003e6b0 	.word	0x2003e6b0
   b747c:	000b9578 	.word	0x000b9578

000b7480 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7480:	2100      	movs	r1, #0
   b7482:	f7ff be73 	b.w	b716c <hal_spi_release>

000b7486 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b7486:	2100      	movs	r1, #0
   b7488:	f7ff be68 	b.w	b715c <hal_spi_acquire>

000b748c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b748c:	b510      	push	{r4, lr}
   b748e:	4604      	mov	r4, r0
   b7490:	4608      	mov	r0, r1
{
    _spi = spi;
   b7492:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7494:	f7ff fe32 	bl	b70fc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7498:	2300      	movs	r3, #0
   b749a:	6063      	str	r3, [r4, #4]
}
   b749c:	4620      	mov	r0, r4
   b749e:	bd10      	pop	{r4, pc}

000b74a0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b74a0:	b513      	push	{r0, r1, r4, lr}
   b74a2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b74a4:	7800      	ldrb	r0, [r0, #0]
   b74a6:	f7ff ffee 	bl	b7486 <_ZN8SPIClass4lockEv.isra.0>
   b74aa:	b958      	cbnz	r0, b74c4 <_ZN8SPIClass5beginEv+0x24>
   b74ac:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b74ae:	9001      	str	r0, [sp, #4]
   b74b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b74b4:	f7ff fdfa 	bl	b70ac <hal_spi_begin>
        unlock();
   b74b8:	9801      	ldr	r0, [sp, #4]
    }
}
   b74ba:	b002      	add	sp, #8
   b74bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b74c0:	f7ff bfde 	b.w	b7480 <_ZN8SPIClass6unlockEv.isra.0>
   b74c4:	b002      	add	sp, #8
   b74c6:	bd10      	pop	{r4, pc}

000b74c8 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b74c8:	b513      	push	{r0, r1, r4, lr}
   b74ca:	4604      	mov	r4, r0
    if (!lock())
   b74cc:	7800      	ldrb	r0, [r0, #0]
{
   b74ce:	9101      	str	r1, [sp, #4]
    if (!lock())
   b74d0:	f7ff ffd9 	bl	b7486 <_ZN8SPIClass4lockEv.isra.0>
   b74d4:	9901      	ldr	r1, [sp, #4]
   b74d6:	b948      	cbnz	r0, b74ec <_ZN8SPIClass11setBitOrderEh+0x24>
   b74d8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b74da:	9001      	str	r0, [sp, #4]
   b74dc:	f7ff fdee 	bl	b70bc <hal_spi_set_bit_order>
        unlock();
   b74e0:	9801      	ldr	r0, [sp, #4]
    }
}
   b74e2:	b002      	add	sp, #8
   b74e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b74e8:	f7ff bfca 	b.w	b7480 <_ZN8SPIClass6unlockEv.isra.0>
   b74ec:	b002      	add	sp, #8
   b74ee:	bd10      	pop	{r4, pc}

000b74f0 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b74f0:	b513      	push	{r0, r1, r4, lr}
   b74f2:	4604      	mov	r4, r0
    if (!lock())
   b74f4:	7800      	ldrb	r0, [r0, #0]
{
   b74f6:	9101      	str	r1, [sp, #4]
    if (!lock())
   b74f8:	f7ff ffc5 	bl	b7486 <_ZN8SPIClass4lockEv.isra.0>
   b74fc:	9901      	ldr	r1, [sp, #4]
   b74fe:	b948      	cbnz	r0, b7514 <_ZN8SPIClass11setDataModeEh+0x24>
   b7500:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b7502:	9001      	str	r0, [sp, #4]
   b7504:	f7ff fde2 	bl	b70cc <hal_spi_set_data_mode>
        unlock();
   b7508:	9801      	ldr	r0, [sp, #4]
    }
}
   b750a:	b002      	add	sp, #8
   b750c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7510:	f7ff bfb6 	b.w	b7480 <_ZN8SPIClass6unlockEv.isra.0>
   b7514:	b002      	add	sp, #8
   b7516:	bd10      	pop	{r4, pc}

000b7518 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7518:	7800      	ldrb	r0, [r0, #0]
   b751a:	f7ff bfb1 	b.w	b7480 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b7520 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7520:	0840      	lsrs	r0, r0, #1
{
   b7522:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7524:	6018      	str	r0, [r3, #0]
   b7526:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7528:	6818      	ldr	r0, [r3, #0]
   b752a:	4288      	cmp	r0, r1
   b752c:	b2e5      	uxtb	r5, r4
   b752e:	d906      	bls.n	b753e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7530:	3401      	adds	r4, #1
   b7532:	2c08      	cmp	r4, #8
   b7534:	d002      	beq.n	b753c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7536:	0840      	lsrs	r0, r0, #1
   b7538:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b753a:	e7f5      	b.n	b7528 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b753c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b753e:	4b02      	ldr	r3, [pc, #8]	; (b7548 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7540:	5d5b      	ldrb	r3, [r3, r5]
   b7542:	7013      	strb	r3, [r2, #0]
}
   b7544:	bd30      	pop	{r4, r5, pc}
   b7546:	bf00      	nop
   b7548:	000b95ac 	.word	0x000b95ac

000b754c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b754c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7550:	4606      	mov	r6, r0
   b7552:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7554:	7800      	ldrb	r0, [r0, #0]
{
   b7556:	460c      	mov	r4, r1
    CHECK(lock());
   b7558:	f7ff ff95 	bl	b7486 <_ZN8SPIClass4lockEv.isra.0>
   b755c:	2800      	cmp	r0, #0
   b755e:	db1b      	blt.n	b7598 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7560:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7562:	2214      	movs	r2, #20
   b7564:	2100      	movs	r1, #0
   b7566:	a809      	add	r0, sp, #36	; 0x24
   b7568:	f001 fbb6 	bl	b8cd8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b756c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b756e:	2200      	movs	r2, #0
   b7570:	a909      	add	r1, sp, #36	; 0x24
   b7572:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7574:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7578:	f7ff fdd0 	bl	b711c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b757c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7580:	b113      	cbz	r3, b7588 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b7582:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b7586:	b155      	cbz	r5, b759e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7588:	2700      	movs	r7, #0
   b758a:	46b9      	mov	r9, r7
   b758c:	46b8      	mov	r8, r7
   b758e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7590:	7923      	ldrb	r3, [r4, #4]
   b7592:	b15d      	cbz	r5, b75ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7594:	b1c3      	cbz	r3, b75c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b7596:	2000      	movs	r0, #0
}
   b7598:	b00f      	add	sp, #60	; 0x3c
   b759a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b759e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b75a2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b75a6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b75aa:	e7f1      	b.n	b7590 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b75ac:	2b00      	cmp	r3, #0
   b75ae:	d135      	bne.n	b761c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b75b0:	68a3      	ldr	r3, [r4, #8]
   b75b2:	4543      	cmp	r3, r8
   b75b4:	d108      	bne.n	b75c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b75b6:	f88d 9020 	strb.w	r9, [sp, #32]
   b75ba:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b75be:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b75c2:	89a3      	ldrh	r3, [r4, #12]
   b75c4:	429a      	cmp	r2, r3
   b75c6:	d0e6      	beq.n	b7596 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b75c8:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b75ca:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b75cc:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b75d0:	980a      	ldr	r0, [sp, #40]	; 0x28
   b75d2:	ab04      	add	r3, sp, #16
   b75d4:	f10d 020f 	add.w	r2, sp, #15
   b75d8:	f7ff ffa2 	bl	b7520 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b75dc:	7921      	ldrb	r1, [r4, #4]
   b75de:	b985      	cbnz	r5, b7602 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b75e0:	b989      	cbnz	r1, b7606 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b75e2:	68a3      	ldr	r3, [r4, #8]
   b75e4:	4543      	cmp	r3, r8
   b75e6:	d30e      	bcc.n	b7606 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b75e8:	f88d 9020 	strb.w	r9, [sp, #32]
   b75ec:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b75f0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b75f4:	89a3      	ldrh	r3, [r4, #12]
   b75f6:	429a      	cmp	r2, r3
   b75f8:	d105      	bne.n	b7606 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b75fa:	9b04      	ldr	r3, [sp, #16]
   b75fc:	4543      	cmp	r3, r8
   b75fe:	d102      	bne.n	b7606 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7600:	e7c9      	b.n	b7596 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b7602:	2900      	cmp	r1, #0
   b7604:	d1f9      	bne.n	b75fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7606:	2300      	movs	r3, #0
   b7608:	9301      	str	r3, [sp, #4]
   b760a:	7b63      	ldrb	r3, [r4, #13]
   b760c:	9300      	str	r3, [sp, #0]
   b760e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b7612:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7614:	7830      	ldrb	r0, [r6, #0]
   b7616:	f7ff fd99 	bl	b714c <hal_spi_set_settings>
   b761a:	e7bc      	b.n	b7596 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b761c:	e9cd 5500 	strd	r5, r5, [sp]
   b7620:	462b      	mov	r3, r5
   b7622:	462a      	mov	r2, r5
   b7624:	2101      	movs	r1, #1
   b7626:	e7f5      	b.n	b7614 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7628 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b7628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b762c:	b088      	sub	sp, #32
    unsigned clock = 0;
   b762e:	2300      	movs	r3, #0
{
   b7630:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b7632:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b7634:	9302      	str	r3, [sp, #8]
{
   b7636:	460e      	mov	r6, r1
   b7638:	4617      	mov	r7, r2
    if (!lock())
   b763a:	f7ff ff24 	bl	b7486 <_ZN8SPIClass4lockEv.isra.0>
   b763e:	4605      	mov	r5, r0
   b7640:	bb00      	cbnz	r0, b7684 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b7642:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7646:	4601      	mov	r1, r0
   b7648:	2214      	movs	r2, #20
   b764a:	a803      	add	r0, sp, #12
   b764c:	f001 fb44 	bl	b8cd8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7650:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7652:	462a      	mov	r2, r5
   b7654:	a903      	add	r1, sp, #12
   b7656:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b7658:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b765c:	f7ff fd5e 	bl	b711c <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b7660:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b7662:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b7666:	ab02      	add	r3, sp, #8
   b7668:	f10d 0207 	add.w	r2, sp, #7
   b766c:	fb07 f106 	mul.w	r1, r7, r6
   b7670:	f7ff ff56 	bl	b7520 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b7674:	7820      	ldrb	r0, [r4, #0]
   b7676:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b767a:	f7ff fd2f 	bl	b70dc <hal_spi_set_clock_divider>
        unlock();
   b767e:	7820      	ldrb	r0, [r4, #0]
   b7680:	f7ff fefe 	bl	b7480 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b7684:	9802      	ldr	r0, [sp, #8]
   b7686:	b008      	add	sp, #32
   b7688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b768c <_ZN8SPIClass15setClockDividerEh>:
{
   b768c:	b538      	push	{r3, r4, r5, lr}
   b768e:	4604      	mov	r4, r0
    if (!lock())
   b7690:	7800      	ldrb	r0, [r0, #0]
{
   b7692:	460d      	mov	r5, r1
    if (!lock())
   b7694:	f7ff fef7 	bl	b7486 <_ZN8SPIClass4lockEv.isra.0>
   b7698:	4603      	mov	r3, r0
   b769a:	b9d0      	cbnz	r0, b76d2 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b769c:	6861      	ldr	r1, [r4, #4]
   b769e:	b199      	cbz	r1, b76c8 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b76a0:	4a0c      	ldr	r2, [pc, #48]	; (b76d4 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b76a2:	f812 0b01 	ldrb.w	r0, [r2], #1
   b76a6:	4285      	cmp	r5, r0
   b76a8:	d002      	beq.n	b76b0 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b76aa:	3301      	adds	r3, #1
   b76ac:	2b08      	cmp	r3, #8
   b76ae:	d1f8      	bne.n	b76a2 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b76b0:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b76b2:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b76b4:	2201      	movs	r2, #1
   b76b6:	40d9      	lsrs	r1, r3
   b76b8:	4620      	mov	r0, r4
   b76ba:	f7ff ffb5 	bl	b7628 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b76be:	7820      	ldrb	r0, [r4, #0]
}
   b76c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b76c4:	f7ff bedc 	b.w	b7480 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b76c8:	7820      	ldrb	r0, [r4, #0]
   b76ca:	4629      	mov	r1, r5
   b76cc:	f7ff fd06 	bl	b70dc <hal_spi_set_clock_divider>
   b76d0:	e7f5      	b.n	b76be <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b76d2:	bd38      	pop	{r3, r4, r5, pc}
   b76d4:	000b95ac 	.word	0x000b95ac

000b76d8 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b76d8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b76da:	7800      	ldrb	r0, [r0, #0]
   b76dc:	f7ff fd06 	bl	b70ec <hal_spi_transfer>
}
   b76e0:	b2c0      	uxtb	r0, r0
   b76e2:	bd08      	pop	{r3, pc}

000b76e4 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   b76e4:	b530      	push	{r4, r5, lr}
   b76e6:	b087      	sub	sp, #28
   b76e8:	4604      	mov	r4, r0
   b76ea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   b76ec:	9500      	str	r5, [sp, #0]
   b76ee:	7800      	ldrb	r0, [r0, #0]
   b76f0:	f7ff fd1c 	bl	b712c <hal_spi_transfer_dma>
    if (user_callback == NULL)
   b76f4:	b93d      	cbnz	r5, b7706 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   b76f6:	7820      	ldrb	r0, [r4, #0]
   b76f8:	a902      	add	r1, sp, #8
   b76fa:	f7ff fd1f 	bl	b713c <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   b76fe:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b7702:	07db      	lsls	r3, r3, #31
   b7704:	d4f7      	bmi.n	b76f6 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   b7706:	b007      	add	sp, #28
   b7708:	bd30      	pop	{r4, r5, pc}
	...

000b770c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b770c:	4b05      	ldr	r3, [pc, #20]	; (b7724 <_GLOBAL__sub_I_System+0x18>)
   b770e:	2202      	movs	r2, #2
   b7710:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7712:	4b05      	ldr	r3, [pc, #20]	; (b7728 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7714:	4a05      	ldr	r2, [pc, #20]	; (b772c <_GLOBAL__sub_I_System+0x20>)
   b7716:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7718:	2000      	movs	r0, #0
   b771a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b771e:	f7ff bd7d 	b.w	b721c <set_system_mode>
   b7722:	bf00      	nop
   b7724:	2003e6c4 	.word	0x2003e6c4
   b7728:	2003e6b8 	.word	0x2003e6b8
   b772c:	ffff0000 	.word	0xffff0000

000b7730 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b7730:	b510      	push	{r4, lr}
   b7732:	4604      	mov	r4, r0
{
	free(buffer);
   b7734:	6800      	ldr	r0, [r0, #0]
   b7736:	f7ff fe2d 	bl	b7394 <free>
}
   b773a:	4620      	mov	r0, r4
   b773c:	bd10      	pop	{r4, pc}

000b773e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b773e:	b510      	push	{r4, lr}
   b7740:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7742:	6800      	ldr	r0, [r0, #0]
   b7744:	b108      	cbz	r0, b774a <_ZN6String10invalidateEv+0xc>
   b7746:	f7ff fe25 	bl	b7394 <free>
	buffer = NULL;
   b774a:	2300      	movs	r3, #0
	capacity = len = 0;
   b774c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7750:	6023      	str	r3, [r4, #0]
}
   b7752:	bd10      	pop	{r4, pc}

000b7754 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7754:	b538      	push	{r3, r4, r5, lr}
   b7756:	4604      	mov	r4, r0
   b7758:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b775a:	6800      	ldr	r0, [r0, #0]
   b775c:	3101      	adds	r1, #1
   b775e:	f7ff fe21 	bl	b73a4 <realloc>
	if (newbuffer) {
   b7762:	b110      	cbz	r0, b776a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b7764:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7768:	2001      	movs	r0, #1
	}
	return 0;
}
   b776a:	bd38      	pop	{r3, r4, r5, pc}

000b776c <_ZN6String7reserveEj>:
{
   b776c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b776e:	6803      	ldr	r3, [r0, #0]
{
   b7770:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7772:	b123      	cbz	r3, b777e <_ZN6String7reserveEj+0x12>
   b7774:	6843      	ldr	r3, [r0, #4]
   b7776:	428b      	cmp	r3, r1
   b7778:	d301      	bcc.n	b777e <_ZN6String7reserveEj+0x12>
   b777a:	2001      	movs	r0, #1
}
   b777c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b777e:	4620      	mov	r0, r4
   b7780:	f7ff ffe8 	bl	b7754 <_ZN6String12changeBufferEj>
   b7784:	2800      	cmp	r0, #0
   b7786:	d0f9      	beq.n	b777c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7788:	68a3      	ldr	r3, [r4, #8]
   b778a:	2b00      	cmp	r3, #0
   b778c:	d1f5      	bne.n	b777a <_ZN6String7reserveEj+0xe>
   b778e:	6822      	ldr	r2, [r4, #0]
   b7790:	7013      	strb	r3, [r2, #0]
   b7792:	e7f2      	b.n	b777a <_ZN6String7reserveEj+0xe>

000b7794 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7794:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7796:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7798:	4611      	mov	r1, r2
   b779a:	9201      	str	r2, [sp, #4]
{
   b779c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b779e:	f7ff ffe5 	bl	b776c <_ZN6String7reserveEj>
   b77a2:	9a01      	ldr	r2, [sp, #4]
   b77a4:	b928      	cbnz	r0, b77b2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b77a6:	4620      	mov	r0, r4
   b77a8:	f7ff ffc9 	bl	b773e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b77ac:	4620      	mov	r0, r4
   b77ae:	b003      	add	sp, #12
   b77b0:	bd30      	pop	{r4, r5, pc}
	len = length;
   b77b2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b77b4:	4629      	mov	r1, r5
   b77b6:	6820      	ldr	r0, [r4, #0]
   b77b8:	f001 fa80 	bl	b8cbc <memcpy>
	buffer[len] = 0;
   b77bc:	6822      	ldr	r2, [r4, #0]
   b77be:	68a3      	ldr	r3, [r4, #8]
   b77c0:	2100      	movs	r1, #0
   b77c2:	54d1      	strb	r1, [r2, r3]
	return *this;
   b77c4:	e7f2      	b.n	b77ac <_ZN6String4copyEPKcj+0x18>

000b77c6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b77c6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b77c8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b77ca:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b77ce:	4604      	mov	r4, r0
	len = 0;
   b77d0:	6083      	str	r3, [r0, #8]
	flags = 0;
   b77d2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b77d4:	b141      	cbz	r1, b77e8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b77d6:	4608      	mov	r0, r1
   b77d8:	9101      	str	r1, [sp, #4]
   b77da:	f001 fabb 	bl	b8d54 <strlen>
   b77de:	9901      	ldr	r1, [sp, #4]
   b77e0:	4602      	mov	r2, r0
   b77e2:	4620      	mov	r0, r4
   b77e4:	f7ff ffd6 	bl	b7794 <_ZN6String4copyEPKcj>
}
   b77e8:	4620      	mov	r0, r4
   b77ea:	b002      	add	sp, #8
   b77ec:	bd10      	pop	{r4, pc}

000b77ee <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b77ee:	b538      	push	{r3, r4, r5, lr}
   b77f0:	4605      	mov	r5, r0
	if (buffer) {
   b77f2:	6800      	ldr	r0, [r0, #0]
{
   b77f4:	460c      	mov	r4, r1
	if (buffer) {
   b77f6:	b168      	cbz	r0, b7814 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b77f8:	686a      	ldr	r2, [r5, #4]
   b77fa:	688b      	ldr	r3, [r1, #8]
   b77fc:	429a      	cmp	r2, r3
   b77fe:	d307      	bcc.n	b7810 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b7800:	6809      	ldr	r1, [r1, #0]
   b7802:	f001 fa9f 	bl	b8d44 <strcpy>
			len = rhs.len;
   b7806:	68a3      	ldr	r3, [r4, #8]
   b7808:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b780a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b780c:	60a3      	str	r3, [r4, #8]
}
   b780e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b7810:	f7ff fdc0 	bl	b7394 <free>
	buffer = rhs.buffer;
   b7814:	6823      	ldr	r3, [r4, #0]
   b7816:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b7818:	6863      	ldr	r3, [r4, #4]
   b781a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b781c:	68a3      	ldr	r3, [r4, #8]
   b781e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b7820:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b7822:	e9c4 3300 	strd	r3, r3, [r4]
   b7826:	e7f1      	b.n	b780c <_ZN6String4moveERS_+0x1e>

000b7828 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b7828:	4288      	cmp	r0, r1
{
   b782a:	b510      	push	{r4, lr}
   b782c:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b782e:	d001      	beq.n	b7834 <_ZN6StringaSEOS_+0xc>
   b7830:	f7ff ffdd 	bl	b77ee <_ZN6String4moveERS_>
	return *this;
}
   b7834:	4620      	mov	r0, r4
   b7836:	bd10      	pop	{r4, pc}

000b7838 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b7838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b783a:	429a      	cmp	r2, r3
{
   b783c:	460f      	mov	r7, r1
   b783e:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b7840:	490c      	ldr	r1, [pc, #48]	; (b7874 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b7842:	bf88      	it	hi
   b7844:	4613      	movhi	r3, r2
{
   b7846:	4614      	mov	r4, r2
   b7848:	4606      	mov	r6, r0
	if (left > right) {
   b784a:	bf84      	itt	hi
   b784c:	462c      	movhi	r4, r5
   b784e:	461d      	movhi	r5, r3
	String out;
   b7850:	f7ff ffb9 	bl	b77c6 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b7854:	68bb      	ldr	r3, [r7, #8]
   b7856:	42a3      	cmp	r3, r4
   b7858:	d30a      	bcc.n	b7870 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b785a:	6839      	ldr	r1, [r7, #0]
   b785c:	42ab      	cmp	r3, r5
   b785e:	bf94      	ite	ls
   b7860:	ebc4 0203 	rsbls	r2, r4, r3
   b7864:	ebc4 0205 	rsbhi	r2, r4, r5
   b7868:	4421      	add	r1, r4
   b786a:	4630      	mov	r0, r6
   b786c:	f7ff ff92 	bl	b7794 <_ZN6String4copyEPKcj>
	return out;
}
   b7870:	4630      	mov	r0, r6
   b7872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7874:	000b8f32 	.word	0x000b8f32

000b7878 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b7878:	4802      	ldr	r0, [pc, #8]	; (b7884 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b787a:	2300      	movs	r3, #0
   b787c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b787e:	f7ff bb6d 	b.w	b6f5c <os_mutex_recursive_create>
   b7882:	bf00      	nop
   b7884:	2003e6c8 	.word	0x2003e6c8

000b7888 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b788a:	4606      	mov	r6, r0
   b788c:	460d      	mov	r5, r1
  size_t n = 0;
   b788e:	188f      	adds	r7, r1, r2
   b7890:	2400      	movs	r4, #0
  while (size--) {
   b7892:	42bd      	cmp	r5, r7
   b7894:	d00c      	beq.n	b78b0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7896:	6833      	ldr	r3, [r6, #0]
   b7898:	f815 1b01 	ldrb.w	r1, [r5], #1
   b789c:	689b      	ldr	r3, [r3, #8]
   b789e:	4630      	mov	r0, r6
   b78a0:	4798      	blx	r3
     if (chunk>=0)
   b78a2:	1e03      	subs	r3, r0, #0
   b78a4:	db01      	blt.n	b78aa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b78a6:	441c      	add	r4, r3
  while (size--) {
   b78a8:	e7f3      	b.n	b7892 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b78aa:	2c00      	cmp	r4, #0
   b78ac:	bf08      	it	eq
   b78ae:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b78b0:	4620      	mov	r0, r4
   b78b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b78b4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b78b4:	b508      	push	{r3, lr}
  return write(str);
   b78b6:	f7fe fe59 	bl	b656c <_ZN5Print5writeEPKc>
}
   b78ba:	bd08      	pop	{r3, pc}

000b78bc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b78bc:	6803      	ldr	r3, [r0, #0]
   b78be:	689b      	ldr	r3, [r3, #8]
   b78c0:	4718      	bx	r3

000b78c2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b78c2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b78c4:	210d      	movs	r1, #13
{
   b78c6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b78c8:	f7ff fff8 	bl	b78bc <_ZN5Print5printEc>
  n += print('\n');
   b78cc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b78ce:	4604      	mov	r4, r0
  n += print('\n');
   b78d0:	4628      	mov	r0, r5
   b78d2:	f7ff fff3 	bl	b78bc <_ZN5Print5printEc>
  return n;
}
   b78d6:	4420      	add	r0, r4
   b78d8:	bd38      	pop	{r3, r4, r5, pc}

000b78da <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b78da:	b530      	push	{r4, r5, lr}
   b78dc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b78de:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b78e0:	2a01      	cmp	r2, #1
  *str = '\0';
   b78e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b78e6:	bf98      	it	ls
   b78e8:	220a      	movls	r2, #10
   b78ea:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b78ec:	460d      	mov	r5, r1
   b78ee:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b78f2:	fb01 5312 	mls	r3, r1, r2, r5
   b78f6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b78fa:	2b09      	cmp	r3, #9
   b78fc:	bf94      	ite	ls
   b78fe:	3330      	addls	r3, #48	; 0x30
   b7900:	3337      	addhi	r3, #55	; 0x37
   b7902:	b2db      	uxtb	r3, r3
  } while(n);
   b7904:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7906:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b790a:	d9ef      	bls.n	b78ec <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b790c:	4621      	mov	r1, r4
   b790e:	f7fe fe2d 	bl	b656c <_ZN5Print5writeEPKc>
}
   b7912:	b00b      	add	sp, #44	; 0x2c
   b7914:	bd30      	pop	{r4, r5, pc}

000b7916 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b791a:	b086      	sub	sp, #24
   b791c:	af00      	add	r7, sp, #0
   b791e:	4605      	mov	r5, r0
   b7920:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7922:	1d38      	adds	r0, r7, #4
   b7924:	2114      	movs	r1, #20
{
   b7926:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7928:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b792a:	f7ff fd4b 	bl	b73c4 <vsnprintf>

    if (n<bufsize)
   b792e:	2813      	cmp	r0, #19
   b7930:	d80e      	bhi.n	b7950 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7932:	1d39      	adds	r1, r7, #4
   b7934:	4628      	mov	r0, r5
   b7936:	f7fe fe19 	bl	b656c <_ZN5Print5writeEPKc>
   b793a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b793c:	b11e      	cbz	r6, b7946 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b793e:	4628      	mov	r0, r5
   b7940:	f7ff ffbf 	bl	b78c2 <_ZN5Print7printlnEv>
   b7944:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b7946:	4620      	mov	r0, r4
   b7948:	3718      	adds	r7, #24
   b794a:	46bd      	mov	sp, r7
   b794c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7950:	f100 0308 	add.w	r3, r0, #8
   b7954:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7958:	46e8      	mov	r8, sp
        char bigger[n+1];
   b795a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b795e:	4622      	mov	r2, r4
   b7960:	1c41      	adds	r1, r0, #1
   b7962:	683b      	ldr	r3, [r7, #0]
   b7964:	4668      	mov	r0, sp
   b7966:	f7ff fd2d 	bl	b73c4 <vsnprintf>
  return write(str);
   b796a:	4669      	mov	r1, sp
   b796c:	4628      	mov	r0, r5
   b796e:	f7fe fdfd 	bl	b656c <_ZN5Print5writeEPKc>
   b7972:	4604      	mov	r4, r0
   b7974:	46c5      	mov	sp, r8
   b7976:	e7e1      	b.n	b793c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7978 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b7978:	2300      	movs	r3, #0
   b797a:	6840      	ldr	r0, [r0, #4]
   b797c:	461a      	mov	r2, r3
   b797e:	4619      	mov	r1, r3
   b7980:	f7ff bc98 	b.w	b72b4 <network_on>

000b7984 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7984:	4b01      	ldr	r3, [pc, #4]	; (b798c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7986:	4a02      	ldr	r2, [pc, #8]	; (b7990 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7988:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b798a:	4770      	bx	lr
   b798c:	2003e6cc 	.word	0x2003e6cc
   b7990:	000b95b4 	.word	0x000b95b4

000b7994 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b7994:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7996:	2000      	movs	r0, #0
   b7998:	f7ff fce4 	bl	b7364 <spark_sync_time_pending>
   b799c:	b128      	cbz	r0, b79aa <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b799e:	f7ff fcd1 	bl	b7344 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b79a2:	f080 0001 	eor.w	r0, r0, #1
   b79a6:	b2c0      	uxtb	r0, r0
    }
   b79a8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b79aa:	2001      	movs	r0, #1
   b79ac:	e7fc      	b.n	b79a8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b79b0 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b79b0:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   b79b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b79b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b79bc:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b79be:	d411      	bmi.n	b79e4 <_ZN9TimeClass4zoneEf+0x34>
   b79c0:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   b79c4:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b79c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b79cc:	dc0a      	bgt.n	b79e4 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   b79ce:	eddf 7a06 	vldr	s15, [pc, #24]	; b79e8 <_ZN9TimeClass4zoneEf+0x38>
   b79d2:	ee60 7a27 	vmul.f32	s15, s0, s15
   b79d6:	ee17 0a90 	vmov	r0, s15
   b79da:	f001 f8ff 	bl	b8bdc <__aeabi_f2lz>
   b79de:	4b03      	ldr	r3, [pc, #12]	; (b79ec <_ZN9TimeClass4zoneEf+0x3c>)
   b79e0:	e9c3 0100 	strd	r0, r1, [r3]
}
   b79e4:	bd08      	pop	{r3, pc}
   b79e6:	bf00      	nop
   b79e8:	45610000 	.word	0x45610000
   b79ec:	2003e6e0 	.word	0x2003e6e0

000b79f0 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b79f0:	b530      	push	{r4, r5, lr}
   b79f2:	b093      	sub	sp, #76	; 0x4c
   b79f4:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b79f8:	4b19      	ldr	r3, [pc, #100]	; (b7a60 <_ZN9TimeClass7timeStrEx+0x70>)
{
   b79fa:	4604      	mov	r4, r0
    t += time_zone_cache;
   b79fc:	e9d3 1000 	ldrd	r1, r0, [r3]
   b7a00:	9b01      	ldr	r3, [sp, #4]
   b7a02:	1852      	adds	r2, r2, r1
   b7a04:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b7a08:	4816      	ldr	r0, [pc, #88]	; (b7a64 <_ZN9TimeClass7timeStrEx+0x74>)
   b7a0a:	e9d0 1000 	ldrd	r1, r0, [r0]
   b7a0e:	1852      	adds	r2, r2, r1
   b7a10:	eb43 0300 	adc.w	r3, r3, r0
   b7a14:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b7a18:	2224      	movs	r2, #36	; 0x24
   b7a1a:	eb0d 0002 	add.w	r0, sp, r2
   b7a1e:	2100      	movs	r1, #0
   b7a20:	f001 f95a 	bl	b8cd8 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b7a24:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b7a26:	a909      	add	r1, sp, #36	; 0x24
   b7a28:	4668      	mov	r0, sp
   b7a2a:	f7ff fce3 	bl	b73f4 <localtime_r>
    char ascstr[26] = {};
   b7a2e:	2216      	movs	r2, #22
   b7a30:	4629      	mov	r1, r5
   b7a32:	a803      	add	r0, sp, #12
   b7a34:	9502      	str	r5, [sp, #8]
   b7a36:	f001 f94f 	bl	b8cd8 <memset>
    asctime_r(&calendar_time, ascstr);
   b7a3a:	a902      	add	r1, sp, #8
   b7a3c:	a809      	add	r0, sp, #36	; 0x24
   b7a3e:	f001 f901 	bl	b8c44 <asctime_r>
    int len = strlen(ascstr);
   b7a42:	a802      	add	r0, sp, #8
   b7a44:	f001 f986 	bl	b8d54 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b7a48:	ab12      	add	r3, sp, #72	; 0x48
   b7a4a:	4418      	add	r0, r3
    return String(ascstr);
   b7a4c:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b7a4e:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b7a52:	4620      	mov	r0, r4
   b7a54:	f7ff feb7 	bl	b77c6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b7a58:	4620      	mov	r0, r4
   b7a5a:	b013      	add	sp, #76	; 0x4c
   b7a5c:	bd30      	pop	{r4, r5, pc}
   b7a5e:	bf00      	nop
   b7a60:	2003e6e0 	.word	0x2003e6e0
   b7a64:	2003e6d8 	.word	0x2003e6d8

000b7a68 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b7a68:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b7a6a:	2000      	movs	r0, #0
   b7a6c:	f7ff fa66 	bl	b6f3c <hal_rtc_time_is_valid>
    if (rtcstate)
   b7a70:	4604      	mov	r4, r0
   b7a72:	b9a0      	cbnz	r0, b7a9e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b7a74:	f7ff fbca 	bl	b720c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b7a78:	2801      	cmp	r0, #1
   b7a7a:	d110      	bne.n	b7a9e <_ZN9TimeClass7isValidEv+0x36>
   b7a7c:	4620      	mov	r0, r4
   b7a7e:	f7ff fbdd 	bl	b723c <system_thread_get_state>
   b7a82:	b960      	cbnz	r0, b7a9e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b7a84:	f7ff ff86 	bl	b7994 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b7a88:	b910      	cbnz	r0, b7a90 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b7a8a:	f7ff fc53 	bl	b7334 <spark_process>
        while (_while() && !_condition()) {
   b7a8e:	e7f9      	b.n	b7a84 <_ZN9TimeClass7isValidEv+0x1c>
   b7a90:	f7ff ff80 	bl	b7994 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b7a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b7a98:	2000      	movs	r0, #0
   b7a9a:	f7ff ba4f 	b.w	b6f3c <hal_rtc_time_is_valid>
}
   b7a9e:	4620      	mov	r0, r4
   b7aa0:	bd10      	pop	{r4, pc}

000b7aa2 <_ZN9TimeClass3nowEv>:
{
   b7aa2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b7aa4:	f7ff ffe0 	bl	b7a68 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b7aa8:	2210      	movs	r2, #16
   b7aaa:	2100      	movs	r1, #0
   b7aac:	4668      	mov	r0, sp
   b7aae:	f001 f913 	bl	b8cd8 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b7ab2:	2100      	movs	r1, #0
   b7ab4:	4668      	mov	r0, sp
   b7ab6:	f7ff fa49 	bl	b6f4c <hal_rtc_get_time>
}
   b7aba:	9800      	ldr	r0, [sp, #0]
   b7abc:	b005      	add	sp, #20
   b7abe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7ac4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7ac4:	4b02      	ldr	r3, [pc, #8]	; (b7ad0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7ac6:	681a      	ldr	r2, [r3, #0]
   b7ac8:	4b02      	ldr	r3, [pc, #8]	; (b7ad4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7aca:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7acc:	4770      	bx	lr
   b7ace:	bf00      	nop
   b7ad0:	2003e0bc 	.word	0x2003e0bc
   b7ad4:	2003e6d0 	.word	0x2003e6d0

000b7ad8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7ad8:	2100      	movs	r1, #0
   b7ada:	f7ff bba7 	b.w	b722c <system_delay_ms>
	...

000b7ae0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b7ae0:	4b01      	ldr	r3, [pc, #4]	; (b7ae8 <_GLOBAL__sub_I_RGB+0x8>)
   b7ae2:	2200      	movs	r2, #0
   b7ae4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7ae6:	4770      	bx	lr
   b7ae8:	2003e6e8 	.word	0x2003e6e8

000b7aec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7aec:	4b01      	ldr	r3, [pc, #4]	; (b7af4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7aee:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7af0:	4770      	bx	lr
   b7af2:	bf00      	nop
   b7af4:	2003e0c0 	.word	0x2003e0c0

000b7af8 <serialEventRun>:
{
   b7af8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7afa:	4b0b      	ldr	r3, [pc, #44]	; (b7b28 <serialEventRun+0x30>)
   b7afc:	b143      	cbz	r3, b7b10 <serialEventRun+0x18>
   b7afe:	f000 f96d 	bl	b7ddc <_Z16_fetch_usbserialv>
   b7b02:	6803      	ldr	r3, [r0, #0]
   b7b04:	691b      	ldr	r3, [r3, #16]
   b7b06:	4798      	blx	r3
   b7b08:	2800      	cmp	r0, #0
   b7b0a:	dd01      	ble.n	b7b10 <serialEventRun+0x18>
        serialEvent();
   b7b0c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7b10:	4b06      	ldr	r3, [pc, #24]	; (b7b2c <serialEventRun+0x34>)
   b7b12:	b143      	cbz	r3, b7b26 <serialEventRun+0x2e>
   b7b14:	f000 fc12 	bl	b833c <_Z22__fetch_global_Serial1v>
   b7b18:	6803      	ldr	r3, [r0, #0]
   b7b1a:	691b      	ldr	r3, [r3, #16]
   b7b1c:	4798      	blx	r3
   b7b1e:	2800      	cmp	r0, #0
   b7b20:	dd01      	ble.n	b7b26 <serialEventRun+0x2e>
        serialEvent1();
   b7b22:	f3af 8000 	nop.w
}
   b7b26:	bd08      	pop	{r3, pc}
	...

000b7b30 <_post_loop>:
{
   b7b30:	b508      	push	{r3, lr}
	serialEventRun();
   b7b32:	f7ff ffe1 	bl	b7af8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7b36:	f7ff f9f9 	bl	b6f2c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7b3a:	4b01      	ldr	r3, [pc, #4]	; (b7b40 <_post_loop+0x10>)
   b7b3c:	6018      	str	r0, [r3, #0]
}
   b7b3e:	bd08      	pop	{r3, pc}
   b7b40:	2003e740 	.word	0x2003e740

000b7b44 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7b44:	4805      	ldr	r0, [pc, #20]	; (b7b5c <_Z33system_initialize_user_backup_ramv+0x18>)
   b7b46:	4a06      	ldr	r2, [pc, #24]	; (b7b60 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7b48:	4906      	ldr	r1, [pc, #24]	; (b7b64 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7b4a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7b4c:	1a12      	subs	r2, r2, r0
   b7b4e:	f001 f8b5 	bl	b8cbc <memcpy>
    __backup_sram_signature = signature;
   b7b52:	4b05      	ldr	r3, [pc, #20]	; (b7b68 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7b54:	4a05      	ldr	r2, [pc, #20]	; (b7b6c <_Z33system_initialize_user_backup_ramv+0x28>)
   b7b56:	601a      	str	r2, [r3, #0]
}
   b7b58:	bd08      	pop	{r3, pc}
   b7b5a:	bf00      	nop
   b7b5c:	2003f400 	.word	0x2003f400
   b7b60:	2003f404 	.word	0x2003f404
   b7b64:	000b9800 	.word	0x000b9800
   b7b68:	2003f400 	.word	0x2003f400
   b7b6c:	9a271c1e 	.word	0x9a271c1e

000b7b70 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7b70:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7b72:	2300      	movs	r3, #0
   b7b74:	9300      	str	r3, [sp, #0]
   b7b76:	461a      	mov	r2, r3
   b7b78:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7b7c:	f7ff fb70 	bl	b7260 <system_ctrl_set_result>
}
   b7b80:	b003      	add	sp, #12
   b7b82:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7b88 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7b88:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7b8a:	8843      	ldrh	r3, [r0, #2]
   b7b8c:	2b0a      	cmp	r3, #10
   b7b8e:	d008      	beq.n	b7ba2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7b90:	2b50      	cmp	r3, #80	; 0x50
   b7b92:	d10b      	bne.n	b7bac <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7b94:	4b09      	ldr	r3, [pc, #36]	; (b7bbc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7b96:	681b      	ldr	r3, [r3, #0]
   b7b98:	b14b      	cbz	r3, b7bae <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7b9a:	b003      	add	sp, #12
   b7b9c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7ba0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7ba2:	f7ff ffe5 	bl	b7b70 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7ba6:	b003      	add	sp, #12
   b7ba8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7bac:	2300      	movs	r3, #0
   b7bae:	9300      	str	r3, [sp, #0]
   b7bb0:	461a      	mov	r2, r3
   b7bb2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7bb6:	f7ff fb53 	bl	b7260 <system_ctrl_set_result>
}
   b7bba:	e7f4      	b.n	b7ba6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7bbc:	2003e6fc 	.word	0x2003e6fc

000b7bc0 <module_user_init_hook>:
{
   b7bc0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7bc2:	4812      	ldr	r0, [pc, #72]	; (b7c0c <module_user_init_hook+0x4c>)
   b7bc4:	2100      	movs	r1, #0
   b7bc6:	f7ff fc0d 	bl	b73e4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7bca:	4b11      	ldr	r3, [pc, #68]	; (b7c10 <module_user_init_hook+0x50>)
   b7bcc:	681a      	ldr	r2, [r3, #0]
   b7bce:	4b11      	ldr	r3, [pc, #68]	; (b7c14 <module_user_init_hook+0x54>)
   b7bd0:	429a      	cmp	r2, r3
   b7bd2:	4b11      	ldr	r3, [pc, #68]	; (b7c18 <module_user_init_hook+0x58>)
   b7bd4:	bf0c      	ite	eq
   b7bd6:	2201      	moveq	r2, #1
   b7bd8:	2200      	movne	r2, #0
   b7bda:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7bdc:	d001      	beq.n	b7be2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7bde:	f7ff ffb1 	bl	b7b44 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7be2:	f7ff f98b 	bl	b6efc <HAL_RNG_GetRandomNumber>
   b7be6:	4604      	mov	r4, r0
    srand(seed);
   b7be8:	f001 f87e 	bl	b8ce8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7bec:	4b0b      	ldr	r3, [pc, #44]	; (b7c1c <module_user_init_hook+0x5c>)
   b7bee:	b113      	cbz	r3, b7bf6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7bf0:	4620      	mov	r0, r4
   b7bf2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7bf6:	2100      	movs	r1, #0
   b7bf8:	4808      	ldr	r0, [pc, #32]	; (b7c1c <module_user_init_hook+0x5c>)
   b7bfa:	f7ff fbbb 	bl	b7374 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7c02:	4807      	ldr	r0, [pc, #28]	; (b7c20 <module_user_init_hook+0x60>)
   b7c04:	2100      	movs	r1, #0
   b7c06:	f7ff bb21 	b.w	b724c <system_ctrl_set_app_request_handler>
   b7c0a:	bf00      	nop
   b7c0c:	000b7aed 	.word	0x000b7aed
   b7c10:	2003f400 	.word	0x2003f400
   b7c14:	9a271c1e 	.word	0x9a271c1e
   b7c18:	2003e6f8 	.word	0x2003e6f8
   b7c1c:	00000000 	.word	0x00000000
   b7c20:	000b7b89 	.word	0x000b7b89

000b7c24 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7c24:	4770      	bx	lr

000b7c26 <_ZN9IPAddressD0Ev>:
   b7c26:	b510      	push	{r4, lr}
   b7c28:	2118      	movs	r1, #24
   b7c2a:	4604      	mov	r4, r0
   b7c2c:	f7fc fa33 	bl	b4096 <_ZdlPvj>
   b7c30:	4620      	mov	r0, r4
   b7c32:	bd10      	pop	{r4, pc}

000b7c34 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7c34:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7c36:	7d03      	ldrb	r3, [r0, #20]
   b7c38:	2b06      	cmp	r3, #6
{
   b7c3a:	b08d      	sub	sp, #52	; 0x34
   b7c3c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7c3e:	f100 0704 	add.w	r7, r0, #4
   b7c42:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7c46:	d012      	beq.n	b7c6e <_ZNK9IPAddress7printToER5Print+0x3a>
   b7c48:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7c4c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7c50:	220a      	movs	r2, #10
   b7c52:	4630      	mov	r0, r6
   b7c54:	f7ff fe41 	bl	b78da <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7c58:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7c5a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7c5c:	d019      	beq.n	b7c92 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7c5e:	2c00      	cmp	r4, #0
   b7c60:	d0f4      	beq.n	b7c4c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7c62:	212e      	movs	r1, #46	; 0x2e
   b7c64:	4630      	mov	r0, r6
   b7c66:	f7ff fe29 	bl	b78bc <_ZN5Print5printEc>
   b7c6a:	4404      	add	r4, r0
   b7c6c:	e7ee      	b.n	b7c4c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7c6e:	232f      	movs	r3, #47	; 0x2f
   b7c70:	466a      	mov	r2, sp
   b7c72:	4639      	mov	r1, r7
   b7c74:	200a      	movs	r0, #10
		buf[0] = 0;
   b7c76:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7c7a:	f7ff f977 	bl	b6f6c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7c7e:	4668      	mov	r0, sp
   b7c80:	f001 f868 	bl	b8d54 <strlen>
   b7c84:	6833      	ldr	r3, [r6, #0]
   b7c86:	4602      	mov	r2, r0
   b7c88:	68db      	ldr	r3, [r3, #12]
   b7c8a:	4669      	mov	r1, sp
   b7c8c:	4630      	mov	r0, r6
   b7c8e:	4798      	blx	r3
   b7c90:	4604      	mov	r4, r0
    }
    return n;
}
   b7c92:	4620      	mov	r0, r4
   b7c94:	b00d      	add	sp, #52	; 0x34
   b7c96:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7c98 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7c98:	b510      	push	{r4, lr}
   b7c9a:	4b05      	ldr	r3, [pc, #20]	; (b7cb0 <_ZN9IPAddressC1Ev+0x18>)
   b7c9c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7c9e:	2211      	movs	r2, #17
   b7ca0:	f840 3b04 	str.w	r3, [r0], #4
   b7ca4:	2100      	movs	r1, #0
   b7ca6:	f001 f817 	bl	b8cd8 <memset>
}
   b7caa:	4620      	mov	r0, r4
   b7cac:	bd10      	pop	{r4, pc}
   b7cae:	bf00      	nop
   b7cb0:	000b95dc 	.word	0x000b95dc

000b7cb4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7cb4:	4603      	mov	r3, r0
   b7cb6:	4a07      	ldr	r2, [pc, #28]	; (b7cd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7cb8:	b510      	push	{r4, lr}
   b7cba:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b7cbe:	f101 0210 	add.w	r2, r1, #16
   b7cc2:	f851 4b04 	ldr.w	r4, [r1], #4
   b7cc6:	f843 4b04 	str.w	r4, [r3], #4
   b7cca:	4291      	cmp	r1, r2
   b7ccc:	d1f9      	bne.n	b7cc2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7cce:	780a      	ldrb	r2, [r1, #0]
   b7cd0:	701a      	strb	r2, [r3, #0]
}
   b7cd2:	bd10      	pop	{r4, pc}
   b7cd4:	000b95dc 	.word	0x000b95dc

000b7cd8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7cd8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7cda:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7cde:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7ce2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7ce6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7cea:	2304      	movs	r3, #4
   b7cec:	6041      	str	r1, [r0, #4]
   b7cee:	7503      	strb	r3, [r0, #20]
}
   b7cf0:	bd10      	pop	{r4, pc}
	...

000b7cf4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7cf4:	b507      	push	{r0, r1, r2, lr}
   b7cf6:	4b06      	ldr	r3, [pc, #24]	; (b7d10 <_ZN9IPAddressC1EPKh+0x1c>)
   b7cf8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7cfa:	78cb      	ldrb	r3, [r1, #3]
   b7cfc:	9300      	str	r3, [sp, #0]
   b7cfe:	788b      	ldrb	r3, [r1, #2]
   b7d00:	784a      	ldrb	r2, [r1, #1]
   b7d02:	7809      	ldrb	r1, [r1, #0]
   b7d04:	f7ff ffe8 	bl	b7cd8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7d08:	b003      	add	sp, #12
   b7d0a:	f85d fb04 	ldr.w	pc, [sp], #4
   b7d0e:	bf00      	nop
   b7d10:	000b95dc 	.word	0x000b95dc

000b7d14 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7d14:	7441      	strb	r1, [r0, #17]
}
   b7d16:	4770      	bx	lr

000b7d18 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7d18:	4770      	bx	lr

000b7d1a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7d1a:	4770      	bx	lr

000b7d1c <_ZN9USBSerial4readEv>:
{
   b7d1c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7d1e:	2100      	movs	r1, #0
   b7d20:	7c00      	ldrb	r0, [r0, #16]
   b7d22:	f7ff fa4b 	bl	b71bc <HAL_USB_USART_Receive_Data>
}
   b7d26:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7d2a:	bd08      	pop	{r3, pc}

000b7d2c <_ZN9USBSerial4peekEv>:
{
   b7d2c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7d2e:	2101      	movs	r1, #1
   b7d30:	7c00      	ldrb	r0, [r0, #16]
   b7d32:	f7ff fa43 	bl	b71bc <HAL_USB_USART_Receive_Data>
}
   b7d36:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7d3a:	bd08      	pop	{r3, pc}

000b7d3c <_ZN9USBSerial17availableForWriteEv>:
{
   b7d3c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7d3e:	7c00      	ldrb	r0, [r0, #16]
   b7d40:	f7ff fa34 	bl	b71ac <HAL_USB_USART_Available_Data_For_Write>
}
   b7d44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7d48:	bd08      	pop	{r3, pc}

000b7d4a <_ZN9USBSerial9availableEv>:
{
   b7d4a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7d4c:	7c00      	ldrb	r0, [r0, #16]
   b7d4e:	f7ff fa25 	bl	b719c <HAL_USB_USART_Available_Data>
}
   b7d52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7d56:	bd08      	pop	{r3, pc}

000b7d58 <_ZN9USBSerial5writeEh>:
{
   b7d58:	b513      	push	{r0, r1, r4, lr}
   b7d5a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7d5c:	7c00      	ldrb	r0, [r0, #16]
{
   b7d5e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7d60:	f7ff fa24 	bl	b71ac <HAL_USB_USART_Available_Data_For_Write>
   b7d64:	2800      	cmp	r0, #0
   b7d66:	9901      	ldr	r1, [sp, #4]
   b7d68:	dc01      	bgt.n	b7d6e <_ZN9USBSerial5writeEh+0x16>
   b7d6a:	7c60      	ldrb	r0, [r4, #17]
   b7d6c:	b120      	cbz	r0, b7d78 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7d6e:	7c20      	ldrb	r0, [r4, #16]
   b7d70:	f7ff fa2c 	bl	b71cc <HAL_USB_USART_Send_Data>
   b7d74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7d78:	b002      	add	sp, #8
   b7d7a:	bd10      	pop	{r4, pc}

000b7d7c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7d7c:	7c00      	ldrb	r0, [r0, #16]
   b7d7e:	f7ff ba2d 	b.w	b71dc <HAL_USB_USART_Flush_Data>

000b7d82 <_ZN9USBSerialD0Ev>:
   b7d82:	b510      	push	{r4, lr}
   b7d84:	2114      	movs	r1, #20
   b7d86:	4604      	mov	r4, r0
   b7d88:	f7fc f985 	bl	b4096 <_ZdlPvj>
   b7d8c:	4620      	mov	r0, r4
   b7d8e:	bd10      	pop	{r4, pc}

000b7d90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7d90:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7d96:	4604      	mov	r4, r0
   b7d98:	4608      	mov	r0, r1
   b7d9a:	2100      	movs	r1, #0
   b7d9c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7da0:	4b04      	ldr	r3, [pc, #16]	; (b7db4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7da2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7da4:	2301      	movs	r3, #1
  _serial = serial;
   b7da6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7da8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7daa:	4611      	mov	r1, r2
   b7dac:	f7ff f9e6 	bl	b717c <HAL_USB_USART_Init>
}
   b7db0:	4620      	mov	r0, r4
   b7db2:	bd10      	pop	{r4, pc}
   b7db4:	000b95f0 	.word	0x000b95f0

000b7db8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7db8:	7c00      	ldrb	r0, [r0, #16]
   b7dba:	2200      	movs	r2, #0
   b7dbc:	f7ff b9e6 	b.w	b718c <HAL_USB_USART_Begin>

000b7dc0 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
   b7dc0:	7c00      	ldrb	r0, [r0, #16]
   b7dc2:	f7ff ba13 	b.w	b71ec <HAL_USB_USART_Is_Enabled>

000b7dc6 <_ZN9USBSerialcvbEv>:
  return isEnabled();
   b7dc6:	f7ff bffb 	b.w	b7dc0 <_ZN9USBSerial9isEnabledEv>

000b7dca <_Z19acquireSerialBufferv>:
{
   b7dca:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7dcc:	2214      	movs	r2, #20
{
   b7dce:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7dd0:	2100      	movs	r1, #0
   b7dd2:	f000 ff81 	bl	b8cd8 <memset>
}
   b7dd6:	4620      	mov	r0, r4
   b7dd8:	bd10      	pop	{r4, pc}
	...

000b7ddc <_Z16_fetch_usbserialv>:
{
   b7ddc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7dde:	4c0f      	ldr	r4, [pc, #60]	; (b7e1c <_Z16_fetch_usbserialv+0x40>)
{
   b7de0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7de2:	a803      	add	r0, sp, #12
   b7de4:	f7ff fff1 	bl	b7dca <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7de8:	7821      	ldrb	r1, [r4, #0]
   b7dea:	f3bf 8f5b 	dmb	ish
   b7dee:	f011 0101 	ands.w	r1, r1, #1
   b7df2:	d10f      	bne.n	b7e14 <_Z16_fetch_usbserialv+0x38>
   b7df4:	4620      	mov	r0, r4
   b7df6:	9101      	str	r1, [sp, #4]
   b7df8:	f7fc f95a 	bl	b40b0 <__cxa_guard_acquire>
   b7dfc:	9901      	ldr	r1, [sp, #4]
   b7dfe:	b148      	cbz	r0, b7e14 <_Z16_fetch_usbserialv+0x38>
   b7e00:	aa03      	add	r2, sp, #12
   b7e02:	4807      	ldr	r0, [pc, #28]	; (b7e20 <_Z16_fetch_usbserialv+0x44>)
   b7e04:	f7ff ffc4 	bl	b7d90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7e08:	4620      	mov	r0, r4
   b7e0a:	f7fc f956 	bl	b40ba <__cxa_guard_release>
   b7e0e:	4805      	ldr	r0, [pc, #20]	; (b7e24 <_Z16_fetch_usbserialv+0x48>)
   b7e10:	f000 ff3e 	bl	b8c90 <atexit>
	return _usbserial;
}
   b7e14:	4802      	ldr	r0, [pc, #8]	; (b7e20 <_Z16_fetch_usbserialv+0x44>)
   b7e16:	b008      	add	sp, #32
   b7e18:	bd10      	pop	{r4, pc}
   b7e1a:	bf00      	nop
   b7e1c:	2003e700 	.word	0x2003e700
   b7e20:	2003e704 	.word	0x2003e704
   b7e24:	000b7d19 	.word	0x000b7d19

000b7e28 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7e28:	4770      	bx	lr

000b7e2a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7e2a:	7441      	strb	r1, [r0, #17]
}
   b7e2c:	4770      	bx	lr

000b7e2e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7e2e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7e30:	7c00      	ldrb	r0, [r0, #16]
   b7e32:	f7ff f8d3 	bl	b6fdc <hal_usart_available_data_for_write>
}
   b7e36:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7e3a:	bd08      	pop	{r3, pc}

000b7e3c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7e3c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7e3e:	7c00      	ldrb	r0, [r0, #16]
   b7e40:	f7ff f8a4 	bl	b6f8c <hal_usart_available>
}
   b7e44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7e48:	bd08      	pop	{r3, pc}

000b7e4a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7e4a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7e4c:	7c00      	ldrb	r0, [r0, #16]
   b7e4e:	f7ff f8ad 	bl	b6fac <hal_usart_peek>
}
   b7e52:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7e56:	bd08      	pop	{r3, pc}

000b7e58 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7e58:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7e5a:	7c00      	ldrb	r0, [r0, #16]
   b7e5c:	f7ff f89e 	bl	b6f9c <hal_usart_read>
}
   b7e60:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7e64:	bd08      	pop	{r3, pc}

000b7e66 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7e66:	7c00      	ldrb	r0, [r0, #16]
   b7e68:	f7ff b8a8 	b.w	b6fbc <hal_usart_flush>

000b7e6c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7e6e:	7c45      	ldrb	r5, [r0, #17]
{
   b7e70:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7e72:	b12d      	cbz	r5, b7e80 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7e74:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7e76:	b003      	add	sp, #12
   b7e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7e7c:	f7ff b87e 	b.w	b6f7c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7e80:	7c00      	ldrb	r0, [r0, #16]
   b7e82:	9101      	str	r1, [sp, #4]
   b7e84:	f7ff f8aa 	bl	b6fdc <hal_usart_available_data_for_write>
   b7e88:	2800      	cmp	r0, #0
   b7e8a:	9901      	ldr	r1, [sp, #4]
   b7e8c:	dcf2      	bgt.n	b7e74 <_ZN11USARTSerial5writeEh+0x8>
}
   b7e8e:	4628      	mov	r0, r5
   b7e90:	b003      	add	sp, #12
   b7e92:	bd30      	pop	{r4, r5, pc}

000b7e94 <_ZN11USARTSerialD0Ev>:
   b7e94:	b510      	push	{r4, lr}
   b7e96:	2114      	movs	r1, #20
   b7e98:	4604      	mov	r4, r0
   b7e9a:	f7fc f8fc 	bl	b4096 <_ZdlPvj>
   b7e9e:	4620      	mov	r0, r4
   b7ea0:	bd10      	pop	{r4, pc}
	...

000b7ea4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7ea4:	b510      	push	{r4, lr}
   b7ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7eaa:	4604      	mov	r4, r0
   b7eac:	4608      	mov	r0, r1
   b7eae:	4611      	mov	r1, r2
   b7eb0:	2200      	movs	r2, #0
   b7eb2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7eb6:	4b04      	ldr	r3, [pc, #16]	; (b7ec8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7eb8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7eba:	2301      	movs	r3, #1
  _serial = serial;
   b7ebc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7ebe:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7ec0:	f7ff f894 	bl	b6fec <hal_usart_init_ex>
}
   b7ec4:	4620      	mov	r0, r4
   b7ec6:	bd10      	pop	{r4, pc}
   b7ec8:	000b9620 	.word	0x000b9620

000b7ecc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7ecc:	4770      	bx	lr

000b7ece <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7ed0:	4606      	mov	r6, r0
   b7ed2:	4615      	mov	r5, r2
   b7ed4:	460c      	mov	r4, r1
   b7ed6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7ed8:	42bc      	cmp	r4, r7
   b7eda:	d006      	beq.n	b7eea <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7edc:	6833      	ldr	r3, [r6, #0]
   b7ede:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7ee2:	689b      	ldr	r3, [r3, #8]
   b7ee4:	4630      	mov	r0, r6
   b7ee6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7ee8:	e7f6      	b.n	b7ed8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7eea:	4628      	mov	r0, r5
   b7eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7eee <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7eee:	7c00      	ldrb	r0, [r0, #16]
   b7ef0:	2200      	movs	r2, #0
   b7ef2:	f7ff b89b 	b.w	b702c <hal_i2c_write>

000b7ef6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7ef6:	7c00      	ldrb	r0, [r0, #16]
   b7ef8:	2100      	movs	r1, #0
   b7efa:	f7ff b89f 	b.w	b703c <hal_i2c_available>

000b7efe <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7efe:	7c00      	ldrb	r0, [r0, #16]
   b7f00:	2100      	movs	r1, #0
   b7f02:	f7ff b8a3 	b.w	b704c <hal_i2c_read>

000b7f06 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7f06:	7c00      	ldrb	r0, [r0, #16]
   b7f08:	2100      	movs	r1, #0
   b7f0a:	f7ff b8a7 	b.w	b705c <hal_i2c_peek>

000b7f0e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b7f0e:	7c00      	ldrb	r0, [r0, #16]
   b7f10:	2100      	movs	r1, #0
   b7f12:	f7ff b8ab 	b.w	b706c <hal_i2c_flush>

000b7f16 <_ZN7TwoWireD0Ev>:
   b7f16:	b510      	push	{r4, lr}
   b7f18:	2114      	movs	r1, #20
   b7f1a:	4604      	mov	r4, r0
   b7f1c:	f7fc f8bb 	bl	b4096 <_ZdlPvj>
   b7f20:	4620      	mov	r0, r4
   b7f22:	bd10      	pop	{r4, pc}

000b7f24 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7f24:	b510      	push	{r4, lr}
   b7f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7f2a:	4604      	mov	r4, r0
   b7f2c:	4608      	mov	r0, r1
   b7f2e:	2100      	movs	r1, #0
   b7f30:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7f34:	4b03      	ldr	r3, [pc, #12]	; (b7f44 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b7f36:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b7f38:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b7f3a:	4611      	mov	r1, r2
   b7f3c:	f7ff f8a6 	bl	b708c <hal_i2c_init>
}
   b7f40:	4620      	mov	r0, r4
   b7f42:	bd10      	pop	{r4, pc}
   b7f44:	000b9650 	.word	0x000b9650

000b7f48 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7f48:	2300      	movs	r3, #0
   b7f4a:	7c00      	ldrb	r0, [r0, #16]
   b7f4c:	461a      	mov	r2, r3
   b7f4e:	4619      	mov	r1, r3
   b7f50:	f7ff b854 	b.w	b6ffc <hal_i2c_begin>

000b7f54 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b7f54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b7f56:	2200      	movs	r2, #0
   b7f58:	2314      	movs	r3, #20
   b7f5a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b7f5e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b7f62:	780b      	ldrb	r3, [r1, #0]
   b7f64:	f88d 3008 	strb.w	r3, [sp, #8]
   b7f68:	684b      	ldr	r3, [r1, #4]
   b7f6a:	9303      	str	r3, [sp, #12]
   b7f6c:	68cb      	ldr	r3, [r1, #12]
   b7f6e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b7f70:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b7f72:	7a0b      	ldrb	r3, [r1, #8]
   b7f74:	9305      	str	r3, [sp, #20]
   b7f76:	a901      	add	r1, sp, #4
   b7f78:	f7ff f890 	bl	b709c <hal_i2c_request_ex>
}
   b7f7c:	b007      	add	sp, #28
   b7f7e:	f85d fb04 	ldr.w	pc, [sp], #4

000b7f82 <_ZN7TwoWire11requestFromEhjh>:
{
   b7f82:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b7f84:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b7f86:	f88d 1000 	strb.w	r1, [sp]
   b7f8a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b7f8e:	9103      	str	r1, [sp, #12]
   b7f90:	bf18      	it	ne
   b7f92:	2301      	movne	r3, #1
   b7f94:	4669      	mov	r1, sp
    size_ = size;
   b7f96:	9201      	str	r2, [sp, #4]
   b7f98:	f88d 3008 	strb.w	r3, [sp, #8]
   b7f9c:	f7ff ffda 	bl	b7f54 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b7fa0:	b005      	add	sp, #20
   b7fa2:	f85d fb04 	ldr.w	pc, [sp], #4

000b7fa6 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b7fa6:	2301      	movs	r3, #1
   b7fa8:	f7ff bfeb 	b.w	b7f82 <_ZN7TwoWire11requestFromEhjh>

000b7fac <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7fac:	7c00      	ldrb	r0, [r0, #16]
   b7fae:	2200      	movs	r2, #0
   b7fb0:	f7ff b82c 	b.w	b700c <hal_i2c_begin_transmission>

000b7fb4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7fb4:	b2c9      	uxtb	r1, r1
   b7fb6:	f7ff bff9 	b.w	b7fac <_ZN7TwoWire17beginTransmissionEh>

000b7fba <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b7fba:	7c00      	ldrb	r0, [r0, #16]
   b7fbc:	2200      	movs	r2, #0
   b7fbe:	f7ff b82d 	b.w	b701c <hal_i2c_end_transmission>

000b7fc2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7fc2:	2101      	movs	r1, #1
   b7fc4:	f7ff bff9 	b.w	b7fba <_ZN7TwoWire15endTransmissionEh>

000b7fc8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7fc8:	2200      	movs	r2, #0
   b7fca:	6840      	ldr	r0, [r0, #4]
   b7fcc:	4611      	mov	r1, r2
   b7fce:	f7ff b969 	b.w	b72a4 <network_ready>

000b7fd2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7fd2:	2200      	movs	r2, #0
   b7fd4:	6840      	ldr	r0, [r0, #4]
   b7fd6:	4611      	mov	r1, r2
   b7fd8:	f7ff b984 	b.w	b72e4 <network_listening>

000b7fdc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7fdc:	2200      	movs	r2, #0
   b7fde:	6840      	ldr	r0, [r0, #4]
   b7fe0:	4611      	mov	r1, r2
   b7fe2:	f7ff b98f 	b.w	b7304 <network_get_listen_timeout>

000b7fe6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7fe6:	6840      	ldr	r0, [r0, #4]
   b7fe8:	2200      	movs	r2, #0
   b7fea:	f7ff b983 	b.w	b72f4 <network_set_listen_timeout>

000b7fee <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7fee:	6840      	ldr	r0, [r0, #4]
   b7ff0:	2200      	movs	r2, #0
   b7ff2:	f081 0101 	eor.w	r1, r1, #1
   b7ff6:	f7ff b96d 	b.w	b72d4 <network_listen>

000b7ffa <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7ffa:	2300      	movs	r3, #0
   b7ffc:	6840      	ldr	r0, [r0, #4]
   b7ffe:	461a      	mov	r2, r3
   b8000:	4619      	mov	r1, r3
   b8002:	f7ff b95f 	b.w	b72c4 <network_off>

000b8006 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8006:	2200      	movs	r2, #0
   b8008:	6840      	ldr	r0, [r0, #4]
   b800a:	4611      	mov	r1, r2
   b800c:	f7ff b93a 	b.w	b7284 <network_connecting>

000b8010 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8010:	6840      	ldr	r0, [r0, #4]
   b8012:	2200      	movs	r2, #0
   b8014:	2102      	movs	r1, #2
   b8016:	f7ff b93d 	b.w	b7294 <network_disconnect>

000b801a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b801a:	2300      	movs	r3, #0
   b801c:	6840      	ldr	r0, [r0, #4]
   b801e:	461a      	mov	r2, r3
   b8020:	f7ff b928 	b.w	b7274 <network_connect>

000b8024 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b8024:	4b02      	ldr	r3, [pc, #8]	; (b8030 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b8026:	2204      	movs	r2, #4
   b8028:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b802a:	4a02      	ldr	r2, [pc, #8]	; (b8034 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b802c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b802e:	4770      	bx	lr
   b8030:	2003e718 	.word	0x2003e718
   b8034:	000b9678 	.word	0x000b9678

000b8038 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8038:	2300      	movs	r3, #0
   b803a:	6840      	ldr	r0, [r0, #4]
   b803c:	461a      	mov	r2, r3
   b803e:	f7ff b919 	b.w	b7274 <network_connect>

000b8042 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b8042:	6840      	ldr	r0, [r0, #4]
   b8044:	2200      	movs	r2, #0
   b8046:	2102      	movs	r1, #2
   b8048:	f7ff b924 	b.w	b7294 <network_disconnect>

000b804c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b804c:	2200      	movs	r2, #0
   b804e:	6840      	ldr	r0, [r0, #4]
   b8050:	4611      	mov	r1, r2
   b8052:	f7ff b917 	b.w	b7284 <network_connecting>

000b8056 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b8056:	2200      	movs	r2, #0
   b8058:	6840      	ldr	r0, [r0, #4]
   b805a:	4611      	mov	r1, r2
   b805c:	f7ff b922 	b.w	b72a4 <network_ready>

000b8060 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b8060:	2300      	movs	r3, #0
   b8062:	6840      	ldr	r0, [r0, #4]
   b8064:	461a      	mov	r2, r3
   b8066:	4619      	mov	r1, r3
   b8068:	f7ff b924 	b.w	b72b4 <network_on>

000b806c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b806c:	2300      	movs	r3, #0
   b806e:	6840      	ldr	r0, [r0, #4]
   b8070:	461a      	mov	r2, r3
   b8072:	4619      	mov	r1, r3
   b8074:	f7ff b926 	b.w	b72c4 <network_off>

000b8078 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8078:	6840      	ldr	r0, [r0, #4]
   b807a:	2100      	movs	r1, #0
   b807c:	f7ff b94a 	b.w	b7314 <network_is_on>

000b8080 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b8080:	6840      	ldr	r0, [r0, #4]
   b8082:	2100      	movs	r1, #0
   b8084:	f7ff b94e 	b.w	b7324 <network_is_off>

000b8088 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b8088:	6840      	ldr	r0, [r0, #4]
   b808a:	2200      	movs	r2, #0
   b808c:	f081 0101 	eor.w	r1, r1, #1
   b8090:	f7ff b920 	b.w	b72d4 <network_listen>

000b8094 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b8094:	6840      	ldr	r0, [r0, #4]
   b8096:	2200      	movs	r2, #0
   b8098:	f7ff b92c 	b.w	b72f4 <network_set_listen_timeout>

000b809c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b809c:	2200      	movs	r2, #0
   b809e:	6840      	ldr	r0, [r0, #4]
   b80a0:	4611      	mov	r1, r2
   b80a2:	f7ff b92f 	b.w	b7304 <network_get_listen_timeout>

000b80a6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b80a6:	2200      	movs	r2, #0
   b80a8:	6840      	ldr	r0, [r0, #4]
   b80aa:	4611      	mov	r1, r2
   b80ac:	f7ff b91a 	b.w	b72e4 <network_listening>

000b80b0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b80b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b80b4:	b095      	sub	sp, #84	; 0x54
   b80b6:	4614      	mov	r4, r2
   b80b8:	460d      	mov	r5, r1
   b80ba:	4607      	mov	r7, r0
    IPAddress addr;
   b80bc:	f7ff fdec 	bl	b7c98 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b80c0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b80c2:	221c      	movs	r2, #28
   b80c4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b80c6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b80c8:	f000 fe06 	bl	b8cd8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b80cc:	2340      	movs	r3, #64	; 0x40
   b80ce:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b80d0:	4620      	mov	r0, r4
   b80d2:	466b      	mov	r3, sp
   b80d4:	aa0c      	add	r2, sp, #48	; 0x30
   b80d6:	2100      	movs	r1, #0
   b80d8:	f7fe fed8 	bl	b6e8c <netdb_getaddrinfo>
    if (!r) {
   b80dc:	4604      	mov	r4, r0
   b80de:	2800      	cmp	r0, #0
   b80e0:	d14b      	bne.n	b817a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b80e2:	4602      	mov	r2, r0
   b80e4:	2101      	movs	r1, #1
   b80e6:	6868      	ldr	r0, [r5, #4]
   b80e8:	f7ff f8dc 	bl	b72a4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b80ec:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b80ee:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b80f0:	4622      	mov	r2, r4
   b80f2:	6868      	ldr	r0, [r5, #4]
   b80f4:	f7ff f8d6 	bl	b72a4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b80f8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b80fa:	4681      	mov	r9, r0
        bool ok = false;
   b80fc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b80fe:	2e00      	cmp	r6, #0
   b8100:	d03b      	beq.n	b817a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b8102:	2900      	cmp	r1, #0
   b8104:	d139      	bne.n	b817a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b8106:	6873      	ldr	r3, [r6, #4]
   b8108:	2b02      	cmp	r3, #2
   b810a:	d003      	beq.n	b8114 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b810c:	2b0a      	cmp	r3, #10
   b810e:	d011      	beq.n	b8134 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8110:	69f6      	ldr	r6, [r6, #28]
   b8112:	e7f4      	b.n	b80fe <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b8114:	f1b8 0f00 	cmp.w	r8, #0
   b8118:	d0fa      	beq.n	b8110 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b811a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b811c:	a806      	add	r0, sp, #24
   b811e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b8120:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b8122:	f7ff fde7 	bl	b7cf4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8126:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8128:	1d3c      	adds	r4, r7, #4
   b812a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b812c:	682b      	ldr	r3, [r5, #0]
   b812e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8130:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b8132:	e7ed      	b.n	b8110 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b8134:	f1b9 0f00 	cmp.w	r9, #0
   b8138:	d0ea      	beq.n	b8110 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b813a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b813c:	2210      	movs	r2, #16
   b813e:	a801      	add	r0, sp, #4
   b8140:	f000 fdca 	bl	b8cd8 <memset>
                    a.v = 6;
   b8144:	2306      	movs	r3, #6
   b8146:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b814a:	ad01      	add	r5, sp, #4
   b814c:	f104 0308 	add.w	r3, r4, #8
   b8150:	3418      	adds	r4, #24
   b8152:	6818      	ldr	r0, [r3, #0]
   b8154:	6859      	ldr	r1, [r3, #4]
   b8156:	462a      	mov	r2, r5
   b8158:	c203      	stmia	r2!, {r0, r1}
   b815a:	3308      	adds	r3, #8
   b815c:	42a3      	cmp	r3, r4
   b815e:	4615      	mov	r5, r2
   b8160:	d1f7      	bne.n	b8152 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b8162:	a901      	add	r1, sp, #4
   b8164:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b8166:	ad07      	add	r5, sp, #28
   b8168:	f7ff fda4 	bl	b7cb4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b816c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b816e:	1d3c      	adds	r4, r7, #4
   b8170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8172:	682b      	ldr	r3, [r5, #0]
   b8174:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8176:	4649      	mov	r1, r9
   b8178:	e7ca      	b.n	b8110 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b817a:	9800      	ldr	r0, [sp, #0]
   b817c:	f7fe fe7e 	bl	b6e7c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b8180:	4638      	mov	r0, r7
   b8182:	b015      	add	sp, #84	; 0x54
   b8184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8188 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b8188:	4b02      	ldr	r3, [pc, #8]	; (b8194 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b818a:	4a03      	ldr	r2, [pc, #12]	; (b8198 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b818c:	601a      	str	r2, [r3, #0]
   b818e:	2200      	movs	r2, #0
   b8190:	605a      	str	r2, [r3, #4]

} // spark
   b8192:	4770      	bx	lr
   b8194:	2003e720 	.word	0x2003e720
   b8198:	000b96b4 	.word	0x000b96b4

000b819c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b819c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b819e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b81a0:	d902      	bls.n	b81a8 <pinAvailable+0xc>
    return false;
   b81a2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b81a4:	b002      	add	sp, #8
   b81a6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b81a8:	f1a0 030b 	sub.w	r3, r0, #11
   b81ac:	2b02      	cmp	r3, #2
   b81ae:	d81a      	bhi.n	b81e6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b81b0:	4c17      	ldr	r4, [pc, #92]	; (b8210 <pinAvailable+0x74>)
   b81b2:	7821      	ldrb	r1, [r4, #0]
   b81b4:	f3bf 8f5b 	dmb	ish
   b81b8:	f011 0101 	ands.w	r1, r1, #1
   b81bc:	d10b      	bne.n	b81d6 <pinAvailable+0x3a>
   b81be:	4620      	mov	r0, r4
   b81c0:	9101      	str	r1, [sp, #4]
   b81c2:	f7fb ff75 	bl	b40b0 <__cxa_guard_acquire>
   b81c6:	9901      	ldr	r1, [sp, #4]
   b81c8:	b128      	cbz	r0, b81d6 <pinAvailable+0x3a>
   b81ca:	4812      	ldr	r0, [pc, #72]	; (b8214 <pinAvailable+0x78>)
   b81cc:	f7ff f95e 	bl	b748c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b81d0:	4620      	mov	r0, r4
   b81d2:	f7fb ff72 	bl	b40ba <__cxa_guard_release>
   b81d6:	4b0f      	ldr	r3, [pc, #60]	; (b8214 <pinAvailable+0x78>)
   b81d8:	7818      	ldrb	r0, [r3, #0]
   b81da:	f7fe ff97 	bl	b710c <hal_spi_is_enabled>
   b81de:	2800      	cmp	r0, #0
   b81e0:	d1df      	bne.n	b81a2 <pinAvailable+0x6>
  return true; // 'pin' is available
   b81e2:	2001      	movs	r0, #1
   b81e4:	e7de      	b.n	b81a4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b81e6:	2801      	cmp	r0, #1
   b81e8:	d809      	bhi.n	b81fe <pinAvailable+0x62>
   b81ea:	f000 f8e3 	bl	b83b4 <_Z19__fetch_global_Wirev>
   b81ee:	2100      	movs	r1, #0
   b81f0:	7c00      	ldrb	r0, [r0, #16]
   b81f2:	f7fe ff43 	bl	b707c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b81f6:	f080 0001 	eor.w	r0, r0, #1
   b81fa:	b2c0      	uxtb	r0, r0
   b81fc:	e7d2      	b.n	b81a4 <pinAvailable+0x8>
   b81fe:	3809      	subs	r0, #9
   b8200:	2801      	cmp	r0, #1
   b8202:	d8ee      	bhi.n	b81e2 <pinAvailable+0x46>
   b8204:	f000 f89a 	bl	b833c <_Z22__fetch_global_Serial1v>
   b8208:	7c00      	ldrb	r0, [r0, #16]
   b820a:	f7fe fedf 	bl	b6fcc <hal_usart_is_enabled>
   b820e:	e7f2      	b.n	b81f6 <pinAvailable+0x5a>
   b8210:	2003e128 	.word	0x2003e128
   b8214:	2003e12c 	.word	0x2003e12c

000b8218 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8218:	2823      	cmp	r0, #35	; 0x23
{
   b821a:	b538      	push	{r3, r4, r5, lr}
   b821c:	4604      	mov	r4, r0
   b821e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8220:	d80a      	bhi.n	b8238 <pinMode+0x20>
   b8222:	29ff      	cmp	r1, #255	; 0xff
   b8224:	d008      	beq.n	b8238 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b8226:	f7ff ffb9 	bl	b819c <pinAvailable>
   b822a:	b128      	cbz	r0, b8238 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b822c:	4629      	mov	r1, r5
   b822e:	4620      	mov	r0, r4
}
   b8230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b8234:	f7fe be3a 	b.w	b6eac <HAL_Pin_Mode>
}
   b8238:	bd38      	pop	{r3, r4, r5, pc}

000b823a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b823a:	b538      	push	{r3, r4, r5, lr}
   b823c:	4604      	mov	r4, r0
   b823e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8240:	f7fe fe3c 	bl	b6ebc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b8244:	28ff      	cmp	r0, #255	; 0xff
   b8246:	d010      	beq.n	b826a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b8248:	2806      	cmp	r0, #6
   b824a:	d804      	bhi.n	b8256 <digitalWrite+0x1c>
   b824c:	234d      	movs	r3, #77	; 0x4d
   b824e:	fa23 f000 	lsr.w	r0, r3, r0
   b8252:	07c3      	lsls	r3, r0, #31
   b8254:	d409      	bmi.n	b826a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b8256:	4620      	mov	r0, r4
   b8258:	f7ff ffa0 	bl	b819c <pinAvailable>
   b825c:	b128      	cbz	r0, b826a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b825e:	4629      	mov	r1, r5
   b8260:	4620      	mov	r0, r4
}
   b8262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b8266:	f7fe be31 	b.w	b6ecc <HAL_GPIO_Write>
}
   b826a:	bd38      	pop	{r3, r4, r5, pc}

000b826c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b826c:	b510      	push	{r4, lr}
   b826e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8270:	f7fe fe24 	bl	b6ebc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b8274:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b8276:	b2db      	uxtb	r3, r3
   b8278:	2b01      	cmp	r3, #1
   b827a:	d908      	bls.n	b828e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b827c:	4620      	mov	r0, r4
   b827e:	f7ff ff8d 	bl	b819c <pinAvailable>
   b8282:	b120      	cbz	r0, b828e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b8284:	4620      	mov	r0, r4
}
   b8286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b828a:	f7fe be27 	b.w	b6edc <HAL_GPIO_Read>
}
   b828e:	2000      	movs	r0, #0
   b8290:	bd10      	pop	{r4, pc}

000b8292 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b8292:	280d      	cmp	r0, #13
{
   b8294:	b510      	push	{r4, lr}
   b8296:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b8298:	bf9c      	itt	ls
   b829a:	340e      	addls	r4, #14
   b829c:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b829e:	4620      	mov	r0, r4
   b82a0:	f7ff ff7c 	bl	b819c <pinAvailable>
   b82a4:	b150      	cbz	r0, b82bc <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b82a6:	2103      	movs	r1, #3
   b82a8:	4620      	mov	r0, r4
   b82aa:	f7fe fdf7 	bl	b6e9c <HAL_Validate_Pin_Function>
   b82ae:	2803      	cmp	r0, #3
   b82b0:	d104      	bne.n	b82bc <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b82b2:	4620      	mov	r0, r4
}
   b82b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b82b8:	f7fe be18 	b.w	b6eec <hal_adc_read>
}
   b82bc:	2000      	movs	r0, #0
   b82be:	bd10      	pop	{r4, pc}

000b82c0 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b82c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b82c4:	4690      	mov	r8, r2
   b82c6:	461f      	mov	r7, r3
   b82c8:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b82ca:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b82cc:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b82ce:	f1c4 0107 	rsb	r1, r4, #7
   b82d2:	f1b8 0f00 	cmp.w	r8, #0
   b82d6:	d112      	bne.n	b82fe <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b82d8:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b82dc:	f001 0101 	and.w	r1, r1, #1
   b82e0:	4630      	mov	r0, r6
   b82e2:	f7ff ffaa 	bl	b823a <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b82e6:	2101      	movs	r1, #1
   b82e8:	4628      	mov	r0, r5
   b82ea:	f7ff ffa6 	bl	b823a <digitalWrite>
    digitalWrite(clockPin, LOW);
   b82ee:	2100      	movs	r1, #0
   b82f0:	4628      	mov	r0, r5
   b82f2:	f7ff ffa2 	bl	b823a <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b82f6:	3c01      	subs	r4, #1
   b82f8:	d2e9      	bcs.n	b82ce <shiftOut+0xe>
  }
}
   b82fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b82fe:	fa47 f104 	asr.w	r1, r7, r4
   b8302:	e7eb      	b.n	b82dc <shiftOut+0x1c>

000b8304 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8304:	4770      	bx	lr
	...

000b8308 <_Z20acquireSerial1Bufferv>:
{
   b8308:	b538      	push	{r3, r4, r5, lr}
   b830a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b830c:	2514      	movs	r5, #20
   b830e:	462a      	mov	r2, r5
   b8310:	2100      	movs	r1, #0
   b8312:	f000 fce1 	bl	b8cd8 <memset>
   b8316:	8025      	strh	r5, [r4, #0]
   b8318:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b831a:	4907      	ldr	r1, [pc, #28]	; (b8338 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b831c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b831e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8320:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8322:	f000 f86b 	bl	b83fc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8326:	4904      	ldr	r1, [pc, #16]	; (b8338 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8328:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b832a:	4628      	mov	r0, r5
   b832c:	f000 f866 	bl	b83fc <_ZnajRKSt9nothrow_t>
    };
   b8330:	60e0      	str	r0, [r4, #12]
}
   b8332:	4620      	mov	r0, r4
   b8334:	bd38      	pop	{r3, r4, r5, pc}
   b8336:	bf00      	nop
   b8338:	000b96e8 	.word	0x000b96e8

000b833c <_Z22__fetch_global_Serial1v>:
{
   b833c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b833e:	4d0e      	ldr	r5, [pc, #56]	; (b8378 <_Z22__fetch_global_Serial1v+0x3c>)
   b8340:	7829      	ldrb	r1, [r5, #0]
   b8342:	f3bf 8f5b 	dmb	ish
   b8346:	f011 0401 	ands.w	r4, r1, #1
{
   b834a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b834c:	d111      	bne.n	b8372 <_Z22__fetch_global_Serial1v+0x36>
   b834e:	4628      	mov	r0, r5
   b8350:	f7fb feae 	bl	b40b0 <__cxa_guard_acquire>
   b8354:	b168      	cbz	r0, b8372 <_Z22__fetch_global_Serial1v+0x36>
   b8356:	a801      	add	r0, sp, #4
   b8358:	f7ff ffd6 	bl	b8308 <_Z20acquireSerial1Bufferv>
   b835c:	aa01      	add	r2, sp, #4
   b835e:	4621      	mov	r1, r4
   b8360:	4806      	ldr	r0, [pc, #24]	; (b837c <_Z22__fetch_global_Serial1v+0x40>)
   b8362:	f7ff fd9f 	bl	b7ea4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8366:	4628      	mov	r0, r5
   b8368:	f7fb fea7 	bl	b40ba <__cxa_guard_release>
   b836c:	4804      	ldr	r0, [pc, #16]	; (b8380 <_Z22__fetch_global_Serial1v+0x44>)
   b836e:	f000 fc8f 	bl	b8c90 <atexit>
    return serial1;
}
   b8372:	4802      	ldr	r0, [pc, #8]	; (b837c <_Z22__fetch_global_Serial1v+0x40>)
   b8374:	b007      	add	sp, #28
   b8376:	bd30      	pop	{r4, r5, pc}
   b8378:	2003e728 	.word	0x2003e728
   b837c:	2003e72c 	.word	0x2003e72c
   b8380:	000b8305 	.word	0x000b8305

000b8384 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8384:	4770      	bx	lr
	...

000b8388 <_Z17acquireWireBufferv>:
{
   b8388:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b838a:	2520      	movs	r5, #32
   b838c:	2314      	movs	r3, #20
{
   b838e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8390:	6003      	str	r3, [r0, #0]
   b8392:	6085      	str	r5, [r0, #8]
   b8394:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8396:	4906      	ldr	r1, [pc, #24]	; (b83b0 <_Z17acquireWireBufferv+0x28>)
   b8398:	4628      	mov	r0, r5
   b839a:	f000 f82f 	bl	b83fc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b839e:	4904      	ldr	r1, [pc, #16]	; (b83b0 <_Z17acquireWireBufferv+0x28>)
	};
   b83a0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b83a2:	4628      	mov	r0, r5
   b83a4:	f000 f82a 	bl	b83fc <_ZnajRKSt9nothrow_t>
	};
   b83a8:	60e0      	str	r0, [r4, #12]
}
   b83aa:	4620      	mov	r0, r4
   b83ac:	bd38      	pop	{r3, r4, r5, pc}
   b83ae:	bf00      	nop
   b83b0:	000b96e8 	.word	0x000b96e8

000b83b4 <_Z19__fetch_global_Wirev>:
{
   b83b4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b83b6:	4d0e      	ldr	r5, [pc, #56]	; (b83f0 <_Z19__fetch_global_Wirev+0x3c>)
   b83b8:	7829      	ldrb	r1, [r5, #0]
   b83ba:	f3bf 8f5b 	dmb	ish
   b83be:	f011 0401 	ands.w	r4, r1, #1
{
   b83c2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b83c4:	d111      	bne.n	b83ea <_Z19__fetch_global_Wirev+0x36>
   b83c6:	4628      	mov	r0, r5
   b83c8:	f7fb fe72 	bl	b40b0 <__cxa_guard_acquire>
   b83cc:	b168      	cbz	r0, b83ea <_Z19__fetch_global_Wirev+0x36>
   b83ce:	a801      	add	r0, sp, #4
   b83d0:	f7ff ffda 	bl	b8388 <_Z17acquireWireBufferv>
   b83d4:	aa01      	add	r2, sp, #4
   b83d6:	4621      	mov	r1, r4
   b83d8:	4806      	ldr	r0, [pc, #24]	; (b83f4 <_Z19__fetch_global_Wirev+0x40>)
   b83da:	f7ff fda3 	bl	b7f24 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b83de:	4628      	mov	r0, r5
   b83e0:	f7fb fe6b 	bl	b40ba <__cxa_guard_release>
   b83e4:	4804      	ldr	r0, [pc, #16]	; (b83f8 <_Z19__fetch_global_Wirev+0x44>)
   b83e6:	f000 fc53 	bl	b8c90 <atexit>
	return wire;
}
   b83ea:	4802      	ldr	r0, [pc, #8]	; (b83f4 <_Z19__fetch_global_Wirev+0x40>)
   b83ec:	b007      	add	sp, #28
   b83ee:	bd30      	pop	{r4, r5, pc}
   b83f0:	2003e744 	.word	0x2003e744
   b83f4:	2003e748 	.word	0x2003e748
   b83f8:	000b8385 	.word	0x000b8385

000b83fc <_ZnajRKSt9nothrow_t>:
   b83fc:	f7fb be49 	b.w	b4092 <_Znaj>

000b8400 <__aeabi_drsub>:
   b8400:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b8404:	e002      	b.n	b840c <__adddf3>
   b8406:	bf00      	nop

000b8408 <__aeabi_dsub>:
   b8408:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b840c <__adddf3>:
   b840c:	b530      	push	{r4, r5, lr}
   b840e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b8412:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b8416:	ea94 0f05 	teq	r4, r5
   b841a:	bf08      	it	eq
   b841c:	ea90 0f02 	teqeq	r0, r2
   b8420:	bf1f      	itttt	ne
   b8422:	ea54 0c00 	orrsne.w	ip, r4, r0
   b8426:	ea55 0c02 	orrsne.w	ip, r5, r2
   b842a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b842e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8432:	f000 80e2 	beq.w	b85fa <__adddf3+0x1ee>
   b8436:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b843a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b843e:	bfb8      	it	lt
   b8440:	426d      	neglt	r5, r5
   b8442:	dd0c      	ble.n	b845e <__adddf3+0x52>
   b8444:	442c      	add	r4, r5
   b8446:	ea80 0202 	eor.w	r2, r0, r2
   b844a:	ea81 0303 	eor.w	r3, r1, r3
   b844e:	ea82 0000 	eor.w	r0, r2, r0
   b8452:	ea83 0101 	eor.w	r1, r3, r1
   b8456:	ea80 0202 	eor.w	r2, r0, r2
   b845a:	ea81 0303 	eor.w	r3, r1, r3
   b845e:	2d36      	cmp	r5, #54	; 0x36
   b8460:	bf88      	it	hi
   b8462:	bd30      	pophi	{r4, r5, pc}
   b8464:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8468:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b846c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b8470:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b8474:	d002      	beq.n	b847c <__adddf3+0x70>
   b8476:	4240      	negs	r0, r0
   b8478:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b847c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b8480:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8484:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b8488:	d002      	beq.n	b8490 <__adddf3+0x84>
   b848a:	4252      	negs	r2, r2
   b848c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b8490:	ea94 0f05 	teq	r4, r5
   b8494:	f000 80a7 	beq.w	b85e6 <__adddf3+0x1da>
   b8498:	f1a4 0401 	sub.w	r4, r4, #1
   b849c:	f1d5 0e20 	rsbs	lr, r5, #32
   b84a0:	db0d      	blt.n	b84be <__adddf3+0xb2>
   b84a2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b84a6:	fa22 f205 	lsr.w	r2, r2, r5
   b84aa:	1880      	adds	r0, r0, r2
   b84ac:	f141 0100 	adc.w	r1, r1, #0
   b84b0:	fa03 f20e 	lsl.w	r2, r3, lr
   b84b4:	1880      	adds	r0, r0, r2
   b84b6:	fa43 f305 	asr.w	r3, r3, r5
   b84ba:	4159      	adcs	r1, r3
   b84bc:	e00e      	b.n	b84dc <__adddf3+0xd0>
   b84be:	f1a5 0520 	sub.w	r5, r5, #32
   b84c2:	f10e 0e20 	add.w	lr, lr, #32
   b84c6:	2a01      	cmp	r2, #1
   b84c8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b84cc:	bf28      	it	cs
   b84ce:	f04c 0c02 	orrcs.w	ip, ip, #2
   b84d2:	fa43 f305 	asr.w	r3, r3, r5
   b84d6:	18c0      	adds	r0, r0, r3
   b84d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b84dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b84e0:	d507      	bpl.n	b84f2 <__adddf3+0xe6>
   b84e2:	f04f 0e00 	mov.w	lr, #0
   b84e6:	f1dc 0c00 	rsbs	ip, ip, #0
   b84ea:	eb7e 0000 	sbcs.w	r0, lr, r0
   b84ee:	eb6e 0101 	sbc.w	r1, lr, r1
   b84f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b84f6:	d31b      	bcc.n	b8530 <__adddf3+0x124>
   b84f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b84fc:	d30c      	bcc.n	b8518 <__adddf3+0x10c>
   b84fe:	0849      	lsrs	r1, r1, #1
   b8500:	ea5f 0030 	movs.w	r0, r0, rrx
   b8504:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b8508:	f104 0401 	add.w	r4, r4, #1
   b850c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b8510:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b8514:	f080 809a 	bcs.w	b864c <__adddf3+0x240>
   b8518:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b851c:	bf08      	it	eq
   b851e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8522:	f150 0000 	adcs.w	r0, r0, #0
   b8526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b852a:	ea41 0105 	orr.w	r1, r1, r5
   b852e:	bd30      	pop	{r4, r5, pc}
   b8530:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b8534:	4140      	adcs	r0, r0
   b8536:	eb41 0101 	adc.w	r1, r1, r1
   b853a:	3c01      	subs	r4, #1
   b853c:	bf28      	it	cs
   b853e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b8542:	d2e9      	bcs.n	b8518 <__adddf3+0x10c>
   b8544:	f091 0f00 	teq	r1, #0
   b8548:	bf04      	itt	eq
   b854a:	4601      	moveq	r1, r0
   b854c:	2000      	moveq	r0, #0
   b854e:	fab1 f381 	clz	r3, r1
   b8552:	bf08      	it	eq
   b8554:	3320      	addeq	r3, #32
   b8556:	f1a3 030b 	sub.w	r3, r3, #11
   b855a:	f1b3 0220 	subs.w	r2, r3, #32
   b855e:	da0c      	bge.n	b857a <__adddf3+0x16e>
   b8560:	320c      	adds	r2, #12
   b8562:	dd08      	ble.n	b8576 <__adddf3+0x16a>
   b8564:	f102 0c14 	add.w	ip, r2, #20
   b8568:	f1c2 020c 	rsb	r2, r2, #12
   b856c:	fa01 f00c 	lsl.w	r0, r1, ip
   b8570:	fa21 f102 	lsr.w	r1, r1, r2
   b8574:	e00c      	b.n	b8590 <__adddf3+0x184>
   b8576:	f102 0214 	add.w	r2, r2, #20
   b857a:	bfd8      	it	le
   b857c:	f1c2 0c20 	rsble	ip, r2, #32
   b8580:	fa01 f102 	lsl.w	r1, r1, r2
   b8584:	fa20 fc0c 	lsr.w	ip, r0, ip
   b8588:	bfdc      	itt	le
   b858a:	ea41 010c 	orrle.w	r1, r1, ip
   b858e:	4090      	lslle	r0, r2
   b8590:	1ae4      	subs	r4, r4, r3
   b8592:	bfa2      	ittt	ge
   b8594:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b8598:	4329      	orrge	r1, r5
   b859a:	bd30      	popge	{r4, r5, pc}
   b859c:	ea6f 0404 	mvn.w	r4, r4
   b85a0:	3c1f      	subs	r4, #31
   b85a2:	da1c      	bge.n	b85de <__adddf3+0x1d2>
   b85a4:	340c      	adds	r4, #12
   b85a6:	dc0e      	bgt.n	b85c6 <__adddf3+0x1ba>
   b85a8:	f104 0414 	add.w	r4, r4, #20
   b85ac:	f1c4 0220 	rsb	r2, r4, #32
   b85b0:	fa20 f004 	lsr.w	r0, r0, r4
   b85b4:	fa01 f302 	lsl.w	r3, r1, r2
   b85b8:	ea40 0003 	orr.w	r0, r0, r3
   b85bc:	fa21 f304 	lsr.w	r3, r1, r4
   b85c0:	ea45 0103 	orr.w	r1, r5, r3
   b85c4:	bd30      	pop	{r4, r5, pc}
   b85c6:	f1c4 040c 	rsb	r4, r4, #12
   b85ca:	f1c4 0220 	rsb	r2, r4, #32
   b85ce:	fa20 f002 	lsr.w	r0, r0, r2
   b85d2:	fa01 f304 	lsl.w	r3, r1, r4
   b85d6:	ea40 0003 	orr.w	r0, r0, r3
   b85da:	4629      	mov	r1, r5
   b85dc:	bd30      	pop	{r4, r5, pc}
   b85de:	fa21 f004 	lsr.w	r0, r1, r4
   b85e2:	4629      	mov	r1, r5
   b85e4:	bd30      	pop	{r4, r5, pc}
   b85e6:	f094 0f00 	teq	r4, #0
   b85ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b85ee:	bf06      	itte	eq
   b85f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b85f4:	3401      	addeq	r4, #1
   b85f6:	3d01      	subne	r5, #1
   b85f8:	e74e      	b.n	b8498 <__adddf3+0x8c>
   b85fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b85fe:	bf18      	it	ne
   b8600:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8604:	d029      	beq.n	b865a <__adddf3+0x24e>
   b8606:	ea94 0f05 	teq	r4, r5
   b860a:	bf08      	it	eq
   b860c:	ea90 0f02 	teqeq	r0, r2
   b8610:	d005      	beq.n	b861e <__adddf3+0x212>
   b8612:	ea54 0c00 	orrs.w	ip, r4, r0
   b8616:	bf04      	itt	eq
   b8618:	4619      	moveq	r1, r3
   b861a:	4610      	moveq	r0, r2
   b861c:	bd30      	pop	{r4, r5, pc}
   b861e:	ea91 0f03 	teq	r1, r3
   b8622:	bf1e      	ittt	ne
   b8624:	2100      	movne	r1, #0
   b8626:	2000      	movne	r0, #0
   b8628:	bd30      	popne	{r4, r5, pc}
   b862a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b862e:	d105      	bne.n	b863c <__adddf3+0x230>
   b8630:	0040      	lsls	r0, r0, #1
   b8632:	4149      	adcs	r1, r1
   b8634:	bf28      	it	cs
   b8636:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b863a:	bd30      	pop	{r4, r5, pc}
   b863c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b8640:	bf3c      	itt	cc
   b8642:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b8646:	bd30      	popcc	{r4, r5, pc}
   b8648:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b864c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b8650:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8654:	f04f 0000 	mov.w	r0, #0
   b8658:	bd30      	pop	{r4, r5, pc}
   b865a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b865e:	bf1a      	itte	ne
   b8660:	4619      	movne	r1, r3
   b8662:	4610      	movne	r0, r2
   b8664:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b8668:	bf1c      	itt	ne
   b866a:	460b      	movne	r3, r1
   b866c:	4602      	movne	r2, r0
   b866e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8672:	bf06      	itte	eq
   b8674:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b8678:	ea91 0f03 	teqeq	r1, r3
   b867c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b8680:	bd30      	pop	{r4, r5, pc}
   b8682:	bf00      	nop

000b8684 <__aeabi_ui2d>:
   b8684:	f090 0f00 	teq	r0, #0
   b8688:	bf04      	itt	eq
   b868a:	2100      	moveq	r1, #0
   b868c:	4770      	bxeq	lr
   b868e:	b530      	push	{r4, r5, lr}
   b8690:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8694:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8698:	f04f 0500 	mov.w	r5, #0
   b869c:	f04f 0100 	mov.w	r1, #0
   b86a0:	e750      	b.n	b8544 <__adddf3+0x138>
   b86a2:	bf00      	nop

000b86a4 <__aeabi_i2d>:
   b86a4:	f090 0f00 	teq	r0, #0
   b86a8:	bf04      	itt	eq
   b86aa:	2100      	moveq	r1, #0
   b86ac:	4770      	bxeq	lr
   b86ae:	b530      	push	{r4, r5, lr}
   b86b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b86b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b86b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b86bc:	bf48      	it	mi
   b86be:	4240      	negmi	r0, r0
   b86c0:	f04f 0100 	mov.w	r1, #0
   b86c4:	e73e      	b.n	b8544 <__adddf3+0x138>
   b86c6:	bf00      	nop

000b86c8 <__aeabi_f2d>:
   b86c8:	0042      	lsls	r2, r0, #1
   b86ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b86ce:	ea4f 0131 	mov.w	r1, r1, rrx
   b86d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b86d6:	bf1f      	itttt	ne
   b86d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b86dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b86e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b86e4:	4770      	bxne	lr
   b86e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b86ea:	bf08      	it	eq
   b86ec:	4770      	bxeq	lr
   b86ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b86f2:	bf04      	itt	eq
   b86f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b86f8:	4770      	bxeq	lr
   b86fa:	b530      	push	{r4, r5, lr}
   b86fc:	f44f 7460 	mov.w	r4, #896	; 0x380
   b8700:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8704:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8708:	e71c      	b.n	b8544 <__adddf3+0x138>
   b870a:	bf00      	nop

000b870c <__aeabi_ul2d>:
   b870c:	ea50 0201 	orrs.w	r2, r0, r1
   b8710:	bf08      	it	eq
   b8712:	4770      	bxeq	lr
   b8714:	b530      	push	{r4, r5, lr}
   b8716:	f04f 0500 	mov.w	r5, #0
   b871a:	e00a      	b.n	b8732 <__aeabi_l2d+0x16>

000b871c <__aeabi_l2d>:
   b871c:	ea50 0201 	orrs.w	r2, r0, r1
   b8720:	bf08      	it	eq
   b8722:	4770      	bxeq	lr
   b8724:	b530      	push	{r4, r5, lr}
   b8726:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b872a:	d502      	bpl.n	b8732 <__aeabi_l2d+0x16>
   b872c:	4240      	negs	r0, r0
   b872e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8732:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8736:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b873a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b873e:	f43f aed8 	beq.w	b84f2 <__adddf3+0xe6>
   b8742:	f04f 0203 	mov.w	r2, #3
   b8746:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b874a:	bf18      	it	ne
   b874c:	3203      	addne	r2, #3
   b874e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b8752:	bf18      	it	ne
   b8754:	3203      	addne	r2, #3
   b8756:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b875a:	f1c2 0320 	rsb	r3, r2, #32
   b875e:	fa00 fc03 	lsl.w	ip, r0, r3
   b8762:	fa20 f002 	lsr.w	r0, r0, r2
   b8766:	fa01 fe03 	lsl.w	lr, r1, r3
   b876a:	ea40 000e 	orr.w	r0, r0, lr
   b876e:	fa21 f102 	lsr.w	r1, r1, r2
   b8772:	4414      	add	r4, r2
   b8774:	e6bd      	b.n	b84f2 <__adddf3+0xe6>
   b8776:	bf00      	nop

000b8778 <__aeabi_dmul>:
   b8778:	b570      	push	{r4, r5, r6, lr}
   b877a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b877e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b8782:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b8786:	bf1d      	ittte	ne
   b8788:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b878c:	ea94 0f0c 	teqne	r4, ip
   b8790:	ea95 0f0c 	teqne	r5, ip
   b8794:	f000 f8de 	bleq	b8954 <__aeabi_dmul+0x1dc>
   b8798:	442c      	add	r4, r5
   b879a:	ea81 0603 	eor.w	r6, r1, r3
   b879e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b87a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b87a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b87aa:	bf18      	it	ne
   b87ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b87b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b87b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b87b8:	d038      	beq.n	b882c <__aeabi_dmul+0xb4>
   b87ba:	fba0 ce02 	umull	ip, lr, r0, r2
   b87be:	f04f 0500 	mov.w	r5, #0
   b87c2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b87c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b87ca:	fbe0 e503 	umlal	lr, r5, r0, r3
   b87ce:	f04f 0600 	mov.w	r6, #0
   b87d2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b87d6:	f09c 0f00 	teq	ip, #0
   b87da:	bf18      	it	ne
   b87dc:	f04e 0e01 	orrne.w	lr, lr, #1
   b87e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b87e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b87e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b87ec:	d204      	bcs.n	b87f8 <__aeabi_dmul+0x80>
   b87ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b87f2:	416d      	adcs	r5, r5
   b87f4:	eb46 0606 	adc.w	r6, r6, r6
   b87f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b87fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b8800:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b8804:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b8808:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b880c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b8810:	bf88      	it	hi
   b8812:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8816:	d81e      	bhi.n	b8856 <__aeabi_dmul+0xde>
   b8818:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b881c:	bf08      	it	eq
   b881e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b8822:	f150 0000 	adcs.w	r0, r0, #0
   b8826:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b882a:	bd70      	pop	{r4, r5, r6, pc}
   b882c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b8830:	ea46 0101 	orr.w	r1, r6, r1
   b8834:	ea40 0002 	orr.w	r0, r0, r2
   b8838:	ea81 0103 	eor.w	r1, r1, r3
   b883c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b8840:	bfc2      	ittt	gt
   b8842:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8846:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b884a:	bd70      	popgt	{r4, r5, r6, pc}
   b884c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8850:	f04f 0e00 	mov.w	lr, #0
   b8854:	3c01      	subs	r4, #1
   b8856:	f300 80ab 	bgt.w	b89b0 <__aeabi_dmul+0x238>
   b885a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b885e:	bfde      	ittt	le
   b8860:	2000      	movle	r0, #0
   b8862:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b8866:	bd70      	pople	{r4, r5, r6, pc}
   b8868:	f1c4 0400 	rsb	r4, r4, #0
   b886c:	3c20      	subs	r4, #32
   b886e:	da35      	bge.n	b88dc <__aeabi_dmul+0x164>
   b8870:	340c      	adds	r4, #12
   b8872:	dc1b      	bgt.n	b88ac <__aeabi_dmul+0x134>
   b8874:	f104 0414 	add.w	r4, r4, #20
   b8878:	f1c4 0520 	rsb	r5, r4, #32
   b887c:	fa00 f305 	lsl.w	r3, r0, r5
   b8880:	fa20 f004 	lsr.w	r0, r0, r4
   b8884:	fa01 f205 	lsl.w	r2, r1, r5
   b8888:	ea40 0002 	orr.w	r0, r0, r2
   b888c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b8890:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8894:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8898:	fa21 f604 	lsr.w	r6, r1, r4
   b889c:	eb42 0106 	adc.w	r1, r2, r6
   b88a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b88a4:	bf08      	it	eq
   b88a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b88aa:	bd70      	pop	{r4, r5, r6, pc}
   b88ac:	f1c4 040c 	rsb	r4, r4, #12
   b88b0:	f1c4 0520 	rsb	r5, r4, #32
   b88b4:	fa00 f304 	lsl.w	r3, r0, r4
   b88b8:	fa20 f005 	lsr.w	r0, r0, r5
   b88bc:	fa01 f204 	lsl.w	r2, r1, r4
   b88c0:	ea40 0002 	orr.w	r0, r0, r2
   b88c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b88c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b88cc:	f141 0100 	adc.w	r1, r1, #0
   b88d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b88d4:	bf08      	it	eq
   b88d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b88da:	bd70      	pop	{r4, r5, r6, pc}
   b88dc:	f1c4 0520 	rsb	r5, r4, #32
   b88e0:	fa00 f205 	lsl.w	r2, r0, r5
   b88e4:	ea4e 0e02 	orr.w	lr, lr, r2
   b88e8:	fa20 f304 	lsr.w	r3, r0, r4
   b88ec:	fa01 f205 	lsl.w	r2, r1, r5
   b88f0:	ea43 0302 	orr.w	r3, r3, r2
   b88f4:	fa21 f004 	lsr.w	r0, r1, r4
   b88f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b88fc:	fa21 f204 	lsr.w	r2, r1, r4
   b8900:	ea20 0002 	bic.w	r0, r0, r2
   b8904:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b8908:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b890c:	bf08      	it	eq
   b890e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8912:	bd70      	pop	{r4, r5, r6, pc}
   b8914:	f094 0f00 	teq	r4, #0
   b8918:	d10f      	bne.n	b893a <__aeabi_dmul+0x1c2>
   b891a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b891e:	0040      	lsls	r0, r0, #1
   b8920:	eb41 0101 	adc.w	r1, r1, r1
   b8924:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8928:	bf08      	it	eq
   b892a:	3c01      	subeq	r4, #1
   b892c:	d0f7      	beq.n	b891e <__aeabi_dmul+0x1a6>
   b892e:	ea41 0106 	orr.w	r1, r1, r6
   b8932:	f095 0f00 	teq	r5, #0
   b8936:	bf18      	it	ne
   b8938:	4770      	bxne	lr
   b893a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b893e:	0052      	lsls	r2, r2, #1
   b8940:	eb43 0303 	adc.w	r3, r3, r3
   b8944:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b8948:	bf08      	it	eq
   b894a:	3d01      	subeq	r5, #1
   b894c:	d0f7      	beq.n	b893e <__aeabi_dmul+0x1c6>
   b894e:	ea43 0306 	orr.w	r3, r3, r6
   b8952:	4770      	bx	lr
   b8954:	ea94 0f0c 	teq	r4, ip
   b8958:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b895c:	bf18      	it	ne
   b895e:	ea95 0f0c 	teqne	r5, ip
   b8962:	d00c      	beq.n	b897e <__aeabi_dmul+0x206>
   b8964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8968:	bf18      	it	ne
   b896a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b896e:	d1d1      	bne.n	b8914 <__aeabi_dmul+0x19c>
   b8970:	ea81 0103 	eor.w	r1, r1, r3
   b8974:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8978:	f04f 0000 	mov.w	r0, #0
   b897c:	bd70      	pop	{r4, r5, r6, pc}
   b897e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8982:	bf06      	itte	eq
   b8984:	4610      	moveq	r0, r2
   b8986:	4619      	moveq	r1, r3
   b8988:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b898c:	d019      	beq.n	b89c2 <__aeabi_dmul+0x24a>
   b898e:	ea94 0f0c 	teq	r4, ip
   b8992:	d102      	bne.n	b899a <__aeabi_dmul+0x222>
   b8994:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b8998:	d113      	bne.n	b89c2 <__aeabi_dmul+0x24a>
   b899a:	ea95 0f0c 	teq	r5, ip
   b899e:	d105      	bne.n	b89ac <__aeabi_dmul+0x234>
   b89a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b89a4:	bf1c      	itt	ne
   b89a6:	4610      	movne	r0, r2
   b89a8:	4619      	movne	r1, r3
   b89aa:	d10a      	bne.n	b89c2 <__aeabi_dmul+0x24a>
   b89ac:	ea81 0103 	eor.w	r1, r1, r3
   b89b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b89b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b89b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b89bc:	f04f 0000 	mov.w	r0, #0
   b89c0:	bd70      	pop	{r4, r5, r6, pc}
   b89c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b89c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b89ca:	bd70      	pop	{r4, r5, r6, pc}

000b89cc <__aeabi_ddiv>:
   b89cc:	b570      	push	{r4, r5, r6, lr}
   b89ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b89d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b89d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b89da:	bf1d      	ittte	ne
   b89dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b89e0:	ea94 0f0c 	teqne	r4, ip
   b89e4:	ea95 0f0c 	teqne	r5, ip
   b89e8:	f000 f8a7 	bleq	b8b3a <__aeabi_ddiv+0x16e>
   b89ec:	eba4 0405 	sub.w	r4, r4, r5
   b89f0:	ea81 0e03 	eor.w	lr, r1, r3
   b89f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b89f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b89fc:	f000 8088 	beq.w	b8b10 <__aeabi_ddiv+0x144>
   b8a00:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8a04:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b8a08:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b8a0c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b8a10:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b8a14:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b8a18:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b8a1c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b8a20:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b8a24:	429d      	cmp	r5, r3
   b8a26:	bf08      	it	eq
   b8a28:	4296      	cmpeq	r6, r2
   b8a2a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b8a2e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b8a32:	d202      	bcs.n	b8a3a <__aeabi_ddiv+0x6e>
   b8a34:	085b      	lsrs	r3, r3, #1
   b8a36:	ea4f 0232 	mov.w	r2, r2, rrx
   b8a3a:	1ab6      	subs	r6, r6, r2
   b8a3c:	eb65 0503 	sbc.w	r5, r5, r3
   b8a40:	085b      	lsrs	r3, r3, #1
   b8a42:	ea4f 0232 	mov.w	r2, r2, rrx
   b8a46:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b8a4a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b8a4e:	ebb6 0e02 	subs.w	lr, r6, r2
   b8a52:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8a56:	bf22      	ittt	cs
   b8a58:	1ab6      	subcs	r6, r6, r2
   b8a5a:	4675      	movcs	r5, lr
   b8a5c:	ea40 000c 	orrcs.w	r0, r0, ip
   b8a60:	085b      	lsrs	r3, r3, #1
   b8a62:	ea4f 0232 	mov.w	r2, r2, rrx
   b8a66:	ebb6 0e02 	subs.w	lr, r6, r2
   b8a6a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8a6e:	bf22      	ittt	cs
   b8a70:	1ab6      	subcs	r6, r6, r2
   b8a72:	4675      	movcs	r5, lr
   b8a74:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b8a78:	085b      	lsrs	r3, r3, #1
   b8a7a:	ea4f 0232 	mov.w	r2, r2, rrx
   b8a7e:	ebb6 0e02 	subs.w	lr, r6, r2
   b8a82:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8a86:	bf22      	ittt	cs
   b8a88:	1ab6      	subcs	r6, r6, r2
   b8a8a:	4675      	movcs	r5, lr
   b8a8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b8a90:	085b      	lsrs	r3, r3, #1
   b8a92:	ea4f 0232 	mov.w	r2, r2, rrx
   b8a96:	ebb6 0e02 	subs.w	lr, r6, r2
   b8a9a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8a9e:	bf22      	ittt	cs
   b8aa0:	1ab6      	subcs	r6, r6, r2
   b8aa2:	4675      	movcs	r5, lr
   b8aa4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b8aa8:	ea55 0e06 	orrs.w	lr, r5, r6
   b8aac:	d018      	beq.n	b8ae0 <__aeabi_ddiv+0x114>
   b8aae:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b8ab2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b8ab6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b8aba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b8abe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b8ac2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b8ac6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b8aca:	d1c0      	bne.n	b8a4e <__aeabi_ddiv+0x82>
   b8acc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8ad0:	d10b      	bne.n	b8aea <__aeabi_ddiv+0x11e>
   b8ad2:	ea41 0100 	orr.w	r1, r1, r0
   b8ad6:	f04f 0000 	mov.w	r0, #0
   b8ada:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b8ade:	e7b6      	b.n	b8a4e <__aeabi_ddiv+0x82>
   b8ae0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8ae4:	bf04      	itt	eq
   b8ae6:	4301      	orreq	r1, r0
   b8ae8:	2000      	moveq	r0, #0
   b8aea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b8aee:	bf88      	it	hi
   b8af0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8af4:	f63f aeaf 	bhi.w	b8856 <__aeabi_dmul+0xde>
   b8af8:	ebb5 0c03 	subs.w	ip, r5, r3
   b8afc:	bf04      	itt	eq
   b8afe:	ebb6 0c02 	subseq.w	ip, r6, r2
   b8b02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8b06:	f150 0000 	adcs.w	r0, r0, #0
   b8b0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8b0e:	bd70      	pop	{r4, r5, r6, pc}
   b8b10:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b8b14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b8b18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b8b1c:	bfc2      	ittt	gt
   b8b1e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8b22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8b26:	bd70      	popgt	{r4, r5, r6, pc}
   b8b28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8b2c:	f04f 0e00 	mov.w	lr, #0
   b8b30:	3c01      	subs	r4, #1
   b8b32:	e690      	b.n	b8856 <__aeabi_dmul+0xde>
   b8b34:	ea45 0e06 	orr.w	lr, r5, r6
   b8b38:	e68d      	b.n	b8856 <__aeabi_dmul+0xde>
   b8b3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8b3e:	ea94 0f0c 	teq	r4, ip
   b8b42:	bf08      	it	eq
   b8b44:	ea95 0f0c 	teqeq	r5, ip
   b8b48:	f43f af3b 	beq.w	b89c2 <__aeabi_dmul+0x24a>
   b8b4c:	ea94 0f0c 	teq	r4, ip
   b8b50:	d10a      	bne.n	b8b68 <__aeabi_ddiv+0x19c>
   b8b52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8b56:	f47f af34 	bne.w	b89c2 <__aeabi_dmul+0x24a>
   b8b5a:	ea95 0f0c 	teq	r5, ip
   b8b5e:	f47f af25 	bne.w	b89ac <__aeabi_dmul+0x234>
   b8b62:	4610      	mov	r0, r2
   b8b64:	4619      	mov	r1, r3
   b8b66:	e72c      	b.n	b89c2 <__aeabi_dmul+0x24a>
   b8b68:	ea95 0f0c 	teq	r5, ip
   b8b6c:	d106      	bne.n	b8b7c <__aeabi_ddiv+0x1b0>
   b8b6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8b72:	f43f aefd 	beq.w	b8970 <__aeabi_dmul+0x1f8>
   b8b76:	4610      	mov	r0, r2
   b8b78:	4619      	mov	r1, r3
   b8b7a:	e722      	b.n	b89c2 <__aeabi_dmul+0x24a>
   b8b7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8b80:	bf18      	it	ne
   b8b82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8b86:	f47f aec5 	bne.w	b8914 <__aeabi_dmul+0x19c>
   b8b8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b8b8e:	f47f af0d 	bne.w	b89ac <__aeabi_dmul+0x234>
   b8b92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b8b96:	f47f aeeb 	bne.w	b8970 <__aeabi_dmul+0x1f8>
   b8b9a:	e712      	b.n	b89c2 <__aeabi_dmul+0x24a>

000b8b9c <__aeabi_d2uiz>:
   b8b9c:	004a      	lsls	r2, r1, #1
   b8b9e:	d211      	bcs.n	b8bc4 <__aeabi_d2uiz+0x28>
   b8ba0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b8ba4:	d211      	bcs.n	b8bca <__aeabi_d2uiz+0x2e>
   b8ba6:	d50d      	bpl.n	b8bc4 <__aeabi_d2uiz+0x28>
   b8ba8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b8bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b8bb0:	d40e      	bmi.n	b8bd0 <__aeabi_d2uiz+0x34>
   b8bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b8bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b8bbe:	fa23 f002 	lsr.w	r0, r3, r2
   b8bc2:	4770      	bx	lr
   b8bc4:	f04f 0000 	mov.w	r0, #0
   b8bc8:	4770      	bx	lr
   b8bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b8bce:	d102      	bne.n	b8bd6 <__aeabi_d2uiz+0x3a>
   b8bd0:	f04f 30ff 	mov.w	r0, #4294967295
   b8bd4:	4770      	bx	lr
   b8bd6:	f04f 0000 	mov.w	r0, #0
   b8bda:	4770      	bx	lr

000b8bdc <__aeabi_f2lz>:
   b8bdc:	ee07 0a90 	vmov	s15, r0
   b8be0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b8be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b8be8:	d401      	bmi.n	b8bee <__aeabi_f2lz+0x12>
   b8bea:	f000 b80b 	b.w	b8c04 <__aeabi_f2ulz>
   b8bee:	eef1 7a67 	vneg.f32	s15, s15
   b8bf2:	b508      	push	{r3, lr}
   b8bf4:	ee17 0a90 	vmov	r0, s15
   b8bf8:	f000 f804 	bl	b8c04 <__aeabi_f2ulz>
   b8bfc:	4240      	negs	r0, r0
   b8bfe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8c02:	bd08      	pop	{r3, pc}

000b8c04 <__aeabi_f2ulz>:
   b8c04:	b5d0      	push	{r4, r6, r7, lr}
   b8c06:	f7ff fd5f 	bl	b86c8 <__aeabi_f2d>
   b8c0a:	4b0c      	ldr	r3, [pc, #48]	; (b8c3c <__aeabi_f2ulz+0x38>)
   b8c0c:	2200      	movs	r2, #0
   b8c0e:	4606      	mov	r6, r0
   b8c10:	460f      	mov	r7, r1
   b8c12:	f7ff fdb1 	bl	b8778 <__aeabi_dmul>
   b8c16:	f7ff ffc1 	bl	b8b9c <__aeabi_d2uiz>
   b8c1a:	4604      	mov	r4, r0
   b8c1c:	f7ff fd32 	bl	b8684 <__aeabi_ui2d>
   b8c20:	4b07      	ldr	r3, [pc, #28]	; (b8c40 <__aeabi_f2ulz+0x3c>)
   b8c22:	2200      	movs	r2, #0
   b8c24:	f7ff fda8 	bl	b8778 <__aeabi_dmul>
   b8c28:	4602      	mov	r2, r0
   b8c2a:	460b      	mov	r3, r1
   b8c2c:	4630      	mov	r0, r6
   b8c2e:	4639      	mov	r1, r7
   b8c30:	f7ff fbea 	bl	b8408 <__aeabi_dsub>
   b8c34:	f7ff ffb2 	bl	b8b9c <__aeabi_d2uiz>
   b8c38:	4621      	mov	r1, r4
   b8c3a:	bdd0      	pop	{r4, r6, r7, pc}
   b8c3c:	3df00000 	.word	0x3df00000
   b8c40:	41f00000 	.word	0x41f00000

000b8c44 <asctime_r>:
   b8c44:	b510      	push	{r4, lr}
   b8c46:	460c      	mov	r4, r1
   b8c48:	6941      	ldr	r1, [r0, #20]
   b8c4a:	6903      	ldr	r3, [r0, #16]
   b8c4c:	6982      	ldr	r2, [r0, #24]
   b8c4e:	b086      	sub	sp, #24
   b8c50:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b8c54:	9104      	str	r1, [sp, #16]
   b8c56:	6801      	ldr	r1, [r0, #0]
   b8c58:	9103      	str	r1, [sp, #12]
   b8c5a:	6841      	ldr	r1, [r0, #4]
   b8c5c:	9102      	str	r1, [sp, #8]
   b8c5e:	6881      	ldr	r1, [r0, #8]
   b8c60:	9101      	str	r1, [sp, #4]
   b8c62:	68c1      	ldr	r1, [r0, #12]
   b8c64:	9100      	str	r1, [sp, #0]
   b8c66:	4907      	ldr	r1, [pc, #28]	; (b8c84 <asctime_r+0x40>)
   b8c68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b8c6c:	440b      	add	r3, r1
   b8c6e:	4906      	ldr	r1, [pc, #24]	; (b8c88 <asctime_r+0x44>)
   b8c70:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b8c74:	440a      	add	r2, r1
   b8c76:	4620      	mov	r0, r4
   b8c78:	4904      	ldr	r1, [pc, #16]	; (b8c8c <asctime_r+0x48>)
   b8c7a:	f7fe fb9b 	bl	b73b4 <siprintf>
   b8c7e:	4620      	mov	r0, r4
   b8c80:	b006      	add	sp, #24
   b8c82:	bd10      	pop	{r4, pc}
   b8c84:	000b971e 	.word	0x000b971e
   b8c88:	000b9709 	.word	0x000b9709
   b8c8c:	000b96e9 	.word	0x000b96e9

000b8c90 <atexit>:
   b8c90:	2300      	movs	r3, #0
   b8c92:	4601      	mov	r1, r0
   b8c94:	461a      	mov	r2, r3
   b8c96:	4618      	mov	r0, r3
   b8c98:	f000 b864 	b.w	b8d64 <__register_exitproc>

000b8c9c <memcmp>:
   b8c9c:	b510      	push	{r4, lr}
   b8c9e:	3901      	subs	r1, #1
   b8ca0:	4402      	add	r2, r0
   b8ca2:	4290      	cmp	r0, r2
   b8ca4:	d101      	bne.n	b8caa <memcmp+0xe>
   b8ca6:	2000      	movs	r0, #0
   b8ca8:	e005      	b.n	b8cb6 <memcmp+0x1a>
   b8caa:	7803      	ldrb	r3, [r0, #0]
   b8cac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8cb0:	42a3      	cmp	r3, r4
   b8cb2:	d001      	beq.n	b8cb8 <memcmp+0x1c>
   b8cb4:	1b18      	subs	r0, r3, r4
   b8cb6:	bd10      	pop	{r4, pc}
   b8cb8:	3001      	adds	r0, #1
   b8cba:	e7f2      	b.n	b8ca2 <memcmp+0x6>

000b8cbc <memcpy>:
   b8cbc:	440a      	add	r2, r1
   b8cbe:	4291      	cmp	r1, r2
   b8cc0:	f100 33ff 	add.w	r3, r0, #4294967295
   b8cc4:	d100      	bne.n	b8cc8 <memcpy+0xc>
   b8cc6:	4770      	bx	lr
   b8cc8:	b510      	push	{r4, lr}
   b8cca:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8cce:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8cd2:	4291      	cmp	r1, r2
   b8cd4:	d1f9      	bne.n	b8cca <memcpy+0xe>
   b8cd6:	bd10      	pop	{r4, pc}

000b8cd8 <memset>:
   b8cd8:	4402      	add	r2, r0
   b8cda:	4603      	mov	r3, r0
   b8cdc:	4293      	cmp	r3, r2
   b8cde:	d100      	bne.n	b8ce2 <memset+0xa>
   b8ce0:	4770      	bx	lr
   b8ce2:	f803 1b01 	strb.w	r1, [r3], #1
   b8ce6:	e7f9      	b.n	b8cdc <memset+0x4>

000b8ce8 <srand>:
   b8ce8:	b538      	push	{r3, r4, r5, lr}
   b8cea:	4b10      	ldr	r3, [pc, #64]	; (b8d2c <srand+0x44>)
   b8cec:	681d      	ldr	r5, [r3, #0]
   b8cee:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8cf0:	4604      	mov	r4, r0
   b8cf2:	b9b3      	cbnz	r3, b8d22 <srand+0x3a>
   b8cf4:	2018      	movs	r0, #24
   b8cf6:	f7fe fb45 	bl	b7384 <malloc>
   b8cfa:	4602      	mov	r2, r0
   b8cfc:	63a8      	str	r0, [r5, #56]	; 0x38
   b8cfe:	b920      	cbnz	r0, b8d0a <srand+0x22>
   b8d00:	4b0b      	ldr	r3, [pc, #44]	; (b8d30 <srand+0x48>)
   b8d02:	480c      	ldr	r0, [pc, #48]	; (b8d34 <srand+0x4c>)
   b8d04:	2142      	movs	r1, #66	; 0x42
   b8d06:	f7fe fb65 	bl	b73d4 <__assert_func>
   b8d0a:	490b      	ldr	r1, [pc, #44]	; (b8d38 <srand+0x50>)
   b8d0c:	4b0b      	ldr	r3, [pc, #44]	; (b8d3c <srand+0x54>)
   b8d0e:	e9c0 1300 	strd	r1, r3, [r0]
   b8d12:	4b0b      	ldr	r3, [pc, #44]	; (b8d40 <srand+0x58>)
   b8d14:	6083      	str	r3, [r0, #8]
   b8d16:	230b      	movs	r3, #11
   b8d18:	8183      	strh	r3, [r0, #12]
   b8d1a:	2100      	movs	r1, #0
   b8d1c:	2001      	movs	r0, #1
   b8d1e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8d22:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8d24:	2200      	movs	r2, #0
   b8d26:	611c      	str	r4, [r3, #16]
   b8d28:	615a      	str	r2, [r3, #20]
   b8d2a:	bd38      	pop	{r3, r4, r5, pc}
   b8d2c:	2003e0c0 	.word	0x2003e0c0
   b8d30:	000b9742 	.word	0x000b9742
   b8d34:	000b9759 	.word	0x000b9759
   b8d38:	abcd330e 	.word	0xabcd330e
   b8d3c:	e66d1234 	.word	0xe66d1234
   b8d40:	0005deec 	.word	0x0005deec

000b8d44 <strcpy>:
   b8d44:	4603      	mov	r3, r0
   b8d46:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8d4a:	f803 2b01 	strb.w	r2, [r3], #1
   b8d4e:	2a00      	cmp	r2, #0
   b8d50:	d1f9      	bne.n	b8d46 <strcpy+0x2>
   b8d52:	4770      	bx	lr

000b8d54 <strlen>:
   b8d54:	4603      	mov	r3, r0
   b8d56:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8d5a:	2a00      	cmp	r2, #0
   b8d5c:	d1fb      	bne.n	b8d56 <strlen+0x2>
   b8d5e:	1a18      	subs	r0, r3, r0
   b8d60:	3801      	subs	r0, #1
   b8d62:	4770      	bx	lr

000b8d64 <__register_exitproc>:
   b8d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8d68:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8e24 <__register_exitproc+0xc0>
   b8d6c:	4606      	mov	r6, r0
   b8d6e:	f8d8 0000 	ldr.w	r0, [r8]
   b8d72:	461f      	mov	r7, r3
   b8d74:	460d      	mov	r5, r1
   b8d76:	4691      	mov	r9, r2
   b8d78:	f000 f856 	bl	b8e28 <__retarget_lock_acquire_recursive>
   b8d7c:	4b25      	ldr	r3, [pc, #148]	; (b8e14 <__register_exitproc+0xb0>)
   b8d7e:	681c      	ldr	r4, [r3, #0]
   b8d80:	b934      	cbnz	r4, b8d90 <__register_exitproc+0x2c>
   b8d82:	4c25      	ldr	r4, [pc, #148]	; (b8e18 <__register_exitproc+0xb4>)
   b8d84:	601c      	str	r4, [r3, #0]
   b8d86:	4b25      	ldr	r3, [pc, #148]	; (b8e1c <__register_exitproc+0xb8>)
   b8d88:	b113      	cbz	r3, b8d90 <__register_exitproc+0x2c>
   b8d8a:	681b      	ldr	r3, [r3, #0]
   b8d8c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8d90:	6863      	ldr	r3, [r4, #4]
   b8d92:	2b1f      	cmp	r3, #31
   b8d94:	dd07      	ble.n	b8da6 <__register_exitproc+0x42>
   b8d96:	f8d8 0000 	ldr.w	r0, [r8]
   b8d9a:	f000 f847 	bl	b8e2c <__retarget_lock_release_recursive>
   b8d9e:	f04f 30ff 	mov.w	r0, #4294967295
   b8da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8da6:	b34e      	cbz	r6, b8dfc <__register_exitproc+0x98>
   b8da8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8dac:	b988      	cbnz	r0, b8dd2 <__register_exitproc+0x6e>
   b8dae:	4b1c      	ldr	r3, [pc, #112]	; (b8e20 <__register_exitproc+0xbc>)
   b8db0:	b923      	cbnz	r3, b8dbc <__register_exitproc+0x58>
   b8db2:	f8d8 0000 	ldr.w	r0, [r8]
   b8db6:	f000 f838 	bl	b8e2a <__retarget_lock_release>
   b8dba:	e7f0      	b.n	b8d9e <__register_exitproc+0x3a>
   b8dbc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8dc0:	f7fe fae0 	bl	b7384 <malloc>
   b8dc4:	2800      	cmp	r0, #0
   b8dc6:	d0f4      	beq.n	b8db2 <__register_exitproc+0x4e>
   b8dc8:	2300      	movs	r3, #0
   b8dca:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8dce:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8dd2:	6863      	ldr	r3, [r4, #4]
   b8dd4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8dd8:	2201      	movs	r2, #1
   b8dda:	409a      	lsls	r2, r3
   b8ddc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8de0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8de4:	4313      	orrs	r3, r2
   b8de6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8dea:	2e02      	cmp	r6, #2
   b8dec:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8df0:	bf02      	ittt	eq
   b8df2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8df6:	4313      	orreq	r3, r2
   b8df8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8dfc:	6863      	ldr	r3, [r4, #4]
   b8dfe:	f8d8 0000 	ldr.w	r0, [r8]
   b8e02:	1c5a      	adds	r2, r3, #1
   b8e04:	3302      	adds	r3, #2
   b8e06:	6062      	str	r2, [r4, #4]
   b8e08:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8e0c:	f000 f80e 	bl	b8e2c <__retarget_lock_release_recursive>
   b8e10:	2000      	movs	r0, #0
   b8e12:	e7c6      	b.n	b8da2 <__register_exitproc+0x3e>
   b8e14:	2003e7e8 	.word	0x2003e7e8
   b8e18:	2003e75c 	.word	0x2003e75c
   b8e1c:	00000000 	.word	0x00000000
   b8e20:	000b7385 	.word	0x000b7385
   b8e24:	2003e124 	.word	0x2003e124

000b8e28 <__retarget_lock_acquire_recursive>:
   b8e28:	4770      	bx	lr

000b8e2a <__retarget_lock_release>:
   b8e2a:	4770      	bx	lr

000b8e2c <__retarget_lock_release_recursive>:
   b8e2c:	4770      	bx	lr

000b8e2e <link_code_end>:
	...

000b8e30 <dynalib_user>:
   b8e30:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b8e40:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   b8e50:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   b8e60:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   b8e70:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   b8e80:	4f4d 4544 7525 003e 4d42 2045 3832 2030     MODE%u>.BME 280 
   b8e90:	6964 2064 6f6e 2074 6e69 7469 6169 696c     did not initiali
   b8ea0:	657a 6320 726f 6572 7463 796c 202e 5020     ze correctly.  P
   b8eb0:	656c 7361 2065 6572 6573 2e74 000a 4d42     lease reset...BM
   b8ec0:	2045 3832 2030 7572 6e6e 6e69 0a67 7500     E 280 running..u
   b8ed0:	4453 6320 7261 2064 6e69 7469 6169 696c     SD card initiali
   b8ee0:	657a 2e64 000a 6143 6472 6620 6961 656c     zed...Card faile
   b8ef0:	2c64 6f20 2072 6f6e 2074 7270 7365 6e65     d, or not presen
   b8f00:	0a74 7400 7365 4674 6c69 2e65 7363 0076     t..testFile.csv.
   b8f10:	6954 656d 202c 6554 706d 202c 7250 7365     Time, Temp, Pres
   b8f20:	202c 6f4d 7369 4874 202c 6f4d 7369 4c74     , MoistH, MoistL
   b8f30:	0a20 2500 2c73 2520 2e30 6632 202c 3025      ..%s, %0.2f, %0
   b8f40:	322e 2c66 2520 2c69 2520 2069 000a 7265     .2f, %i, %i ..er
   b8f50:	6f72 2072 706f 6e65 6e69 2067 6574 7473     ror opening test
   b8f60:	6946 656c 632e 7673 0a20 2000 2020 5420     File.csv ..    T
   b8f70:	6d69 2065 7369 203a 7325 000a 6554 706d     ime is: %s..Temp
   b8f80:	7265 7461 7275 3a65 2520 2e30 6632 000a     erature: %0.2f..
   b8f90:	2020 4820 6d75 6469 7469 3a79 2520 2e30        Humidity: %0.
   b8fa0:	6632 000a 6f4d 7369 7574 6572 4820 3a69     2f..Moisture Hi:
   b8fb0:	2520 0a69 4d00 696f 7473 7275 2065 6f4c      %i..Moisture Lo
   b8fc0:	203a 6925 000a 0000                         : %i....

000b8fc8 <_ZTVN8particle11SPISettingsE>:
	...
   b8fd0:	4161 000b 40c1 000b 40df 000b               aA...@...@..

000b8fdc <_ZTV4File>:
	...
   b8fe4:	40dd 000b 40ed 000b 412d 000b 4127 000b     .@...@..-A..'A..
   b8ff4:	40c3 000b 4107 000b 4101 000b 40fb 000b     .@...A...A...@..

000b9004 <_ZTV16Adafruit_SSD1306>:
	...
   b900c:	5111 000b 51a1 000b 580d 000b 7889 000b     .Q...Q...X...x..
   b901c:	5115 000b 5525 000b 4f9d 000b 4e2d 000b     .Q..%U...O..-N..
   b902c:	55e3 000b 5681 000b 56b7 000b 56d3 000b     .U...V...V...V..

000b903c <_ZL4font>:
   b903c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b904c:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b905c:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b906c:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b907c:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b908c:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b909c:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b90ac:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b90bc:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b90cc:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b90dc:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b90ec:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b90fc:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b910c:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b911c:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b912c:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b913c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b914c:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b915c:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b916c:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b917c:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b918c:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b919c:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b91ac:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b91bc:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b91cc:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b91dc:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b91ec:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b91fc:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b920c:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b921c:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b922c:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b923c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b924c:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b925c:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b926c:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b927c:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b928c:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b929c:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b92ac:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b92bc:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b92cc:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b92dc:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b92ec:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b92fc:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b930c:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b931c:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b932c:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b933c:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b934c:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b935c:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b936c:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b937c:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b938c:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b939c:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b93ac:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b93bc:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b93cc:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b93dc:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b93ec:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b93fc:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b940c:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b941c:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b942c:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b943c:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b944c:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b945c:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b946c:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b947c:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b948c:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b949c:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b94ac:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b94bc:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b94cc:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b94dc:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b94ec:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b94fc:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b950c:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b951c:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b952c:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000b9538 <_ZTV12Adafruit_GFX>:
	...
   b9548:	580d 000b 7889 000b 409d 000b 5525 000b     .X...x...@..%U..
   b9558:	564b 000b 5667 000b 55e3 000b 5681 000b     KV..gV...U...V..
   b9568:	56b7 000b 56d3 000b                         .V...V..

000b9570 <_ZTVN5spark13EthernetClassE>:
	...
   b9578:	7463 000b 7459 000b 744f 000b 7445 000b     ct..Yt..Ot..Et..
   b9588:	7439 000b 742d 000b 8079 000b 8081 000b     9t..-t..y.......
   b9598:	7421 000b 7419 000b 740f 000b 7405 000b     !t...t...t...t..
   b95a8:	80b1 000b                                   ....

000b95ac <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b95ac:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   b95bc:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   b95cc:	7361 7463 6d69 0065                         asctime.

000b95d4 <_ZTV9IPAddress>:
	...
   b95dc:	7c35 000b 7c25 000b 7c27 000b               5|..%|..'|..

000b95e8 <_ZTV9USBSerial>:
	...
   b95f0:	7d1b 000b 7d83 000b 7d59 000b 7889 000b     .}...}..Y}...x..
   b9600:	7d4b 000b 7d1d 000b 7d2d 000b 7d7d 000b     K}...}..-}..}}..
   b9610:	7d3d 000b 7d15 000b                         =}...}..

000b9618 <_ZTV11USARTSerial>:
	...
   b9620:	7e29 000b 7e95 000b 7e6d 000b 7889 000b     )~...~..m~...x..
   b9630:	7e3d 000b 7e59 000b 7e4b 000b 7e67 000b     =~..Y~..K~..g~..
   b9640:	7e2b 000b 7e2f 000b                         +~../~..

000b9648 <_ZTV7TwoWire>:
	...
   b9650:	7ecd 000b 7f17 000b 7eef 000b 7ecf 000b     .~.......~...~..
   b9660:	7ef7 000b 7eff 000b 7f07 000b 7f0f 000b     .~...~..........

000b9670 <_ZTVN5spark9WiFiClassE>:
	...
   b9678:	801b 000b 8011 000b 8007 000b 7fc9 000b     ................
   b9688:	7979 000b 7ffb 000b 8079 000b 8081 000b     yy......y.......
   b9698:	7fef 000b 7fe7 000b 7fdd 000b 7fd3 000b     ................
   b96a8:	80b1 000b                                   ....

000b96ac <_ZTVN5spark12NetworkClassE>:
	...
   b96b4:	8039 000b 8043 000b 804d 000b 8057 000b     9...C...M...W...
   b96c4:	8061 000b 806d 000b 8079 000b 8081 000b     a...m...y.......
   b96d4:	8089 000b 8095 000b 809d 000b 80a7 000b     ................
   b96e4:	80b1 000b                                   ....

000b96e8 <_ZSt7nothrow>:
   b96e8:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   b96f8:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000b9709 <day_name.1>:
   b9709:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   b9719:	6972 6153                                    riSat

000b971e <mon_name.0>:
   b971e:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   b972e:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   b973e:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   b974e:	7320 6375 6563 6465 6465 2f00 6e6d 2f74      succeeded./mnt/
   b975e:	6f77 6b72 7073 6361 2f65 6f77 6b72 7073     workspace/worksp
   b976e:	6361 2f65 4347 2d43 3031 702d 7069 6c65     ace/GCC-10-pipel
   b977e:	6e69 2f65 656a 6b6e 6e69 2d73 4347 2d43     ine/jenkins-GCC-
   b978e:	3031 702d 7069 6c65 6e69 2d65 3834 325f     10-pipeline-48_2
   b979e:	3230 3130 3231 5f34 3631 3630 3831 3630     0201124_16061806
   b97ae:	3134 732f 6372 6e2f 7765 696c 2f62 656e     41/src/newlib/ne
   b97be:	6c77 6269 6c2f 6269 2f63 7473 6c64 6269     wlib/libc/stdlib
   b97ce:	722f 6e61 2e64 0063                         /rand.c.

000b97d6 <link_const_variable_data_end>:
	...

000b97d8 <link_constructors_location>:
   b97d8:	000b4671 	.word	0x000b4671
   b97dc:	000b746d 	.word	0x000b746d
   b97e0:	000b770d 	.word	0x000b770d
   b97e4:	000b7879 	.word	0x000b7879
   b97e8:	000b7985 	.word	0x000b7985
   b97ec:	000b7ac5 	.word	0x000b7ac5
   b97f0:	000b7ae1 	.word	0x000b7ae1
   b97f4:	000b8025 	.word	0x000b8025
   b97f8:	000b8189 	.word	0x000b8189

000b97fc <link_constructors_end>:
   b97fc:	00000000 	.word	0x00000000
