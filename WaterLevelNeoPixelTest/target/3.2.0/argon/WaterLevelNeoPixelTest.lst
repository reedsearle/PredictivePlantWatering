
c:/Users/reed_/Documents/IoT/PredictiveWateringSystem/WaterLevelNeoPixelTest/target/3.2.0/argon/WaterLevelNeoPixelTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003810  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b7830  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e620  000b7834  0001e620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000164  2003e68c  2003e68c  0002e68c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b78a0  000b78a0  000278a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b78c8  000b78c8  000278c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00101562  00000000  00000000  000278cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00011679  00000000  00000000  00128e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00032e64  00000000  00000000  0013a4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000026e0  00000000  00000000  0016d30b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00009478  00000000  00000000  0016f9eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00036dd3  00000000  00000000  00178e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003890f  00000000  00000000  001afc36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00124872  00000000  00000000  001e8545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  000070b4  00000000  00000000  0030cdb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 f923 	bl	b727c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 f92b 	bl	b7298 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e620 	.word	0x2003e620
   b404c:	000b7834 	.word	0x000b7834
   b4050:	2003e68c 	.word	0x2003e68c
   b4054:	2003e68c 	.word	0x2003e68c
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f000 fed9 	bl	b4e18 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b77fc 	.word	0x000b77fc
   b4080:	000b7824 	.word	0x000b7824

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b822 	b.w	b40cc <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f907 	bl	b429c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f000 be79 	b.w	b4d88 <_post_loop>

000b4096 <_Znaj>:
   b4096:	f000 bd23 	b.w	b4ae0 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bd29 	b.w	b4af0 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40ae:	b40e      	push	{r1, r2, r3}
   b40b0:	b503      	push	{r0, r1, lr}
   b40b2:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40b4:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40b6:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40ba:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40bc:	f000 fdef 	bl	b4c9e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40c0:	b002      	add	sp, #8
   b40c2:	f85d eb04 	ldr.w	lr, [sp], #4
   b40c6:	b003      	add	sp, #12
   b40c8:	4770      	bx	lr
	...

000b40cc <setup>:
int endTime;

//  Constructors
Adafruit_NeoPixel waterPixel(PIXELNUM, PIXELPIN, WS2812B);

void setup() {
   b40cc:	b508      	push	{r3, lr}
  waterPixel.begin();
   b40ce:	4812      	ldr	r0, [pc, #72]	; (b4118 <setup+0x4c>)
   b40d0:	f000 f92f 	bl	b4332 <_ZN17Adafruit_NeoPixel5beginEv>
  waterPixel.show();               // Initialize all pixels to 'off'
   b40d4:	4810      	ldr	r0, [pc, #64]	; (b4118 <setup+0x4c>)
   b40d6:	f000 f965 	bl	b43a4 <_ZN17Adafruit_NeoPixel4showEv>

  Serial.begin(9600);
   b40da:	f000 ffa5 	bl	b5028 <_Z16_fetch_usbserialv>
   b40de:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40e2:	f000 ff95 	bl	b5010 <_ZN9USBSerial5beginEl>

  pinMode(H2OLEVELPIN, INPUT);
   b40e6:	2100      	movs	r1, #0
   b40e8:	2011      	movs	r0, #17
   b40ea:	f001 f97b 	bl	b53e4 <pinMode>
  pinMode(H2OLEVELPWR, OUTPUT);
   b40ee:	2101      	movs	r1, #1
   b40f0:	2008      	movs	r0, #8
   b40f2:	f001 f977 	bl	b53e4 <pinMode>
  digitalWrite(H2OLEVELPWR, LOW);   // Drive water level sensor power to zero to limit corrosion
   b40f6:	2100      	movs	r1, #0
   b40f8:	2008      	movs	r0, #8
   b40fa:	f001 f984 	bl	b5406 <digitalWrite>

  pinMode(MOTORPIN, OUTPUT);
   b40fe:	2101      	movs	r1, #1
   b4100:	2007      	movs	r0, #7
   b4102:	f001 f96f 	bl	b53e4 <pinMode>
  digitalWrite(MOTORPIN, LOW);      //  Drive motor pin low to ensure motor does not run accidentally
   b4106:	2100      	movs	r1, #0
   b4108:	2007      	movs	r0, #7
   b410a:	f001 f97c 	bl	b5406 <digitalWrite>

  waterLevel = 0;
   b410e:	4b03      	ldr	r3, [pc, #12]	; (b411c <setup+0x50>)
   b4110:	2200      	movs	r2, #0
   b4112:	601a      	str	r2, [r3, #0]
}
   b4114:	bd08      	pop	{r3, pc}
   b4116:	bf00      	nop
   b4118:	2003e6a0 	.word	0x2003e6a0
   b411c:	2003e69c 	.word	0x2003e69c

000b4120 <_Z16changeWaterLeveliii>:

  Serial.printf("Water level: %i \n",waterLevel);
  }


int changeWaterLevel (int sensPwrPin, int sensPin, int motPwrPin) {
   b4120:	b570      	push	{r4, r5, r6, lr}
   b4122:	4614      	mov	r4, r2
  int h2oLvl;
  digitalWrite(sensPwrPin, HIGH);    // Turn on water level sensor power
   b4124:	b285      	uxth	r5, r0
int changeWaterLevel (int sensPwrPin, int sensPin, int motPwrPin) {
   b4126:	460e      	mov	r6, r1
  digitalWrite(sensPwrPin, HIGH);    // Turn on water level sensor power
   b4128:	4628      	mov	r0, r5
  digitalWrite(motPwrPin,  HIGH);    // Turn on water pump
   b412a:	b2a4      	uxth	r4, r4
  digitalWrite(sensPwrPin, HIGH);    // Turn on water level sensor power
   b412c:	2101      	movs	r1, #1
   b412e:	f001 f96a 	bl	b5406 <digitalWrite>
  digitalWrite(motPwrPin,  HIGH);    // Turn on water pump
   b4132:	2101      	movs	r1, #1
   b4134:	4620      	mov	r0, r4
   b4136:	f001 f966 	bl	b5406 <digitalWrite>
  delay(500);                        //  DELAY here on purpose to PRECISELY control water delivery
   b413a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b413e:	f000 fdf7 	bl	b4d30 <delay>
  digitalWrite(motPwrPin,  LOW);     // Turn off water pump
   b4142:	2100      	movs	r1, #0
   b4144:	4620      	mov	r0, r4
   b4146:	f001 f95e 	bl	b5406 <digitalWrite>
  h2oLvl = analogRead(sensPin);      //  Read water level
   b414a:	b2b0      	uxth	r0, r6
   b414c:	f001 f974 	bl	b5438 <analogRead>
  digitalWrite(sensPwrPin, LOW);     //  Turn off water levell sensor power to reduce galvanic corrosion
   b4150:	2100      	movs	r1, #0
  h2oLvl = analogRead(sensPin);      //  Read water level
   b4152:	4604      	mov	r4, r0
  digitalWrite(sensPwrPin, LOW);     //  Turn off water levell sensor power to reduce galvanic corrosion
   b4154:	4628      	mov	r0, r5
   b4156:	f001 f956 	bl	b5406 <digitalWrite>
  return h2oLvl;                     //  Return water level value  
}
   b415a:	4620      	mov	r0, r4
   b415c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4160 <_Z7callSiniii>:
    waterPixel.setPixelColor(0,0,63,0);             //  Set pixel color GREEN
  }
    waterPixel.show();
}

float callSin(int amp, int deltaAmp, int period) {
   b4160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4164:	4690      	mov	r8, r2
   b4166:	460e      	mov	r6, r1
   b4168:	4607      	mov	r7, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b416a:	f000 fb55 	bl	b4818 <HAL_Timer_Get_Milli_Seconds>
  float sinWave;
  float t;

  t = millis();

  sinWave = amp * sin(2 * M_PI * t / period) + deltaAmp;
   b416e:	ee07 0a90 	vmov	s15, r0
   b4172:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b4176:	ee17 0a90 	vmov	r0, s15
   b417a:	f002 fd0f 	bl	b6b9c <__aeabi_f2d>
   b417e:	a318      	add	r3, pc, #96	; (adr r3, b41e0 <_Z7callSiniii+0x80>)
   b4180:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4184:	f002 fd62 	bl	b6c4c <__aeabi_dmul>
   b4188:	4604      	mov	r4, r0
   b418a:	4640      	mov	r0, r8
   b418c:	460d      	mov	r5, r1
   b418e:	f002 fcf3 	bl	b6b78 <__aeabi_i2d>
   b4192:	4602      	mov	r2, r0
   b4194:	460b      	mov	r3, r1
   b4196:	4620      	mov	r0, r4
   b4198:	4629      	mov	r1, r5
   b419a:	f002 fe81 	bl	b6ea0 <__aeabi_ddiv>
   b419e:	ec41 0b10 	vmov	d0, r0, r1
   b41a2:	f001 f9dd 	bl	b5560 <sin>
   b41a6:	ec55 4b10 	vmov	r4, r5, d0
   b41aa:	4638      	mov	r0, r7
   b41ac:	f002 fce4 	bl	b6b78 <__aeabi_i2d>
   b41b0:	4622      	mov	r2, r4
   b41b2:	462b      	mov	r3, r5
   b41b4:	f002 fd4a 	bl	b6c4c <__aeabi_dmul>
   b41b8:	4604      	mov	r4, r0
   b41ba:	4630      	mov	r0, r6
   b41bc:	460d      	mov	r5, r1
   b41be:	f002 fcdb 	bl	b6b78 <__aeabi_i2d>
   b41c2:	4602      	mov	r2, r0
   b41c4:	460b      	mov	r3, r1
   b41c6:	4620      	mov	r0, r4
   b41c8:	4629      	mov	r1, r5
   b41ca:	f002 fb89 	bl	b68e0 <__adddf3>
   b41ce:	f002 ffff 	bl	b71d0 <__aeabi_d2f>
  return sinWave;
}
   b41d2:	ee00 0a10 	vmov	s0, r0
   b41d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b41da:	bf00      	nop
   b41dc:	f3af 8000 	nop.w
   b41e0:	54442d18 	.word	0x54442d18
   b41e4:	401921fb 	.word	0x401921fb

000b41e8 <_Z15waterPixelBlinki>:
   if (levelWater < 2000) {                         //  water level empty
   b41e8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
void waterPixelBlink (int levelWater) {
   b41ec:	b513      	push	{r0, r1, r4, lr}
   b41ee:	4604      	mov	r4, r0
   if (levelWater < 2000) {                         //  water level empty
   b41f0:	da13      	bge.n	b421a <_Z15waterPixelBlinki+0x32>
    bright = callSin (127, 127, 1000);              //  Set brightness to flash at 1S interval
   b41f2:	217f      	movs	r1, #127	; 0x7f
   b41f4:	4608      	mov	r0, r1
   b41f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b41fa:	f7ff ffb1 	bl	b4160 <_Z7callSiniii>
   b41fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b4202:	4b24      	ldr	r3, [pc, #144]	; (b4294 <_Z15waterPixelBlinki+0xac>)
    waterPixel.setPixelColor(0,bright,0,0);         //  Set pixel color RED
   b4204:	4824      	ldr	r0, [pc, #144]	; (b4298 <_Z15waterPixelBlinki+0xb0>)
    bright = callSin (127, 127, 1000);              //  Set brightness to flash at 1S interval
   b4206:	edc3 7a00 	vstr	s15, [r3]
   b420a:	ee17 2a90 	vmov	r2, s15
    waterPixel.setPixelColor(0,bright,0,0);         //  Set pixel color RED
   b420e:	2300      	movs	r3, #0
   b4210:	9300      	str	r3, [sp, #0]
   b4212:	b2d2      	uxtb	r2, r2
   b4214:	4619      	mov	r1, r3
   b4216:	f000 fa71 	bl	b46fc <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
  } if (levelWater < 2150 && levelWater >= 2000) {  //  water level empty
   b421a:	f5a4 63fa 	sub.w	r3, r4, #2000	; 0x7d0
   b421e:	2b95      	cmp	r3, #149	; 0x95
   b4220:	d819      	bhi.n	b4256 <_Z15waterPixelBlinki+0x6e>
    bright = callSin (63, 63, 3000);                //  Set brightness to flash at 5S interval
   b4222:	213f      	movs	r1, #63	; 0x3f
   b4224:	f640 32b8 	movw	r2, #3000	; 0xbb8
   b4228:	4608      	mov	r0, r1
   b422a:	f7ff ff99 	bl	b4160 <_Z7callSiniii>
   b422e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b4232:	4a18      	ldr	r2, [pc, #96]	; (b4294 <_Z15waterPixelBlinki+0xac>)
   b4234:	ee17 3a90 	vmov	r3, s15
    waterPixel.setPixelColor(0,bright,bright,0);    //  Set pixel color YELLOW
   b4238:	2100      	movs	r1, #0
   b423a:	b2db      	uxtb	r3, r3
    bright = callSin (63, 63, 3000);                //  Set brightness to flash at 5S interval
   b423c:	edc2 7a00 	vstr	s15, [r2]
    waterPixel.setPixelColor(0,bright,bright,0);    //  Set pixel color YELLOW
   b4240:	9100      	str	r1, [sp, #0]
   b4242:	461a      	mov	r2, r3
    waterPixel.setPixelColor(0,0,63,0);             //  Set pixel color GREEN
   b4244:	4814      	ldr	r0, [pc, #80]	; (b4298 <_Z15waterPixelBlinki+0xb0>)
   b4246:	f000 fa59 	bl	b46fc <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    waterPixel.show();
   b424a:	4813      	ldr	r0, [pc, #76]	; (b4298 <_Z15waterPixelBlinki+0xb0>)
}
   b424c:	b002      	add	sp, #8
   b424e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    waterPixel.show();
   b4252:	f000 b8a7 	b.w	b43a4 <_ZN17Adafruit_NeoPixel4showEv>
  } if (levelWater < 2500 && levelWater >= 2150) {  //  water level empty
   b4256:	f6a4 0366 	subw	r3, r4, #2150	; 0x866
   b425a:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
   b425e:	d211      	bcs.n	b4284 <_Z15waterPixelBlinki+0x9c>
    bright = callSin (31, 31, 10000);               //  Set brightness to flash at 10S interval
   b4260:	211f      	movs	r1, #31
   b4262:	f242 7210 	movw	r2, #10000	; 0x2710
   b4266:	4608      	mov	r0, r1
   b4268:	f7ff ff7a 	bl	b4160 <_Z7callSiniii>
   b426c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b4270:	4a08      	ldr	r2, [pc, #32]	; (b4294 <_Z15waterPixelBlinki+0xac>)
   b4272:	ee17 3a90 	vmov	r3, s15
   b4276:	edc2 7a00 	vstr	s15, [r2]
    waterPixel.setPixelColor(0,0,bright,0);         //  Set pixel color GREEN
   b427a:	2200      	movs	r2, #0
   b427c:	9200      	str	r2, [sp, #0]
   b427e:	b2db      	uxtb	r3, r3
    waterPixel.setPixelColor(0,0,63,0);             //  Set pixel color GREEN
   b4280:	4611      	mov	r1, r2
   b4282:	e7df      	b.n	b4244 <_Z15waterPixelBlinki+0x5c>
  } if (levelWater > 2500) {                        //  water level full
   b4284:	f640 13c4 	movw	r3, #2500	; 0x9c4
   b4288:	429c      	cmp	r4, r3
   b428a:	ddde      	ble.n	b424a <_Z15waterPixelBlinki+0x62>
    waterPixel.setPixelColor(0,0,63,0);             //  Set pixel color GREEN
   b428c:	2200      	movs	r2, #0
   b428e:	9200      	str	r2, [sp, #0]
   b4290:	233f      	movs	r3, #63	; 0x3f
   b4292:	e7f5      	b.n	b4280 <_Z15waterPixelBlinki+0x98>
   b4294:	2003e698 	.word	0x2003e698
   b4298:	2003e6a0 	.word	0x2003e6a0

000b429c <loop>:
void loop() {
   b429c:	b510      	push	{r4, lr}
  waterLevel = changeWaterLevel(H2OLEVELPWR, H2OLEVELPIN, MOTORPIN);
   b429e:	2207      	movs	r2, #7
   b42a0:	2111      	movs	r1, #17
   b42a2:	2008      	movs	r0, #8
   b42a4:	f7ff ff3c 	bl	b4120 <_Z16changeWaterLeveliii>
   b42a8:	4c05      	ldr	r4, [pc, #20]	; (b42c0 <loop+0x24>)
   b42aa:	6020      	str	r0, [r4, #0]
  waterPixelBlink(waterLevel);
   b42ac:	f7ff ff9c 	bl	b41e8 <_Z15waterPixelBlinki>
  Serial.printf("Water level: %i \n",waterLevel);
   b42b0:	f000 feba 	bl	b5028 <_Z16_fetch_usbserialv>
   b42b4:	6822      	ldr	r2, [r4, #0]
   b42b6:	4903      	ldr	r1, [pc, #12]	; (b42c4 <loop+0x28>)
   b42b8:	f7ff fef9 	bl	b40ae <_ZN5Print6printfEPKcz>
  }
   b42bc:	bd10      	pop	{r4, pc}
   b42be:	bf00      	nop
   b42c0:	2003e69c 	.word	0x2003e69c
   b42c4:	000b73f4 	.word	0x000b73f4

000b42c8 <_GLOBAL__sub_I_SystemMode>:
}
   b42c8:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b42ca:	4b09      	ldr	r3, [pc, #36]	; (b42f0 <_GLOBAL__sub_I_SystemMode+0x28>)
   b42cc:	2200      	movs	r2, #0
   b42ce:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b42d2:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b42d6:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b42d8:	2002      	movs	r0, #2
   b42da:	f000 fb75 	bl	b49c8 <set_system_mode>
   b42de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_NeoPixel waterPixel(PIXELNUM, PIXELPIN, WS2812B);
   b42e2:	4804      	ldr	r0, [pc, #16]	; (b42f4 <_GLOBAL__sub_I_SystemMode+0x2c>)
   b42e4:	2302      	movs	r3, #2
   b42e6:	2206      	movs	r2, #6
   b42e8:	2101      	movs	r1, #1
   b42ea:	f000 b849 	b.w	b4380 <_ZN17Adafruit_NeoPixelC1Ethh>
   b42ee:	bf00      	nop
   b42f0:	2003e68c 	.word	0x2003e68c
   b42f4:	2003e6a0 	.word	0x2003e6a0

000b42f8 <_ZN17Adafruit_NeoPixel12updateLengthEt>:
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b42f8:	b538      	push	{r3, r4, r5, lr}
   b42fa:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b42fc:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b42fe:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b4300:	b108      	cbz	r0, b4306 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b4302:	f000 fbf5 	bl	b4af0 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b4306:	79a3      	ldrb	r3, [r4, #6]
   b4308:	2b06      	cmp	r3, #6
   b430a:	bf0c      	ite	eq
   b430c:	2004      	moveq	r0, #4
   b430e:	2003      	movne	r0, #3
   b4310:	fb10 f005 	smulbb	r0, r0, r5
   b4314:	b280      	uxth	r0, r0
   b4316:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b4318:	f000 fbe2 	bl	b4ae0 <malloc>
   b431c:	60e0      	str	r0, [r4, #12]
   b431e:	b128      	cbz	r0, b432c <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b4320:	88a2      	ldrh	r2, [r4, #4]
   b4322:	2100      	movs	r1, #0
   b4324:	f002 ffb8 	bl	b7298 <memset>
    numLEDs = n;
   b4328:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b432a:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b432c:	80a0      	strh	r0, [r4, #4]
   b432e:	8060      	strh	r0, [r4, #2]
}
   b4330:	e7fb      	b.n	b432a <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b4332 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b4332:	b510      	push	{r4, lr}
   b4334:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   b4336:	2101      	movs	r1, #1
   b4338:	79c0      	ldrb	r0, [r0, #7]
   b433a:	f001 f853 	bl	b53e4 <pinMode>
  digitalWrite(pin, LOW);
   b433e:	79e0      	ldrb	r0, [r4, #7]
   b4340:	2100      	movs	r1, #0
   b4342:	f001 f860 	bl	b5406 <digitalWrite>
  begun = true;
   b4346:	2301      	movs	r3, #1
   b4348:	7023      	strb	r3, [r4, #0]
}
   b434a:	bd10      	pop	{r4, pc}

000b434c <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b434c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b434e:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b4350:	4605      	mov	r5, r0
   b4352:	460c      	mov	r4, r1
    if (begun) {
   b4354:	b11b      	cbz	r3, b435e <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b4356:	79c0      	ldrb	r0, [r0, #7]
   b4358:	2100      	movs	r1, #0
   b435a:	f001 f843 	bl	b53e4 <pinMode>
    }
    pin = p;
    if (begun) {
   b435e:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b4360:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b4362:	b15b      	cbz	r3, b437c <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b4364:	b2a0      	uxth	r0, r4
   b4366:	2101      	movs	r1, #1
   b4368:	9001      	str	r0, [sp, #4]
   b436a:	f001 f83b 	bl	b53e4 <pinMode>
        digitalWrite(p, LOW);
   b436e:	9801      	ldr	r0, [sp, #4]
   b4370:	2100      	movs	r1, #0
    }
}
   b4372:	b003      	add	sp, #12
   b4374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b4378:	f001 b845 	b.w	b5406 <digitalWrite>
}
   b437c:	b003      	add	sp, #12
   b437e:	bd30      	pop	{r4, r5, pc}

000b4380 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4380:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4382:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4384:	4604      	mov	r4, r0
   b4386:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4388:	7183      	strb	r3, [r0, #6]
   b438a:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b438e:	7005      	strb	r5, [r0, #0]
   b4390:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b4392:	f7ff ffb1 	bl	b42f8 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b4396:	4620      	mov	r0, r4
   b4398:	4631      	mov	r1, r6
   b439a:	f7ff ffd7 	bl	b434c <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b439e:	4620      	mov	r0, r4
   b43a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000b43a4 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b43a4:	68c3      	ldr	r3, [r0, #12]
   b43a6:	2b00      	cmp	r3, #0
   b43a8:	f000 81a4 	beq.w	b46f4 <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b43ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b43b0:	7983      	ldrb	r3, [r0, #6]
   b43b2:	3b02      	subs	r3, #2
   b43b4:	b2db      	uxtb	r3, r3
   b43b6:	2b04      	cmp	r3, #4
   b43b8:	bf9c      	itt	ls
   b43ba:	4abf      	ldrls	r2, [pc, #764]	; (b46b8 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b43bc:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b43c0:	b085      	sub	sp, #20
   b43c2:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b43c4:	bf88      	it	hi
   b43c6:	2432      	movhi	r4, #50	; 0x32
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b43c8:	f000 fa1e 	bl	b4808 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b43cc:	692b      	ldr	r3, [r5, #16]
   b43ce:	1ac0      	subs	r0, r0, r3
   b43d0:	42a0      	cmp	r0, r4
   b43d2:	d3f9      	bcc.n	b43c8 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b43d4:	4cb9      	ldr	r4, [pc, #740]	; (b46bc <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b43d6:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b43d8:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b43dc:	b91b      	cbnz	r3, b43e6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b43de:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b43e2:	2b00      	cmp	r3, #0
   b43e4:	db7e      	blt.n	b44e4 <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b43e6:	4cb6      	ldr	r4, [pc, #728]	; (b46c0 <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b43e8:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b43ec:	b923      	cbnz	r3, b43f8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b43ee:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b43f2:	2b00      	cmp	r3, #0
   b43f4:	f2c0 816e 	blt.w	b46d4 <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b43f8:	4cb2      	ldr	r4, [pc, #712]	; (b46c4 <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b43fa:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b43fe:	2b00      	cmp	r3, #0
   b4400:	f000 8144 	beq.w	b468c <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4404:	79eb      	ldrb	r3, [r5, #7]
   b4406:	4ab0      	ldr	r2, [pc, #704]	; (b46c8 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4408:	4cb0      	ldr	r4, [pc, #704]	; (b46cc <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b440a:	6812      	ldr	r2, [r2, #0]
   b440c:	0119      	lsls	r1, r3, #4
   b440e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b4412:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b4414:	49ae      	ldr	r1, [pc, #696]	; (b46d0 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4416:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b4418:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b441c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b4420:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4424:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4426:	f003 031f 	and.w	r3, r3, #31
   b442a:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b442e:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4430:	433a      	orrs	r2, r7
   b4432:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b4434:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b4436:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b443a:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b443e:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b4440:	2900      	cmp	r1, #0
   b4442:	d044      	beq.n	b44ce <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b4444:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b4448:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b444a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b444e:	f818 cb01 	ldrb.w	ip, [r8], #1
   b4452:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4454:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b4456:	6863      	ldr	r3, [r4, #4]
   b4458:	1a9b      	subs	r3, r3, r2
   b445a:	2b46      	cmp	r3, #70	; 0x46
   b445c:	d9fb      	bls.n	b4456 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b445e:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b4460:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b4464:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b4468:	ea43 0307 	orr.w	r3, r3, r7
   b446c:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b4470:	d02f      	beq.n	b44d2 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b4472:	6863      	ldr	r3, [r4, #4]
   b4474:	1a9b      	subs	r3, r3, r2
   b4476:	2b28      	cmp	r3, #40	; 0x28
   b4478:	d9fb      	bls.n	b4472 <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b447a:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b447e:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4480:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4484:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4488:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b448c:	d1e3      	bne.n	b4456 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b448e:	88ab      	ldrh	r3, [r5, #4]
   b4490:	f10e 0e01 	add.w	lr, lr, #1
   b4494:	fa1f fe8e 	uxth.w	lr, lr
   b4498:	4573      	cmp	r3, lr
   b449a:	d8d8      	bhi.n	b444e <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b449c:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b44a0:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b44a4:	6863      	ldr	r3, [r4, #4]
   b44a6:	1a9b      	subs	r3, r3, r2
   b44a8:	2b46      	cmp	r3, #70	; 0x46
   b44aa:	d9fb      	bls.n	b44a4 <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b44ac:	6863      	ldr	r3, [r4, #4]
   b44ae:	eba3 0909 	sub.w	r9, r3, r9
   b44b2:	4589      	cmp	r9, r1
   b44b4:	f0c0 80e4 	bcc.w	b4680 <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b44b8:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b44bc:	f000 f99c 	bl	b47f8 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b44c0:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b44c2:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b44c6:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b44ca:	2900      	cmp	r1, #0
   b44cc:	d1ba      	bne.n	b4444 <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b44ce:	460a      	mov	r2, r1
   b44d0:	e7e8      	b.n	b44a4 <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b44d2:	6863      	ldr	r3, [r4, #4]
   b44d4:	1a9b      	subs	r3, r3, r2
   b44d6:	2b11      	cmp	r3, #17
   b44d8:	d8cf      	bhi.n	b447a <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b44da:	6863      	ldr	r3, [r4, #4]
   b44dc:	1a9b      	subs	r3, r3, r2
   b44de:	2b11      	cmp	r3, #17
   b44e0:	d9f7      	bls.n	b44d2 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b44e2:	e7ca      	b.n	b447a <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b44e4:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b44e8:	2b00      	cmp	r3, #0
   b44ea:	f6bf af7c 	bge.w	b43e6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b44ee:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b44f2:	2b00      	cmp	r3, #0
   b44f4:	f6bf af77 	bge.w	b43e6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b44f8:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b44fc:	2b00      	cmp	r3, #0
   b44fe:	f6bf af72 	bge.w	b43e6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4502:	0136      	lsls	r6, r6, #4
   b4504:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b4506:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4508:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b450a:	f000 fae9 	bl	b4ae0 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b450e:	2800      	cmp	r0, #0
   b4510:	f43f af78 	beq.w	b4404 <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b4514:	88ab      	ldrh	r3, [r5, #4]
   b4516:	2b00      	cmp	r3, #0
   b4518:	f000 80ed 	beq.w	b46f6 <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b451c:	68ea      	ldr	r2, [r5, #12]
   b451e:	3b01      	subs	r3, #1
   b4520:	fa12 f783 	uxtah	r7, r2, r3
   b4524:	f102 3eff 	add.w	lr, r2, #4294967295
    uint16_t pos = 0; // bit position
   b4528:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b452a:	f248 0206 	movw	r2, #32774	; 0x8006
   b452e:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b4532:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4536:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b453a:	bf0c      	ite	eq
   b453c:	4693      	moveq	fp, r2
   b453e:	468b      	movne	fp, r1
   b4540:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b4544:	bf0c      	ite	eq
   b4546:	4616      	moveq	r6, r2
   b4548:	460e      	movne	r6, r1
   b454a:	f01c 0f20 	tst.w	ip, #32
   b454e:	bf0c      	ite	eq
   b4550:	4690      	moveq	r8, r2
   b4552:	4688      	movne	r8, r1
        pos++;
   b4554:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4558:	f8cd 8008 	str.w	r8, [sp, #8]
   b455c:	9601      	str	r6, [sp, #4]
        pos++;
   b455e:	f103 0802 	add.w	r8, r3, #2
   b4562:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4566:	9e01      	ldr	r6, [sp, #4]
   b4568:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b456c:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4570:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b4574:	9e02      	ldr	r6, [sp, #8]
   b4576:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b457a:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b457e:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b4582:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4586:	bf0c      	ite	eq
   b4588:	4693      	moveq	fp, r2
   b458a:	468b      	movne	fp, r1
   b458c:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4590:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4594:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b4598:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b459c:	bf0c      	ite	eq
   b459e:	4693      	moveq	fp, r2
   b45a0:	468b      	movne	fp, r1
   b45a2:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b45a6:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b45aa:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b45ae:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b45b2:	bf0c      	ite	eq
   b45b4:	4693      	moveq	fp, r2
   b45b6:	468b      	movne	fp, r1
   b45b8:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b45bc:	f103 0a08 	add.w	sl, r3, #8
   b45c0:	f103 0806 	add.w	r8, r3, #6
   b45c4:	3307      	adds	r3, #7
   b45c6:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b45c8:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b45cc:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b45d0:	bf0c      	ite	eq
   b45d2:	4693      	moveq	fp, r2
   b45d4:	468b      	movne	fp, r1
        pos++;
   b45d6:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b45da:	f01c 0f01 	tst.w	ip, #1
   b45de:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b45e2:	bf15      	itete	ne
   b45e4:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b45e8:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b45ec:	fa1f f38a 	uxthne.w	r3, sl
   b45f0:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b45f4:	4577      	cmp	r7, lr
   b45f6:	d19c      	bne.n	b4532 <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b45f8:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b45fa:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b45fc:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b45fe:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4600:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4602:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4604:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b4608:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b460a:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b460c:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b460e:	4b2e      	ldr	r3, [pc, #184]	; (b46c8 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4610:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4612:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4614:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4616:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4618:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b461c:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4620:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b4624:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b4628:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b462c:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4630:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b4634:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b4638:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b463c:	79eb      	ldrb	r3, [r5, #7]
   b463e:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b4642:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b4644:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4646:	5cfe      	ldrb	r6, [r7, r3]
   b4648:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b464c:	f003 031f 	and.w	r3, r3, #31
   b4650:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b4654:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b4658:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b465c:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b4660:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b4662:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b4666:	2b00      	cmp	r3, #0
   b4668:	d0fb      	beq.n	b4662 <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b466a:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b466c:	f04f 32ff 	mov.w	r2, #4294967295
    pwm->EVENTS_SEQEND[0] = 0;
   b4670:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b4674:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4678:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b467c:	f000 fa38 	bl	b4af0 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4680:	f000 f8c2 	bl	b4808 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b4684:	6128      	str	r0, [r5, #16]
}
   b4686:	b005      	add	sp, #20
   b4688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b468c:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4690:	2b00      	cmp	r3, #0
   b4692:	f6bf aeb7 	bge.w	b4404 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4696:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b469a:	2b00      	cmp	r3, #0
   b469c:	f6bf aeb2 	bge.w	b4404 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46a0:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46a4:	2b00      	cmp	r3, #0
   b46a6:	f6bf aead 	bge.w	b4404 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b46aa:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46ae:	2b00      	cmp	r3, #0
   b46b0:	f6bf aea8 	bge.w	b4404 <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b46b4:	e725      	b.n	b4502 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b46b6:	bf00      	nop
   b46b8:	000b7408 	.word	0x000b7408
   b46bc:	4001c000 	.word	0x4001c000
   b46c0:	40021000 	.word	0x40021000
   b46c4:	40022000 	.word	0x40022000
   b46c8:	2003e6b4 	.word	0x2003e6b4
   b46cc:	e0001000 	.word	0xe0001000
   b46d0:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46d4:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46d8:	2b00      	cmp	r3, #0
   b46da:	f6bf ae8d 	bge.w	b43f8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46de:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46e2:	2b00      	cmp	r3, #0
   b46e4:	f6bf ae88 	bge.w	b43f8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b46e8:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46ec:	2b00      	cmp	r3, #0
   b46ee:	f6bf ae83 	bge.w	b43f8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b46f2:	e706      	b.n	b4502 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b46f4:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b46f6:	2304      	movs	r3, #4
   b46f8:	2102      	movs	r1, #2
   b46fa:	e783      	b.n	b4604 <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b46fc <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   b46fc:	b570      	push	{r4, r5, r6, lr}
  if(n < numLEDs) {
   b46fe:	8844      	ldrh	r4, [r0, #2]
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   b4700:	f89d 5010 	ldrb.w	r5, [sp, #16]
  if(n < numLEDs) {
   b4704:	428c      	cmp	r4, r1
   b4706:	d922      	bls.n	b474e <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x52>
    if(brightness) { // See notes in setBrightness()
   b4708:	7a04      	ldrb	r4, [r0, #8]
   b470a:	b144      	cbz	r4, b471e <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x22>
      r = (r * brightness) >> 8;
   b470c:	fb12 f204 	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
   b4710:	fb14 f303 	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
   b4714:	fb14 f405 	smulbb	r4, r4, r5
      r = (r * brightness) >> 8;
   b4718:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
   b471a:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
   b471c:	0a25      	lsrs	r5, r4, #8
    }
    uint8_t *p = &pixels[n * 3];
   b471e:	68c6      	ldr	r6, [r0, #12]
   b4720:	7980      	ldrb	r0, [r0, #6]
   b4722:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   b4726:	3802      	subs	r0, #2
   b4728:	1874      	adds	r4, r6, r1
    switch(type) {
   b472a:	2806      	cmp	r0, #6
   b472c:	d810      	bhi.n	b4750 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x54>
   b472e:	e8df f000 	tbb	[pc, r0]
   b4732:	0f04      	.short	0x0f04
   b4734:	040f0408 	.word	0x040f0408
   b4738:	04          	.byte	0x04
   b4739:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b473a:	5473      	strb	r3, [r6, r1]
          *p++ = r;
   b473c:	7062      	strb	r2, [r4, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b473e:	70a5      	strb	r5, [r4, #2]
        } break;
    }
  }
}
   b4740:	e005      	b.n	b474e <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x52>
          *p++ = r;
   b4742:	2afe      	cmp	r2, #254	; 0xfe
   b4744:	bf28      	it	cs
   b4746:	22fe      	movcs	r2, #254	; 0xfe
   b4748:	5472      	strb	r2, [r6, r1]
          *p++ = b;
   b474a:	7065      	strb	r5, [r4, #1]
          *p = g;
   b474c:	70a3      	strb	r3, [r4, #2]
}
   b474e:	bd70      	pop	{r4, r5, r6, pc}
          *p++ = r;
   b4750:	5472      	strb	r2, [r6, r1]
          *p++ = g;
   b4752:	7063      	strb	r3, [r4, #1]
   b4754:	e7f3      	b.n	b473e <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x42>
	...

000b4758 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b4758:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b475a:	f000 f815 	bl	b4788 <HAL_Pin_Map>
   b475e:	4b01      	ldr	r3, [pc, #4]	; (b4764 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b4760:	6018      	str	r0, [r3, #0]
}
   b4762:	bd08      	pop	{r3, pc}
   b4764:	2003e6b4 	.word	0x2003e6b4

000b4768 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4768:	b508      	push	{r3, lr}
   b476a:	4b02      	ldr	r3, [pc, #8]	; (b4774 <netdb_freeaddrinfo+0xc>)
   b476c:	681b      	ldr	r3, [r3, #0]
   b476e:	689b      	ldr	r3, [r3, #8]
   b4770:	9301      	str	r3, [sp, #4]
   b4772:	bd08      	pop	{r3, pc}
   b4774:	00030268 	.word	0x00030268

000b4778 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4778:	b508      	push	{r3, lr}
   b477a:	4b02      	ldr	r3, [pc, #8]	; (b4784 <netdb_getaddrinfo+0xc>)
   b477c:	681b      	ldr	r3, [r3, #0]
   b477e:	68db      	ldr	r3, [r3, #12]
   b4780:	9301      	str	r3, [sp, #4]
   b4782:	bd08      	pop	{r3, pc}
   b4784:	00030268 	.word	0x00030268

000b4788 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b4788:	b508      	push	{r3, lr}
   b478a:	4b02      	ldr	r3, [pc, #8]	; (b4794 <HAL_Pin_Map+0xc>)
   b478c:	681b      	ldr	r3, [r3, #0]
   b478e:	681b      	ldr	r3, [r3, #0]
   b4790:	9301      	str	r3, [sp, #4]
   b4792:	bd08      	pop	{r3, pc}
   b4794:	0003022c 	.word	0x0003022c

000b4798 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b4798:	b508      	push	{r3, lr}
   b479a:	4b02      	ldr	r3, [pc, #8]	; (b47a4 <HAL_Validate_Pin_Function+0xc>)
   b479c:	681b      	ldr	r3, [r3, #0]
   b479e:	685b      	ldr	r3, [r3, #4]
   b47a0:	9301      	str	r3, [sp, #4]
   b47a2:	bd08      	pop	{r3, pc}
   b47a4:	0003022c 	.word	0x0003022c

000b47a8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b47a8:	b508      	push	{r3, lr}
   b47aa:	4b02      	ldr	r3, [pc, #8]	; (b47b4 <HAL_Pin_Mode+0xc>)
   b47ac:	681b      	ldr	r3, [r3, #0]
   b47ae:	689b      	ldr	r3, [r3, #8]
   b47b0:	9301      	str	r3, [sp, #4]
   b47b2:	bd08      	pop	{r3, pc}
   b47b4:	0003022c 	.word	0x0003022c

000b47b8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b47b8:	b508      	push	{r3, lr}
   b47ba:	4b02      	ldr	r3, [pc, #8]	; (b47c4 <HAL_Get_Pin_Mode+0xc>)
   b47bc:	681b      	ldr	r3, [r3, #0]
   b47be:	68db      	ldr	r3, [r3, #12]
   b47c0:	9301      	str	r3, [sp, #4]
   b47c2:	bd08      	pop	{r3, pc}
   b47c4:	0003022c 	.word	0x0003022c

000b47c8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b47c8:	b508      	push	{r3, lr}
   b47ca:	4b02      	ldr	r3, [pc, #8]	; (b47d4 <HAL_GPIO_Write+0xc>)
   b47cc:	681b      	ldr	r3, [r3, #0]
   b47ce:	691b      	ldr	r3, [r3, #16]
   b47d0:	9301      	str	r3, [sp, #4]
   b47d2:	bd08      	pop	{r3, pc}
   b47d4:	0003022c 	.word	0x0003022c

000b47d8 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b47d8:	b508      	push	{r3, lr}
   b47da:	4b02      	ldr	r3, [pc, #8]	; (b47e4 <hal_adc_read+0xc>)
   b47dc:	681b      	ldr	r3, [r3, #0]
   b47de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b47e0:	9301      	str	r3, [sp, #4]
   b47e2:	bd08      	pop	{r3, pc}
   b47e4:	0003022c 	.word	0x0003022c

000b47e8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b47e8:	b508      	push	{r3, lr}
   b47ea:	4b02      	ldr	r3, [pc, #8]	; (b47f4 <HAL_RNG_GetRandomNumber+0xc>)
   b47ec:	681b      	ldr	r3, [r3, #0]
   b47ee:	685b      	ldr	r3, [r3, #4]
   b47f0:	9301      	str	r3, [sp, #4]
   b47f2:	bd08      	pop	{r3, pc}
   b47f4:	00030218 	.word	0x00030218

000b47f8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b47f8:	b508      	push	{r3, lr}
   b47fa:	4b02      	ldr	r3, [pc, #8]	; (b4804 <HAL_Delay_Microseconds+0xc>)
   b47fc:	681b      	ldr	r3, [r3, #0]
   b47fe:	68db      	ldr	r3, [r3, #12]
   b4800:	9301      	str	r3, [sp, #4]
   b4802:	bd08      	pop	{r3, pc}
   b4804:	00030218 	.word	0x00030218

000b4808 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b4808:	b508      	push	{r3, lr}
   b480a:	4b02      	ldr	r3, [pc, #8]	; (b4814 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b480c:	681b      	ldr	r3, [r3, #0]
   b480e:	691b      	ldr	r3, [r3, #16]
   b4810:	9301      	str	r3, [sp, #4]
   b4812:	bd08      	pop	{r3, pc}
   b4814:	00030218 	.word	0x00030218

000b4818 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4818:	b508      	push	{r3, lr}
   b481a:	4b02      	ldr	r3, [pc, #8]	; (b4824 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b481c:	681b      	ldr	r3, [r3, #0]
   b481e:	695b      	ldr	r3, [r3, #20]
   b4820:	9301      	str	r3, [sp, #4]
   b4822:	bd08      	pop	{r3, pc}
   b4824:	00030218 	.word	0x00030218

000b4828 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4828:	b508      	push	{r3, lr}
   b482a:	4b02      	ldr	r3, [pc, #8]	; (b4834 <os_mutex_recursive_create+0xc>)
   b482c:	681b      	ldr	r3, [r3, #0]
   b482e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4830:	9301      	str	r3, [sp, #4]
   b4832:	bd08      	pop	{r3, pc}
   b4834:	00030248 	.word	0x00030248

000b4838 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4838:	b508      	push	{r3, lr}
   b483a:	4b02      	ldr	r3, [pc, #8]	; (b4844 <inet_inet_ntop+0xc>)
   b483c:	681b      	ldr	r3, [r3, #0]
   b483e:	695b      	ldr	r3, [r3, #20]
   b4840:	9301      	str	r3, [sp, #4]
   b4842:	bd08      	pop	{r3, pc}
   b4844:	00030264 	.word	0x00030264

000b4848 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4848:	b508      	push	{r3, lr}
   b484a:	4b02      	ldr	r3, [pc, #8]	; (b4854 <hal_usart_write+0xc>)
   b484c:	681b      	ldr	r3, [r3, #0]
   b484e:	68db      	ldr	r3, [r3, #12]
   b4850:	9301      	str	r3, [sp, #4]
   b4852:	bd08      	pop	{r3, pc}
   b4854:	0003023c 	.word	0x0003023c

000b4858 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4858:	b508      	push	{r3, lr}
   b485a:	4b02      	ldr	r3, [pc, #8]	; (b4864 <hal_usart_available+0xc>)
   b485c:	681b      	ldr	r3, [r3, #0]
   b485e:	691b      	ldr	r3, [r3, #16]
   b4860:	9301      	str	r3, [sp, #4]
   b4862:	bd08      	pop	{r3, pc}
   b4864:	0003023c 	.word	0x0003023c

000b4868 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4868:	b508      	push	{r3, lr}
   b486a:	4b02      	ldr	r3, [pc, #8]	; (b4874 <hal_usart_read+0xc>)
   b486c:	681b      	ldr	r3, [r3, #0]
   b486e:	695b      	ldr	r3, [r3, #20]
   b4870:	9301      	str	r3, [sp, #4]
   b4872:	bd08      	pop	{r3, pc}
   b4874:	0003023c 	.word	0x0003023c

000b4878 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4878:	b508      	push	{r3, lr}
   b487a:	4b02      	ldr	r3, [pc, #8]	; (b4884 <hal_usart_peek+0xc>)
   b487c:	681b      	ldr	r3, [r3, #0]
   b487e:	699b      	ldr	r3, [r3, #24]
   b4880:	9301      	str	r3, [sp, #4]
   b4882:	bd08      	pop	{r3, pc}
   b4884:	0003023c 	.word	0x0003023c

000b4888 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4888:	b508      	push	{r3, lr}
   b488a:	4b02      	ldr	r3, [pc, #8]	; (b4894 <hal_usart_flush+0xc>)
   b488c:	681b      	ldr	r3, [r3, #0]
   b488e:	69db      	ldr	r3, [r3, #28]
   b4890:	9301      	str	r3, [sp, #4]
   b4892:	bd08      	pop	{r3, pc}
   b4894:	0003023c 	.word	0x0003023c

000b4898 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4898:	b508      	push	{r3, lr}
   b489a:	4b02      	ldr	r3, [pc, #8]	; (b48a4 <hal_usart_is_enabled+0xc>)
   b489c:	681b      	ldr	r3, [r3, #0]
   b489e:	6a1b      	ldr	r3, [r3, #32]
   b48a0:	9301      	str	r3, [sp, #4]
   b48a2:	bd08      	pop	{r3, pc}
   b48a4:	0003023c 	.word	0x0003023c

000b48a8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b48a8:	b508      	push	{r3, lr}
   b48aa:	4b02      	ldr	r3, [pc, #8]	; (b48b4 <hal_usart_available_data_for_write+0xc>)
   b48ac:	681b      	ldr	r3, [r3, #0]
   b48ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b48b0:	9301      	str	r3, [sp, #4]
   b48b2:	bd08      	pop	{r3, pc}
   b48b4:	0003023c 	.word	0x0003023c

000b48b8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b48b8:	b508      	push	{r3, lr}
   b48ba:	4b02      	ldr	r3, [pc, #8]	; (b48c4 <hal_usart_init_ex+0xc>)
   b48bc:	681b      	ldr	r3, [r3, #0]
   b48be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b48c0:	9301      	str	r3, [sp, #4]
   b48c2:	bd08      	pop	{r3, pc}
   b48c4:	0003023c 	.word	0x0003023c

000b48c8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b48c8:	b508      	push	{r3, lr}
   b48ca:	4b02      	ldr	r3, [pc, #8]	; (b48d4 <hal_i2c_write+0xc>)
   b48cc:	681b      	ldr	r3, [r3, #0]
   b48ce:	6a1b      	ldr	r3, [r3, #32]
   b48d0:	9301      	str	r3, [sp, #4]
   b48d2:	bd08      	pop	{r3, pc}
   b48d4:	00030228 	.word	0x00030228

000b48d8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b48d8:	b508      	push	{r3, lr}
   b48da:	4b02      	ldr	r3, [pc, #8]	; (b48e4 <hal_i2c_available+0xc>)
   b48dc:	681b      	ldr	r3, [r3, #0]
   b48de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b48e0:	9301      	str	r3, [sp, #4]
   b48e2:	bd08      	pop	{r3, pc}
   b48e4:	00030228 	.word	0x00030228

000b48e8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b48e8:	b508      	push	{r3, lr}
   b48ea:	4b02      	ldr	r3, [pc, #8]	; (b48f4 <hal_i2c_read+0xc>)
   b48ec:	681b      	ldr	r3, [r3, #0]
   b48ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b48f0:	9301      	str	r3, [sp, #4]
   b48f2:	bd08      	pop	{r3, pc}
   b48f4:	00030228 	.word	0x00030228

000b48f8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b48f8:	b508      	push	{r3, lr}
   b48fa:	4b02      	ldr	r3, [pc, #8]	; (b4904 <hal_i2c_peek+0xc>)
   b48fc:	681b      	ldr	r3, [r3, #0]
   b48fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4900:	9301      	str	r3, [sp, #4]
   b4902:	bd08      	pop	{r3, pc}
   b4904:	00030228 	.word	0x00030228

000b4908 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4908:	b508      	push	{r3, lr}
   b490a:	4b02      	ldr	r3, [pc, #8]	; (b4914 <hal_i2c_flush+0xc>)
   b490c:	681b      	ldr	r3, [r3, #0]
   b490e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4910:	9301      	str	r3, [sp, #4]
   b4912:	bd08      	pop	{r3, pc}
   b4914:	00030228 	.word	0x00030228

000b4918 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4918:	b508      	push	{r3, lr}
   b491a:	4b02      	ldr	r3, [pc, #8]	; (b4924 <hal_i2c_is_enabled+0xc>)
   b491c:	681b      	ldr	r3, [r3, #0]
   b491e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4920:	9301      	str	r3, [sp, #4]
   b4922:	bd08      	pop	{r3, pc}
   b4924:	00030228 	.word	0x00030228

000b4928 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4928:	b508      	push	{r3, lr}
   b492a:	4b02      	ldr	r3, [pc, #8]	; (b4934 <hal_i2c_init+0xc>)
   b492c:	681b      	ldr	r3, [r3, #0]
   b492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4930:	9301      	str	r3, [sp, #4]
   b4932:	bd08      	pop	{r3, pc}
   b4934:	00030228 	.word	0x00030228

000b4938 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4938:	b508      	push	{r3, lr}
   b493a:	4b02      	ldr	r3, [pc, #8]	; (b4944 <hal_spi_init+0xc>)
   b493c:	681b      	ldr	r3, [r3, #0]
   b493e:	69db      	ldr	r3, [r3, #28]
   b4940:	9301      	str	r3, [sp, #4]
   b4942:	bd08      	pop	{r3, pc}
   b4944:	00030230 	.word	0x00030230

000b4948 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4948:	b508      	push	{r3, lr}
   b494a:	4b02      	ldr	r3, [pc, #8]	; (b4954 <hal_spi_is_enabled+0xc>)
   b494c:	681b      	ldr	r3, [r3, #0]
   b494e:	6a1b      	ldr	r3, [r3, #32]
   b4950:	9301      	str	r3, [sp, #4]
   b4952:	bd08      	pop	{r3, pc}
   b4954:	00030230 	.word	0x00030230

000b4958 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4958:	b508      	push	{r3, lr}
   b495a:	4b02      	ldr	r3, [pc, #8]	; (b4964 <HAL_USB_USART_Init+0xc>)
   b495c:	681b      	ldr	r3, [r3, #0]
   b495e:	681b      	ldr	r3, [r3, #0]
   b4960:	9301      	str	r3, [sp, #4]
   b4962:	bd08      	pop	{r3, pc}
   b4964:	0003024c 	.word	0x0003024c

000b4968 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4968:	b508      	push	{r3, lr}
   b496a:	4b02      	ldr	r3, [pc, #8]	; (b4974 <HAL_USB_USART_Begin+0xc>)
   b496c:	681b      	ldr	r3, [r3, #0]
   b496e:	685b      	ldr	r3, [r3, #4]
   b4970:	9301      	str	r3, [sp, #4]
   b4972:	bd08      	pop	{r3, pc}
   b4974:	0003024c 	.word	0x0003024c

000b4978 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4978:	b508      	push	{r3, lr}
   b497a:	4b02      	ldr	r3, [pc, #8]	; (b4984 <HAL_USB_USART_Available_Data+0xc>)
   b497c:	681b      	ldr	r3, [r3, #0]
   b497e:	691b      	ldr	r3, [r3, #16]
   b4980:	9301      	str	r3, [sp, #4]
   b4982:	bd08      	pop	{r3, pc}
   b4984:	0003024c 	.word	0x0003024c

000b4988 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4988:	b508      	push	{r3, lr}
   b498a:	4b02      	ldr	r3, [pc, #8]	; (b4994 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b498c:	681b      	ldr	r3, [r3, #0]
   b498e:	695b      	ldr	r3, [r3, #20]
   b4990:	9301      	str	r3, [sp, #4]
   b4992:	bd08      	pop	{r3, pc}
   b4994:	0003024c 	.word	0x0003024c

000b4998 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4998:	b508      	push	{r3, lr}
   b499a:	4b02      	ldr	r3, [pc, #8]	; (b49a4 <HAL_USB_USART_Receive_Data+0xc>)
   b499c:	681b      	ldr	r3, [r3, #0]
   b499e:	699b      	ldr	r3, [r3, #24]
   b49a0:	9301      	str	r3, [sp, #4]
   b49a2:	bd08      	pop	{r3, pc}
   b49a4:	0003024c 	.word	0x0003024c

000b49a8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b49a8:	b508      	push	{r3, lr}
   b49aa:	4b02      	ldr	r3, [pc, #8]	; (b49b4 <HAL_USB_USART_Send_Data+0xc>)
   b49ac:	681b      	ldr	r3, [r3, #0]
   b49ae:	69db      	ldr	r3, [r3, #28]
   b49b0:	9301      	str	r3, [sp, #4]
   b49b2:	bd08      	pop	{r3, pc}
   b49b4:	0003024c 	.word	0x0003024c

000b49b8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b49b8:	b508      	push	{r3, lr}
   b49ba:	4b02      	ldr	r3, [pc, #8]	; (b49c4 <HAL_USB_USART_Flush_Data+0xc>)
   b49bc:	681b      	ldr	r3, [r3, #0]
   b49be:	6a1b      	ldr	r3, [r3, #32]
   b49c0:	9301      	str	r3, [sp, #4]
   b49c2:	bd08      	pop	{r3, pc}
   b49c4:	0003024c 	.word	0x0003024c

000b49c8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b49c8:	b508      	push	{r3, lr}
   b49ca:	4b02      	ldr	r3, [pc, #8]	; (b49d4 <set_system_mode+0xc>)
   b49cc:	681b      	ldr	r3, [r3, #0]
   b49ce:	685b      	ldr	r3, [r3, #4]
   b49d0:	9301      	str	r3, [sp, #4]
   b49d2:	bd08      	pop	{r3, pc}
   b49d4:	00030220 	.word	0x00030220

000b49d8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b49d8:	b508      	push	{r3, lr}
   b49da:	4b02      	ldr	r3, [pc, #8]	; (b49e4 <system_delay_ms+0xc>)
   b49dc:	681b      	ldr	r3, [r3, #0]
   b49de:	695b      	ldr	r3, [r3, #20]
   b49e0:	9301      	str	r3, [sp, #4]
   b49e2:	bd08      	pop	{r3, pc}
   b49e4:	00030220 	.word	0x00030220

000b49e8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b49e8:	b508      	push	{r3, lr}
   b49ea:	4b03      	ldr	r3, [pc, #12]	; (b49f8 <system_ctrl_set_app_request_handler+0x10>)
   b49ec:	681b      	ldr	r3, [r3, #0]
   b49ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b49f2:	9301      	str	r3, [sp, #4]
   b49f4:	bd08      	pop	{r3, pc}
   b49f6:	0000      	.short	0x0000
   b49f8:	00030220 	.word	0x00030220

000b49fc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b49fc:	b508      	push	{r3, lr}
   b49fe:	4b03      	ldr	r3, [pc, #12]	; (b4a0c <system_ctrl_set_result+0x10>)
   b4a00:	681b      	ldr	r3, [r3, #0]
   b4a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4a06:	9301      	str	r3, [sp, #4]
   b4a08:	bd08      	pop	{r3, pc}
   b4a0a:	0000      	.short	0x0000
   b4a0c:	00030220 	.word	0x00030220

000b4a10 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4a10:	b508      	push	{r3, lr}
   b4a12:	4b02      	ldr	r3, [pc, #8]	; (b4a1c <network_connect+0xc>)
   b4a14:	681b      	ldr	r3, [r3, #0]
   b4a16:	685b      	ldr	r3, [r3, #4]
   b4a18:	9301      	str	r3, [sp, #4]
   b4a1a:	bd08      	pop	{r3, pc}
   b4a1c:	00030240 	.word	0x00030240

000b4a20 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4a20:	b508      	push	{r3, lr}
   b4a22:	4b02      	ldr	r3, [pc, #8]	; (b4a2c <network_connecting+0xc>)
   b4a24:	681b      	ldr	r3, [r3, #0]
   b4a26:	689b      	ldr	r3, [r3, #8]
   b4a28:	9301      	str	r3, [sp, #4]
   b4a2a:	bd08      	pop	{r3, pc}
   b4a2c:	00030240 	.word	0x00030240

000b4a30 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4a30:	b508      	push	{r3, lr}
   b4a32:	4b02      	ldr	r3, [pc, #8]	; (b4a3c <network_disconnect+0xc>)
   b4a34:	681b      	ldr	r3, [r3, #0]
   b4a36:	68db      	ldr	r3, [r3, #12]
   b4a38:	9301      	str	r3, [sp, #4]
   b4a3a:	bd08      	pop	{r3, pc}
   b4a3c:	00030240 	.word	0x00030240

000b4a40 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4a40:	b508      	push	{r3, lr}
   b4a42:	4b02      	ldr	r3, [pc, #8]	; (b4a4c <network_ready+0xc>)
   b4a44:	681b      	ldr	r3, [r3, #0]
   b4a46:	691b      	ldr	r3, [r3, #16]
   b4a48:	9301      	str	r3, [sp, #4]
   b4a4a:	bd08      	pop	{r3, pc}
   b4a4c:	00030240 	.word	0x00030240

000b4a50 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4a50:	b508      	push	{r3, lr}
   b4a52:	4b02      	ldr	r3, [pc, #8]	; (b4a5c <network_on+0xc>)
   b4a54:	681b      	ldr	r3, [r3, #0]
   b4a56:	695b      	ldr	r3, [r3, #20]
   b4a58:	9301      	str	r3, [sp, #4]
   b4a5a:	bd08      	pop	{r3, pc}
   b4a5c:	00030240 	.word	0x00030240

000b4a60 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4a60:	b508      	push	{r3, lr}
   b4a62:	4b02      	ldr	r3, [pc, #8]	; (b4a6c <network_off+0xc>)
   b4a64:	681b      	ldr	r3, [r3, #0]
   b4a66:	699b      	ldr	r3, [r3, #24]
   b4a68:	9301      	str	r3, [sp, #4]
   b4a6a:	bd08      	pop	{r3, pc}
   b4a6c:	00030240 	.word	0x00030240

000b4a70 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4a70:	b508      	push	{r3, lr}
   b4a72:	4b02      	ldr	r3, [pc, #8]	; (b4a7c <network_listen+0xc>)
   b4a74:	681b      	ldr	r3, [r3, #0]
   b4a76:	69db      	ldr	r3, [r3, #28]
   b4a78:	9301      	str	r3, [sp, #4]
   b4a7a:	bd08      	pop	{r3, pc}
   b4a7c:	00030240 	.word	0x00030240

000b4a80 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4a80:	b508      	push	{r3, lr}
   b4a82:	4b02      	ldr	r3, [pc, #8]	; (b4a8c <network_listening+0xc>)
   b4a84:	681b      	ldr	r3, [r3, #0]
   b4a86:	6a1b      	ldr	r3, [r3, #32]
   b4a88:	9301      	str	r3, [sp, #4]
   b4a8a:	bd08      	pop	{r3, pc}
   b4a8c:	00030240 	.word	0x00030240

000b4a90 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4a90:	b508      	push	{r3, lr}
   b4a92:	4b02      	ldr	r3, [pc, #8]	; (b4a9c <network_set_listen_timeout+0xc>)
   b4a94:	681b      	ldr	r3, [r3, #0]
   b4a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4a98:	9301      	str	r3, [sp, #4]
   b4a9a:	bd08      	pop	{r3, pc}
   b4a9c:	00030240 	.word	0x00030240

000b4aa0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4aa0:	b508      	push	{r3, lr}
   b4aa2:	4b02      	ldr	r3, [pc, #8]	; (b4aac <network_get_listen_timeout+0xc>)
   b4aa4:	681b      	ldr	r3, [r3, #0]
   b4aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4aa8:	9301      	str	r3, [sp, #4]
   b4aaa:	bd08      	pop	{r3, pc}
   b4aac:	00030240 	.word	0x00030240

000b4ab0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4ab0:	b508      	push	{r3, lr}
   b4ab2:	4b02      	ldr	r3, [pc, #8]	; (b4abc <network_is_on+0xc>)
   b4ab4:	681b      	ldr	r3, [r3, #0]
   b4ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ab8:	9301      	str	r3, [sp, #4]
   b4aba:	bd08      	pop	{r3, pc}
   b4abc:	00030240 	.word	0x00030240

000b4ac0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4ac0:	b508      	push	{r3, lr}
   b4ac2:	4b02      	ldr	r3, [pc, #8]	; (b4acc <network_is_off+0xc>)
   b4ac4:	681b      	ldr	r3, [r3, #0]
   b4ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4ac8:	9301      	str	r3, [sp, #4]
   b4aca:	bd08      	pop	{r3, pc}
   b4acc:	00030240 	.word	0x00030240

000b4ad0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4ad0:	b508      	push	{r3, lr}
   b4ad2:	4b02      	ldr	r3, [pc, #8]	; (b4adc <spark_set_random_seed_from_cloud_handler+0xc>)
   b4ad4:	681b      	ldr	r3, [r3, #0]
   b4ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4ad8:	9301      	str	r3, [sp, #4]
   b4ada:	bd08      	pop	{r3, pc}
   b4adc:	00030244 	.word	0x00030244

000b4ae0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4ae0:	b508      	push	{r3, lr}
   b4ae2:	4b02      	ldr	r3, [pc, #8]	; (b4aec <malloc+0xc>)
   b4ae4:	681b      	ldr	r3, [r3, #0]
   b4ae6:	681b      	ldr	r3, [r3, #0]
   b4ae8:	9301      	str	r3, [sp, #4]
   b4aea:	bd08      	pop	{r3, pc}
   b4aec:	0003021c 	.word	0x0003021c

000b4af0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4af0:	b508      	push	{r3, lr}
   b4af2:	4b02      	ldr	r3, [pc, #8]	; (b4afc <free+0xc>)
   b4af4:	681b      	ldr	r3, [r3, #0]
   b4af6:	685b      	ldr	r3, [r3, #4]
   b4af8:	9301      	str	r3, [sp, #4]
   b4afa:	bd08      	pop	{r3, pc}
   b4afc:	0003021c 	.word	0x0003021c

000b4b00 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4b00:	b508      	push	{r3, lr}
   b4b02:	4b02      	ldr	r3, [pc, #8]	; (b4b0c <vsnprintf+0xc>)
   b4b04:	681b      	ldr	r3, [r3, #0]
   b4b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4b08:	9301      	str	r3, [sp, #4]
   b4b0a:	bd08      	pop	{r3, pc}
   b4b0c:	0003021c 	.word	0x0003021c

000b4b10 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4b10:	b508      	push	{r3, lr}
   b4b12:	4b02      	ldr	r3, [pc, #8]	; (b4b1c <__assert_func+0xc>)
   b4b14:	681b      	ldr	r3, [r3, #0]
   b4b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4b18:	9301      	str	r3, [sp, #4]
   b4b1a:	bd08      	pop	{r3, pc}
   b4b1c:	0003021c 	.word	0x0003021c

000b4b20 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4b20:	b508      	push	{r3, lr}
   b4b22:	4b02      	ldr	r3, [pc, #8]	; (b4b2c <newlib_impure_ptr_callback+0xc>)
   b4b24:	681b      	ldr	r3, [r3, #0]
   b4b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4b28:	9301      	str	r3, [sp, #4]
   b4b2a:	bd08      	pop	{r3, pc}
   b4b2c:	0003021c 	.word	0x0003021c

000b4b30 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4b30:	2200      	movs	r2, #0
   b4b32:	6840      	ldr	r0, [r0, #4]
   b4b34:	4611      	mov	r1, r2
   b4b36:	f7ff bfa3 	b.w	b4a80 <network_listening>

000b4b3a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4b3a:	2200      	movs	r2, #0
   b4b3c:	6840      	ldr	r0, [r0, #4]
   b4b3e:	4611      	mov	r1, r2
   b4b40:	f7ff bfae 	b.w	b4aa0 <network_get_listen_timeout>

000b4b44 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4b44:	6840      	ldr	r0, [r0, #4]
   b4b46:	2200      	movs	r2, #0
   b4b48:	f7ff bfa2 	b.w	b4a90 <network_set_listen_timeout>

000b4b4c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4b4c:	6840      	ldr	r0, [r0, #4]
   b4b4e:	2200      	movs	r2, #0
   b4b50:	f081 0101 	eor.w	r1, r1, #1
   b4b54:	f7ff bf8c 	b.w	b4a70 <network_listen>

000b4b58 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4b58:	2300      	movs	r3, #0
   b4b5a:	6840      	ldr	r0, [r0, #4]
   b4b5c:	461a      	mov	r2, r3
   b4b5e:	4619      	mov	r1, r3
   b4b60:	f7ff bf7e 	b.w	b4a60 <network_off>

000b4b64 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4b64:	2300      	movs	r3, #0
   b4b66:	6840      	ldr	r0, [r0, #4]
   b4b68:	461a      	mov	r2, r3
   b4b6a:	4619      	mov	r1, r3
   b4b6c:	f7ff bf70 	b.w	b4a50 <network_on>

000b4b70 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4b70:	2200      	movs	r2, #0
   b4b72:	6840      	ldr	r0, [r0, #4]
   b4b74:	4611      	mov	r1, r2
   b4b76:	f7ff bf63 	b.w	b4a40 <network_ready>

000b4b7a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4b7a:	2200      	movs	r2, #0
   b4b7c:	6840      	ldr	r0, [r0, #4]
   b4b7e:	4611      	mov	r1, r2
   b4b80:	f7ff bf4e 	b.w	b4a20 <network_connecting>

000b4b84 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4b84:	6840      	ldr	r0, [r0, #4]
   b4b86:	2200      	movs	r2, #0
   b4b88:	2102      	movs	r1, #2
   b4b8a:	f7ff bf51 	b.w	b4a30 <network_disconnect>

000b4b8e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4b8e:	2300      	movs	r3, #0
   b4b90:	6840      	ldr	r0, [r0, #4]
   b4b92:	461a      	mov	r2, r3
   b4b94:	f7ff bf3c 	b.w	b4a10 <network_connect>

000b4b98 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4b98:	4b02      	ldr	r3, [pc, #8]	; (b4ba4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4b9a:	2203      	movs	r2, #3
   b4b9c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4b9e:	4a02      	ldr	r2, [pc, #8]	; (b4ba8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4ba0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4ba2:	4770      	bx	lr
   b4ba4:	2003e6b8 	.word	0x2003e6b8
   b4ba8:	000b7424 	.word	0x000b7424

000b4bac <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4bac:	b510      	push	{r4, lr}
   b4bae:	4604      	mov	r4, r0
   b4bb0:	4608      	mov	r0, r1
{
    _spi = spi;
   b4bb2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4bb4:	f7ff fec0 	bl	b4938 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4bb8:	2300      	movs	r3, #0
   b4bba:	6063      	str	r3, [r4, #4]
}
   b4bbc:	4620      	mov	r0, r4
   b4bbe:	bd10      	pop	{r4, pc}

000b4bc0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4bc0:	4b05      	ldr	r3, [pc, #20]	; (b4bd8 <_GLOBAL__sub_I_System+0x18>)
   b4bc2:	2202      	movs	r2, #2
   b4bc4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4bc6:	4b05      	ldr	r3, [pc, #20]	; (b4bdc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4bc8:	4a05      	ldr	r2, [pc, #20]	; (b4be0 <_GLOBAL__sub_I_System+0x20>)
   b4bca:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4bcc:	2000      	movs	r0, #0
   b4bce:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4bd2:	f7ff bef9 	b.w	b49c8 <set_system_mode>
   b4bd6:	bf00      	nop
   b4bd8:	2003e6cc 	.word	0x2003e6cc
   b4bdc:	2003e6c0 	.word	0x2003e6c0
   b4be0:	ffff0000 	.word	0xffff0000

000b4be4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4be4:	4802      	ldr	r0, [pc, #8]	; (b4bf0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4be6:	2300      	movs	r3, #0
   b4be8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4bea:	f7ff be1d 	b.w	b4828 <os_mutex_recursive_create>
   b4bee:	bf00      	nop
   b4bf0:	2003e6d0 	.word	0x2003e6d0

000b4bf4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4bf6:	4606      	mov	r6, r0
   b4bf8:	460d      	mov	r5, r1
  size_t n = 0;
   b4bfa:	188f      	adds	r7, r1, r2
   b4bfc:	2400      	movs	r4, #0
  while (size--) {
   b4bfe:	42bd      	cmp	r5, r7
   b4c00:	d00c      	beq.n	b4c1c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4c02:	6833      	ldr	r3, [r6, #0]
   b4c04:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4c08:	689b      	ldr	r3, [r3, #8]
   b4c0a:	4630      	mov	r0, r6
   b4c0c:	4798      	blx	r3
     if (chunk>=0)
   b4c0e:	1e03      	subs	r3, r0, #0
   b4c10:	db01      	blt.n	b4c16 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4c12:	441c      	add	r4, r3
  while (size--) {
   b4c14:	e7f3      	b.n	b4bfe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4c16:	2c00      	cmp	r4, #0
   b4c18:	bf08      	it	eq
   b4c1a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4c1c:	4620      	mov	r0, r4
   b4c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4c20 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4c20:	b513      	push	{r0, r1, r4, lr}
   b4c22:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4c24:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4c26:	b159      	cbz	r1, b4c40 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4c28:	9101      	str	r1, [sp, #4]
   b4c2a:	f002 fb6b 	bl	b7304 <strlen>
   b4c2e:	6823      	ldr	r3, [r4, #0]
   b4c30:	9901      	ldr	r1, [sp, #4]
   b4c32:	68db      	ldr	r3, [r3, #12]
   b4c34:	4602      	mov	r2, r0
   b4c36:	4620      	mov	r0, r4
    }
   b4c38:	b002      	add	sp, #8
   b4c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4c3e:	4718      	bx	r3
    }
   b4c40:	b002      	add	sp, #8
   b4c42:	bd10      	pop	{r4, pc}

000b4c44 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4c44:	6803      	ldr	r3, [r0, #0]
   b4c46:	689b      	ldr	r3, [r3, #8]
   b4c48:	4718      	bx	r3

000b4c4a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4c4a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4c4c:	210d      	movs	r1, #13
{
   b4c4e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4c50:	f7ff fff8 	bl	b4c44 <_ZN5Print5printEc>
  n += print('\n');
   b4c54:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4c56:	4604      	mov	r4, r0
  n += print('\n');
   b4c58:	4628      	mov	r0, r5
   b4c5a:	f7ff fff3 	bl	b4c44 <_ZN5Print5printEc>
  return n;
}
   b4c5e:	4420      	add	r0, r4
   b4c60:	bd38      	pop	{r3, r4, r5, pc}

000b4c62 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4c62:	b530      	push	{r4, r5, lr}
   b4c64:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4c66:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4c68:	2a01      	cmp	r2, #1
  *str = '\0';
   b4c6a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4c6e:	bf98      	it	ls
   b4c70:	220a      	movls	r2, #10
   b4c72:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4c74:	460d      	mov	r5, r1
   b4c76:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4c7a:	fb01 5312 	mls	r3, r1, r2, r5
   b4c7e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4c82:	2b09      	cmp	r3, #9
   b4c84:	bf94      	ite	ls
   b4c86:	3330      	addls	r3, #48	; 0x30
   b4c88:	3337      	addhi	r3, #55	; 0x37
   b4c8a:	b2db      	uxtb	r3, r3
  } while(n);
   b4c8c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4c8e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4c92:	d9ef      	bls.n	b4c74 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4c94:	4621      	mov	r1, r4
   b4c96:	f7ff ffc3 	bl	b4c20 <_ZN5Print5writeEPKc>
}
   b4c9a:	b00b      	add	sp, #44	; 0x2c
   b4c9c:	bd30      	pop	{r4, r5, pc}

000b4c9e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b4c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4ca2:	b086      	sub	sp, #24
   b4ca4:	af00      	add	r7, sp, #0
   b4ca6:	4605      	mov	r5, r0
   b4ca8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b4caa:	1d38      	adds	r0, r7, #4
   b4cac:	2114      	movs	r1, #20
{
   b4cae:	4614      	mov	r4, r2
    va_copy(args2, args);
   b4cb0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b4cb2:	f7ff ff25 	bl	b4b00 <vsnprintf>

    if (n<bufsize)
   b4cb6:	2813      	cmp	r0, #19
   b4cb8:	d80e      	bhi.n	b4cd8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b4cba:	1d39      	adds	r1, r7, #4
   b4cbc:	4628      	mov	r0, r5
   b4cbe:	f7ff ffaf 	bl	b4c20 <_ZN5Print5writeEPKc>
   b4cc2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b4cc4:	b11e      	cbz	r6, b4cce <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b4cc6:	4628      	mov	r0, r5
   b4cc8:	f7ff ffbf 	bl	b4c4a <_ZN5Print7printlnEv>
   b4ccc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b4cce:	4620      	mov	r0, r4
   b4cd0:	3718      	adds	r7, #24
   b4cd2:	46bd      	mov	sp, r7
   b4cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b4cd8:	f100 0308 	add.w	r3, r0, #8
   b4cdc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b4ce0:	46e8      	mov	r8, sp
        char bigger[n+1];
   b4ce2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b4ce6:	4622      	mov	r2, r4
   b4ce8:	1c41      	adds	r1, r0, #1
   b4cea:	683b      	ldr	r3, [r7, #0]
   b4cec:	4668      	mov	r0, sp
   b4cee:	f7ff ff07 	bl	b4b00 <vsnprintf>
  return write(str);
   b4cf2:	4669      	mov	r1, sp
   b4cf4:	4628      	mov	r0, r5
   b4cf6:	f7ff ff93 	bl	b4c20 <_ZN5Print5writeEPKc>
   b4cfa:	4604      	mov	r4, r0
   b4cfc:	46c5      	mov	sp, r8
   b4cfe:	e7e1      	b.n	b4cc4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b4d00 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4d00:	2300      	movs	r3, #0
   b4d02:	6840      	ldr	r0, [r0, #4]
   b4d04:	461a      	mov	r2, r3
   b4d06:	4619      	mov	r1, r3
   b4d08:	f7ff bea2 	b.w	b4a50 <network_on>

000b4d0c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4d0c:	4b01      	ldr	r3, [pc, #4]	; (b4d14 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4d0e:	4a02      	ldr	r2, [pc, #8]	; (b4d18 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4d10:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4d12:	4770      	bx	lr
   b4d14:	2003e6d4 	.word	0x2003e6d4
   b4d18:	000b7458 	.word	0x000b7458

000b4d1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4d1c:	4b02      	ldr	r3, [pc, #8]	; (b4d28 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4d1e:	681a      	ldr	r2, [r3, #0]
   b4d20:	4b02      	ldr	r3, [pc, #8]	; (b4d2c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4d22:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4d24:	4770      	bx	lr
   b4d26:	bf00      	nop
   b4d28:	2003e620 	.word	0x2003e620
   b4d2c:	2003e6d8 	.word	0x2003e6d8

000b4d30 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4d30:	2100      	movs	r1, #0
   b4d32:	f7ff be51 	b.w	b49d8 <system_delay_ms>
	...

000b4d38 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4d38:	4b01      	ldr	r3, [pc, #4]	; (b4d40 <_GLOBAL__sub_I_RGB+0x8>)
   b4d3a:	2200      	movs	r2, #0
   b4d3c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4d3e:	4770      	bx	lr
   b4d40:	2003e6dc 	.word	0x2003e6dc

000b4d44 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4d44:	4b01      	ldr	r3, [pc, #4]	; (b4d4c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4d46:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4d48:	4770      	bx	lr
   b4d4a:	bf00      	nop
   b4d4c:	2003e624 	.word	0x2003e624

000b4d50 <serialEventRun>:
{
   b4d50:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4d52:	4b0b      	ldr	r3, [pc, #44]	; (b4d80 <serialEventRun+0x30>)
   b4d54:	b143      	cbz	r3, b4d68 <serialEventRun+0x18>
   b4d56:	f000 f967 	bl	b5028 <_Z16_fetch_usbserialv>
   b4d5a:	6803      	ldr	r3, [r0, #0]
   b4d5c:	691b      	ldr	r3, [r3, #16]
   b4d5e:	4798      	blx	r3
   b4d60:	2800      	cmp	r0, #0
   b4d62:	dd01      	ble.n	b4d68 <serialEventRun+0x18>
        serialEvent();
   b4d64:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4d68:	4b06      	ldr	r3, [pc, #24]	; (b4d84 <serialEventRun+0x34>)
   b4d6a:	b143      	cbz	r3, b4d7e <serialEventRun+0x2e>
   b4d6c:	f000 fb96 	bl	b549c <_Z22__fetch_global_Serial1v>
   b4d70:	6803      	ldr	r3, [r0, #0]
   b4d72:	691b      	ldr	r3, [r3, #16]
   b4d74:	4798      	blx	r3
   b4d76:	2800      	cmp	r0, #0
   b4d78:	dd01      	ble.n	b4d7e <serialEventRun+0x2e>
        serialEvent1();
   b4d7a:	f3af 8000 	nop.w
}
   b4d7e:	bd08      	pop	{r3, pc}
	...

000b4d88 <_post_loop>:
{
   b4d88:	b508      	push	{r3, lr}
	serialEventRun();
   b4d8a:	f7ff ffe1 	bl	b4d50 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4d8e:	f7ff fd43 	bl	b4818 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4d92:	4b01      	ldr	r3, [pc, #4]	; (b4d98 <_post_loop+0x10>)
   b4d94:	6018      	str	r0, [r3, #0]
}
   b4d96:	bd08      	pop	{r3, pc}
   b4d98:	2003e740 	.word	0x2003e740

000b4d9c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4d9c:	4805      	ldr	r0, [pc, #20]	; (b4db4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4d9e:	4a06      	ldr	r2, [pc, #24]	; (b4db8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4da0:	4906      	ldr	r1, [pc, #24]	; (b4dbc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4da2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4da4:	1a12      	subs	r2, r2, r0
   b4da6:	f002 fa69 	bl	b727c <memcpy>
    __backup_sram_signature = signature;
   b4daa:	4b05      	ldr	r3, [pc, #20]	; (b4dc0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b4dac:	4a05      	ldr	r2, [pc, #20]	; (b4dc4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4dae:	601a      	str	r2, [r3, #0]
}
   b4db0:	bd08      	pop	{r3, pc}
   b4db2:	bf00      	nop
   b4db4:	2003f400 	.word	0x2003f400
   b4db8:	2003f404 	.word	0x2003f404
   b4dbc:	000b7830 	.word	0x000b7830
   b4dc0:	2003f400 	.word	0x2003f400
   b4dc4:	9a271c1e 	.word	0x9a271c1e

000b4dc8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4dc8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4dca:	2300      	movs	r3, #0
   b4dcc:	9300      	str	r3, [sp, #0]
   b4dce:	461a      	mov	r2, r3
   b4dd0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4dd4:	f7ff fe12 	bl	b49fc <system_ctrl_set_result>
}
   b4dd8:	b003      	add	sp, #12
   b4dda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4de0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4de0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4de2:	8843      	ldrh	r3, [r0, #2]
   b4de4:	2b0a      	cmp	r3, #10
   b4de6:	d008      	beq.n	b4dfa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4de8:	2b50      	cmp	r3, #80	; 0x50
   b4dea:	d10b      	bne.n	b4e04 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4dec:	4b09      	ldr	r3, [pc, #36]	; (b4e14 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4dee:	681b      	ldr	r3, [r3, #0]
   b4df0:	b14b      	cbz	r3, b4e06 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4df2:	b003      	add	sp, #12
   b4df4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4df8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4dfa:	f7ff ffe5 	bl	b4dc8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4dfe:	b003      	add	sp, #12
   b4e00:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4e04:	2300      	movs	r3, #0
   b4e06:	9300      	str	r3, [sp, #0]
   b4e08:	461a      	mov	r2, r3
   b4e0a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4e0e:	f7ff fdf5 	bl	b49fc <system_ctrl_set_result>
}
   b4e12:	e7f4      	b.n	b4dfe <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4e14:	2003e6f0 	.word	0x2003e6f0

000b4e18 <module_user_init_hook>:
{
   b4e18:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4e1a:	4812      	ldr	r0, [pc, #72]	; (b4e64 <module_user_init_hook+0x4c>)
   b4e1c:	2100      	movs	r1, #0
   b4e1e:	f7ff fe7f 	bl	b4b20 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4e22:	4b11      	ldr	r3, [pc, #68]	; (b4e68 <module_user_init_hook+0x50>)
   b4e24:	681a      	ldr	r2, [r3, #0]
   b4e26:	4b11      	ldr	r3, [pc, #68]	; (b4e6c <module_user_init_hook+0x54>)
   b4e28:	429a      	cmp	r2, r3
   b4e2a:	4b11      	ldr	r3, [pc, #68]	; (b4e70 <module_user_init_hook+0x58>)
   b4e2c:	bf0c      	ite	eq
   b4e2e:	2201      	moveq	r2, #1
   b4e30:	2200      	movne	r2, #0
   b4e32:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4e34:	d001      	beq.n	b4e3a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4e36:	f7ff ffb1 	bl	b4d9c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4e3a:	f7ff fcd5 	bl	b47e8 <HAL_RNG_GetRandomNumber>
   b4e3e:	4604      	mov	r4, r0
    srand(seed);
   b4e40:	f002 fa32 	bl	b72a8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4e44:	4b0b      	ldr	r3, [pc, #44]	; (b4e74 <module_user_init_hook+0x5c>)
   b4e46:	b113      	cbz	r3, b4e4e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4e48:	4620      	mov	r0, r4
   b4e4a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4e4e:	2100      	movs	r1, #0
   b4e50:	4808      	ldr	r0, [pc, #32]	; (b4e74 <module_user_init_hook+0x5c>)
   b4e52:	f7ff fe3d 	bl	b4ad0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4e5a:	4807      	ldr	r0, [pc, #28]	; (b4e78 <module_user_init_hook+0x60>)
   b4e5c:	2100      	movs	r1, #0
   b4e5e:	f7ff bdc3 	b.w	b49e8 <system_ctrl_set_app_request_handler>
   b4e62:	bf00      	nop
   b4e64:	000b4d45 	.word	0x000b4d45
   b4e68:	2003f400 	.word	0x2003f400
   b4e6c:	9a271c1e 	.word	0x9a271c1e
   b4e70:	2003e6ec 	.word	0x2003e6ec
   b4e74:	00000000 	.word	0x00000000
   b4e78:	000b4de1 	.word	0x000b4de1

000b4e7c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4e7c:	4770      	bx	lr

000b4e7e <_ZN9IPAddressD0Ev>:
   b4e7e:	b510      	push	{r4, lr}
   b4e80:	2118      	movs	r1, #24
   b4e82:	4604      	mov	r4, r0
   b4e84:	f7ff f909 	bl	b409a <_ZdlPvj>
   b4e88:	4620      	mov	r0, r4
   b4e8a:	bd10      	pop	{r4, pc}

000b4e8c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4e8e:	7d03      	ldrb	r3, [r0, #20]
   b4e90:	2b06      	cmp	r3, #6
{
   b4e92:	b08d      	sub	sp, #52	; 0x34
   b4e94:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4e96:	f100 0704 	add.w	r7, r0, #4
   b4e9a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4e9e:	d012      	beq.n	b4ec6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4ea0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4ea4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4ea8:	220a      	movs	r2, #10
   b4eaa:	4630      	mov	r0, r6
   b4eac:	f7ff fed9 	bl	b4c62 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4eb0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4eb2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4eb4:	d019      	beq.n	b4eea <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4eb6:	2c00      	cmp	r4, #0
   b4eb8:	d0f4      	beq.n	b4ea4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4eba:	212e      	movs	r1, #46	; 0x2e
   b4ebc:	4630      	mov	r0, r6
   b4ebe:	f7ff fec1 	bl	b4c44 <_ZN5Print5printEc>
   b4ec2:	4404      	add	r4, r0
   b4ec4:	e7ee      	b.n	b4ea4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4ec6:	232f      	movs	r3, #47	; 0x2f
   b4ec8:	466a      	mov	r2, sp
   b4eca:	4639      	mov	r1, r7
   b4ecc:	200a      	movs	r0, #10
		buf[0] = 0;
   b4ece:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4ed2:	f7ff fcb1 	bl	b4838 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4ed6:	4668      	mov	r0, sp
   b4ed8:	f002 fa14 	bl	b7304 <strlen>
   b4edc:	6833      	ldr	r3, [r6, #0]
   b4ede:	4602      	mov	r2, r0
   b4ee0:	68db      	ldr	r3, [r3, #12]
   b4ee2:	4669      	mov	r1, sp
   b4ee4:	4630      	mov	r0, r6
   b4ee6:	4798      	blx	r3
   b4ee8:	4604      	mov	r4, r0
    }
    return n;
}
   b4eea:	4620      	mov	r0, r4
   b4eec:	b00d      	add	sp, #52	; 0x34
   b4eee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4ef0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4ef0:	b510      	push	{r4, lr}
   b4ef2:	4b05      	ldr	r3, [pc, #20]	; (b4f08 <_ZN9IPAddressC1Ev+0x18>)
   b4ef4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4ef6:	2211      	movs	r2, #17
   b4ef8:	f840 3b04 	str.w	r3, [r0], #4
   b4efc:	2100      	movs	r1, #0
   b4efe:	f002 f9cb 	bl	b7298 <memset>
}
   b4f02:	4620      	mov	r0, r4
   b4f04:	bd10      	pop	{r4, pc}
   b4f06:	bf00      	nop
   b4f08:	000b7480 	.word	0x000b7480

000b4f0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4f0c:	4603      	mov	r3, r0
   b4f0e:	4a07      	ldr	r2, [pc, #28]	; (b4f2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4f10:	b510      	push	{r4, lr}
   b4f12:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4f16:	f101 0210 	add.w	r2, r1, #16
   b4f1a:	f851 4b04 	ldr.w	r4, [r1], #4
   b4f1e:	f843 4b04 	str.w	r4, [r3], #4
   b4f22:	4291      	cmp	r1, r2
   b4f24:	d1f9      	bne.n	b4f1a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4f26:	780a      	ldrb	r2, [r1, #0]
   b4f28:	701a      	strb	r2, [r3, #0]
}
   b4f2a:	bd10      	pop	{r4, pc}
   b4f2c:	000b7480 	.word	0x000b7480

000b4f30 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4f30:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4f32:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4f36:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4f3a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4f3e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4f42:	2304      	movs	r3, #4
   b4f44:	6041      	str	r1, [r0, #4]
   b4f46:	7503      	strb	r3, [r0, #20]
}
   b4f48:	bd10      	pop	{r4, pc}
	...

000b4f4c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4f4c:	b507      	push	{r0, r1, r2, lr}
   b4f4e:	4b06      	ldr	r3, [pc, #24]	; (b4f68 <_ZN9IPAddressC1EPKh+0x1c>)
   b4f50:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4f52:	78cb      	ldrb	r3, [r1, #3]
   b4f54:	9300      	str	r3, [sp, #0]
   b4f56:	788b      	ldrb	r3, [r1, #2]
   b4f58:	784a      	ldrb	r2, [r1, #1]
   b4f5a:	7809      	ldrb	r1, [r1, #0]
   b4f5c:	f7ff ffe8 	bl	b4f30 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4f60:	b003      	add	sp, #12
   b4f62:	f85d fb04 	ldr.w	pc, [sp], #4
   b4f66:	bf00      	nop
   b4f68:	000b7480 	.word	0x000b7480

000b4f6c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4f6c:	7441      	strb	r1, [r0, #17]
}
   b4f6e:	4770      	bx	lr

000b4f70 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4f70:	4770      	bx	lr

000b4f72 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4f72:	4770      	bx	lr

000b4f74 <_ZN9USBSerial4readEv>:
{
   b4f74:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4f76:	2100      	movs	r1, #0
   b4f78:	7c00      	ldrb	r0, [r0, #16]
   b4f7a:	f7ff fd0d 	bl	b4998 <HAL_USB_USART_Receive_Data>
}
   b4f7e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4f82:	bd08      	pop	{r3, pc}

000b4f84 <_ZN9USBSerial4peekEv>:
{
   b4f84:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4f86:	2101      	movs	r1, #1
   b4f88:	7c00      	ldrb	r0, [r0, #16]
   b4f8a:	f7ff fd05 	bl	b4998 <HAL_USB_USART_Receive_Data>
}
   b4f8e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4f92:	bd08      	pop	{r3, pc}

000b4f94 <_ZN9USBSerial17availableForWriteEv>:
{
   b4f94:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4f96:	7c00      	ldrb	r0, [r0, #16]
   b4f98:	f7ff fcf6 	bl	b4988 <HAL_USB_USART_Available_Data_For_Write>
}
   b4f9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4fa0:	bd08      	pop	{r3, pc}

000b4fa2 <_ZN9USBSerial9availableEv>:
{
   b4fa2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4fa4:	7c00      	ldrb	r0, [r0, #16]
   b4fa6:	f7ff fce7 	bl	b4978 <HAL_USB_USART_Available_Data>
}
   b4faa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4fae:	bd08      	pop	{r3, pc}

000b4fb0 <_ZN9USBSerial5writeEh>:
{
   b4fb0:	b513      	push	{r0, r1, r4, lr}
   b4fb2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4fb4:	7c00      	ldrb	r0, [r0, #16]
{
   b4fb6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4fb8:	f7ff fce6 	bl	b4988 <HAL_USB_USART_Available_Data_For_Write>
   b4fbc:	2800      	cmp	r0, #0
   b4fbe:	9901      	ldr	r1, [sp, #4]
   b4fc0:	dc01      	bgt.n	b4fc6 <_ZN9USBSerial5writeEh+0x16>
   b4fc2:	7c60      	ldrb	r0, [r4, #17]
   b4fc4:	b120      	cbz	r0, b4fd0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4fc6:	7c20      	ldrb	r0, [r4, #16]
   b4fc8:	f7ff fcee 	bl	b49a8 <HAL_USB_USART_Send_Data>
   b4fcc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4fd0:	b002      	add	sp, #8
   b4fd2:	bd10      	pop	{r4, pc}

000b4fd4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4fd4:	7c00      	ldrb	r0, [r0, #16]
   b4fd6:	f7ff bcef 	b.w	b49b8 <HAL_USB_USART_Flush_Data>

000b4fda <_ZN9USBSerialD0Ev>:
   b4fda:	b510      	push	{r4, lr}
   b4fdc:	2114      	movs	r1, #20
   b4fde:	4604      	mov	r4, r0
   b4fe0:	f7ff f85b 	bl	b409a <_ZdlPvj>
   b4fe4:	4620      	mov	r0, r4
   b4fe6:	bd10      	pop	{r4, pc}

000b4fe8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4fe8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4fee:	4604      	mov	r4, r0
   b4ff0:	4608      	mov	r0, r1
   b4ff2:	2100      	movs	r1, #0
   b4ff4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4ff8:	4b04      	ldr	r3, [pc, #16]	; (b500c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4ffa:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4ffc:	2301      	movs	r3, #1
  _serial = serial;
   b4ffe:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5000:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5002:	4611      	mov	r1, r2
   b5004:	f7ff fca8 	bl	b4958 <HAL_USB_USART_Init>
}
   b5008:	4620      	mov	r0, r4
   b500a:	bd10      	pop	{r4, pc}
   b500c:	000b7494 	.word	0x000b7494

000b5010 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5010:	7c00      	ldrb	r0, [r0, #16]
   b5012:	2200      	movs	r2, #0
   b5014:	f7ff bca8 	b.w	b4968 <HAL_USB_USART_Begin>

000b5018 <_Z19acquireSerialBufferv>:
{
   b5018:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b501a:	2214      	movs	r2, #20
{
   b501c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b501e:	2100      	movs	r1, #0
   b5020:	f002 f93a 	bl	b7298 <memset>
}
   b5024:	4620      	mov	r0, r4
   b5026:	bd10      	pop	{r4, pc}

000b5028 <_Z16_fetch_usbserialv>:
{
   b5028:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b502a:	4c0f      	ldr	r4, [pc, #60]	; (b5068 <_Z16_fetch_usbserialv+0x40>)
{
   b502c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b502e:	a803      	add	r0, sp, #12
   b5030:	f7ff fff2 	bl	b5018 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5034:	7821      	ldrb	r1, [r4, #0]
   b5036:	f3bf 8f5b 	dmb	ish
   b503a:	f011 0101 	ands.w	r1, r1, #1
   b503e:	d10f      	bne.n	b5060 <_Z16_fetch_usbserialv+0x38>
   b5040:	4620      	mov	r0, r4
   b5042:	9101      	str	r1, [sp, #4]
   b5044:	f7ff f82b 	bl	b409e <__cxa_guard_acquire>
   b5048:	9901      	ldr	r1, [sp, #4]
   b504a:	b148      	cbz	r0, b5060 <_Z16_fetch_usbserialv+0x38>
   b504c:	aa03      	add	r2, sp, #12
   b504e:	4807      	ldr	r0, [pc, #28]	; (b506c <_Z16_fetch_usbserialv+0x44>)
   b5050:	f7ff ffca 	bl	b4fe8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5054:	4620      	mov	r0, r4
   b5056:	f7ff f827 	bl	b40a8 <__cxa_guard_release>
   b505a:	4805      	ldr	r0, [pc, #20]	; (b5070 <_Z16_fetch_usbserialv+0x48>)
   b505c:	f002 f908 	bl	b7270 <atexit>
	return _usbserial;
}
   b5060:	4802      	ldr	r0, [pc, #8]	; (b506c <_Z16_fetch_usbserialv+0x44>)
   b5062:	b008      	add	sp, #32
   b5064:	bd10      	pop	{r4, pc}
   b5066:	bf00      	nop
   b5068:	2003e6f4 	.word	0x2003e6f4
   b506c:	2003e6f8 	.word	0x2003e6f8
   b5070:	000b4f71 	.word	0x000b4f71

000b5074 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5074:	4770      	bx	lr

000b5076 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5076:	7441      	strb	r1, [r0, #17]
}
   b5078:	4770      	bx	lr

000b507a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b507a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b507c:	7c00      	ldrb	r0, [r0, #16]
   b507e:	f7ff fc13 	bl	b48a8 <hal_usart_available_data_for_write>
}
   b5082:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5086:	bd08      	pop	{r3, pc}

000b5088 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5088:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b508a:	7c00      	ldrb	r0, [r0, #16]
   b508c:	f7ff fbe4 	bl	b4858 <hal_usart_available>
}
   b5090:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5094:	bd08      	pop	{r3, pc}

000b5096 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5096:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5098:	7c00      	ldrb	r0, [r0, #16]
   b509a:	f7ff fbed 	bl	b4878 <hal_usart_peek>
}
   b509e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b50a2:	bd08      	pop	{r3, pc}

000b50a4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b50a4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b50a6:	7c00      	ldrb	r0, [r0, #16]
   b50a8:	f7ff fbde 	bl	b4868 <hal_usart_read>
}
   b50ac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b50b0:	bd08      	pop	{r3, pc}

000b50b2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b50b2:	7c00      	ldrb	r0, [r0, #16]
   b50b4:	f7ff bbe8 	b.w	b4888 <hal_usart_flush>

000b50b8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b50b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b50ba:	7c45      	ldrb	r5, [r0, #17]
{
   b50bc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b50be:	b12d      	cbz	r5, b50cc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b50c0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b50c2:	b003      	add	sp, #12
   b50c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b50c8:	f7ff bbbe 	b.w	b4848 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b50cc:	7c00      	ldrb	r0, [r0, #16]
   b50ce:	9101      	str	r1, [sp, #4]
   b50d0:	f7ff fbea 	bl	b48a8 <hal_usart_available_data_for_write>
   b50d4:	2800      	cmp	r0, #0
   b50d6:	9901      	ldr	r1, [sp, #4]
   b50d8:	dcf2      	bgt.n	b50c0 <_ZN11USARTSerial5writeEh+0x8>
}
   b50da:	4628      	mov	r0, r5
   b50dc:	b003      	add	sp, #12
   b50de:	bd30      	pop	{r4, r5, pc}

000b50e0 <_ZN11USARTSerialD0Ev>:
   b50e0:	b510      	push	{r4, lr}
   b50e2:	2114      	movs	r1, #20
   b50e4:	4604      	mov	r4, r0
   b50e6:	f7fe ffd8 	bl	b409a <_ZdlPvj>
   b50ea:	4620      	mov	r0, r4
   b50ec:	bd10      	pop	{r4, pc}
	...

000b50f0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b50f0:	b510      	push	{r4, lr}
   b50f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b50f6:	4604      	mov	r4, r0
   b50f8:	4608      	mov	r0, r1
   b50fa:	4611      	mov	r1, r2
   b50fc:	2200      	movs	r2, #0
   b50fe:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5102:	4b04      	ldr	r3, [pc, #16]	; (b5114 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5104:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5106:	2301      	movs	r3, #1
  _serial = serial;
   b5108:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b510a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b510c:	f7ff fbd4 	bl	b48b8 <hal_usart_init_ex>
}
   b5110:	4620      	mov	r0, r4
   b5112:	bd10      	pop	{r4, pc}
   b5114:	000b74c4 	.word	0x000b74c4

000b5118 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5118:	4770      	bx	lr

000b511a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b511a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b511c:	4606      	mov	r6, r0
   b511e:	4615      	mov	r5, r2
   b5120:	460c      	mov	r4, r1
   b5122:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5124:	42bc      	cmp	r4, r7
   b5126:	d006      	beq.n	b5136 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5128:	6833      	ldr	r3, [r6, #0]
   b512a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b512e:	689b      	ldr	r3, [r3, #8]
   b5130:	4630      	mov	r0, r6
   b5132:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5134:	e7f6      	b.n	b5124 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5136:	4628      	mov	r0, r5
   b5138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b513a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b513a:	7c00      	ldrb	r0, [r0, #16]
   b513c:	2200      	movs	r2, #0
   b513e:	f7ff bbc3 	b.w	b48c8 <hal_i2c_write>

000b5142 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5142:	7c00      	ldrb	r0, [r0, #16]
   b5144:	2100      	movs	r1, #0
   b5146:	f7ff bbc7 	b.w	b48d8 <hal_i2c_available>

000b514a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b514a:	7c00      	ldrb	r0, [r0, #16]
   b514c:	2100      	movs	r1, #0
   b514e:	f7ff bbcb 	b.w	b48e8 <hal_i2c_read>

000b5152 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5152:	7c00      	ldrb	r0, [r0, #16]
   b5154:	2100      	movs	r1, #0
   b5156:	f7ff bbcf 	b.w	b48f8 <hal_i2c_peek>

000b515a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b515a:	7c00      	ldrb	r0, [r0, #16]
   b515c:	2100      	movs	r1, #0
   b515e:	f7ff bbd3 	b.w	b4908 <hal_i2c_flush>

000b5162 <_ZN7TwoWireD0Ev>:
   b5162:	b510      	push	{r4, lr}
   b5164:	2114      	movs	r1, #20
   b5166:	4604      	mov	r4, r0
   b5168:	f7fe ff97 	bl	b409a <_ZdlPvj>
   b516c:	4620      	mov	r0, r4
   b516e:	bd10      	pop	{r4, pc}

000b5170 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5170:	b510      	push	{r4, lr}
   b5172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5176:	4604      	mov	r4, r0
   b5178:	4608      	mov	r0, r1
   b517a:	2100      	movs	r1, #0
   b517c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5180:	4b03      	ldr	r3, [pc, #12]	; (b5190 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b5182:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b5184:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b5186:	4611      	mov	r1, r2
   b5188:	f7ff fbce 	bl	b4928 <hal_i2c_init>
}
   b518c:	4620      	mov	r0, r4
   b518e:	bd10      	pop	{r4, pc}
   b5190:	000b74f4 	.word	0x000b74f4

000b5194 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5194:	2200      	movs	r2, #0
   b5196:	6840      	ldr	r0, [r0, #4]
   b5198:	4611      	mov	r1, r2
   b519a:	f7ff bc51 	b.w	b4a40 <network_ready>

000b519e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b519e:	2200      	movs	r2, #0
   b51a0:	6840      	ldr	r0, [r0, #4]
   b51a2:	4611      	mov	r1, r2
   b51a4:	f7ff bc6c 	b.w	b4a80 <network_listening>

000b51a8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b51a8:	2200      	movs	r2, #0
   b51aa:	6840      	ldr	r0, [r0, #4]
   b51ac:	4611      	mov	r1, r2
   b51ae:	f7ff bc77 	b.w	b4aa0 <network_get_listen_timeout>

000b51b2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b51b2:	6840      	ldr	r0, [r0, #4]
   b51b4:	2200      	movs	r2, #0
   b51b6:	f7ff bc6b 	b.w	b4a90 <network_set_listen_timeout>

000b51ba <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b51ba:	6840      	ldr	r0, [r0, #4]
   b51bc:	2200      	movs	r2, #0
   b51be:	f081 0101 	eor.w	r1, r1, #1
   b51c2:	f7ff bc55 	b.w	b4a70 <network_listen>

000b51c6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b51c6:	2300      	movs	r3, #0
   b51c8:	6840      	ldr	r0, [r0, #4]
   b51ca:	461a      	mov	r2, r3
   b51cc:	4619      	mov	r1, r3
   b51ce:	f7ff bc47 	b.w	b4a60 <network_off>

000b51d2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b51d2:	2200      	movs	r2, #0
   b51d4:	6840      	ldr	r0, [r0, #4]
   b51d6:	4611      	mov	r1, r2
   b51d8:	f7ff bc22 	b.w	b4a20 <network_connecting>

000b51dc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b51dc:	6840      	ldr	r0, [r0, #4]
   b51de:	2200      	movs	r2, #0
   b51e0:	2102      	movs	r1, #2
   b51e2:	f7ff bc25 	b.w	b4a30 <network_disconnect>

000b51e6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b51e6:	2300      	movs	r3, #0
   b51e8:	6840      	ldr	r0, [r0, #4]
   b51ea:	461a      	mov	r2, r3
   b51ec:	f7ff bc10 	b.w	b4a10 <network_connect>

000b51f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b51f0:	4b02      	ldr	r3, [pc, #8]	; (b51fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b51f2:	2204      	movs	r2, #4
   b51f4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b51f6:	4a02      	ldr	r2, [pc, #8]	; (b5200 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b51f8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b51fa:	4770      	bx	lr
   b51fc:	2003e70c 	.word	0x2003e70c
   b5200:	000b751c 	.word	0x000b751c

000b5204 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5204:	2300      	movs	r3, #0
   b5206:	6840      	ldr	r0, [r0, #4]
   b5208:	461a      	mov	r2, r3
   b520a:	f7ff bc01 	b.w	b4a10 <network_connect>

000b520e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b520e:	6840      	ldr	r0, [r0, #4]
   b5210:	2200      	movs	r2, #0
   b5212:	2102      	movs	r1, #2
   b5214:	f7ff bc0c 	b.w	b4a30 <network_disconnect>

000b5218 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5218:	2200      	movs	r2, #0
   b521a:	6840      	ldr	r0, [r0, #4]
   b521c:	4611      	mov	r1, r2
   b521e:	f7ff bbff 	b.w	b4a20 <network_connecting>

000b5222 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5222:	2200      	movs	r2, #0
   b5224:	6840      	ldr	r0, [r0, #4]
   b5226:	4611      	mov	r1, r2
   b5228:	f7ff bc0a 	b.w	b4a40 <network_ready>

000b522c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b522c:	2300      	movs	r3, #0
   b522e:	6840      	ldr	r0, [r0, #4]
   b5230:	461a      	mov	r2, r3
   b5232:	4619      	mov	r1, r3
   b5234:	f7ff bc0c 	b.w	b4a50 <network_on>

000b5238 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5238:	2300      	movs	r3, #0
   b523a:	6840      	ldr	r0, [r0, #4]
   b523c:	461a      	mov	r2, r3
   b523e:	4619      	mov	r1, r3
   b5240:	f7ff bc0e 	b.w	b4a60 <network_off>

000b5244 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5244:	6840      	ldr	r0, [r0, #4]
   b5246:	2100      	movs	r1, #0
   b5248:	f7ff bc32 	b.w	b4ab0 <network_is_on>

000b524c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b524c:	6840      	ldr	r0, [r0, #4]
   b524e:	2100      	movs	r1, #0
   b5250:	f7ff bc36 	b.w	b4ac0 <network_is_off>

000b5254 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5254:	6840      	ldr	r0, [r0, #4]
   b5256:	2200      	movs	r2, #0
   b5258:	f081 0101 	eor.w	r1, r1, #1
   b525c:	f7ff bc08 	b.w	b4a70 <network_listen>

000b5260 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5260:	6840      	ldr	r0, [r0, #4]
   b5262:	2200      	movs	r2, #0
   b5264:	f7ff bc14 	b.w	b4a90 <network_set_listen_timeout>

000b5268 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5268:	2200      	movs	r2, #0
   b526a:	6840      	ldr	r0, [r0, #4]
   b526c:	4611      	mov	r1, r2
   b526e:	f7ff bc17 	b.w	b4aa0 <network_get_listen_timeout>

000b5272 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5272:	2200      	movs	r2, #0
   b5274:	6840      	ldr	r0, [r0, #4]
   b5276:	4611      	mov	r1, r2
   b5278:	f7ff bc02 	b.w	b4a80 <network_listening>

000b527c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b527c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5280:	b095      	sub	sp, #84	; 0x54
   b5282:	4614      	mov	r4, r2
   b5284:	460d      	mov	r5, r1
   b5286:	4607      	mov	r7, r0
    IPAddress addr;
   b5288:	f7ff fe32 	bl	b4ef0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b528c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b528e:	221c      	movs	r2, #28
   b5290:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5292:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5294:	f002 f800 	bl	b7298 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5298:	2340      	movs	r3, #64	; 0x40
   b529a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b529c:	4620      	mov	r0, r4
   b529e:	466b      	mov	r3, sp
   b52a0:	aa0c      	add	r2, sp, #48	; 0x30
   b52a2:	2100      	movs	r1, #0
   b52a4:	f7ff fa68 	bl	b4778 <netdb_getaddrinfo>
    if (!r) {
   b52a8:	4604      	mov	r4, r0
   b52aa:	2800      	cmp	r0, #0
   b52ac:	d14b      	bne.n	b5346 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b52ae:	4602      	mov	r2, r0
   b52b0:	2101      	movs	r1, #1
   b52b2:	6868      	ldr	r0, [r5, #4]
   b52b4:	f7ff fbc4 	bl	b4a40 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b52b8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b52ba:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b52bc:	4622      	mov	r2, r4
   b52be:	6868      	ldr	r0, [r5, #4]
   b52c0:	f7ff fbbe 	bl	b4a40 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b52c4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b52c6:	4681      	mov	r9, r0
        bool ok = false;
   b52c8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b52ca:	2e00      	cmp	r6, #0
   b52cc:	d03b      	beq.n	b5346 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b52ce:	2900      	cmp	r1, #0
   b52d0:	d139      	bne.n	b5346 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b52d2:	6873      	ldr	r3, [r6, #4]
   b52d4:	2b02      	cmp	r3, #2
   b52d6:	d003      	beq.n	b52e0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b52d8:	2b0a      	cmp	r3, #10
   b52da:	d011      	beq.n	b5300 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b52dc:	69f6      	ldr	r6, [r6, #28]
   b52de:	e7f4      	b.n	b52ca <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b52e0:	f1b8 0f00 	cmp.w	r8, #0
   b52e4:	d0fa      	beq.n	b52dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b52e6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b52e8:	a806      	add	r0, sp, #24
   b52ea:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b52ec:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b52ee:	f7ff fe2d 	bl	b4f4c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b52f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b52f4:	1d3c      	adds	r4, r7, #4
   b52f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b52f8:	682b      	ldr	r3, [r5, #0]
   b52fa:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b52fc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b52fe:	e7ed      	b.n	b52dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5300:	f1b9 0f00 	cmp.w	r9, #0
   b5304:	d0ea      	beq.n	b52dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5306:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5308:	2210      	movs	r2, #16
   b530a:	a801      	add	r0, sp, #4
   b530c:	f001 ffc4 	bl	b7298 <memset>
                    a.v = 6;
   b5310:	2306      	movs	r3, #6
   b5312:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5316:	ad01      	add	r5, sp, #4
   b5318:	f104 0308 	add.w	r3, r4, #8
   b531c:	3418      	adds	r4, #24
   b531e:	6818      	ldr	r0, [r3, #0]
   b5320:	6859      	ldr	r1, [r3, #4]
   b5322:	462a      	mov	r2, r5
   b5324:	c203      	stmia	r2!, {r0, r1}
   b5326:	3308      	adds	r3, #8
   b5328:	42a3      	cmp	r3, r4
   b532a:	4615      	mov	r5, r2
   b532c:	d1f7      	bne.n	b531e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b532e:	a901      	add	r1, sp, #4
   b5330:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5332:	ad07      	add	r5, sp, #28
   b5334:	f7ff fdea 	bl	b4f0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b533a:	1d3c      	adds	r4, r7, #4
   b533c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b533e:	682b      	ldr	r3, [r5, #0]
   b5340:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5342:	4649      	mov	r1, r9
   b5344:	e7ca      	b.n	b52dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5346:	9800      	ldr	r0, [sp, #0]
   b5348:	f7ff fa0e 	bl	b4768 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b534c:	4638      	mov	r0, r7
   b534e:	b015      	add	sp, #84	; 0x54
   b5350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5354 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5354:	4b02      	ldr	r3, [pc, #8]	; (b5360 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5356:	4a03      	ldr	r2, [pc, #12]	; (b5364 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5358:	601a      	str	r2, [r3, #0]
   b535a:	2200      	movs	r2, #0
   b535c:	605a      	str	r2, [r3, #4]

} // spark
   b535e:	4770      	bx	lr
   b5360:	2003e714 	.word	0x2003e714
   b5364:	000b7558 	.word	0x000b7558

000b5368 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5368:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b536a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b536c:	d902      	bls.n	b5374 <pinAvailable+0xc>
    return false;
   b536e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5370:	b002      	add	sp, #8
   b5372:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5374:	f1a0 030b 	sub.w	r3, r0, #11
   b5378:	2b02      	cmp	r3, #2
   b537a:	d81a      	bhi.n	b53b2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b537c:	4c17      	ldr	r4, [pc, #92]	; (b53dc <pinAvailable+0x74>)
   b537e:	7821      	ldrb	r1, [r4, #0]
   b5380:	f3bf 8f5b 	dmb	ish
   b5384:	f011 0101 	ands.w	r1, r1, #1
   b5388:	d10b      	bne.n	b53a2 <pinAvailable+0x3a>
   b538a:	4620      	mov	r0, r4
   b538c:	9101      	str	r1, [sp, #4]
   b538e:	f7fe fe86 	bl	b409e <__cxa_guard_acquire>
   b5392:	9901      	ldr	r1, [sp, #4]
   b5394:	b128      	cbz	r0, b53a2 <pinAvailable+0x3a>
   b5396:	4812      	ldr	r0, [pc, #72]	; (b53e0 <pinAvailable+0x78>)
   b5398:	f7ff fc08 	bl	b4bac <_ZN8SPIClassC1E19hal_spi_interface_t>
   b539c:	4620      	mov	r0, r4
   b539e:	f7fe fe83 	bl	b40a8 <__cxa_guard_release>
   b53a2:	4b0f      	ldr	r3, [pc, #60]	; (b53e0 <pinAvailable+0x78>)
   b53a4:	7818      	ldrb	r0, [r3, #0]
   b53a6:	f7ff facf 	bl	b4948 <hal_spi_is_enabled>
   b53aa:	2800      	cmp	r0, #0
   b53ac:	d1df      	bne.n	b536e <pinAvailable+0x6>
  return true; // 'pin' is available
   b53ae:	2001      	movs	r0, #1
   b53b0:	e7de      	b.n	b5370 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b53b2:	2801      	cmp	r0, #1
   b53b4:	d809      	bhi.n	b53ca <pinAvailable+0x62>
   b53b6:	f000 f8ad 	bl	b5514 <_Z19__fetch_global_Wirev>
   b53ba:	2100      	movs	r1, #0
   b53bc:	7c00      	ldrb	r0, [r0, #16]
   b53be:	f7ff faab 	bl	b4918 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b53c2:	f080 0001 	eor.w	r0, r0, #1
   b53c6:	b2c0      	uxtb	r0, r0
   b53c8:	e7d2      	b.n	b5370 <pinAvailable+0x8>
   b53ca:	3809      	subs	r0, #9
   b53cc:	2801      	cmp	r0, #1
   b53ce:	d8ee      	bhi.n	b53ae <pinAvailable+0x46>
   b53d0:	f000 f864 	bl	b549c <_Z22__fetch_global_Serial1v>
   b53d4:	7c00      	ldrb	r0, [r0, #16]
   b53d6:	f7ff fa5f 	bl	b4898 <hal_usart_is_enabled>
   b53da:	e7f2      	b.n	b53c2 <pinAvailable+0x5a>
   b53dc:	2003e71c 	.word	0x2003e71c
   b53e0:	2003e720 	.word	0x2003e720

000b53e4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b53e4:	2823      	cmp	r0, #35	; 0x23
{
   b53e6:	b538      	push	{r3, r4, r5, lr}
   b53e8:	4604      	mov	r4, r0
   b53ea:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b53ec:	d80a      	bhi.n	b5404 <pinMode+0x20>
   b53ee:	29ff      	cmp	r1, #255	; 0xff
   b53f0:	d008      	beq.n	b5404 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b53f2:	f7ff ffb9 	bl	b5368 <pinAvailable>
   b53f6:	b128      	cbz	r0, b5404 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b53f8:	4629      	mov	r1, r5
   b53fa:	4620      	mov	r0, r4
}
   b53fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5400:	f7ff b9d2 	b.w	b47a8 <HAL_Pin_Mode>
}
   b5404:	bd38      	pop	{r3, r4, r5, pc}

000b5406 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5406:	b538      	push	{r3, r4, r5, lr}
   b5408:	4604      	mov	r4, r0
   b540a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b540c:	f7ff f9d4 	bl	b47b8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5410:	28ff      	cmp	r0, #255	; 0xff
   b5412:	d010      	beq.n	b5436 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5414:	2806      	cmp	r0, #6
   b5416:	d804      	bhi.n	b5422 <digitalWrite+0x1c>
   b5418:	234d      	movs	r3, #77	; 0x4d
   b541a:	fa23 f000 	lsr.w	r0, r3, r0
   b541e:	07c3      	lsls	r3, r0, #31
   b5420:	d409      	bmi.n	b5436 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5422:	4620      	mov	r0, r4
   b5424:	f7ff ffa0 	bl	b5368 <pinAvailable>
   b5428:	b128      	cbz	r0, b5436 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b542a:	4629      	mov	r1, r5
   b542c:	4620      	mov	r0, r4
}
   b542e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b5432:	f7ff b9c9 	b.w	b47c8 <HAL_GPIO_Write>
}
   b5436:	bd38      	pop	{r3, r4, r5, pc}

000b5438 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b5438:	280d      	cmp	r0, #13
{
   b543a:	b510      	push	{r4, lr}
   b543c:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b543e:	bf9c      	itt	ls
   b5440:	340e      	addls	r4, #14
   b5442:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b5444:	4620      	mov	r0, r4
   b5446:	f7ff ff8f 	bl	b5368 <pinAvailable>
   b544a:	b150      	cbz	r0, b5462 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b544c:	2103      	movs	r1, #3
   b544e:	4620      	mov	r0, r4
   b5450:	f7ff f9a2 	bl	b4798 <HAL_Validate_Pin_Function>
   b5454:	2803      	cmp	r0, #3
   b5456:	d104      	bne.n	b5462 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b5458:	4620      	mov	r0, r4
}
   b545a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b545e:	f7ff b9bb 	b.w	b47d8 <hal_adc_read>
}
   b5462:	2000      	movs	r0, #0
   b5464:	bd10      	pop	{r4, pc}

000b5466 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5466:	4770      	bx	lr

000b5468 <_Z20acquireSerial1Bufferv>:
{
   b5468:	b538      	push	{r3, r4, r5, lr}
   b546a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b546c:	2514      	movs	r5, #20
   b546e:	462a      	mov	r2, r5
   b5470:	2100      	movs	r1, #0
   b5472:	f001 ff11 	bl	b7298 <memset>
   b5476:	8025      	strh	r5, [r4, #0]
   b5478:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b547a:	4907      	ldr	r1, [pc, #28]	; (b5498 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b547c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b547e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5480:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5482:	f000 f86b 	bl	b555c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5486:	4904      	ldr	r1, [pc, #16]	; (b5498 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5488:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b548a:	4628      	mov	r0, r5
   b548c:	f000 f866 	bl	b555c <_ZnajRKSt9nothrow_t>
    };
   b5490:	60e0      	str	r0, [r4, #12]
}
   b5492:	4620      	mov	r0, r4
   b5494:	bd38      	pop	{r3, r4, r5, pc}
   b5496:	bf00      	nop
   b5498:	000b758c 	.word	0x000b758c

000b549c <_Z22__fetch_global_Serial1v>:
{
   b549c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b549e:	4d0e      	ldr	r5, [pc, #56]	; (b54d8 <_Z22__fetch_global_Serial1v+0x3c>)
   b54a0:	7829      	ldrb	r1, [r5, #0]
   b54a2:	f3bf 8f5b 	dmb	ish
   b54a6:	f011 0401 	ands.w	r4, r1, #1
{
   b54aa:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b54ac:	d111      	bne.n	b54d2 <_Z22__fetch_global_Serial1v+0x36>
   b54ae:	4628      	mov	r0, r5
   b54b0:	f7fe fdf5 	bl	b409e <__cxa_guard_acquire>
   b54b4:	b168      	cbz	r0, b54d2 <_Z22__fetch_global_Serial1v+0x36>
   b54b6:	a801      	add	r0, sp, #4
   b54b8:	f7ff ffd6 	bl	b5468 <_Z20acquireSerial1Bufferv>
   b54bc:	aa01      	add	r2, sp, #4
   b54be:	4621      	mov	r1, r4
   b54c0:	4806      	ldr	r0, [pc, #24]	; (b54dc <_Z22__fetch_global_Serial1v+0x40>)
   b54c2:	f7ff fe15 	bl	b50f0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b54c6:	4628      	mov	r0, r5
   b54c8:	f7fe fdee 	bl	b40a8 <__cxa_guard_release>
   b54cc:	4804      	ldr	r0, [pc, #16]	; (b54e0 <_Z22__fetch_global_Serial1v+0x44>)
   b54ce:	f001 fecf 	bl	b7270 <atexit>
    return serial1;
}
   b54d2:	4802      	ldr	r0, [pc, #8]	; (b54dc <_Z22__fetch_global_Serial1v+0x40>)
   b54d4:	b007      	add	sp, #28
   b54d6:	bd30      	pop	{r4, r5, pc}
   b54d8:	2003e728 	.word	0x2003e728
   b54dc:	2003e72c 	.word	0x2003e72c
   b54e0:	000b5467 	.word	0x000b5467

000b54e4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b54e4:	4770      	bx	lr
	...

000b54e8 <_Z17acquireWireBufferv>:
{
   b54e8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b54ea:	2520      	movs	r5, #32
   b54ec:	2314      	movs	r3, #20
{
   b54ee:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b54f0:	6003      	str	r3, [r0, #0]
   b54f2:	6085      	str	r5, [r0, #8]
   b54f4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b54f6:	4906      	ldr	r1, [pc, #24]	; (b5510 <_Z17acquireWireBufferv+0x28>)
   b54f8:	4628      	mov	r0, r5
   b54fa:	f000 f82f 	bl	b555c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b54fe:	4904      	ldr	r1, [pc, #16]	; (b5510 <_Z17acquireWireBufferv+0x28>)
	};
   b5500:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5502:	4628      	mov	r0, r5
   b5504:	f000 f82a 	bl	b555c <_ZnajRKSt9nothrow_t>
	};
   b5508:	60e0      	str	r0, [r4, #12]
}
   b550a:	4620      	mov	r0, r4
   b550c:	bd38      	pop	{r3, r4, r5, pc}
   b550e:	bf00      	nop
   b5510:	000b758c 	.word	0x000b758c

000b5514 <_Z19__fetch_global_Wirev>:
{
   b5514:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5516:	4d0e      	ldr	r5, [pc, #56]	; (b5550 <_Z19__fetch_global_Wirev+0x3c>)
   b5518:	7829      	ldrb	r1, [r5, #0]
   b551a:	f3bf 8f5b 	dmb	ish
   b551e:	f011 0401 	ands.w	r4, r1, #1
{
   b5522:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5524:	d111      	bne.n	b554a <_Z19__fetch_global_Wirev+0x36>
   b5526:	4628      	mov	r0, r5
   b5528:	f7fe fdb9 	bl	b409e <__cxa_guard_acquire>
   b552c:	b168      	cbz	r0, b554a <_Z19__fetch_global_Wirev+0x36>
   b552e:	a801      	add	r0, sp, #4
   b5530:	f7ff ffda 	bl	b54e8 <_Z17acquireWireBufferv>
   b5534:	aa01      	add	r2, sp, #4
   b5536:	4621      	mov	r1, r4
   b5538:	4806      	ldr	r0, [pc, #24]	; (b5554 <_Z19__fetch_global_Wirev+0x40>)
   b553a:	f7ff fe19 	bl	b5170 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b553e:	4628      	mov	r0, r5
   b5540:	f7fe fdb2 	bl	b40a8 <__cxa_guard_release>
   b5544:	4804      	ldr	r0, [pc, #16]	; (b5558 <_Z19__fetch_global_Wirev+0x44>)
   b5546:	f001 fe93 	bl	b7270 <atexit>
	return wire;
}
   b554a:	4802      	ldr	r0, [pc, #8]	; (b5554 <_Z19__fetch_global_Wirev+0x40>)
   b554c:	b007      	add	sp, #28
   b554e:	bd30      	pop	{r4, r5, pc}
   b5550:	2003e744 	.word	0x2003e744
   b5554:	2003e748 	.word	0x2003e748
   b5558:	000b54e5 	.word	0x000b54e5

000b555c <_ZnajRKSt9nothrow_t>:
   b555c:	f7fe bd9b 	b.w	b4096 <_Znaj>

000b5560 <sin>:
   b5560:	ec51 0b10 	vmov	r0, r1, d0
   b5564:	4a20      	ldr	r2, [pc, #128]	; (b55e8 <sin+0x88>)
   b5566:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b556a:	4293      	cmp	r3, r2
   b556c:	dd27      	ble.n	b55be <sin+0x5e>
   b556e:	b500      	push	{lr}
   b5570:	4a1e      	ldr	r2, [pc, #120]	; (b55ec <sin+0x8c>)
   b5572:	4293      	cmp	r3, r2
   b5574:	b085      	sub	sp, #20
   b5576:	dd09      	ble.n	b558c <sin+0x2c>
   b5578:	ee10 2a10 	vmov	r2, s0
   b557c:	460b      	mov	r3, r1
   b557e:	f001 f9ad 	bl	b68dc <__aeabi_dsub>
   b5582:	ec41 0b10 	vmov	d0, r0, r1
   b5586:	b005      	add	sp, #20
   b5588:	f85d fb04 	ldr.w	pc, [sp], #4
   b558c:	4668      	mov	r0, sp
   b558e:	f000 f82f 	bl	b55f0 <__ieee754_rem_pio2>
   b5592:	f000 0003 	and.w	r0, r0, #3
   b5596:	2801      	cmp	r0, #1
   b5598:	ed9d 1b02 	vldr	d1, [sp, #8]
   b559c:	ed9d 0b00 	vldr	d0, [sp]
   b55a0:	d012      	beq.n	b55c8 <sin+0x68>
   b55a2:	2802      	cmp	r0, #2
   b55a4:	d017      	beq.n	b55d6 <sin+0x76>
   b55a6:	b190      	cbz	r0, b55ce <sin+0x6e>
   b55a8:	f000 fa4a 	bl	b5a40 <__kernel_cos>
   b55ac:	ec53 2b10 	vmov	r2, r3, d0
   b55b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   b55b4:	ee00 3a90 	vmov	s1, r3
   b55b8:	b005      	add	sp, #20
   b55ba:	f85d fb04 	ldr.w	pc, [sp], #4
   b55be:	ed9f 1b08 	vldr	d1, [pc, #32]	; b55e0 <sin+0x80>
   b55c2:	2000      	movs	r0, #0
   b55c4:	f000 bfa8 	b.w	b6518 <__kernel_sin>
   b55c8:	f000 fa3a 	bl	b5a40 <__kernel_cos>
   b55cc:	e7db      	b.n	b5586 <sin+0x26>
   b55ce:	2001      	movs	r0, #1
   b55d0:	f000 ffa2 	bl	b6518 <__kernel_sin>
   b55d4:	e7d7      	b.n	b5586 <sin+0x26>
   b55d6:	2001      	movs	r0, #1
   b55d8:	f000 ff9e 	bl	b6518 <__kernel_sin>
   b55dc:	e7e6      	b.n	b55ac <sin+0x4c>
   b55de:	bf00      	nop
	...
   b55e8:	3fe921fb 	.word	0x3fe921fb
   b55ec:	7fefffff 	.word	0x7fefffff

000b55f0 <__ieee754_rem_pio2>:
   b55f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b55f4:	ec53 2b10 	vmov	r2, r3, d0
   b55f8:	ed2d 8b04 	vpush	{d8-d9}
   b55fc:	4990      	ldr	r1, [pc, #576]	; (b5840 <__ieee754_rem_pio2+0x250>)
   b55fe:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   b5602:	428d      	cmp	r5, r1
   b5604:	b08b      	sub	sp, #44	; 0x2c
   b5606:	4604      	mov	r4, r0
   b5608:	f340 808c 	ble.w	b5724 <__ieee754_rem_pio2+0x134>
   b560c:	498d      	ldr	r1, [pc, #564]	; (b5844 <__ieee754_rem_pio2+0x254>)
   b560e:	428d      	cmp	r5, r1
   b5610:	461f      	mov	r7, r3
   b5612:	dc2b      	bgt.n	b566c <__ieee754_rem_pio2+0x7c>
   b5614:	2f00      	cmp	r7, #0
   b5616:	4619      	mov	r1, r3
   b5618:	ee10 0a10 	vmov	r0, s0
   b561c:	a37e      	add	r3, pc, #504	; (adr r3, b5818 <__ieee754_rem_pio2+0x228>)
   b561e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5622:	f340 81b6 	ble.w	b5992 <__ieee754_rem_pio2+0x3a2>
   b5626:	f001 f959 	bl	b68dc <__aeabi_dsub>
   b562a:	4b87      	ldr	r3, [pc, #540]	; (b5848 <__ieee754_rem_pio2+0x258>)
   b562c:	429d      	cmp	r5, r3
   b562e:	4680      	mov	r8, r0
   b5630:	4689      	mov	r9, r1
   b5632:	f000 808f 	beq.w	b5754 <__ieee754_rem_pio2+0x164>
   b5636:	a37a      	add	r3, pc, #488	; (adr r3, b5820 <__ieee754_rem_pio2+0x230>)
   b5638:	e9d3 2300 	ldrd	r2, r3, [r3]
   b563c:	f001 f94e 	bl	b68dc <__aeabi_dsub>
   b5640:	4602      	mov	r2, r0
   b5642:	460b      	mov	r3, r1
   b5644:	e9c4 2300 	strd	r2, r3, [r4]
   b5648:	4640      	mov	r0, r8
   b564a:	4649      	mov	r1, r9
   b564c:	f001 f946 	bl	b68dc <__aeabi_dsub>
   b5650:	a373      	add	r3, pc, #460	; (adr r3, b5820 <__ieee754_rem_pio2+0x230>)
   b5652:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5656:	f001 f941 	bl	b68dc <__aeabi_dsub>
   b565a:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b565e:	2601      	movs	r6, #1
   b5660:	4630      	mov	r0, r6
   b5662:	b00b      	add	sp, #44	; 0x2c
   b5664:	ecbd 8b04 	vpop	{d8-d9}
   b5668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b566c:	4977      	ldr	r1, [pc, #476]	; (b584c <__ieee754_rem_pio2+0x25c>)
   b566e:	428d      	cmp	r5, r1
   b5670:	f340 8092 	ble.w	b5798 <__ieee754_rem_pio2+0x1a8>
   b5674:	4976      	ldr	r1, [pc, #472]	; (b5850 <__ieee754_rem_pio2+0x260>)
   b5676:	428d      	cmp	r5, r1
   b5678:	dc61      	bgt.n	b573e <__ieee754_rem_pio2+0x14e>
   b567a:	152e      	asrs	r6, r5, #20
   b567c:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
   b5680:	ee10 0a10 	vmov	r0, s0
   b5684:	eba5 5106 	sub.w	r1, r5, r6, lsl #20
   b5688:	4690      	mov	r8, r2
   b568a:	4689      	mov	r9, r1
   b568c:	f001 fd78 	bl	b7180 <__aeabi_d2iz>
   b5690:	f001 fa72 	bl	b6b78 <__aeabi_i2d>
   b5694:	4602      	mov	r2, r0
   b5696:	460b      	mov	r3, r1
   b5698:	4640      	mov	r0, r8
   b569a:	4649      	mov	r1, r9
   b569c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b56a0:	f001 f91c 	bl	b68dc <__aeabi_dsub>
   b56a4:	4b6b      	ldr	r3, [pc, #428]	; (b5854 <__ieee754_rem_pio2+0x264>)
   b56a6:	2200      	movs	r2, #0
   b56a8:	f001 fad0 	bl	b6c4c <__aeabi_dmul>
   b56ac:	4689      	mov	r9, r1
   b56ae:	4680      	mov	r8, r0
   b56b0:	f001 fd66 	bl	b7180 <__aeabi_d2iz>
   b56b4:	4605      	mov	r5, r0
   b56b6:	f001 fa5f 	bl	b6b78 <__aeabi_i2d>
   b56ba:	4602      	mov	r2, r0
   b56bc:	460b      	mov	r3, r1
   b56be:	4640      	mov	r0, r8
   b56c0:	4649      	mov	r1, r9
   b56c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b56c6:	f001 f909 	bl	b68dc <__aeabi_dsub>
   b56ca:	4b62      	ldr	r3, [pc, #392]	; (b5854 <__ieee754_rem_pio2+0x264>)
   b56cc:	2200      	movs	r2, #0
   b56ce:	f001 fabd 	bl	b6c4c <__aeabi_dmul>
   b56d2:	4602      	mov	r2, r0
   b56d4:	460b      	mov	r3, r1
   b56d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b56da:	2200      	movs	r2, #0
   b56dc:	2300      	movs	r3, #0
   b56de:	f001 fd1d 	bl	b711c <__aeabi_dcmpeq>
   b56e2:	2800      	cmp	r0, #0
   b56e4:	f000 8153 	beq.w	b598e <__ieee754_rem_pio2+0x39e>
   b56e8:	2d00      	cmp	r5, #0
   b56ea:	bf0c      	ite	eq
   b56ec:	2301      	moveq	r3, #1
   b56ee:	2302      	movne	r3, #2
   b56f0:	4a59      	ldr	r2, [pc, #356]	; (b5858 <__ieee754_rem_pio2+0x268>)
   b56f2:	9201      	str	r2, [sp, #4]
   b56f4:	2202      	movs	r2, #2
   b56f6:	9200      	str	r2, [sp, #0]
   b56f8:	4621      	mov	r1, r4
   b56fa:	4632      	mov	r2, r6
   b56fc:	a804      	add	r0, sp, #16
   b56fe:	f000 fadf 	bl	b5cc0 <__kernel_rem_pio2>
   b5702:	2f00      	cmp	r7, #0
   b5704:	4606      	mov	r6, r0
   b5706:	daab      	bge.n	b5660 <__ieee754_rem_pio2+0x70>
   b5708:	6861      	ldr	r1, [r4, #4]
   b570a:	6822      	ldr	r2, [r4, #0]
   b570c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b5710:	68e1      	ldr	r1, [r4, #12]
   b5712:	e9c4 2300 	strd	r2, r3, [r4]
   b5716:	68a2      	ldr	r2, [r4, #8]
   b5718:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b571c:	e9c4 2302 	strd	r2, r3, [r4, #8]
   b5720:	4246      	negs	r6, r0
   b5722:	e79d      	b.n	b5660 <__ieee754_rem_pio2+0x70>
   b5724:	2000      	movs	r0, #0
   b5726:	2100      	movs	r1, #0
   b5728:	2600      	movs	r6, #0
   b572a:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b572e:	4630      	mov	r0, r6
   b5730:	ed84 0b00 	vstr	d0, [r4]
   b5734:	b00b      	add	sp, #44	; 0x2c
   b5736:	ecbd 8b04 	vpop	{d8-d9}
   b573a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b573e:	ee10 0a10 	vmov	r0, s0
   b5742:	4619      	mov	r1, r3
   b5744:	f001 f8ca 	bl	b68dc <__aeabi_dsub>
   b5748:	2600      	movs	r6, #0
   b574a:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b574e:	e9c4 0100 	strd	r0, r1, [r4]
   b5752:	e785      	b.n	b5660 <__ieee754_rem_pio2+0x70>
   b5754:	a334      	add	r3, pc, #208	; (adr r3, b5828 <__ieee754_rem_pio2+0x238>)
   b5756:	e9d3 2300 	ldrd	r2, r3, [r3]
   b575a:	f001 f8bf 	bl	b68dc <__aeabi_dsub>
   b575e:	a334      	add	r3, pc, #208	; (adr r3, b5830 <__ieee754_rem_pio2+0x240>)
   b5760:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5764:	4680      	mov	r8, r0
   b5766:	4689      	mov	r9, r1
   b5768:	f001 f8b8 	bl	b68dc <__aeabi_dsub>
   b576c:	4602      	mov	r2, r0
   b576e:	460b      	mov	r3, r1
   b5770:	e9c4 2300 	strd	r2, r3, [r4]
   b5774:	4640      	mov	r0, r8
   b5776:	4649      	mov	r1, r9
   b5778:	f001 f8b0 	bl	b68dc <__aeabi_dsub>
   b577c:	a32c      	add	r3, pc, #176	; (adr r3, b5830 <__ieee754_rem_pio2+0x240>)
   b577e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5782:	f001 f8ab 	bl	b68dc <__aeabi_dsub>
   b5786:	2601      	movs	r6, #1
   b5788:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b578c:	4630      	mov	r0, r6
   b578e:	b00b      	add	sp, #44	; 0x2c
   b5790:	ecbd 8b04 	vpop	{d8-d9}
   b5794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5798:	f000 ff7c 	bl	b6694 <fabs>
   b579c:	ec59 8b10 	vmov	r8, r9, d0
   b57a0:	ee10 0a10 	vmov	r0, s0
   b57a4:	a324      	add	r3, pc, #144	; (adr r3, b5838 <__ieee754_rem_pio2+0x248>)
   b57a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b57aa:	4649      	mov	r1, r9
   b57ac:	f001 fa4e 	bl	b6c4c <__aeabi_dmul>
   b57b0:	4b2a      	ldr	r3, [pc, #168]	; (b585c <__ieee754_rem_pio2+0x26c>)
   b57b2:	2200      	movs	r2, #0
   b57b4:	f001 f894 	bl	b68e0 <__adddf3>
   b57b8:	f001 fce2 	bl	b7180 <__aeabi_d2iz>
   b57bc:	4606      	mov	r6, r0
   b57be:	f001 f9db 	bl	b6b78 <__aeabi_i2d>
   b57c2:	4602      	mov	r2, r0
   b57c4:	460b      	mov	r3, r1
   b57c6:	ec43 2b18 	vmov	d8, r2, r3
   b57ca:	a313      	add	r3, pc, #76	; (adr r3, b5818 <__ieee754_rem_pio2+0x228>)
   b57cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b57d0:	eeb0 9a48 	vmov.f32	s18, s16
   b57d4:	eef0 9a68 	vmov.f32	s19, s17
   b57d8:	f001 fa38 	bl	b6c4c <__aeabi_dmul>
   b57dc:	4602      	mov	r2, r0
   b57de:	460b      	mov	r3, r1
   b57e0:	4640      	mov	r0, r8
   b57e2:	4649      	mov	r1, r9
   b57e4:	f001 f87a 	bl	b68dc <__aeabi_dsub>
   b57e8:	a30d      	add	r3, pc, #52	; (adr r3, b5820 <__ieee754_rem_pio2+0x230>)
   b57ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   b57ee:	4682      	mov	sl, r0
   b57f0:	468b      	mov	fp, r1
   b57f2:	ec51 0b18 	vmov	r0, r1, d8
   b57f6:	f001 fa29 	bl	b6c4c <__aeabi_dmul>
   b57fa:	2e1f      	cmp	r6, #31
   b57fc:	ec41 0b18 	vmov	d8, r0, r1
   b5800:	dc30      	bgt.n	b5864 <__ieee754_rem_pio2+0x274>
   b5802:	4b17      	ldr	r3, [pc, #92]	; (b5860 <__ieee754_rem_pio2+0x270>)
   b5804:	1e72      	subs	r2, r6, #1
   b5806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   b580a:	42ab      	cmp	r3, r5
   b580c:	d02a      	beq.n	b5864 <__ieee754_rem_pio2+0x274>
   b580e:	4602      	mov	r2, r0
   b5810:	460b      	mov	r3, r1
   b5812:	e09b      	b.n	b594c <__ieee754_rem_pio2+0x35c>
   b5814:	f3af 8000 	nop.w
   b5818:	54400000 	.word	0x54400000
   b581c:	3ff921fb 	.word	0x3ff921fb
   b5820:	1a626331 	.word	0x1a626331
   b5824:	3dd0b461 	.word	0x3dd0b461
   b5828:	1a600000 	.word	0x1a600000
   b582c:	3dd0b461 	.word	0x3dd0b461
   b5830:	2e037073 	.word	0x2e037073
   b5834:	3ba3198a 	.word	0x3ba3198a
   b5838:	6dc9c883 	.word	0x6dc9c883
   b583c:	3fe45f30 	.word	0x3fe45f30
   b5840:	3fe921fb 	.word	0x3fe921fb
   b5844:	4002d97b 	.word	0x4002d97b
   b5848:	3ff921fb 	.word	0x3ff921fb
   b584c:	413921fb 	.word	0x413921fb
   b5850:	7fefffff 	.word	0x7fefffff
   b5854:	41700000 	.word	0x41700000
   b5858:	000b7610 	.word	0x000b7610
   b585c:	3fe00000 	.word	0x3fe00000
   b5860:	000b7590 	.word	0x000b7590
   b5864:	152b      	asrs	r3, r5, #20
   b5866:	9303      	str	r3, [sp, #12]
   b5868:	4650      	mov	r0, sl
   b586a:	ec53 2b18 	vmov	r2, r3, d8
   b586e:	4659      	mov	r1, fp
   b5870:	f001 f834 	bl	b68dc <__aeabi_dsub>
   b5874:	f3c1 530a 	ubfx	r3, r1, #20, #11
   b5878:	ebc3 5515 	rsb	r5, r3, r5, lsr #20
   b587c:	2d10      	cmp	r5, #16
   b587e:	4680      	mov	r8, r0
   b5880:	4689      	mov	r9, r1
   b5882:	dd69      	ble.n	b5958 <__ieee754_rem_pio2+0x368>
   b5884:	a364      	add	r3, pc, #400	; (adr r3, b5a18 <__ieee754_rem_pio2+0x428>)
   b5886:	e9d3 2300 	ldrd	r2, r3, [r3]
   b588a:	ec51 0b19 	vmov	r0, r1, d9
   b588e:	f001 f9dd 	bl	b6c4c <__aeabi_dmul>
   b5892:	4680      	mov	r8, r0
   b5894:	4689      	mov	r9, r1
   b5896:	4642      	mov	r2, r8
   b5898:	464b      	mov	r3, r9
   b589a:	4650      	mov	r0, sl
   b589c:	4659      	mov	r1, fp
   b589e:	f001 f81d 	bl	b68dc <__aeabi_dsub>
   b58a2:	4602      	mov	r2, r0
   b58a4:	460b      	mov	r3, r1
   b58a6:	4650      	mov	r0, sl
   b58a8:	4659      	mov	r1, fp
   b58aa:	4692      	mov	sl, r2
   b58ac:	469b      	mov	fp, r3
   b58ae:	f001 f815 	bl	b68dc <__aeabi_dsub>
   b58b2:	4642      	mov	r2, r8
   b58b4:	464b      	mov	r3, r9
   b58b6:	f001 f811 	bl	b68dc <__aeabi_dsub>
   b58ba:	a359      	add	r3, pc, #356	; (adr r3, b5a20 <__ieee754_rem_pio2+0x430>)
   b58bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b58c0:	4680      	mov	r8, r0
   b58c2:	4689      	mov	r9, r1
   b58c4:	ec51 0b19 	vmov	r0, r1, d9
   b58c8:	f001 f9c0 	bl	b6c4c <__aeabi_dmul>
   b58cc:	4642      	mov	r2, r8
   b58ce:	464b      	mov	r3, r9
   b58d0:	f001 f804 	bl	b68dc <__aeabi_dsub>
   b58d4:	4602      	mov	r2, r0
   b58d6:	460b      	mov	r3, r1
   b58d8:	4650      	mov	r0, sl
   b58da:	4659      	mov	r1, fp
   b58dc:	ec43 2b18 	vmov	d8, r2, r3
   b58e0:	f000 fffc 	bl	b68dc <__aeabi_dsub>
   b58e4:	9a03      	ldr	r2, [sp, #12]
   b58e6:	f3c1 530a 	ubfx	r3, r1, #20, #11
   b58ea:	1ad3      	subs	r3, r2, r3
   b58ec:	2b31      	cmp	r3, #49	; 0x31
   b58ee:	4680      	mov	r8, r0
   b58f0:	4689      	mov	r9, r1
   b58f2:	dd31      	ble.n	b5958 <__ieee754_rem_pio2+0x368>
   b58f4:	a34d      	add	r3, pc, #308	; (adr r3, b5a2c <__ieee754_rem_pio2+0x43c>)
   b58f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b58fa:	ec51 0b19 	vmov	r0, r1, d9
   b58fe:	f001 f9a5 	bl	b6c4c <__aeabi_dmul>
   b5902:	4680      	mov	r8, r0
   b5904:	4689      	mov	r9, r1
   b5906:	4642      	mov	r2, r8
   b5908:	464b      	mov	r3, r9
   b590a:	4650      	mov	r0, sl
   b590c:	4659      	mov	r1, fp
   b590e:	f000 ffe5 	bl	b68dc <__aeabi_dsub>
   b5912:	4602      	mov	r2, r0
   b5914:	460b      	mov	r3, r1
   b5916:	4650      	mov	r0, sl
   b5918:	4659      	mov	r1, fp
   b591a:	4692      	mov	sl, r2
   b591c:	469b      	mov	fp, r3
   b591e:	f000 ffdd 	bl	b68dc <__aeabi_dsub>
   b5922:	4642      	mov	r2, r8
   b5924:	464b      	mov	r3, r9
   b5926:	f000 ffd9 	bl	b68dc <__aeabi_dsub>
   b592a:	a342      	add	r3, pc, #264	; (adr r3, b5a34 <__ieee754_rem_pio2+0x444>)
   b592c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5930:	4680      	mov	r8, r0
   b5932:	4689      	mov	r9, r1
   b5934:	ec51 0b19 	vmov	r0, r1, d9
   b5938:	f001 f988 	bl	b6c4c <__aeabi_dmul>
   b593c:	4642      	mov	r2, r8
   b593e:	464b      	mov	r3, r9
   b5940:	f000 ffcc 	bl	b68dc <__aeabi_dsub>
   b5944:	4602      	mov	r2, r0
   b5946:	460b      	mov	r3, r1
   b5948:	ec43 2b18 	vmov	d8, r2, r3
   b594c:	4650      	mov	r0, sl
   b594e:	4659      	mov	r1, fp
   b5950:	f000 ffc4 	bl	b68dc <__aeabi_dsub>
   b5954:	4680      	mov	r8, r0
   b5956:	4689      	mov	r9, r1
   b5958:	4642      	mov	r2, r8
   b595a:	464b      	mov	r3, r9
   b595c:	e9c4 8900 	strd	r8, r9, [r4]
   b5960:	4650      	mov	r0, sl
   b5962:	4659      	mov	r1, fp
   b5964:	f000 ffba 	bl	b68dc <__aeabi_dsub>
   b5968:	ec53 2b18 	vmov	r2, r3, d8
   b596c:	f000 ffb6 	bl	b68dc <__aeabi_dsub>
   b5970:	2f00      	cmp	r7, #0
   b5972:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b5976:	f6bf ae73 	bge.w	b5660 <__ieee754_rem_pio2+0x70>
   b597a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b597e:	e9c4 8300 	strd	r8, r3, [r4]
   b5982:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b5986:	e9c4 0302 	strd	r0, r3, [r4, #8]
   b598a:	4276      	negs	r6, r6
   b598c:	e668      	b.n	b5660 <__ieee754_rem_pio2+0x70>
   b598e:	2303      	movs	r3, #3
   b5990:	e6ae      	b.n	b56f0 <__ieee754_rem_pio2+0x100>
   b5992:	f000 ffa5 	bl	b68e0 <__adddf3>
   b5996:	4b24      	ldr	r3, [pc, #144]	; (b5a28 <__ieee754_rem_pio2+0x438>)
   b5998:	429d      	cmp	r5, r3
   b599a:	4680      	mov	r8, r0
   b599c:	4689      	mov	r9, r1
   b599e:	d016      	beq.n	b59ce <__ieee754_rem_pio2+0x3de>
   b59a0:	a31b      	add	r3, pc, #108	; (adr r3, b5a10 <__ieee754_rem_pio2+0x420>)
   b59a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b59a6:	f000 ff9b 	bl	b68e0 <__adddf3>
   b59aa:	4602      	mov	r2, r0
   b59ac:	460b      	mov	r3, r1
   b59ae:	e9c4 2300 	strd	r2, r3, [r4]
   b59b2:	4640      	mov	r0, r8
   b59b4:	4649      	mov	r1, r9
   b59b6:	f000 ff91 	bl	b68dc <__aeabi_dsub>
   b59ba:	a315      	add	r3, pc, #84	; (adr r3, b5a10 <__ieee754_rem_pio2+0x420>)
   b59bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b59c0:	f000 ff8e 	bl	b68e0 <__adddf3>
   b59c4:	f04f 36ff 	mov.w	r6, #4294967295
   b59c8:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b59cc:	e648      	b.n	b5660 <__ieee754_rem_pio2+0x70>
   b59ce:	a312      	add	r3, pc, #72	; (adr r3, b5a18 <__ieee754_rem_pio2+0x428>)
   b59d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b59d4:	f000 ff84 	bl	b68e0 <__adddf3>
   b59d8:	a311      	add	r3, pc, #68	; (adr r3, b5a20 <__ieee754_rem_pio2+0x430>)
   b59da:	e9d3 2300 	ldrd	r2, r3, [r3]
   b59de:	4680      	mov	r8, r0
   b59e0:	4689      	mov	r9, r1
   b59e2:	f000 ff7d 	bl	b68e0 <__adddf3>
   b59e6:	4602      	mov	r2, r0
   b59e8:	460b      	mov	r3, r1
   b59ea:	e9c4 2300 	strd	r2, r3, [r4]
   b59ee:	4640      	mov	r0, r8
   b59f0:	4649      	mov	r1, r9
   b59f2:	f000 ff73 	bl	b68dc <__aeabi_dsub>
   b59f6:	a30a      	add	r3, pc, #40	; (adr r3, b5a20 <__ieee754_rem_pio2+0x430>)
   b59f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b59fc:	f000 ff70 	bl	b68e0 <__adddf3>
   b5a00:	f04f 36ff 	mov.w	r6, #4294967295
   b5a04:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b5a08:	e62a      	b.n	b5660 <__ieee754_rem_pio2+0x70>
   b5a0a:	bf00      	nop
   b5a0c:	f3af 8000 	nop.w
   b5a10:	1a626331 	.word	0x1a626331
   b5a14:	3dd0b461 	.word	0x3dd0b461
   b5a18:	1a600000 	.word	0x1a600000
   b5a1c:	3dd0b461 	.word	0x3dd0b461
   b5a20:	2e037073 	.word	0x2e037073
   b5a24:	3ba3198a 	.word	0x3ba3198a
   b5a28:	3ff921fb 	.word	0x3ff921fb
   b5a2c:	2e000000 	.word	0x2e000000
   b5a30:	3ba3198a 	.word	0x3ba3198a
   b5a34:	252049c1 	.word	0x252049c1
   b5a38:	397b839a 	.word	0x397b839a
   b5a3c:	00000000 	.word	0x00000000

000b5a40 <__kernel_cos>:
   b5a40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5a44:	ec57 6b10 	vmov	r6, r7, d0
   b5a48:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   b5a4c:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   b5a50:	ed2d 8b04 	vpush	{d8-d9}
   b5a54:	ec5b ab11 	vmov	sl, fp, d1
   b5a58:	da71      	bge.n	b5b3e <__kernel_cos+0xfe>
   b5a5a:	ee10 0a10 	vmov	r0, s0
   b5a5e:	4639      	mov	r1, r7
   b5a60:	f001 fb8e 	bl	b7180 <__aeabi_d2iz>
   b5a64:	2800      	cmp	r0, #0
   b5a66:	f000 80f6 	beq.w	b5c56 <__kernel_cos+0x216>
   b5a6a:	4632      	mov	r2, r6
   b5a6c:	463b      	mov	r3, r7
   b5a6e:	4630      	mov	r0, r6
   b5a70:	4639      	mov	r1, r7
   b5a72:	f001 f8eb 	bl	b6c4c <__aeabi_dmul>
   b5a76:	a37c      	add	r3, pc, #496	; (adr r3, b5c68 <__kernel_cos+0x228>)
   b5a78:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5a7c:	4604      	mov	r4, r0
   b5a7e:	460d      	mov	r5, r1
   b5a80:	f001 f8e4 	bl	b6c4c <__aeabi_dmul>
   b5a84:	a37a      	add	r3, pc, #488	; (adr r3, b5c70 <__kernel_cos+0x230>)
   b5a86:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5a8a:	f000 ff29 	bl	b68e0 <__adddf3>
   b5a8e:	4622      	mov	r2, r4
   b5a90:	462b      	mov	r3, r5
   b5a92:	f001 f8db 	bl	b6c4c <__aeabi_dmul>
   b5a96:	a378      	add	r3, pc, #480	; (adr r3, b5c78 <__kernel_cos+0x238>)
   b5a98:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5a9c:	f000 ff1e 	bl	b68dc <__aeabi_dsub>
   b5aa0:	4622      	mov	r2, r4
   b5aa2:	462b      	mov	r3, r5
   b5aa4:	f001 f8d2 	bl	b6c4c <__aeabi_dmul>
   b5aa8:	a375      	add	r3, pc, #468	; (adr r3, b5c80 <__kernel_cos+0x240>)
   b5aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5aae:	f000 ff17 	bl	b68e0 <__adddf3>
   b5ab2:	4622      	mov	r2, r4
   b5ab4:	462b      	mov	r3, r5
   b5ab6:	f001 f8c9 	bl	b6c4c <__aeabi_dmul>
   b5aba:	a373      	add	r3, pc, #460	; (adr r3, b5c88 <__kernel_cos+0x248>)
   b5abc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5ac0:	f000 ff0c 	bl	b68dc <__aeabi_dsub>
   b5ac4:	4622      	mov	r2, r4
   b5ac6:	462b      	mov	r3, r5
   b5ac8:	f001 f8c0 	bl	b6c4c <__aeabi_dmul>
   b5acc:	a370      	add	r3, pc, #448	; (adr r3, b5c90 <__kernel_cos+0x250>)
   b5ace:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5ad2:	f000 ff05 	bl	b68e0 <__adddf3>
   b5ad6:	4622      	mov	r2, r4
   b5ad8:	462b      	mov	r3, r5
   b5ada:	f001 f8b7 	bl	b6c4c <__aeabi_dmul>
   b5ade:	ec41 0b18 	vmov	d8, r0, r1
   b5ae2:	4b71      	ldr	r3, [pc, #452]	; (b5ca8 <__kernel_cos+0x268>)
   b5ae4:	2200      	movs	r2, #0
   b5ae6:	4620      	mov	r0, r4
   b5ae8:	4629      	mov	r1, r5
   b5aea:	f001 f8af 	bl	b6c4c <__aeabi_dmul>
   b5aee:	ec53 2b18 	vmov	r2, r3, d8
   b5af2:	4680      	mov	r8, r0
   b5af4:	4689      	mov	r9, r1
   b5af6:	4620      	mov	r0, r4
   b5af8:	4629      	mov	r1, r5
   b5afa:	f001 f8a7 	bl	b6c4c <__aeabi_dmul>
   b5afe:	4652      	mov	r2, sl
   b5b00:	465b      	mov	r3, fp
   b5b02:	4604      	mov	r4, r0
   b5b04:	460d      	mov	r5, r1
   b5b06:	4630      	mov	r0, r6
   b5b08:	4639      	mov	r1, r7
   b5b0a:	f001 f89f 	bl	b6c4c <__aeabi_dmul>
   b5b0e:	4602      	mov	r2, r0
   b5b10:	460b      	mov	r3, r1
   b5b12:	4620      	mov	r0, r4
   b5b14:	4629      	mov	r1, r5
   b5b16:	f000 fee1 	bl	b68dc <__aeabi_dsub>
   b5b1a:	4602      	mov	r2, r0
   b5b1c:	460b      	mov	r3, r1
   b5b1e:	4640      	mov	r0, r8
   b5b20:	4649      	mov	r1, r9
   b5b22:	f000 fedb 	bl	b68dc <__aeabi_dsub>
   b5b26:	4602      	mov	r2, r0
   b5b28:	460b      	mov	r3, r1
   b5b2a:	2000      	movs	r0, #0
   b5b2c:	495f      	ldr	r1, [pc, #380]	; (b5cac <__kernel_cos+0x26c>)
   b5b2e:	f000 fed5 	bl	b68dc <__aeabi_dsub>
   b5b32:	ecbd 8b04 	vpop	{d8-d9}
   b5b36:	ec41 0b10 	vmov	d0, r0, r1
   b5b3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5b3e:	ee10 2a10 	vmov	r2, s0
   b5b42:	ee10 0a10 	vmov	r0, s0
   b5b46:	463b      	mov	r3, r7
   b5b48:	4639      	mov	r1, r7
   b5b4a:	f001 f87f 	bl	b6c4c <__aeabi_dmul>
   b5b4e:	a346      	add	r3, pc, #280	; (adr r3, b5c68 <__kernel_cos+0x228>)
   b5b50:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5b54:	4604      	mov	r4, r0
   b5b56:	460d      	mov	r5, r1
   b5b58:	f001 f878 	bl	b6c4c <__aeabi_dmul>
   b5b5c:	a344      	add	r3, pc, #272	; (adr r3, b5c70 <__kernel_cos+0x230>)
   b5b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5b62:	f000 febd 	bl	b68e0 <__adddf3>
   b5b66:	4622      	mov	r2, r4
   b5b68:	462b      	mov	r3, r5
   b5b6a:	f001 f86f 	bl	b6c4c <__aeabi_dmul>
   b5b6e:	a342      	add	r3, pc, #264	; (adr r3, b5c78 <__kernel_cos+0x238>)
   b5b70:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5b74:	f000 feb2 	bl	b68dc <__aeabi_dsub>
   b5b78:	4622      	mov	r2, r4
   b5b7a:	462b      	mov	r3, r5
   b5b7c:	f001 f866 	bl	b6c4c <__aeabi_dmul>
   b5b80:	a33f      	add	r3, pc, #252	; (adr r3, b5c80 <__kernel_cos+0x240>)
   b5b82:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5b86:	f000 feab 	bl	b68e0 <__adddf3>
   b5b8a:	4622      	mov	r2, r4
   b5b8c:	462b      	mov	r3, r5
   b5b8e:	f001 f85d 	bl	b6c4c <__aeabi_dmul>
   b5b92:	a33d      	add	r3, pc, #244	; (adr r3, b5c88 <__kernel_cos+0x248>)
   b5b94:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5b98:	f000 fea0 	bl	b68dc <__aeabi_dsub>
   b5b9c:	4622      	mov	r2, r4
   b5b9e:	462b      	mov	r3, r5
   b5ba0:	f001 f854 	bl	b6c4c <__aeabi_dmul>
   b5ba4:	a33a      	add	r3, pc, #232	; (adr r3, b5c90 <__kernel_cos+0x250>)
   b5ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5baa:	f000 fe99 	bl	b68e0 <__adddf3>
   b5bae:	462b      	mov	r3, r5
   b5bb0:	4622      	mov	r2, r4
   b5bb2:	f001 f84b 	bl	b6c4c <__aeabi_dmul>
   b5bb6:	4b3e      	ldr	r3, [pc, #248]	; (b5cb0 <__kernel_cos+0x270>)
   b5bb8:	4599      	cmp	r9, r3
   b5bba:	ec41 0b18 	vmov	d8, r0, r1
   b5bbe:	dd90      	ble.n	b5ae2 <__kernel_cos+0xa2>
   b5bc0:	4b3c      	ldr	r3, [pc, #240]	; (b5cb4 <__kernel_cos+0x274>)
   b5bc2:	4599      	cmp	r9, r3
   b5bc4:	dc3c      	bgt.n	b5c40 <__kernel_cos+0x200>
   b5bc6:	2200      	movs	r2, #0
   b5bc8:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   b5bcc:	4937      	ldr	r1, [pc, #220]	; (b5cac <__kernel_cos+0x26c>)
   b5bce:	2000      	movs	r0, #0
   b5bd0:	4690      	mov	r8, r2
   b5bd2:	4699      	mov	r9, r3
   b5bd4:	f000 fe82 	bl	b68dc <__aeabi_dsub>
   b5bd8:	ec41 0b19 	vmov	d9, r0, r1
   b5bdc:	4b32      	ldr	r3, [pc, #200]	; (b5ca8 <__kernel_cos+0x268>)
   b5bde:	2200      	movs	r2, #0
   b5be0:	4620      	mov	r0, r4
   b5be2:	4629      	mov	r1, r5
   b5be4:	f001 f832 	bl	b6c4c <__aeabi_dmul>
   b5be8:	4642      	mov	r2, r8
   b5bea:	464b      	mov	r3, r9
   b5bec:	f000 fe76 	bl	b68dc <__aeabi_dsub>
   b5bf0:	ec53 2b18 	vmov	r2, r3, d8
   b5bf4:	4680      	mov	r8, r0
   b5bf6:	4689      	mov	r9, r1
   b5bf8:	4620      	mov	r0, r4
   b5bfa:	4629      	mov	r1, r5
   b5bfc:	f001 f826 	bl	b6c4c <__aeabi_dmul>
   b5c00:	4652      	mov	r2, sl
   b5c02:	465b      	mov	r3, fp
   b5c04:	4604      	mov	r4, r0
   b5c06:	460d      	mov	r5, r1
   b5c08:	4630      	mov	r0, r6
   b5c0a:	4639      	mov	r1, r7
   b5c0c:	f001 f81e 	bl	b6c4c <__aeabi_dmul>
   b5c10:	4602      	mov	r2, r0
   b5c12:	460b      	mov	r3, r1
   b5c14:	4620      	mov	r0, r4
   b5c16:	4629      	mov	r1, r5
   b5c18:	f000 fe60 	bl	b68dc <__aeabi_dsub>
   b5c1c:	4602      	mov	r2, r0
   b5c1e:	460b      	mov	r3, r1
   b5c20:	4640      	mov	r0, r8
   b5c22:	4649      	mov	r1, r9
   b5c24:	f000 fe5a 	bl	b68dc <__aeabi_dsub>
   b5c28:	4602      	mov	r2, r0
   b5c2a:	460b      	mov	r3, r1
   b5c2c:	ec51 0b19 	vmov	r0, r1, d9
   b5c30:	f000 fe54 	bl	b68dc <__aeabi_dsub>
   b5c34:	ecbd 8b04 	vpop	{d8-d9}
   b5c38:	ec41 0b10 	vmov	d0, r0, r1
   b5c3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5c40:	ed9f 7b15 	vldr	d7, [pc, #84]	; b5c98 <__kernel_cos+0x258>
   b5c44:	f8df 9070 	ldr.w	r9, [pc, #112]	; b5cb8 <__kernel_cos+0x278>
   b5c48:	eeb0 9a47 	vmov.f32	s18, s14
   b5c4c:	eef0 9a67 	vmov.f32	s19, s15
   b5c50:	f04f 0800 	mov.w	r8, #0
   b5c54:	e7c2      	b.n	b5bdc <__kernel_cos+0x19c>
   b5c56:	ecbd 8b04 	vpop	{d8-d9}
   b5c5a:	ed9f 0b11 	vldr	d0, [pc, #68]	; b5ca0 <__kernel_cos+0x260>
   b5c5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5c62:	bf00      	nop
   b5c64:	f3af 8000 	nop.w
   b5c68:	be8838d4 	.word	0xbe8838d4
   b5c6c:	bda8fae9 	.word	0xbda8fae9
   b5c70:	bdb4b1c4 	.word	0xbdb4b1c4
   b5c74:	3e21ee9e 	.word	0x3e21ee9e
   b5c78:	809c52ad 	.word	0x809c52ad
   b5c7c:	3e927e4f 	.word	0x3e927e4f
   b5c80:	19cb1590 	.word	0x19cb1590
   b5c84:	3efa01a0 	.word	0x3efa01a0
   b5c88:	16c15177 	.word	0x16c15177
   b5c8c:	3f56c16c 	.word	0x3f56c16c
   b5c90:	5555554c 	.word	0x5555554c
   b5c94:	3fa55555 	.word	0x3fa55555
   b5c98:	00000000 	.word	0x00000000
   b5c9c:	3fe70000 	.word	0x3fe70000
   b5ca0:	00000000 	.word	0x00000000
   b5ca4:	3ff00000 	.word	0x3ff00000
   b5ca8:	3fe00000 	.word	0x3fe00000
   b5cac:	3ff00000 	.word	0x3ff00000
   b5cb0:	3fd33332 	.word	0x3fd33332
   b5cb4:	3fe90000 	.word	0x3fe90000
   b5cb8:	3fd20000 	.word	0x3fd20000
   b5cbc:	00000000 	.word	0x00000000

000b5cc0 <__kernel_rem_pio2>:
   b5cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5cc4:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
   b5cc8:	461c      	mov	r4, r3
   b5cca:	9308      	str	r3, [sp, #32]
   b5ccc:	910b      	str	r1, [sp, #44]	; 0x2c
   b5cce:	4bbb      	ldr	r3, [pc, #748]	; (b5fbc <__kernel_rem_pio2+0x2fc>)
   b5cd0:	99a2      	ldr	r1, [sp, #648]	; 0x288
   b5cd2:	9004      	str	r0, [sp, #16]
   b5cd4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
   b5cd8:	9105      	str	r1, [sp, #20]
   b5cda:	1e63      	subs	r3, r4, #1
   b5cdc:	f112 0f14 	cmn.w	r2, #20
   b5ce0:	9303      	str	r3, [sp, #12]
   b5ce2:	f2c0 834b 	blt.w	b637c <__kernel_rem_pio2+0x6bc>
   b5ce6:	49b6      	ldr	r1, [pc, #728]	; (b5fc0 <__kernel_rem_pio2+0x300>)
   b5ce8:	1ed3      	subs	r3, r2, #3
   b5cea:	fb81 0103 	smull	r0, r1, r1, r3
   b5cee:	17db      	asrs	r3, r3, #31
   b5cf0:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   b5cf4:	9307      	str	r3, [sp, #28]
   b5cf6:	3301      	adds	r3, #1
   b5cf8:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   b5cfc:	00db      	lsls	r3, r3, #3
   b5cfe:	18d3      	adds	r3, r2, r3
   b5d00:	9306      	str	r3, [sp, #24]
   b5d02:	9a07      	ldr	r2, [sp, #28]
   b5d04:	9b03      	ldr	r3, [sp, #12]
   b5d06:	1ad4      	subs	r4, r2, r3
   b5d08:	9a05      	ldr	r2, [sp, #20]
   b5d0a:	18d6      	adds	r6, r2, r3
   b5d0c:	d41a      	bmi.n	b5d44 <__kernel_rem_pio2+0x84>
   b5d0e:	3601      	adds	r6, #1
   b5d10:	9fa3      	ldr	r7, [sp, #652]	; 0x28c
   b5d12:	4426      	add	r6, r4
   b5d14:	ad20      	add	r5, sp, #128	; 0x80
   b5d16:	f04f 0800 	mov.w	r8, #0
   b5d1a:	f04f 0900 	mov.w	r9, #0
   b5d1e:	e008      	b.n	b5d32 <__kernel_rem_pio2+0x72>
   b5d20:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   b5d24:	f000 ff28 	bl	b6b78 <__aeabi_i2d>
   b5d28:	3401      	adds	r4, #1
   b5d2a:	42b4      	cmp	r4, r6
   b5d2c:	e8e5 0102 	strd	r0, r1, [r5], #8
   b5d30:	d008      	beq.n	b5d44 <__kernel_rem_pio2+0x84>
   b5d32:	2c00      	cmp	r4, #0
   b5d34:	daf4      	bge.n	b5d20 <__kernel_rem_pio2+0x60>
   b5d36:	3401      	adds	r4, #1
   b5d38:	4640      	mov	r0, r8
   b5d3a:	4649      	mov	r1, r9
   b5d3c:	42b4      	cmp	r4, r6
   b5d3e:	e8e5 0102 	strd	r0, r1, [r5], #8
   b5d42:	d1f6      	bne.n	b5d32 <__kernel_rem_pio2+0x72>
   b5d44:	9b05      	ldr	r3, [sp, #20]
   b5d46:	2b00      	cmp	r3, #0
   b5d48:	f2c0 83c8 	blt.w	b64dc <__kernel_rem_pio2+0x81c>
   b5d4c:	9b08      	ldr	r3, [sp, #32]
   b5d4e:	f8dd 900c 	ldr.w	r9, [sp, #12]
   b5d52:	00da      	lsls	r2, r3, #3
   b5d54:	9202      	str	r2, [sp, #8]
   b5d56:	9a05      	ldr	r2, [sp, #20]
   b5d58:	441a      	add	r2, r3
   b5d5a:	9201      	str	r2, [sp, #4]
   b5d5c:	9a04      	ldr	r2, [sp, #16]
   b5d5e:	a920      	add	r1, sp, #128	; 0x80
   b5d60:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
   b5d64:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
   b5d68:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
   b5d6c:	9b03      	ldr	r3, [sp, #12]
   b5d6e:	2b00      	cmp	r3, #0
   b5d70:	f2c0 81a9 	blt.w	b60c6 <__kernel_rem_pio2+0x406>
   b5d74:	9e04      	ldr	r6, [sp, #16]
   b5d76:	4657      	mov	r7, sl
   b5d78:	2400      	movs	r4, #0
   b5d7a:	2500      	movs	r5, #0
   b5d7c:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
   b5d80:	e8f6 0102 	ldrd	r0, r1, [r6], #8
   b5d84:	f000 ff62 	bl	b6c4c <__aeabi_dmul>
   b5d88:	4602      	mov	r2, r0
   b5d8a:	460b      	mov	r3, r1
   b5d8c:	4620      	mov	r0, r4
   b5d8e:	4629      	mov	r1, r5
   b5d90:	f000 fda6 	bl	b68e0 <__adddf3>
   b5d94:	4546      	cmp	r6, r8
   b5d96:	4604      	mov	r4, r0
   b5d98:	460d      	mov	r5, r1
   b5d9a:	d1ef      	bne.n	b5d7c <__kernel_rem_pio2+0xbc>
   b5d9c:	9b01      	ldr	r3, [sp, #4]
   b5d9e:	f109 0901 	add.w	r9, r9, #1
   b5da2:	4599      	cmp	r9, r3
   b5da4:	e8eb 4502 	strd	r4, r5, [fp], #8
   b5da8:	f10a 0a08 	add.w	sl, sl, #8
   b5dac:	d1de      	bne.n	b5d6c <__kernel_rem_pio2+0xac>
   b5dae:	9a04      	ldr	r2, [sp, #16]
   b5db0:	9b02      	ldr	r3, [sp, #8]
   b5db2:	4413      	add	r3, r2
   b5db4:	469b      	mov	fp, r3
   b5db6:	9b05      	ldr	r3, [sp, #20]
   b5db8:	a90b      	add	r1, sp, #44	; 0x2c
   b5dba:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   b5dbe:	a90c      	add	r1, sp, #48	; 0x30
   b5dc0:	920a      	str	r2, [sp, #40]	; 0x28
   b5dc2:	461a      	mov	r2, r3
   b5dc4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   b5dc8:	3b08      	subs	r3, #8
   b5dca:	9309      	str	r3, [sp, #36]	; 0x24
   b5dcc:	9201      	str	r2, [sp, #4]
   b5dce:	9a01      	ldr	r2, [sp, #4]
   b5dd0:	a998      	add	r1, sp, #608	; 0x260
   b5dd2:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   b5dd6:	2a00      	cmp	r2, #0
   b5dd8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   b5ddc:	dd29      	ble.n	b5e32 <__kernel_rem_pio2+0x172>
   b5dde:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
   b5de2:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   b5de6:	f10d 0930 	add.w	r9, sp, #48	; 0x30
   b5dea:	4b76      	ldr	r3, [pc, #472]	; (b5fc4 <__kernel_rem_pio2+0x304>)
   b5dec:	2200      	movs	r2, #0
   b5dee:	4620      	mov	r0, r4
   b5df0:	4629      	mov	r1, r5
   b5df2:	f000 ff2b 	bl	b6c4c <__aeabi_dmul>
   b5df6:	f001 f9c3 	bl	b7180 <__aeabi_d2iz>
   b5dfa:	f000 febd 	bl	b6b78 <__aeabi_i2d>
   b5dfe:	4b72      	ldr	r3, [pc, #456]	; (b5fc8 <__kernel_rem_pio2+0x308>)
   b5e00:	2200      	movs	r2, #0
   b5e02:	4606      	mov	r6, r0
   b5e04:	460f      	mov	r7, r1
   b5e06:	f000 ff21 	bl	b6c4c <__aeabi_dmul>
   b5e0a:	4602      	mov	r2, r0
   b5e0c:	460b      	mov	r3, r1
   b5e0e:	4620      	mov	r0, r4
   b5e10:	4629      	mov	r1, r5
   b5e12:	f000 fd63 	bl	b68dc <__aeabi_dsub>
   b5e16:	f001 f9b3 	bl	b7180 <__aeabi_d2iz>
   b5e1a:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   b5e1e:	f849 0b04 	str.w	r0, [r9], #4
   b5e22:	4639      	mov	r1, r7
   b5e24:	4630      	mov	r0, r6
   b5e26:	f000 fd5b 	bl	b68e0 <__adddf3>
   b5e2a:	45d0      	cmp	r8, sl
   b5e2c:	4604      	mov	r4, r0
   b5e2e:	460d      	mov	r5, r1
   b5e30:	d1db      	bne.n	b5dea <__kernel_rem_pio2+0x12a>
   b5e32:	f8dd 9018 	ldr.w	r9, [sp, #24]
   b5e36:	ec45 4b10 	vmov	d0, r4, r5
   b5e3a:	4648      	mov	r0, r9
   b5e3c:	f000 fcb8 	bl	b67b0 <scalbn>
   b5e40:	ec55 4b10 	vmov	r4, r5, d0
   b5e44:	2200      	movs	r2, #0
   b5e46:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   b5e4a:	ee10 0a10 	vmov	r0, s0
   b5e4e:	4629      	mov	r1, r5
   b5e50:	f000 fefc 	bl	b6c4c <__aeabi_dmul>
   b5e54:	ec41 0b10 	vmov	d0, r0, r1
   b5e58:	f000 fc26 	bl	b66a8 <floor>
   b5e5c:	4b5b      	ldr	r3, [pc, #364]	; (b5fcc <__kernel_rem_pio2+0x30c>)
   b5e5e:	ec51 0b10 	vmov	r0, r1, d0
   b5e62:	2200      	movs	r2, #0
   b5e64:	f000 fef2 	bl	b6c4c <__aeabi_dmul>
   b5e68:	4602      	mov	r2, r0
   b5e6a:	460b      	mov	r3, r1
   b5e6c:	4620      	mov	r0, r4
   b5e6e:	4629      	mov	r1, r5
   b5e70:	f000 fd34 	bl	b68dc <__aeabi_dsub>
   b5e74:	460d      	mov	r5, r1
   b5e76:	4604      	mov	r4, r0
   b5e78:	f001 f982 	bl	b7180 <__aeabi_d2iz>
   b5e7c:	4680      	mov	r8, r0
   b5e7e:	f000 fe7b 	bl	b6b78 <__aeabi_i2d>
   b5e82:	460b      	mov	r3, r1
   b5e84:	4602      	mov	r2, r0
   b5e86:	4629      	mov	r1, r5
   b5e88:	4620      	mov	r0, r4
   b5e8a:	f000 fd27 	bl	b68dc <__aeabi_dsub>
   b5e8e:	464b      	mov	r3, r9
   b5e90:	2b00      	cmp	r3, #0
   b5e92:	4606      	mov	r6, r0
   b5e94:	460f      	mov	r7, r1
   b5e96:	f340 809b 	ble.w	b5fd0 <__kernel_rem_pio2+0x310>
   b5e9a:	9a01      	ldr	r2, [sp, #4]
   b5e9c:	1e51      	subs	r1, r2, #1
   b5e9e:	aa0c      	add	r2, sp, #48	; 0x30
   b5ea0:	f1c9 0318 	rsb	r3, r9, #24
   b5ea4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   b5ea8:	fa42 f003 	asr.w	r0, r2, r3
   b5eac:	fa00 f303 	lsl.w	r3, r0, r3
   b5eb0:	1ad3      	subs	r3, r2, r3
   b5eb2:	f1c9 0517 	rsb	r5, r9, #23
   b5eb6:	aa0c      	add	r2, sp, #48	; 0x30
   b5eb8:	fa43 f505 	asr.w	r5, r3, r5
   b5ebc:	2d00      	cmp	r5, #0
   b5ebe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   b5ec2:	4480      	add	r8, r0
   b5ec4:	f300 808e 	bgt.w	b5fe4 <__kernel_rem_pio2+0x324>
   b5ec8:	2200      	movs	r2, #0
   b5eca:	2300      	movs	r3, #0
   b5ecc:	4630      	mov	r0, r6
   b5ece:	4639      	mov	r1, r7
   b5ed0:	f001 f924 	bl	b711c <__aeabi_dcmpeq>
   b5ed4:	2800      	cmp	r0, #0
   b5ed6:	f000 8258 	beq.w	b638a <__kernel_rem_pio2+0x6ca>
   b5eda:	9b01      	ldr	r3, [sp, #4]
   b5edc:	9a05      	ldr	r2, [sp, #20]
   b5ede:	f103 3aff 	add.w	sl, r3, #4294967295
   b5ee2:	4552      	cmp	r2, sl
   b5ee4:	dc10      	bgt.n	b5f08 <__kernel_rem_pio2+0x248>
   b5ee6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   b5eea:	aa0c      	add	r2, sp, #48	; 0x30
   b5eec:	3b01      	subs	r3, #1
   b5eee:	980a      	ldr	r0, [sp, #40]	; 0x28
   b5ef0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b5ef4:	2200      	movs	r2, #0
   b5ef6:	f853 1904 	ldr.w	r1, [r3], #-4
   b5efa:	4283      	cmp	r3, r0
   b5efc:	ea42 0201 	orr.w	r2, r2, r1
   b5f00:	d1f9      	bne.n	b5ef6 <__kernel_rem_pio2+0x236>
   b5f02:	2a00      	cmp	r2, #0
   b5f04:	f040 80e2 	bne.w	b60cc <__kernel_rem_pio2+0x40c>
   b5f08:	9b05      	ldr	r3, [sp, #20]
   b5f0a:	aa0c      	add	r2, sp, #48	; 0x30
   b5f0c:	3b01      	subs	r3, #1
   b5f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   b5f12:	2b00      	cmp	r3, #0
   b5f14:	f040 80d2 	bne.w	b60bc <__kernel_rem_pio2+0x3fc>
   b5f18:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b5f1a:	2301      	movs	r3, #1
   b5f1c:	f852 1904 	ldr.w	r1, [r2], #-4
   b5f20:	3301      	adds	r3, #1
   b5f22:	2900      	cmp	r1, #0
   b5f24:	d0fa      	beq.n	b5f1c <__kernel_rem_pio2+0x25c>
   b5f26:	9a01      	ldr	r2, [sp, #4]
   b5f28:	18d3      	adds	r3, r2, r3
   b5f2a:	9302      	str	r3, [sp, #8]
   b5f2c:	1c53      	adds	r3, r2, #1
   b5f2e:	4699      	mov	r9, r3
   b5f30:	9a01      	ldr	r2, [sp, #4]
   b5f32:	9908      	ldr	r1, [sp, #32]
   b5f34:	440a      	add	r2, r1
   b5f36:	4690      	mov	r8, r2
   b5f38:	9a07      	ldr	r2, [sp, #28]
   b5f3a:	eb02 0a03 	add.w	sl, r2, r3
   b5f3e:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
   b5f42:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
   b5f44:	f10a 3aff 	add.w	sl, sl, #4294967295
   b5f48:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
   b5f4c:	aa20      	add	r2, sp, #128	; 0x80
   b5f4e:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   b5f52:	aa70      	add	r2, sp, #448	; 0x1c0
   b5f54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   b5f58:	9301      	str	r3, [sp, #4]
   b5f5a:	f85a 0f04 	ldr.w	r0, [sl, #4]!
   b5f5e:	f000 fe0b 	bl	b6b78 <__aeabi_i2d>
   b5f62:	460b      	mov	r3, r1
   b5f64:	9903      	ldr	r1, [sp, #12]
   b5f66:	4602      	mov	r2, r0
   b5f68:	2900      	cmp	r1, #0
   b5f6a:	e9c8 2300 	strd	r2, r3, [r8]
   b5f6e:	4647      	mov	r7, r8
   b5f70:	f108 0808 	add.w	r8, r8, #8
   b5f74:	db1e      	blt.n	b5fb4 <__kernel_rem_pio2+0x2f4>
   b5f76:	9e04      	ldr	r6, [sp, #16]
   b5f78:	2400      	movs	r4, #0
   b5f7a:	2500      	movs	r5, #0
   b5f7c:	e001      	b.n	b5f82 <__kernel_rem_pio2+0x2c2>
   b5f7e:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
   b5f82:	e8f6 0102 	ldrd	r0, r1, [r6], #8
   b5f86:	f000 fe61 	bl	b6c4c <__aeabi_dmul>
   b5f8a:	4602      	mov	r2, r0
   b5f8c:	460b      	mov	r3, r1
   b5f8e:	4620      	mov	r0, r4
   b5f90:	4629      	mov	r1, r5
   b5f92:	f000 fca5 	bl	b68e0 <__adddf3>
   b5f96:	455e      	cmp	r6, fp
   b5f98:	4604      	mov	r4, r0
   b5f9a:	460d      	mov	r5, r1
   b5f9c:	d1ef      	bne.n	b5f7e <__kernel_rem_pio2+0x2be>
   b5f9e:	9b01      	ldr	r3, [sp, #4]
   b5fa0:	e8e3 4502 	strd	r4, r5, [r3], #8
   b5fa4:	9301      	str	r3, [sp, #4]
   b5fa6:	9b02      	ldr	r3, [sp, #8]
   b5fa8:	f109 0901 	add.w	r9, r9, #1
   b5fac:	4599      	cmp	r9, r3
   b5fae:	ddd4      	ble.n	b5f5a <__kernel_rem_pio2+0x29a>
   b5fb0:	9301      	str	r3, [sp, #4]
   b5fb2:	e70c      	b.n	b5dce <__kernel_rem_pio2+0x10e>
   b5fb4:	2400      	movs	r4, #0
   b5fb6:	2500      	movs	r5, #0
   b5fb8:	e7f1      	b.n	b5f9e <__kernel_rem_pio2+0x2de>
   b5fba:	bf00      	nop
   b5fbc:	000b7758 	.word	0x000b7758
   b5fc0:	2aaaaaab 	.word	0x2aaaaaab
   b5fc4:	3e700000 	.word	0x3e700000
   b5fc8:	41700000 	.word	0x41700000
   b5fcc:	40200000 	.word	0x40200000
   b5fd0:	d16b      	bne.n	b60aa <__kernel_rem_pio2+0x3ea>
   b5fd2:	9b01      	ldr	r3, [sp, #4]
   b5fd4:	aa0c      	add	r2, sp, #48	; 0x30
   b5fd6:	3b01      	subs	r3, #1
   b5fd8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   b5fdc:	15ed      	asrs	r5, r5, #23
   b5fde:	2d00      	cmp	r5, #0
   b5fe0:	f77f af72 	ble.w	b5ec8 <__kernel_rem_pio2+0x208>
   b5fe4:	9b01      	ldr	r3, [sp, #4]
   b5fe6:	2b00      	cmp	r3, #0
   b5fe8:	f108 0801 	add.w	r8, r8, #1
   b5fec:	f340 81cb 	ble.w	b6386 <__kernel_rem_pio2+0x6c6>
   b5ff0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b5ff2:	2c00      	cmp	r4, #0
   b5ff4:	d151      	bne.n	b609a <__kernel_rem_pio2+0x3da>
   b5ff6:	9b01      	ldr	r3, [sp, #4]
   b5ff8:	2b01      	cmp	r3, #1
   b5ffa:	d020      	beq.n	b603e <__kernel_rem_pio2+0x37e>
   b5ffc:	ab0c      	add	r3, sp, #48	; 0x30
   b5ffe:	2201      	movs	r2, #1
   b6000:	f853 4f04 	ldr.w	r4, [r3, #4]!
   b6004:	2c00      	cmp	r4, #0
   b6006:	d04b      	beq.n	b60a0 <__kernel_rem_pio2+0x3e0>
   b6008:	1c53      	adds	r3, r2, #1
   b600a:	a90c      	add	r1, sp, #48	; 0x30
   b600c:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
   b6010:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
   b6014:	9901      	ldr	r1, [sp, #4]
   b6016:	4299      	cmp	r1, r3
   b6018:	dd10      	ble.n	b603c <__kernel_rem_pio2+0x37c>
   b601a:	aa0c      	add	r2, sp, #48	; 0x30
   b601c:	a80c      	add	r0, sp, #48	; 0x30
   b601e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   b6022:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   b6026:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   b602a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   b602e:	e000      	b.n	b6032 <__kernel_rem_pio2+0x372>
   b6030:	681a      	ldr	r2, [r3, #0]
   b6032:	1a8a      	subs	r2, r1, r2
   b6034:	f843 2b04 	str.w	r2, [r3], #4
   b6038:	4283      	cmp	r3, r0
   b603a:	d1f9      	bne.n	b6030 <__kernel_rem_pio2+0x370>
   b603c:	2401      	movs	r4, #1
   b603e:	9b06      	ldr	r3, [sp, #24]
   b6040:	2b00      	cmp	r3, #0
   b6042:	dd0e      	ble.n	b6062 <__kernel_rem_pio2+0x3a2>
   b6044:	2b01      	cmp	r3, #1
   b6046:	f000 816c 	beq.w	b6322 <__kernel_rem_pio2+0x662>
   b604a:	2b02      	cmp	r3, #2
   b604c:	d109      	bne.n	b6062 <__kernel_rem_pio2+0x3a2>
   b604e:	9b01      	ldr	r3, [sp, #4]
   b6050:	1e5a      	subs	r2, r3, #1
   b6052:	ab0c      	add	r3, sp, #48	; 0x30
   b6054:	a90c      	add	r1, sp, #48	; 0x30
   b6056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   b605a:	f3c3 0315 	ubfx	r3, r3, #0, #22
   b605e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   b6062:	2d02      	cmp	r5, #2
   b6064:	f47f af30 	bne.w	b5ec8 <__kernel_rem_pio2+0x208>
   b6068:	4632      	mov	r2, r6
   b606a:	463b      	mov	r3, r7
   b606c:	49b6      	ldr	r1, [pc, #728]	; (b6348 <__kernel_rem_pio2+0x688>)
   b606e:	2000      	movs	r0, #0
   b6070:	f000 fc34 	bl	b68dc <__aeabi_dsub>
   b6074:	4606      	mov	r6, r0
   b6076:	460f      	mov	r7, r1
   b6078:	2c00      	cmp	r4, #0
   b607a:	f43f af25 	beq.w	b5ec8 <__kernel_rem_pio2+0x208>
   b607e:	9806      	ldr	r0, [sp, #24]
   b6080:	ed9f 0bad 	vldr	d0, [pc, #692]	; b6338 <__kernel_rem_pio2+0x678>
   b6084:	f000 fb94 	bl	b67b0 <scalbn>
   b6088:	4630      	mov	r0, r6
   b608a:	4639      	mov	r1, r7
   b608c:	ec53 2b10 	vmov	r2, r3, d0
   b6090:	f000 fc24 	bl	b68dc <__aeabi_dsub>
   b6094:	4606      	mov	r6, r0
   b6096:	460f      	mov	r7, r1
   b6098:	e716      	b.n	b5ec8 <__kernel_rem_pio2+0x208>
   b609a:	2301      	movs	r3, #1
   b609c:	2200      	movs	r2, #0
   b609e:	e7b4      	b.n	b600a <__kernel_rem_pio2+0x34a>
   b60a0:	9901      	ldr	r1, [sp, #4]
   b60a2:	3201      	adds	r2, #1
   b60a4:	428a      	cmp	r2, r1
   b60a6:	d1ab      	bne.n	b6000 <__kernel_rem_pio2+0x340>
   b60a8:	e7c9      	b.n	b603e <__kernel_rem_pio2+0x37e>
   b60aa:	4ba8      	ldr	r3, [pc, #672]	; (b634c <__kernel_rem_pio2+0x68c>)
   b60ac:	2200      	movs	r2, #0
   b60ae:	f001 f853 	bl	b7158 <__aeabi_dcmpge>
   b60b2:	2800      	cmp	r0, #0
   b60b4:	f040 8150 	bne.w	b6358 <__kernel_rem_pio2+0x698>
   b60b8:	4605      	mov	r5, r0
   b60ba:	e705      	b.n	b5ec8 <__kernel_rem_pio2+0x208>
   b60bc:	9b01      	ldr	r3, [sp, #4]
   b60be:	3301      	adds	r3, #1
   b60c0:	4699      	mov	r9, r3
   b60c2:	9302      	str	r3, [sp, #8]
   b60c4:	e734      	b.n	b5f30 <__kernel_rem_pio2+0x270>
   b60c6:	2400      	movs	r4, #0
   b60c8:	2500      	movs	r5, #0
   b60ca:	e667      	b.n	b5d9c <__kernel_rem_pio2+0xdc>
   b60cc:	9b06      	ldr	r3, [sp, #24]
   b60ce:	9503      	str	r5, [sp, #12]
   b60d0:	f1a3 0218 	sub.w	r2, r3, #24
   b60d4:	ab0c      	add	r3, sp, #48	; 0x30
   b60d6:	f8cd 801c 	str.w	r8, [sp, #28]
   b60da:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
   b60de:	9206      	str	r2, [sp, #24]
   b60e0:	b973      	cbnz	r3, b6100 <__kernel_rem_pio2+0x440>
   b60e2:	9b01      	ldr	r3, [sp, #4]
   b60e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   b60e8:	3b02      	subs	r3, #2
   b60ea:	a90c      	add	r1, sp, #48	; 0x30
   b60ec:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   b60f0:	f853 1904 	ldr.w	r1, [r3], #-4
   b60f4:	f10a 3aff 	add.w	sl, sl, #4294967295
   b60f8:	3a18      	subs	r2, #24
   b60fa:	2900      	cmp	r1, #0
   b60fc:	d0f8      	beq.n	b60f0 <__kernel_rem_pio2+0x430>
   b60fe:	9206      	str	r2, [sp, #24]
   b6100:	ed9f 0b8d 	vldr	d0, [pc, #564]	; b6338 <__kernel_rem_pio2+0x678>
   b6104:	9806      	ldr	r0, [sp, #24]
   b6106:	f000 fb53 	bl	b67b0 <scalbn>
   b610a:	f1ba 0f00 	cmp.w	sl, #0
   b610e:	ec55 4b10 	vmov	r4, r5, d0
   b6112:	f2c0 81d9 	blt.w	b64c8 <__kernel_rem_pio2+0x808>
   b6116:	ab70      	add	r3, sp, #448	; 0x1c0
   b6118:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
   b611c:	aa0c      	add	r2, sp, #48	; 0x30
   b611e:	f10a 0301 	add.w	r3, sl, #1
   b6122:	9306      	str	r3, [sp, #24]
   b6124:	eb02 0683 	add.w	r6, r2, r3, lsl #2
   b6128:	f8df 9224 	ldr.w	r9, [pc, #548]	; b6350 <__kernel_rem_pio2+0x690>
   b612c:	ea4f 03ca 	mov.w	r3, sl, lsl #3
   b6130:	9304      	str	r3, [sp, #16]
   b6132:	f10b 0708 	add.w	r7, fp, #8
   b6136:	f04f 0800 	mov.w	r8, #0
   b613a:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   b613e:	f000 fd1b 	bl	b6b78 <__aeabi_i2d>
   b6142:	4622      	mov	r2, r4
   b6144:	462b      	mov	r3, r5
   b6146:	f000 fd81 	bl	b6c4c <__aeabi_dmul>
   b614a:	464b      	mov	r3, r9
   b614c:	e967 0102 	strd	r0, r1, [r7, #-8]!
   b6150:	4642      	mov	r2, r8
   b6152:	4620      	mov	r0, r4
   b6154:	4629      	mov	r1, r5
   b6156:	f000 fd79 	bl	b6c4c <__aeabi_dmul>
   b615a:	ab0c      	add	r3, sp, #48	; 0x30
   b615c:	429e      	cmp	r6, r3
   b615e:	4604      	mov	r4, r0
   b6160:	460d      	mov	r5, r1
   b6162:	d1ea      	bne.n	b613a <__kernel_rem_pio2+0x47a>
   b6164:	ab48      	add	r3, sp, #288	; 0x120
   b6166:	e9cd 3a01 	strd	r3, sl, [sp, #4]
   b616a:	f8dd a014 	ldr.w	sl, [sp, #20]
   b616e:	f1ba 0f00 	cmp.w	sl, #0
   b6172:	f04f 0900 	mov.w	r9, #0
   b6176:	db2c      	blt.n	b61d2 <__kernel_rem_pio2+0x512>
   b6178:	a371      	add	r3, pc, #452	; (adr r3, b6340 <__kernel_rem_pio2+0x680>)
   b617a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b617e:	f8df 81d4 	ldr.w	r8, [pc, #468]	; b6354 <__kernel_rem_pio2+0x694>
   b6182:	465f      	mov	r7, fp
   b6184:	2600      	movs	r6, #0
   b6186:	2400      	movs	r4, #0
   b6188:	2500      	movs	r5, #0
   b618a:	e003      	b.n	b6194 <__kernel_rem_pio2+0x4d4>
   b618c:	45b1      	cmp	r9, r6
   b618e:	db10      	blt.n	b61b2 <__kernel_rem_pio2+0x4f2>
   b6190:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   b6194:	e8f7 0102 	ldrd	r0, r1, [r7], #8
   b6198:	f000 fd58 	bl	b6c4c <__aeabi_dmul>
   b619c:	4602      	mov	r2, r0
   b619e:	460b      	mov	r3, r1
   b61a0:	4620      	mov	r0, r4
   b61a2:	4629      	mov	r1, r5
   b61a4:	f000 fb9c 	bl	b68e0 <__adddf3>
   b61a8:	3601      	adds	r6, #1
   b61aa:	45b2      	cmp	sl, r6
   b61ac:	4604      	mov	r4, r0
   b61ae:	460d      	mov	r5, r1
   b61b0:	daec      	bge.n	b618c <__kernel_rem_pio2+0x4cc>
   b61b2:	9b01      	ldr	r3, [sp, #4]
   b61b4:	9a02      	ldr	r2, [sp, #8]
   b61b6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   b61ba:	454a      	cmp	r2, r9
   b61bc:	e9c3 4500 	strd	r4, r5, [r3]
   b61c0:	f1ab 0b08 	sub.w	fp, fp, #8
   b61c4:	f109 0301 	add.w	r3, r9, #1
   b61c8:	d006      	beq.n	b61d8 <__kernel_rem_pio2+0x518>
   b61ca:	f1ba 0f00 	cmp.w	sl, #0
   b61ce:	4699      	mov	r9, r3
   b61d0:	dad2      	bge.n	b6178 <__kernel_rem_pio2+0x4b8>
   b61d2:	2400      	movs	r4, #0
   b61d4:	2500      	movs	r5, #0
   b61d6:	e7ec      	b.n	b61b2 <__kernel_rem_pio2+0x4f2>
   b61d8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   b61da:	f8dd a008 	ldr.w	sl, [sp, #8]
   b61de:	2b02      	cmp	r3, #2
   b61e0:	dc1e      	bgt.n	b6220 <__kernel_rem_pio2+0x560>
   b61e2:	2b00      	cmp	r3, #0
   b61e4:	f300 8107 	bgt.w	b63f6 <__kernel_rem_pio2+0x736>
   b61e8:	d113      	bne.n	b6212 <__kernel_rem_pio2+0x552>
   b61ea:	9c04      	ldr	r4, [sp, #16]
   b61ec:	9d01      	ldr	r5, [sp, #4]
   b61ee:	3408      	adds	r4, #8
   b61f0:	442c      	add	r4, r5
   b61f2:	2000      	movs	r0, #0
   b61f4:	2100      	movs	r1, #0
   b61f6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   b61fa:	f000 fb71 	bl	b68e0 <__adddf3>
   b61fe:	42a5      	cmp	r5, r4
   b6200:	d1f9      	bne.n	b61f6 <__kernel_rem_pio2+0x536>
   b6202:	9b03      	ldr	r3, [sp, #12]
   b6204:	b113      	cbz	r3, b620c <__kernel_rem_pio2+0x54c>
   b6206:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b620a:	4619      	mov	r1, r3
   b620c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b620e:	e9c3 0100 	strd	r0, r1, [r3]
   b6212:	9b07      	ldr	r3, [sp, #28]
   b6214:	f003 0007 	and.w	r0, r3, #7
   b6218:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   b621c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6220:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   b6222:	2b03      	cmp	r3, #3
   b6224:	d1f5      	bne.n	b6212 <__kernel_rem_pio2+0x552>
   b6226:	f1ba 0f00 	cmp.w	sl, #0
   b622a:	f000 8169 	beq.w	b6500 <__kernel_rem_pio2+0x840>
   b622e:	9a01      	ldr	r2, [sp, #4]
   b6230:	9b04      	ldr	r3, [sp, #16]
   b6232:	18d3      	adds	r3, r2, r3
   b6234:	e9d3 4500 	ldrd	r4, r5, [r3]
   b6238:	eb02 0bca 	add.w	fp, r2, sl, lsl #3
   b623c:	e97b 6702 	ldrd	r6, r7, [fp, #-8]!
   b6240:	4620      	mov	r0, r4
   b6242:	4629      	mov	r1, r5
   b6244:	4632      	mov	r2, r6
   b6246:	463b      	mov	r3, r7
   b6248:	f000 fb4a 	bl	b68e0 <__adddf3>
   b624c:	46a0      	mov	r8, r4
   b624e:	46a9      	mov	r9, r5
   b6250:	4604      	mov	r4, r0
   b6252:	460d      	mov	r5, r1
   b6254:	4622      	mov	r2, r4
   b6256:	462b      	mov	r3, r5
   b6258:	4630      	mov	r0, r6
   b625a:	4639      	mov	r1, r7
   b625c:	f000 fb3e 	bl	b68dc <__aeabi_dsub>
   b6260:	464b      	mov	r3, r9
   b6262:	4642      	mov	r2, r8
   b6264:	f000 fb3c 	bl	b68e0 <__adddf3>
   b6268:	9b01      	ldr	r3, [sp, #4]
   b626a:	455b      	cmp	r3, fp
   b626c:	e9cb 0102 	strd	r0, r1, [fp, #8]
   b6270:	e9cb 4500 	strd	r4, r5, [fp]
   b6274:	d1e2      	bne.n	b623c <__kernel_rem_pio2+0x57c>
   b6276:	f1ba 0f01 	cmp.w	sl, #1
   b627a:	f340 8141 	ble.w	b6500 <__kernel_rem_pio2+0x840>
   b627e:	9a01      	ldr	r2, [sp, #4]
   b6280:	9b04      	ldr	r3, [sp, #16]
   b6282:	f10a 5a00 	add.w	sl, sl, #536870912	; 0x20000000
   b6286:	f10a 3aff 	add.w	sl, sl, #4294967295
   b628a:	4413      	add	r3, r2
   b628c:	ea4f 01ca 	mov.w	r1, sl, lsl #3
   b6290:	e9d3 4500 	ldrd	r4, r5, [r3]
   b6294:	f101 0a08 	add.w	sl, r1, #8
   b6298:	9102      	str	r1, [sp, #8]
   b629a:	4492      	add	sl, r2
   b629c:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
   b62a0:	e97a 6702 	ldrd	r6, r7, [sl, #-8]!
   b62a4:	4620      	mov	r0, r4
   b62a6:	4629      	mov	r1, r5
   b62a8:	4632      	mov	r2, r6
   b62aa:	463b      	mov	r3, r7
   b62ac:	f000 fb18 	bl	b68e0 <__adddf3>
   b62b0:	46a0      	mov	r8, r4
   b62b2:	46a9      	mov	r9, r5
   b62b4:	4604      	mov	r4, r0
   b62b6:	460d      	mov	r5, r1
   b62b8:	4622      	mov	r2, r4
   b62ba:	462b      	mov	r3, r5
   b62bc:	4630      	mov	r0, r6
   b62be:	4639      	mov	r1, r7
   b62c0:	f000 fb0c 	bl	b68dc <__aeabi_dsub>
   b62c4:	4642      	mov	r2, r8
   b62c6:	464b      	mov	r3, r9
   b62c8:	f000 fb0a 	bl	b68e0 <__adddf3>
   b62cc:	45d3      	cmp	fp, sl
   b62ce:	e9ca 0102 	strd	r0, r1, [sl, #8]
   b62d2:	e9ca 4500 	strd	r4, r5, [sl]
   b62d6:	d1e3      	bne.n	b62a0 <__kernel_rem_pio2+0x5e0>
   b62d8:	9c02      	ldr	r4, [sp, #8]
   b62da:	9b01      	ldr	r3, [sp, #4]
   b62dc:	3410      	adds	r4, #16
   b62de:	441c      	add	r4, r3
   b62e0:	f103 0510 	add.w	r5, r3, #16
   b62e4:	2000      	movs	r0, #0
   b62e6:	2100      	movs	r1, #0
   b62e8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   b62ec:	f000 faf8 	bl	b68e0 <__adddf3>
   b62f0:	42a5      	cmp	r5, r4
   b62f2:	d1f9      	bne.n	b62e8 <__kernel_rem_pio2+0x628>
   b62f4:	9b03      	ldr	r3, [sp, #12]
   b62f6:	2b00      	cmp	r3, #0
   b62f8:	f040 80bb 	bne.w	b6472 <__kernel_rem_pio2+0x7b2>
   b62fc:	9d01      	ldr	r5, [sp, #4]
   b62fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   b6300:	e9d5 2300 	ldrd	r2, r3, [r5]
   b6304:	e9c4 2300 	strd	r2, r3, [r4]
   b6308:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   b630c:	e9c4 2302 	strd	r2, r3, [r4, #8]
   b6310:	9b07      	ldr	r3, [sp, #28]
   b6312:	e9c4 0104 	strd	r0, r1, [r4, #16]
   b6316:	f003 0007 	and.w	r0, r3, #7
   b631a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   b631e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6322:	9b01      	ldr	r3, [sp, #4]
   b6324:	1e5a      	subs	r2, r3, #1
   b6326:	ab0c      	add	r3, sp, #48	; 0x30
   b6328:	a90c      	add	r1, sp, #48	; 0x30
   b632a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   b632e:	f3c3 0316 	ubfx	r3, r3, #0, #23
   b6332:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   b6336:	e694      	b.n	b6062 <__kernel_rem_pio2+0x3a2>
   b6338:	00000000 	.word	0x00000000
   b633c:	3ff00000 	.word	0x3ff00000
   b6340:	40000000 	.word	0x40000000
   b6344:	3ff921fb 	.word	0x3ff921fb
   b6348:	3ff00000 	.word	0x3ff00000
   b634c:	3fe00000 	.word	0x3fe00000
   b6350:	3e700000 	.word	0x3e700000
   b6354:	000b7720 	.word	0x000b7720
   b6358:	9b01      	ldr	r3, [sp, #4]
   b635a:	2b00      	cmp	r3, #0
   b635c:	f108 0801 	add.w	r8, r8, #1
   b6360:	bfc8      	it	gt
   b6362:	2502      	movgt	r5, #2
   b6364:	f73f ae44 	bgt.w	b5ff0 <__kernel_rem_pio2+0x330>
   b6368:	4632      	mov	r2, r6
   b636a:	463b      	mov	r3, r7
   b636c:	4966      	ldr	r1, [pc, #408]	; (b6508 <__kernel_rem_pio2+0x848>)
   b636e:	2000      	movs	r0, #0
   b6370:	f000 fab4 	bl	b68dc <__aeabi_dsub>
   b6374:	2502      	movs	r5, #2
   b6376:	4606      	mov	r6, r0
   b6378:	460f      	mov	r7, r1
   b637a:	e5a5      	b.n	b5ec8 <__kernel_rem_pio2+0x208>
   b637c:	2100      	movs	r1, #0
   b637e:	f06f 0317 	mvn.w	r3, #23
   b6382:	9107      	str	r1, [sp, #28]
   b6384:	e4bb      	b.n	b5cfe <__kernel_rem_pio2+0x3e>
   b6386:	2400      	movs	r4, #0
   b6388:	e659      	b.n	b603e <__kernel_rem_pio2+0x37e>
   b638a:	ec47 6b10 	vmov	d0, r6, r7
   b638e:	9e06      	ldr	r6, [sp, #24]
   b6390:	9503      	str	r5, [sp, #12]
   b6392:	4270      	negs	r0, r6
   b6394:	f8cd 801c 	str.w	r8, [sp, #28]
   b6398:	f000 fa0a 	bl	b67b0 <scalbn>
   b639c:	ec55 4b10 	vmov	r4, r5, d0
   b63a0:	4b5a      	ldr	r3, [pc, #360]	; (b650c <__kernel_rem_pio2+0x84c>)
   b63a2:	ee10 0a10 	vmov	r0, s0
   b63a6:	2200      	movs	r2, #0
   b63a8:	4629      	mov	r1, r5
   b63aa:	f000 fed5 	bl	b7158 <__aeabi_dcmpge>
   b63ae:	2800      	cmp	r0, #0
   b63b0:	d055      	beq.n	b645e <__kernel_rem_pio2+0x79e>
   b63b2:	4b57      	ldr	r3, [pc, #348]	; (b6510 <__kernel_rem_pio2+0x850>)
   b63b4:	9f01      	ldr	r7, [sp, #4]
   b63b6:	2200      	movs	r2, #0
   b63b8:	3618      	adds	r6, #24
   b63ba:	4620      	mov	r0, r4
   b63bc:	4629      	mov	r1, r5
   b63be:	9606      	str	r6, [sp, #24]
   b63c0:	f000 fc44 	bl	b6c4c <__aeabi_dmul>
   b63c4:	f000 fedc 	bl	b7180 <__aeabi_d2iz>
   b63c8:	4606      	mov	r6, r0
   b63ca:	f000 fbd5 	bl	b6b78 <__aeabi_i2d>
   b63ce:	4b4f      	ldr	r3, [pc, #316]	; (b650c <__kernel_rem_pio2+0x84c>)
   b63d0:	2200      	movs	r2, #0
   b63d2:	f000 fc3b 	bl	b6c4c <__aeabi_dmul>
   b63d6:	460b      	mov	r3, r1
   b63d8:	4602      	mov	r2, r0
   b63da:	4629      	mov	r1, r5
   b63dc:	4620      	mov	r0, r4
   b63de:	f000 fa7d 	bl	b68dc <__aeabi_dsub>
   b63e2:	f000 fecd 	bl	b7180 <__aeabi_d2iz>
   b63e6:	f107 0a01 	add.w	sl, r7, #1
   b63ea:	ab0c      	add	r3, sp, #48	; 0x30
   b63ec:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
   b63f0:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
   b63f4:	e684      	b.n	b6100 <__kernel_rem_pio2+0x440>
   b63f6:	9d01      	ldr	r5, [sp, #4]
   b63f8:	9a06      	ldr	r2, [sp, #24]
   b63fa:	2000      	movs	r0, #0
   b63fc:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
   b6400:	2100      	movs	r1, #0
   b6402:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   b6406:	f000 fa6b 	bl	b68e0 <__adddf3>
   b640a:	42a5      	cmp	r5, r4
   b640c:	d1f9      	bne.n	b6402 <__kernel_rem_pio2+0x742>
   b640e:	9b03      	ldr	r3, [sp, #12]
   b6410:	2b00      	cmp	r3, #0
   b6412:	d149      	bne.n	b64a8 <__kernel_rem_pio2+0x7e8>
   b6414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b6416:	e9c3 0100 	strd	r0, r1, [r3]
   b641a:	460b      	mov	r3, r1
   b641c:	9901      	ldr	r1, [sp, #4]
   b641e:	4602      	mov	r2, r0
   b6420:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6424:	f000 fa5a 	bl	b68dc <__aeabi_dsub>
   b6428:	f1ba 0f00 	cmp.w	sl, #0
   b642c:	dd0d      	ble.n	b644a <__kernel_rem_pio2+0x78a>
   b642e:	ad4a      	add	r5, sp, #296	; 0x128
   b6430:	2401      	movs	r4, #1
   b6432:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   b6436:	3401      	adds	r4, #1
   b6438:	f000 fa52 	bl	b68e0 <__adddf3>
   b643c:	45a2      	cmp	sl, r4
   b643e:	daf8      	bge.n	b6432 <__kernel_rem_pio2+0x772>
   b6440:	9b03      	ldr	r3, [sp, #12]
   b6442:	b113      	cbz	r3, b644a <__kernel_rem_pio2+0x78a>
   b6444:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b6448:	4619      	mov	r1, r3
   b644a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b644c:	e9c3 0102 	strd	r0, r1, [r3, #8]
   b6450:	9b07      	ldr	r3, [sp, #28]
   b6452:	f003 0007 	and.w	r0, r3, #7
   b6456:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   b645a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b645e:	4620      	mov	r0, r4
   b6460:	4629      	mov	r1, r5
   b6462:	f000 fe8d 	bl	b7180 <__aeabi_d2iz>
   b6466:	9b01      	ldr	r3, [sp, #4]
   b6468:	aa0c      	add	r2, sp, #48	; 0x30
   b646a:	469a      	mov	sl, r3
   b646c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   b6470:	e646      	b.n	b6100 <__kernel_rem_pio2+0x440>
   b6472:	9b01      	ldr	r3, [sp, #4]
   b6474:	461e      	mov	r6, r3
   b6476:	685c      	ldr	r4, [r3, #4]
   b6478:	68dd      	ldr	r5, [r3, #12]
   b647a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b647e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   b6480:	4602      	mov	r2, r0
   b6482:	e9c1 2304 	strd	r2, r3, [r1, #16]
   b6486:	6832      	ldr	r2, [r6, #0]
   b6488:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   b648c:	e9c1 2300 	strd	r2, r3, [r1]
   b6490:	68b2      	ldr	r2, [r6, #8]
   b6492:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   b6496:	e9c1 2302 	strd	r2, r3, [r1, #8]
   b649a:	9b07      	ldr	r3, [sp, #28]
   b649c:	f003 0007 	and.w	r0, r3, #7
   b64a0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   b64a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b64a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b64aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b64ae:	6053      	str	r3, [r2, #4]
   b64b0:	460b      	mov	r3, r1
   b64b2:	9901      	ldr	r1, [sp, #4]
   b64b4:	6010      	str	r0, [r2, #0]
   b64b6:	4602      	mov	r2, r0
   b64b8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b64bc:	f000 fa0e 	bl	b68dc <__aeabi_dsub>
   b64c0:	f1ba 0f00 	cmp.w	sl, #0
   b64c4:	dcb3      	bgt.n	b642e <__kernel_rem_pio2+0x76e>
   b64c6:	e7bd      	b.n	b6444 <__kernel_rem_pio2+0x784>
   b64c8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   b64ca:	2b02      	cmp	r3, #2
   b64cc:	dc0a      	bgt.n	b64e4 <__kernel_rem_pio2+0x824>
   b64ce:	2b00      	cmp	r3, #0
   b64d0:	dc11      	bgt.n	b64f6 <__kernel_rem_pio2+0x836>
   b64d2:	f47f ae9e 	bne.w	b6212 <__kernel_rem_pio2+0x552>
   b64d6:	2000      	movs	r0, #0
   b64d8:	2100      	movs	r1, #0
   b64da:	e692      	b.n	b6202 <__kernel_rem_pio2+0x542>
   b64dc:	9b08      	ldr	r3, [sp, #32]
   b64de:	00db      	lsls	r3, r3, #3
   b64e0:	9302      	str	r3, [sp, #8]
   b64e2:	e464      	b.n	b5dae <__kernel_rem_pio2+0xee>
   b64e4:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   b64e6:	2b03      	cmp	r3, #3
   b64e8:	f47f ae93 	bne.w	b6212 <__kernel_rem_pio2+0x552>
   b64ec:	ab48      	add	r3, sp, #288	; 0x120
   b64ee:	2000      	movs	r0, #0
   b64f0:	2100      	movs	r1, #0
   b64f2:	9301      	str	r3, [sp, #4]
   b64f4:	e6fe      	b.n	b62f4 <__kernel_rem_pio2+0x634>
   b64f6:	ab48      	add	r3, sp, #288	; 0x120
   b64f8:	2000      	movs	r0, #0
   b64fa:	2100      	movs	r1, #0
   b64fc:	9301      	str	r3, [sp, #4]
   b64fe:	e786      	b.n	b640e <__kernel_rem_pio2+0x74e>
   b6500:	2000      	movs	r0, #0
   b6502:	2100      	movs	r1, #0
   b6504:	e6f6      	b.n	b62f4 <__kernel_rem_pio2+0x634>
   b6506:	bf00      	nop
   b6508:	3ff00000 	.word	0x3ff00000
   b650c:	41700000 	.word	0x41700000
   b6510:	3e700000 	.word	0x3e700000
   b6514:	00000000 	.word	0x00000000

000b6518 <__kernel_sin>:
   b6518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b651c:	ec55 4b10 	vmov	r4, r5, d0
   b6520:	b085      	sub	sp, #20
   b6522:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   b6526:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   b652a:	ed8d 1b00 	vstr	d1, [sp]
   b652e:	9003      	str	r0, [sp, #12]
   b6530:	da07      	bge.n	b6542 <__kernel_sin+0x2a>
   b6532:	ee10 0a10 	vmov	r0, s0
   b6536:	4629      	mov	r1, r5
   b6538:	f000 fe22 	bl	b7180 <__aeabi_d2iz>
   b653c:	2800      	cmp	r0, #0
   b653e:	f000 8089 	beq.w	b6654 <__kernel_sin+0x13c>
   b6542:	4622      	mov	r2, r4
   b6544:	462b      	mov	r3, r5
   b6546:	4620      	mov	r0, r4
   b6548:	4629      	mov	r1, r5
   b654a:	f000 fb7f 	bl	b6c4c <__aeabi_dmul>
   b654e:	4606      	mov	r6, r0
   b6550:	460f      	mov	r7, r1
   b6552:	4632      	mov	r2, r6
   b6554:	463b      	mov	r3, r7
   b6556:	4620      	mov	r0, r4
   b6558:	4629      	mov	r1, r5
   b655a:	f000 fb77 	bl	b6c4c <__aeabi_dmul>
   b655e:	a343      	add	r3, pc, #268	; (adr r3, b666c <__kernel_sin+0x154>)
   b6560:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6564:	4682      	mov	sl, r0
   b6566:	468b      	mov	fp, r1
   b6568:	4630      	mov	r0, r6
   b656a:	4639      	mov	r1, r7
   b656c:	f000 fb6e 	bl	b6c4c <__aeabi_dmul>
   b6570:	a340      	add	r3, pc, #256	; (adr r3, b6674 <__kernel_sin+0x15c>)
   b6572:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6576:	f000 f9b1 	bl	b68dc <__aeabi_dsub>
   b657a:	4632      	mov	r2, r6
   b657c:	463b      	mov	r3, r7
   b657e:	f000 fb65 	bl	b6c4c <__aeabi_dmul>
   b6582:	a33e      	add	r3, pc, #248	; (adr r3, b667c <__kernel_sin+0x164>)
   b6584:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6588:	f000 f9aa 	bl	b68e0 <__adddf3>
   b658c:	4632      	mov	r2, r6
   b658e:	463b      	mov	r3, r7
   b6590:	f000 fb5c 	bl	b6c4c <__aeabi_dmul>
   b6594:	a33b      	add	r3, pc, #236	; (adr r3, b6684 <__kernel_sin+0x16c>)
   b6596:	e9d3 2300 	ldrd	r2, r3, [r3]
   b659a:	f000 f99f 	bl	b68dc <__aeabi_dsub>
   b659e:	4632      	mov	r2, r6
   b65a0:	463b      	mov	r3, r7
   b65a2:	f000 fb53 	bl	b6c4c <__aeabi_dmul>
   b65a6:	a339      	add	r3, pc, #228	; (adr r3, b668c <__kernel_sin+0x174>)
   b65a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b65ac:	f000 f998 	bl	b68e0 <__adddf3>
   b65b0:	9b03      	ldr	r3, [sp, #12]
   b65b2:	4680      	mov	r8, r0
   b65b4:	4689      	mov	r9, r1
   b65b6:	b3ab      	cbz	r3, b6624 <__kernel_sin+0x10c>
   b65b8:	e9dd 0100 	ldrd	r0, r1, [sp]
   b65bc:	4b2a      	ldr	r3, [pc, #168]	; (b6668 <__kernel_sin+0x150>)
   b65be:	2200      	movs	r2, #0
   b65c0:	f000 fb44 	bl	b6c4c <__aeabi_dmul>
   b65c4:	4642      	mov	r2, r8
   b65c6:	464b      	mov	r3, r9
   b65c8:	4680      	mov	r8, r0
   b65ca:	4689      	mov	r9, r1
   b65cc:	4650      	mov	r0, sl
   b65ce:	4659      	mov	r1, fp
   b65d0:	f000 fb3c 	bl	b6c4c <__aeabi_dmul>
   b65d4:	4602      	mov	r2, r0
   b65d6:	460b      	mov	r3, r1
   b65d8:	4640      	mov	r0, r8
   b65da:	4649      	mov	r1, r9
   b65dc:	f000 f97e 	bl	b68dc <__aeabi_dsub>
   b65e0:	4632      	mov	r2, r6
   b65e2:	463b      	mov	r3, r7
   b65e4:	f000 fb32 	bl	b6c4c <__aeabi_dmul>
   b65e8:	e9dd 2300 	ldrd	r2, r3, [sp]
   b65ec:	f000 f976 	bl	b68dc <__aeabi_dsub>
   b65f0:	a31b      	add	r3, pc, #108	; (adr r3, b6660 <__kernel_sin+0x148>)
   b65f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b65f6:	4606      	mov	r6, r0
   b65f8:	460f      	mov	r7, r1
   b65fa:	4650      	mov	r0, sl
   b65fc:	4659      	mov	r1, fp
   b65fe:	f000 fb25 	bl	b6c4c <__aeabi_dmul>
   b6602:	4602      	mov	r2, r0
   b6604:	460b      	mov	r3, r1
   b6606:	4630      	mov	r0, r6
   b6608:	4639      	mov	r1, r7
   b660a:	f000 f969 	bl	b68e0 <__adddf3>
   b660e:	4602      	mov	r2, r0
   b6610:	460b      	mov	r3, r1
   b6612:	4620      	mov	r0, r4
   b6614:	4629      	mov	r1, r5
   b6616:	f000 f961 	bl	b68dc <__aeabi_dsub>
   b661a:	ec41 0b10 	vmov	d0, r0, r1
   b661e:	b005      	add	sp, #20
   b6620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6624:	4602      	mov	r2, r0
   b6626:	460b      	mov	r3, r1
   b6628:	4630      	mov	r0, r6
   b662a:	4639      	mov	r1, r7
   b662c:	f000 fb0e 	bl	b6c4c <__aeabi_dmul>
   b6630:	a30b      	add	r3, pc, #44	; (adr r3, b6660 <__kernel_sin+0x148>)
   b6632:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6636:	f000 f951 	bl	b68dc <__aeabi_dsub>
   b663a:	4652      	mov	r2, sl
   b663c:	465b      	mov	r3, fp
   b663e:	f000 fb05 	bl	b6c4c <__aeabi_dmul>
   b6642:	4622      	mov	r2, r4
   b6644:	462b      	mov	r3, r5
   b6646:	f000 f94b 	bl	b68e0 <__adddf3>
   b664a:	ec41 0b10 	vmov	d0, r0, r1
   b664e:	b005      	add	sp, #20
   b6650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6654:	ec45 4b10 	vmov	d0, r4, r5
   b6658:	b005      	add	sp, #20
   b665a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b665e:	bf00      	nop
   b6660:	55555549 	.word	0x55555549
   b6664:	3fc55555 	.word	0x3fc55555
   b6668:	3fe00000 	.word	0x3fe00000
   b666c:	5acfd57c 	.word	0x5acfd57c
   b6670:	3de5d93a 	.word	0x3de5d93a
   b6674:	8a2b9ceb 	.word	0x8a2b9ceb
   b6678:	3e5ae5e6 	.word	0x3e5ae5e6
   b667c:	57b1fe7d 	.word	0x57b1fe7d
   b6680:	3ec71de3 	.word	0x3ec71de3
   b6684:	19c161d5 	.word	0x19c161d5
   b6688:	3f2a01a0 	.word	0x3f2a01a0
   b668c:	1110f8a6 	.word	0x1110f8a6
   b6690:	3f811111 	.word	0x3f811111

000b6694 <fabs>:
   b6694:	ec51 0b10 	vmov	r0, r1, d0
   b6698:	ee10 2a10 	vmov	r2, s0
   b669c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b66a0:	ec43 2b10 	vmov	d0, r2, r3
   b66a4:	4770      	bx	lr
   b66a6:	bf00      	nop

000b66a8 <floor>:
   b66a8:	ec51 0b10 	vmov	r0, r1, d0
   b66ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b66ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
   b66b2:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   b66b6:	2d13      	cmp	r5, #19
   b66b8:	ee10 6a10 	vmov	r6, s0
   b66bc:	460c      	mov	r4, r1
   b66be:	dc30      	bgt.n	b6722 <floor+0x7a>
   b66c0:	2d00      	cmp	r5, #0
   b66c2:	db1e      	blt.n	b6702 <floor+0x5a>
   b66c4:	4f38      	ldr	r7, [pc, #224]	; (b67a8 <floor+0x100>)
   b66c6:	412f      	asrs	r7, r5
   b66c8:	ea01 0307 	and.w	r3, r1, r7
   b66cc:	4303      	orrs	r3, r0
   b66ce:	d02d      	beq.n	b672c <floor+0x84>
   b66d0:	a333      	add	r3, pc, #204	; (adr r3, b67a0 <floor+0xf8>)
   b66d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b66d6:	f000 f903 	bl	b68e0 <__adddf3>
   b66da:	2200      	movs	r2, #0
   b66dc:	2300      	movs	r3, #0
   b66de:	f000 fd45 	bl	b716c <__aeabi_dcmpgt>
   b66e2:	b148      	cbz	r0, b66f8 <floor+0x50>
   b66e4:	2c00      	cmp	r4, #0
   b66e6:	da04      	bge.n	b66f2 <floor+0x4a>
   b66e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   b66ec:	fa43 f505 	asr.w	r5, r3, r5
   b66f0:	442c      	add	r4, r5
   b66f2:	ea24 0407 	bic.w	r4, r4, r7
   b66f6:	2600      	movs	r6, #0
   b66f8:	4623      	mov	r3, r4
   b66fa:	4632      	mov	r2, r6
   b66fc:	ec43 2b10 	vmov	d0, r2, r3
   b6700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6702:	a327      	add	r3, pc, #156	; (adr r3, b67a0 <floor+0xf8>)
   b6704:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6708:	f000 f8ea 	bl	b68e0 <__adddf3>
   b670c:	2200      	movs	r2, #0
   b670e:	2300      	movs	r3, #0
   b6710:	f000 fd2c 	bl	b716c <__aeabi_dcmpgt>
   b6714:	2800      	cmp	r0, #0
   b6716:	d0ef      	beq.n	b66f8 <floor+0x50>
   b6718:	2c00      	cmp	r4, #0
   b671a:	db29      	blt.n	b6770 <floor+0xc8>
   b671c:	2600      	movs	r6, #0
   b671e:	4634      	mov	r4, r6
   b6720:	e7ea      	b.n	b66f8 <floor+0x50>
   b6722:	2d33      	cmp	r5, #51	; 0x33
   b6724:	dd05      	ble.n	b6732 <floor+0x8a>
   b6726:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   b672a:	d019      	beq.n	b6760 <floor+0xb8>
   b672c:	ec41 0b10 	vmov	d0, r0, r1
   b6730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6732:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   b6736:	f04f 37ff 	mov.w	r7, #4294967295
   b673a:	40df      	lsrs	r7, r3
   b673c:	4207      	tst	r7, r0
   b673e:	d0f5      	beq.n	b672c <floor+0x84>
   b6740:	a317      	add	r3, pc, #92	; (adr r3, b67a0 <floor+0xf8>)
   b6742:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6746:	f000 f8cb 	bl	b68e0 <__adddf3>
   b674a:	2200      	movs	r2, #0
   b674c:	2300      	movs	r3, #0
   b674e:	f000 fd0d 	bl	b716c <__aeabi_dcmpgt>
   b6752:	2800      	cmp	r0, #0
   b6754:	d0d0      	beq.n	b66f8 <floor+0x50>
   b6756:	2c00      	cmp	r4, #0
   b6758:	db13      	blt.n	b6782 <floor+0xda>
   b675a:	ea26 0607 	bic.w	r6, r6, r7
   b675e:	e7cb      	b.n	b66f8 <floor+0x50>
   b6760:	ee10 2a10 	vmov	r2, s0
   b6764:	460b      	mov	r3, r1
   b6766:	f000 f8bb 	bl	b68e0 <__adddf3>
   b676a:	ec41 0b10 	vmov	d0, r0, r1
   b676e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6770:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   b6774:	4a0d      	ldr	r2, [pc, #52]	; (b67ac <floor+0x104>)
   b6776:	431e      	orrs	r6, r3
   b6778:	2e00      	cmp	r6, #0
   b677a:	bf18      	it	ne
   b677c:	4614      	movne	r4, r2
   b677e:	2600      	movs	r6, #0
   b6780:	e7ba      	b.n	b66f8 <floor+0x50>
   b6782:	2d14      	cmp	r5, #20
   b6784:	d008      	beq.n	b6798 <floor+0xf0>
   b6786:	2301      	movs	r3, #1
   b6788:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   b678c:	fa03 f505 	lsl.w	r5, r3, r5
   b6790:	19ae      	adds	r6, r5, r6
   b6792:	bf28      	it	cs
   b6794:	18e4      	addcs	r4, r4, r3
   b6796:	e7e0      	b.n	b675a <floor+0xb2>
   b6798:	3401      	adds	r4, #1
   b679a:	e7de      	b.n	b675a <floor+0xb2>
   b679c:	f3af 8000 	nop.w
   b67a0:	8800759c 	.word	0x8800759c
   b67a4:	7e37e43c 	.word	0x7e37e43c
   b67a8:	000fffff 	.word	0x000fffff
   b67ac:	bff00000 	.word	0xbff00000

000b67b0 <scalbn>:
   b67b0:	b538      	push	{r3, r4, r5, lr}
   b67b2:	ec53 2b10 	vmov	r2, r3, d0
   b67b6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b67ba:	4604      	mov	r4, r0
   b67bc:	469c      	mov	ip, r3
   b67be:	bb89      	cbnz	r1, b6824 <scalbn+0x74>
   b67c0:	ee10 1a10 	vmov	r1, s0
   b67c4:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b67c8:	ea5c 0101 	orrs.w	r1, ip, r1
   b67cc:	d029      	beq.n	b6822 <scalbn+0x72>
   b67ce:	4619      	mov	r1, r3
   b67d0:	2200      	movs	r2, #0
   b67d2:	4b3d      	ldr	r3, [pc, #244]	; (b68c8 <scalbn+0x118>)
   b67d4:	4d3d      	ldr	r5, [pc, #244]	; (b68cc <scalbn+0x11c>)
   b67d6:	ee10 0a10 	vmov	r0, s0
   b67da:	f000 fa37 	bl	b6c4c <__aeabi_dmul>
   b67de:	42ac      	cmp	r4, r5
   b67e0:	4602      	mov	r2, r0
   b67e2:	460b      	mov	r3, r1
   b67e4:	db16      	blt.n	b6814 <scalbn+0x64>
   b67e6:	468c      	mov	ip, r1
   b67e8:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b67ec:	3936      	subs	r1, #54	; 0x36
   b67ee:	4421      	add	r1, r4
   b67f0:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b67f4:	4281      	cmp	r1, r0
   b67f6:	dc21      	bgt.n	b683c <scalbn+0x8c>
   b67f8:	2900      	cmp	r1, #0
   b67fa:	dc47      	bgt.n	b688c <scalbn+0xdc>
   b67fc:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b6800:	da34      	bge.n	b686c <scalbn+0xbc>
   b6802:	f24c 3150 	movw	r1, #50000	; 0xc350
   b6806:	428c      	cmp	r4, r1
   b6808:	dc18      	bgt.n	b683c <scalbn+0x8c>
   b680a:	2b00      	cmp	r3, #0
   b680c:	a126      	add	r1, pc, #152	; (adr r1, b68a8 <scalbn+0xf8>)
   b680e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6812:	db44      	blt.n	b689e <scalbn+0xee>
   b6814:	a324      	add	r3, pc, #144	; (adr r3, b68a8 <scalbn+0xf8>)
   b6816:	e9d3 2300 	ldrd	r2, r3, [r3]
   b681a:	f000 fa17 	bl	b6c4c <__aeabi_dmul>
   b681e:	ec41 0b10 	vmov	d0, r0, r1
   b6822:	bd38      	pop	{r3, r4, r5, pc}
   b6824:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b6828:	4281      	cmp	r1, r0
   b682a:	d1e0      	bne.n	b67ee <scalbn+0x3e>
   b682c:	ee10 0a10 	vmov	r0, s0
   b6830:	4619      	mov	r1, r3
   b6832:	f000 f855 	bl	b68e0 <__adddf3>
   b6836:	ec41 0b10 	vmov	d0, r0, r1
   b683a:	bd38      	pop	{r3, r4, r5, pc}
   b683c:	2b00      	cmp	r3, #0
   b683e:	a11c      	add	r1, pc, #112	; (adr r1, b68b0 <scalbn+0x100>)
   b6840:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6844:	db07      	blt.n	b6856 <scalbn+0xa6>
   b6846:	a31a      	add	r3, pc, #104	; (adr r3, b68b0 <scalbn+0x100>)
   b6848:	e9d3 2300 	ldrd	r2, r3, [r3]
   b684c:	f000 f9fe 	bl	b6c4c <__aeabi_dmul>
   b6850:	ec41 0b10 	vmov	d0, r0, r1
   b6854:	bd38      	pop	{r3, r4, r5, pc}
   b6856:	a118      	add	r1, pc, #96	; (adr r1, b68b8 <scalbn+0x108>)
   b6858:	e9d1 0100 	ldrd	r0, r1, [r1]
   b685c:	a314      	add	r3, pc, #80	; (adr r3, b68b0 <scalbn+0x100>)
   b685e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6862:	f000 f9f3 	bl	b6c4c <__aeabi_dmul>
   b6866:	ec41 0b10 	vmov	d0, r0, r1
   b686a:	e7f3      	b.n	b6854 <scalbn+0xa4>
   b686c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b6870:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b6874:	3136      	adds	r1, #54	; 0x36
   b6876:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b687a:	4610      	mov	r0, r2
   b687c:	4619      	mov	r1, r3
   b687e:	2200      	movs	r2, #0
   b6880:	4b13      	ldr	r3, [pc, #76]	; (b68d0 <scalbn+0x120>)
   b6882:	f000 f9e3 	bl	b6c4c <__aeabi_dmul>
   b6886:	ec41 0b10 	vmov	d0, r0, r1
   b688a:	bd38      	pop	{r3, r4, r5, pc}
   b688c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b6890:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b6894:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b6898:	ec43 2b10 	vmov	d0, r2, r3
   b689c:	bd38      	pop	{r3, r4, r5, pc}
   b689e:	a108      	add	r1, pc, #32	; (adr r1, b68c0 <scalbn+0x110>)
   b68a0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b68a4:	e7b6      	b.n	b6814 <scalbn+0x64>
   b68a6:	bf00      	nop
   b68a8:	c2f8f359 	.word	0xc2f8f359
   b68ac:	01a56e1f 	.word	0x01a56e1f
   b68b0:	8800759c 	.word	0x8800759c
   b68b4:	7e37e43c 	.word	0x7e37e43c
   b68b8:	8800759c 	.word	0x8800759c
   b68bc:	fe37e43c 	.word	0xfe37e43c
   b68c0:	c2f8f359 	.word	0xc2f8f359
   b68c4:	81a56e1f 	.word	0x81a56e1f
   b68c8:	43500000 	.word	0x43500000
   b68cc:	ffff3cb0 	.word	0xffff3cb0
   b68d0:	3c900000 	.word	0x3c900000

000b68d4 <__aeabi_drsub>:
   b68d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b68d8:	e002      	b.n	b68e0 <__adddf3>
   b68da:	bf00      	nop

000b68dc <__aeabi_dsub>:
   b68dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b68e0 <__adddf3>:
   b68e0:	b530      	push	{r4, r5, lr}
   b68e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b68e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b68ea:	ea94 0f05 	teq	r4, r5
   b68ee:	bf08      	it	eq
   b68f0:	ea90 0f02 	teqeq	r0, r2
   b68f4:	bf1f      	itttt	ne
   b68f6:	ea54 0c00 	orrsne.w	ip, r4, r0
   b68fa:	ea55 0c02 	orrsne.w	ip, r5, r2
   b68fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b6902:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6906:	f000 80e2 	beq.w	b6ace <__adddf3+0x1ee>
   b690a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b690e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b6912:	bfb8      	it	lt
   b6914:	426d      	neglt	r5, r5
   b6916:	dd0c      	ble.n	b6932 <__adddf3+0x52>
   b6918:	442c      	add	r4, r5
   b691a:	ea80 0202 	eor.w	r2, r0, r2
   b691e:	ea81 0303 	eor.w	r3, r1, r3
   b6922:	ea82 0000 	eor.w	r0, r2, r0
   b6926:	ea83 0101 	eor.w	r1, r3, r1
   b692a:	ea80 0202 	eor.w	r2, r0, r2
   b692e:	ea81 0303 	eor.w	r3, r1, r3
   b6932:	2d36      	cmp	r5, #54	; 0x36
   b6934:	bf88      	it	hi
   b6936:	bd30      	pophi	{r4, r5, pc}
   b6938:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b693c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6940:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b6944:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6948:	d002      	beq.n	b6950 <__adddf3+0x70>
   b694a:	4240      	negs	r0, r0
   b694c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6950:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b6954:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6958:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b695c:	d002      	beq.n	b6964 <__adddf3+0x84>
   b695e:	4252      	negs	r2, r2
   b6960:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6964:	ea94 0f05 	teq	r4, r5
   b6968:	f000 80a7 	beq.w	b6aba <__adddf3+0x1da>
   b696c:	f1a4 0401 	sub.w	r4, r4, #1
   b6970:	f1d5 0e20 	rsbs	lr, r5, #32
   b6974:	db0d      	blt.n	b6992 <__adddf3+0xb2>
   b6976:	fa02 fc0e 	lsl.w	ip, r2, lr
   b697a:	fa22 f205 	lsr.w	r2, r2, r5
   b697e:	1880      	adds	r0, r0, r2
   b6980:	f141 0100 	adc.w	r1, r1, #0
   b6984:	fa03 f20e 	lsl.w	r2, r3, lr
   b6988:	1880      	adds	r0, r0, r2
   b698a:	fa43 f305 	asr.w	r3, r3, r5
   b698e:	4159      	adcs	r1, r3
   b6990:	e00e      	b.n	b69b0 <__adddf3+0xd0>
   b6992:	f1a5 0520 	sub.w	r5, r5, #32
   b6996:	f10e 0e20 	add.w	lr, lr, #32
   b699a:	2a01      	cmp	r2, #1
   b699c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b69a0:	bf28      	it	cs
   b69a2:	f04c 0c02 	orrcs.w	ip, ip, #2
   b69a6:	fa43 f305 	asr.w	r3, r3, r5
   b69aa:	18c0      	adds	r0, r0, r3
   b69ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b69b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b69b4:	d507      	bpl.n	b69c6 <__adddf3+0xe6>
   b69b6:	f04f 0e00 	mov.w	lr, #0
   b69ba:	f1dc 0c00 	rsbs	ip, ip, #0
   b69be:	eb7e 0000 	sbcs.w	r0, lr, r0
   b69c2:	eb6e 0101 	sbc.w	r1, lr, r1
   b69c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b69ca:	d31b      	bcc.n	b6a04 <__adddf3+0x124>
   b69cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b69d0:	d30c      	bcc.n	b69ec <__adddf3+0x10c>
   b69d2:	0849      	lsrs	r1, r1, #1
   b69d4:	ea5f 0030 	movs.w	r0, r0, rrx
   b69d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b69dc:	f104 0401 	add.w	r4, r4, #1
   b69e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b69e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b69e8:	f080 809a 	bcs.w	b6b20 <__adddf3+0x240>
   b69ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b69f0:	bf08      	it	eq
   b69f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b69f6:	f150 0000 	adcs.w	r0, r0, #0
   b69fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b69fe:	ea41 0105 	orr.w	r1, r1, r5
   b6a02:	bd30      	pop	{r4, r5, pc}
   b6a04:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b6a08:	4140      	adcs	r0, r0
   b6a0a:	eb41 0101 	adc.w	r1, r1, r1
   b6a0e:	3c01      	subs	r4, #1
   b6a10:	bf28      	it	cs
   b6a12:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b6a16:	d2e9      	bcs.n	b69ec <__adddf3+0x10c>
   b6a18:	f091 0f00 	teq	r1, #0
   b6a1c:	bf04      	itt	eq
   b6a1e:	4601      	moveq	r1, r0
   b6a20:	2000      	moveq	r0, #0
   b6a22:	fab1 f381 	clz	r3, r1
   b6a26:	bf08      	it	eq
   b6a28:	3320      	addeq	r3, #32
   b6a2a:	f1a3 030b 	sub.w	r3, r3, #11
   b6a2e:	f1b3 0220 	subs.w	r2, r3, #32
   b6a32:	da0c      	bge.n	b6a4e <__adddf3+0x16e>
   b6a34:	320c      	adds	r2, #12
   b6a36:	dd08      	ble.n	b6a4a <__adddf3+0x16a>
   b6a38:	f102 0c14 	add.w	ip, r2, #20
   b6a3c:	f1c2 020c 	rsb	r2, r2, #12
   b6a40:	fa01 f00c 	lsl.w	r0, r1, ip
   b6a44:	fa21 f102 	lsr.w	r1, r1, r2
   b6a48:	e00c      	b.n	b6a64 <__adddf3+0x184>
   b6a4a:	f102 0214 	add.w	r2, r2, #20
   b6a4e:	bfd8      	it	le
   b6a50:	f1c2 0c20 	rsble	ip, r2, #32
   b6a54:	fa01 f102 	lsl.w	r1, r1, r2
   b6a58:	fa20 fc0c 	lsr.w	ip, r0, ip
   b6a5c:	bfdc      	itt	le
   b6a5e:	ea41 010c 	orrle.w	r1, r1, ip
   b6a62:	4090      	lslle	r0, r2
   b6a64:	1ae4      	subs	r4, r4, r3
   b6a66:	bfa2      	ittt	ge
   b6a68:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b6a6c:	4329      	orrge	r1, r5
   b6a6e:	bd30      	popge	{r4, r5, pc}
   b6a70:	ea6f 0404 	mvn.w	r4, r4
   b6a74:	3c1f      	subs	r4, #31
   b6a76:	da1c      	bge.n	b6ab2 <__adddf3+0x1d2>
   b6a78:	340c      	adds	r4, #12
   b6a7a:	dc0e      	bgt.n	b6a9a <__adddf3+0x1ba>
   b6a7c:	f104 0414 	add.w	r4, r4, #20
   b6a80:	f1c4 0220 	rsb	r2, r4, #32
   b6a84:	fa20 f004 	lsr.w	r0, r0, r4
   b6a88:	fa01 f302 	lsl.w	r3, r1, r2
   b6a8c:	ea40 0003 	orr.w	r0, r0, r3
   b6a90:	fa21 f304 	lsr.w	r3, r1, r4
   b6a94:	ea45 0103 	orr.w	r1, r5, r3
   b6a98:	bd30      	pop	{r4, r5, pc}
   b6a9a:	f1c4 040c 	rsb	r4, r4, #12
   b6a9e:	f1c4 0220 	rsb	r2, r4, #32
   b6aa2:	fa20 f002 	lsr.w	r0, r0, r2
   b6aa6:	fa01 f304 	lsl.w	r3, r1, r4
   b6aaa:	ea40 0003 	orr.w	r0, r0, r3
   b6aae:	4629      	mov	r1, r5
   b6ab0:	bd30      	pop	{r4, r5, pc}
   b6ab2:	fa21 f004 	lsr.w	r0, r1, r4
   b6ab6:	4629      	mov	r1, r5
   b6ab8:	bd30      	pop	{r4, r5, pc}
   b6aba:	f094 0f00 	teq	r4, #0
   b6abe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b6ac2:	bf06      	itte	eq
   b6ac4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b6ac8:	3401      	addeq	r4, #1
   b6aca:	3d01      	subne	r5, #1
   b6acc:	e74e      	b.n	b696c <__adddf3+0x8c>
   b6ace:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6ad2:	bf18      	it	ne
   b6ad4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6ad8:	d029      	beq.n	b6b2e <__adddf3+0x24e>
   b6ada:	ea94 0f05 	teq	r4, r5
   b6ade:	bf08      	it	eq
   b6ae0:	ea90 0f02 	teqeq	r0, r2
   b6ae4:	d005      	beq.n	b6af2 <__adddf3+0x212>
   b6ae6:	ea54 0c00 	orrs.w	ip, r4, r0
   b6aea:	bf04      	itt	eq
   b6aec:	4619      	moveq	r1, r3
   b6aee:	4610      	moveq	r0, r2
   b6af0:	bd30      	pop	{r4, r5, pc}
   b6af2:	ea91 0f03 	teq	r1, r3
   b6af6:	bf1e      	ittt	ne
   b6af8:	2100      	movne	r1, #0
   b6afa:	2000      	movne	r0, #0
   b6afc:	bd30      	popne	{r4, r5, pc}
   b6afe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b6b02:	d105      	bne.n	b6b10 <__adddf3+0x230>
   b6b04:	0040      	lsls	r0, r0, #1
   b6b06:	4149      	adcs	r1, r1
   b6b08:	bf28      	it	cs
   b6b0a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b6b0e:	bd30      	pop	{r4, r5, pc}
   b6b10:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b6b14:	bf3c      	itt	cc
   b6b16:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b6b1a:	bd30      	popcc	{r4, r5, pc}
   b6b1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6b20:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b6b24:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6b28:	f04f 0000 	mov.w	r0, #0
   b6b2c:	bd30      	pop	{r4, r5, pc}
   b6b2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6b32:	bf1a      	itte	ne
   b6b34:	4619      	movne	r1, r3
   b6b36:	4610      	movne	r0, r2
   b6b38:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b6b3c:	bf1c      	itt	ne
   b6b3e:	460b      	movne	r3, r1
   b6b40:	4602      	movne	r2, r0
   b6b42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6b46:	bf06      	itte	eq
   b6b48:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b6b4c:	ea91 0f03 	teqeq	r1, r3
   b6b50:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b6b54:	bd30      	pop	{r4, r5, pc}
   b6b56:	bf00      	nop

000b6b58 <__aeabi_ui2d>:
   b6b58:	f090 0f00 	teq	r0, #0
   b6b5c:	bf04      	itt	eq
   b6b5e:	2100      	moveq	r1, #0
   b6b60:	4770      	bxeq	lr
   b6b62:	b530      	push	{r4, r5, lr}
   b6b64:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6b68:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6b6c:	f04f 0500 	mov.w	r5, #0
   b6b70:	f04f 0100 	mov.w	r1, #0
   b6b74:	e750      	b.n	b6a18 <__adddf3+0x138>
   b6b76:	bf00      	nop

000b6b78 <__aeabi_i2d>:
   b6b78:	f090 0f00 	teq	r0, #0
   b6b7c:	bf04      	itt	eq
   b6b7e:	2100      	moveq	r1, #0
   b6b80:	4770      	bxeq	lr
   b6b82:	b530      	push	{r4, r5, lr}
   b6b84:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6b88:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6b8c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6b90:	bf48      	it	mi
   b6b92:	4240      	negmi	r0, r0
   b6b94:	f04f 0100 	mov.w	r1, #0
   b6b98:	e73e      	b.n	b6a18 <__adddf3+0x138>
   b6b9a:	bf00      	nop

000b6b9c <__aeabi_f2d>:
   b6b9c:	0042      	lsls	r2, r0, #1
   b6b9e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b6ba2:	ea4f 0131 	mov.w	r1, r1, rrx
   b6ba6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b6baa:	bf1f      	itttt	ne
   b6bac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b6bb0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b6bb4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b6bb8:	4770      	bxne	lr
   b6bba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b6bbe:	bf08      	it	eq
   b6bc0:	4770      	bxeq	lr
   b6bc2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b6bc6:	bf04      	itt	eq
   b6bc8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b6bcc:	4770      	bxeq	lr
   b6bce:	b530      	push	{r4, r5, lr}
   b6bd0:	f44f 7460 	mov.w	r4, #896	; 0x380
   b6bd4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6bd8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6bdc:	e71c      	b.n	b6a18 <__adddf3+0x138>
   b6bde:	bf00      	nop

000b6be0 <__aeabi_ul2d>:
   b6be0:	ea50 0201 	orrs.w	r2, r0, r1
   b6be4:	bf08      	it	eq
   b6be6:	4770      	bxeq	lr
   b6be8:	b530      	push	{r4, r5, lr}
   b6bea:	f04f 0500 	mov.w	r5, #0
   b6bee:	e00a      	b.n	b6c06 <__aeabi_l2d+0x16>

000b6bf0 <__aeabi_l2d>:
   b6bf0:	ea50 0201 	orrs.w	r2, r0, r1
   b6bf4:	bf08      	it	eq
   b6bf6:	4770      	bxeq	lr
   b6bf8:	b530      	push	{r4, r5, lr}
   b6bfa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b6bfe:	d502      	bpl.n	b6c06 <__aeabi_l2d+0x16>
   b6c00:	4240      	negs	r0, r0
   b6c02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6c06:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6c0a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6c0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b6c12:	f43f aed8 	beq.w	b69c6 <__adddf3+0xe6>
   b6c16:	f04f 0203 	mov.w	r2, #3
   b6c1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6c1e:	bf18      	it	ne
   b6c20:	3203      	addne	r2, #3
   b6c22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6c26:	bf18      	it	ne
   b6c28:	3203      	addne	r2, #3
   b6c2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b6c2e:	f1c2 0320 	rsb	r3, r2, #32
   b6c32:	fa00 fc03 	lsl.w	ip, r0, r3
   b6c36:	fa20 f002 	lsr.w	r0, r0, r2
   b6c3a:	fa01 fe03 	lsl.w	lr, r1, r3
   b6c3e:	ea40 000e 	orr.w	r0, r0, lr
   b6c42:	fa21 f102 	lsr.w	r1, r1, r2
   b6c46:	4414      	add	r4, r2
   b6c48:	e6bd      	b.n	b69c6 <__adddf3+0xe6>
   b6c4a:	bf00      	nop

000b6c4c <__aeabi_dmul>:
   b6c4c:	b570      	push	{r4, r5, r6, lr}
   b6c4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6c52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6c56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6c5a:	bf1d      	ittte	ne
   b6c5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6c60:	ea94 0f0c 	teqne	r4, ip
   b6c64:	ea95 0f0c 	teqne	r5, ip
   b6c68:	f000 f8de 	bleq	b6e28 <__aeabi_dmul+0x1dc>
   b6c6c:	442c      	add	r4, r5
   b6c6e:	ea81 0603 	eor.w	r6, r1, r3
   b6c72:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b6c76:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b6c7a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b6c7e:	bf18      	it	ne
   b6c80:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b6c84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6c88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6c8c:	d038      	beq.n	b6d00 <__aeabi_dmul+0xb4>
   b6c8e:	fba0 ce02 	umull	ip, lr, r0, r2
   b6c92:	f04f 0500 	mov.w	r5, #0
   b6c96:	fbe1 e502 	umlal	lr, r5, r1, r2
   b6c9a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b6c9e:	fbe0 e503 	umlal	lr, r5, r0, r3
   b6ca2:	f04f 0600 	mov.w	r6, #0
   b6ca6:	fbe1 5603 	umlal	r5, r6, r1, r3
   b6caa:	f09c 0f00 	teq	ip, #0
   b6cae:	bf18      	it	ne
   b6cb0:	f04e 0e01 	orrne.w	lr, lr, #1
   b6cb4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b6cb8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6cbc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b6cc0:	d204      	bcs.n	b6ccc <__aeabi_dmul+0x80>
   b6cc2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b6cc6:	416d      	adcs	r5, r5
   b6cc8:	eb46 0606 	adc.w	r6, r6, r6
   b6ccc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b6cd0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b6cd4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b6cd8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b6cdc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6ce0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6ce4:	bf88      	it	hi
   b6ce6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6cea:	d81e      	bhi.n	b6d2a <__aeabi_dmul+0xde>
   b6cec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b6cf0:	bf08      	it	eq
   b6cf2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b6cf6:	f150 0000 	adcs.w	r0, r0, #0
   b6cfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6cfe:	bd70      	pop	{r4, r5, r6, pc}
   b6d00:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b6d04:	ea46 0101 	orr.w	r1, r6, r1
   b6d08:	ea40 0002 	orr.w	r0, r0, r2
   b6d0c:	ea81 0103 	eor.w	r1, r1, r3
   b6d10:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b6d14:	bfc2      	ittt	gt
   b6d16:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6d1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6d1e:	bd70      	popgt	{r4, r5, r6, pc}
   b6d20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6d24:	f04f 0e00 	mov.w	lr, #0
   b6d28:	3c01      	subs	r4, #1
   b6d2a:	f300 80ab 	bgt.w	b6e84 <__aeabi_dmul+0x238>
   b6d2e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b6d32:	bfde      	ittt	le
   b6d34:	2000      	movle	r0, #0
   b6d36:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b6d3a:	bd70      	pople	{r4, r5, r6, pc}
   b6d3c:	f1c4 0400 	rsb	r4, r4, #0
   b6d40:	3c20      	subs	r4, #32
   b6d42:	da35      	bge.n	b6db0 <__aeabi_dmul+0x164>
   b6d44:	340c      	adds	r4, #12
   b6d46:	dc1b      	bgt.n	b6d80 <__aeabi_dmul+0x134>
   b6d48:	f104 0414 	add.w	r4, r4, #20
   b6d4c:	f1c4 0520 	rsb	r5, r4, #32
   b6d50:	fa00 f305 	lsl.w	r3, r0, r5
   b6d54:	fa20 f004 	lsr.w	r0, r0, r4
   b6d58:	fa01 f205 	lsl.w	r2, r1, r5
   b6d5c:	ea40 0002 	orr.w	r0, r0, r2
   b6d60:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b6d64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6d68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6d6c:	fa21 f604 	lsr.w	r6, r1, r4
   b6d70:	eb42 0106 	adc.w	r1, r2, r6
   b6d74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6d78:	bf08      	it	eq
   b6d7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6d7e:	bd70      	pop	{r4, r5, r6, pc}
   b6d80:	f1c4 040c 	rsb	r4, r4, #12
   b6d84:	f1c4 0520 	rsb	r5, r4, #32
   b6d88:	fa00 f304 	lsl.w	r3, r0, r4
   b6d8c:	fa20 f005 	lsr.w	r0, r0, r5
   b6d90:	fa01 f204 	lsl.w	r2, r1, r4
   b6d94:	ea40 0002 	orr.w	r0, r0, r2
   b6d98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6d9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6da0:	f141 0100 	adc.w	r1, r1, #0
   b6da4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6da8:	bf08      	it	eq
   b6daa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6dae:	bd70      	pop	{r4, r5, r6, pc}
   b6db0:	f1c4 0520 	rsb	r5, r4, #32
   b6db4:	fa00 f205 	lsl.w	r2, r0, r5
   b6db8:	ea4e 0e02 	orr.w	lr, lr, r2
   b6dbc:	fa20 f304 	lsr.w	r3, r0, r4
   b6dc0:	fa01 f205 	lsl.w	r2, r1, r5
   b6dc4:	ea43 0302 	orr.w	r3, r3, r2
   b6dc8:	fa21 f004 	lsr.w	r0, r1, r4
   b6dcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6dd0:	fa21 f204 	lsr.w	r2, r1, r4
   b6dd4:	ea20 0002 	bic.w	r0, r0, r2
   b6dd8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b6ddc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6de0:	bf08      	it	eq
   b6de2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6de6:	bd70      	pop	{r4, r5, r6, pc}
   b6de8:	f094 0f00 	teq	r4, #0
   b6dec:	d10f      	bne.n	b6e0e <__aeabi_dmul+0x1c2>
   b6dee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b6df2:	0040      	lsls	r0, r0, #1
   b6df4:	eb41 0101 	adc.w	r1, r1, r1
   b6df8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6dfc:	bf08      	it	eq
   b6dfe:	3c01      	subeq	r4, #1
   b6e00:	d0f7      	beq.n	b6df2 <__aeabi_dmul+0x1a6>
   b6e02:	ea41 0106 	orr.w	r1, r1, r6
   b6e06:	f095 0f00 	teq	r5, #0
   b6e0a:	bf18      	it	ne
   b6e0c:	4770      	bxne	lr
   b6e0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b6e12:	0052      	lsls	r2, r2, #1
   b6e14:	eb43 0303 	adc.w	r3, r3, r3
   b6e18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b6e1c:	bf08      	it	eq
   b6e1e:	3d01      	subeq	r5, #1
   b6e20:	d0f7      	beq.n	b6e12 <__aeabi_dmul+0x1c6>
   b6e22:	ea43 0306 	orr.w	r3, r3, r6
   b6e26:	4770      	bx	lr
   b6e28:	ea94 0f0c 	teq	r4, ip
   b6e2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6e30:	bf18      	it	ne
   b6e32:	ea95 0f0c 	teqne	r5, ip
   b6e36:	d00c      	beq.n	b6e52 <__aeabi_dmul+0x206>
   b6e38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6e3c:	bf18      	it	ne
   b6e3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6e42:	d1d1      	bne.n	b6de8 <__aeabi_dmul+0x19c>
   b6e44:	ea81 0103 	eor.w	r1, r1, r3
   b6e48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6e4c:	f04f 0000 	mov.w	r0, #0
   b6e50:	bd70      	pop	{r4, r5, r6, pc}
   b6e52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6e56:	bf06      	itte	eq
   b6e58:	4610      	moveq	r0, r2
   b6e5a:	4619      	moveq	r1, r3
   b6e5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6e60:	d019      	beq.n	b6e96 <__aeabi_dmul+0x24a>
   b6e62:	ea94 0f0c 	teq	r4, ip
   b6e66:	d102      	bne.n	b6e6e <__aeabi_dmul+0x222>
   b6e68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b6e6c:	d113      	bne.n	b6e96 <__aeabi_dmul+0x24a>
   b6e6e:	ea95 0f0c 	teq	r5, ip
   b6e72:	d105      	bne.n	b6e80 <__aeabi_dmul+0x234>
   b6e74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6e78:	bf1c      	itt	ne
   b6e7a:	4610      	movne	r0, r2
   b6e7c:	4619      	movne	r1, r3
   b6e7e:	d10a      	bne.n	b6e96 <__aeabi_dmul+0x24a>
   b6e80:	ea81 0103 	eor.w	r1, r1, r3
   b6e84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6e88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6e8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6e90:	f04f 0000 	mov.w	r0, #0
   b6e94:	bd70      	pop	{r4, r5, r6, pc}
   b6e96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6e9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b6e9e:	bd70      	pop	{r4, r5, r6, pc}

000b6ea0 <__aeabi_ddiv>:
   b6ea0:	b570      	push	{r4, r5, r6, lr}
   b6ea2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6ea6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6eaa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6eae:	bf1d      	ittte	ne
   b6eb0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6eb4:	ea94 0f0c 	teqne	r4, ip
   b6eb8:	ea95 0f0c 	teqne	r5, ip
   b6ebc:	f000 f8a7 	bleq	b700e <__aeabi_ddiv+0x16e>
   b6ec0:	eba4 0405 	sub.w	r4, r4, r5
   b6ec4:	ea81 0e03 	eor.w	lr, r1, r3
   b6ec8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6ecc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6ed0:	f000 8088 	beq.w	b6fe4 <__aeabi_ddiv+0x144>
   b6ed4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6ed8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b6edc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b6ee0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b6ee4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b6ee8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b6eec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b6ef0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b6ef4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b6ef8:	429d      	cmp	r5, r3
   b6efa:	bf08      	it	eq
   b6efc:	4296      	cmpeq	r6, r2
   b6efe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b6f02:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b6f06:	d202      	bcs.n	b6f0e <__aeabi_ddiv+0x6e>
   b6f08:	085b      	lsrs	r3, r3, #1
   b6f0a:	ea4f 0232 	mov.w	r2, r2, rrx
   b6f0e:	1ab6      	subs	r6, r6, r2
   b6f10:	eb65 0503 	sbc.w	r5, r5, r3
   b6f14:	085b      	lsrs	r3, r3, #1
   b6f16:	ea4f 0232 	mov.w	r2, r2, rrx
   b6f1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b6f1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b6f22:	ebb6 0e02 	subs.w	lr, r6, r2
   b6f26:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6f2a:	bf22      	ittt	cs
   b6f2c:	1ab6      	subcs	r6, r6, r2
   b6f2e:	4675      	movcs	r5, lr
   b6f30:	ea40 000c 	orrcs.w	r0, r0, ip
   b6f34:	085b      	lsrs	r3, r3, #1
   b6f36:	ea4f 0232 	mov.w	r2, r2, rrx
   b6f3a:	ebb6 0e02 	subs.w	lr, r6, r2
   b6f3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6f42:	bf22      	ittt	cs
   b6f44:	1ab6      	subcs	r6, r6, r2
   b6f46:	4675      	movcs	r5, lr
   b6f48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b6f4c:	085b      	lsrs	r3, r3, #1
   b6f4e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6f52:	ebb6 0e02 	subs.w	lr, r6, r2
   b6f56:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6f5a:	bf22      	ittt	cs
   b6f5c:	1ab6      	subcs	r6, r6, r2
   b6f5e:	4675      	movcs	r5, lr
   b6f60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b6f64:	085b      	lsrs	r3, r3, #1
   b6f66:	ea4f 0232 	mov.w	r2, r2, rrx
   b6f6a:	ebb6 0e02 	subs.w	lr, r6, r2
   b6f6e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6f72:	bf22      	ittt	cs
   b6f74:	1ab6      	subcs	r6, r6, r2
   b6f76:	4675      	movcs	r5, lr
   b6f78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b6f7c:	ea55 0e06 	orrs.w	lr, r5, r6
   b6f80:	d018      	beq.n	b6fb4 <__aeabi_ddiv+0x114>
   b6f82:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b6f86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b6f8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b6f8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b6f92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b6f96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b6f9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b6f9e:	d1c0      	bne.n	b6f22 <__aeabi_ddiv+0x82>
   b6fa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6fa4:	d10b      	bne.n	b6fbe <__aeabi_ddiv+0x11e>
   b6fa6:	ea41 0100 	orr.w	r1, r1, r0
   b6faa:	f04f 0000 	mov.w	r0, #0
   b6fae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b6fb2:	e7b6      	b.n	b6f22 <__aeabi_ddiv+0x82>
   b6fb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6fb8:	bf04      	itt	eq
   b6fba:	4301      	orreq	r1, r0
   b6fbc:	2000      	moveq	r0, #0
   b6fbe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6fc2:	bf88      	it	hi
   b6fc4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6fc8:	f63f aeaf 	bhi.w	b6d2a <__aeabi_dmul+0xde>
   b6fcc:	ebb5 0c03 	subs.w	ip, r5, r3
   b6fd0:	bf04      	itt	eq
   b6fd2:	ebb6 0c02 	subseq.w	ip, r6, r2
   b6fd6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6fda:	f150 0000 	adcs.w	r0, r0, #0
   b6fde:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6fe2:	bd70      	pop	{r4, r5, r6, pc}
   b6fe4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b6fe8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b6fec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b6ff0:	bfc2      	ittt	gt
   b6ff2:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6ff6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6ffa:	bd70      	popgt	{r4, r5, r6, pc}
   b6ffc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7000:	f04f 0e00 	mov.w	lr, #0
   b7004:	3c01      	subs	r4, #1
   b7006:	e690      	b.n	b6d2a <__aeabi_dmul+0xde>
   b7008:	ea45 0e06 	orr.w	lr, r5, r6
   b700c:	e68d      	b.n	b6d2a <__aeabi_dmul+0xde>
   b700e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7012:	ea94 0f0c 	teq	r4, ip
   b7016:	bf08      	it	eq
   b7018:	ea95 0f0c 	teqeq	r5, ip
   b701c:	f43f af3b 	beq.w	b6e96 <__aeabi_dmul+0x24a>
   b7020:	ea94 0f0c 	teq	r4, ip
   b7024:	d10a      	bne.n	b703c <__aeabi_ddiv+0x19c>
   b7026:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b702a:	f47f af34 	bne.w	b6e96 <__aeabi_dmul+0x24a>
   b702e:	ea95 0f0c 	teq	r5, ip
   b7032:	f47f af25 	bne.w	b6e80 <__aeabi_dmul+0x234>
   b7036:	4610      	mov	r0, r2
   b7038:	4619      	mov	r1, r3
   b703a:	e72c      	b.n	b6e96 <__aeabi_dmul+0x24a>
   b703c:	ea95 0f0c 	teq	r5, ip
   b7040:	d106      	bne.n	b7050 <__aeabi_ddiv+0x1b0>
   b7042:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7046:	f43f aefd 	beq.w	b6e44 <__aeabi_dmul+0x1f8>
   b704a:	4610      	mov	r0, r2
   b704c:	4619      	mov	r1, r3
   b704e:	e722      	b.n	b6e96 <__aeabi_dmul+0x24a>
   b7050:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7054:	bf18      	it	ne
   b7056:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b705a:	f47f aec5 	bne.w	b6de8 <__aeabi_dmul+0x19c>
   b705e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b7062:	f47f af0d 	bne.w	b6e80 <__aeabi_dmul+0x234>
   b7066:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b706a:	f47f aeeb 	bne.w	b6e44 <__aeabi_dmul+0x1f8>
   b706e:	e712      	b.n	b6e96 <__aeabi_dmul+0x24a>

000b7070 <__gedf2>:
   b7070:	f04f 3cff 	mov.w	ip, #4294967295
   b7074:	e006      	b.n	b7084 <__cmpdf2+0x4>
   b7076:	bf00      	nop

000b7078 <__ledf2>:
   b7078:	f04f 0c01 	mov.w	ip, #1
   b707c:	e002      	b.n	b7084 <__cmpdf2+0x4>
   b707e:	bf00      	nop

000b7080 <__cmpdf2>:
   b7080:	f04f 0c01 	mov.w	ip, #1
   b7084:	f84d cd04 	str.w	ip, [sp, #-4]!
   b7088:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b708c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7090:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7094:	bf18      	it	ne
   b7096:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b709a:	d01b      	beq.n	b70d4 <__cmpdf2+0x54>
   b709c:	b001      	add	sp, #4
   b709e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b70a2:	bf0c      	ite	eq
   b70a4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b70a8:	ea91 0f03 	teqne	r1, r3
   b70ac:	bf02      	ittt	eq
   b70ae:	ea90 0f02 	teqeq	r0, r2
   b70b2:	2000      	moveq	r0, #0
   b70b4:	4770      	bxeq	lr
   b70b6:	f110 0f00 	cmn.w	r0, #0
   b70ba:	ea91 0f03 	teq	r1, r3
   b70be:	bf58      	it	pl
   b70c0:	4299      	cmppl	r1, r3
   b70c2:	bf08      	it	eq
   b70c4:	4290      	cmpeq	r0, r2
   b70c6:	bf2c      	ite	cs
   b70c8:	17d8      	asrcs	r0, r3, #31
   b70ca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b70ce:	f040 0001 	orr.w	r0, r0, #1
   b70d2:	4770      	bx	lr
   b70d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b70d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b70dc:	d102      	bne.n	b70e4 <__cmpdf2+0x64>
   b70de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b70e2:	d107      	bne.n	b70f4 <__cmpdf2+0x74>
   b70e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b70e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b70ec:	d1d6      	bne.n	b709c <__cmpdf2+0x1c>
   b70ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b70f2:	d0d3      	beq.n	b709c <__cmpdf2+0x1c>
   b70f4:	f85d 0b04 	ldr.w	r0, [sp], #4
   b70f8:	4770      	bx	lr
   b70fa:	bf00      	nop

000b70fc <__aeabi_cdrcmple>:
   b70fc:	4684      	mov	ip, r0
   b70fe:	4610      	mov	r0, r2
   b7100:	4662      	mov	r2, ip
   b7102:	468c      	mov	ip, r1
   b7104:	4619      	mov	r1, r3
   b7106:	4663      	mov	r3, ip
   b7108:	e000      	b.n	b710c <__aeabi_cdcmpeq>
   b710a:	bf00      	nop

000b710c <__aeabi_cdcmpeq>:
   b710c:	b501      	push	{r0, lr}
   b710e:	f7ff ffb7 	bl	b7080 <__cmpdf2>
   b7112:	2800      	cmp	r0, #0
   b7114:	bf48      	it	mi
   b7116:	f110 0f00 	cmnmi.w	r0, #0
   b711a:	bd01      	pop	{r0, pc}

000b711c <__aeabi_dcmpeq>:
   b711c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7120:	f7ff fff4 	bl	b710c <__aeabi_cdcmpeq>
   b7124:	bf0c      	ite	eq
   b7126:	2001      	moveq	r0, #1
   b7128:	2000      	movne	r0, #0
   b712a:	f85d fb08 	ldr.w	pc, [sp], #8
   b712e:	bf00      	nop

000b7130 <__aeabi_dcmplt>:
   b7130:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7134:	f7ff ffea 	bl	b710c <__aeabi_cdcmpeq>
   b7138:	bf34      	ite	cc
   b713a:	2001      	movcc	r0, #1
   b713c:	2000      	movcs	r0, #0
   b713e:	f85d fb08 	ldr.w	pc, [sp], #8
   b7142:	bf00      	nop

000b7144 <__aeabi_dcmple>:
   b7144:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7148:	f7ff ffe0 	bl	b710c <__aeabi_cdcmpeq>
   b714c:	bf94      	ite	ls
   b714e:	2001      	movls	r0, #1
   b7150:	2000      	movhi	r0, #0
   b7152:	f85d fb08 	ldr.w	pc, [sp], #8
   b7156:	bf00      	nop

000b7158 <__aeabi_dcmpge>:
   b7158:	f84d ed08 	str.w	lr, [sp, #-8]!
   b715c:	f7ff ffce 	bl	b70fc <__aeabi_cdrcmple>
   b7160:	bf94      	ite	ls
   b7162:	2001      	movls	r0, #1
   b7164:	2000      	movhi	r0, #0
   b7166:	f85d fb08 	ldr.w	pc, [sp], #8
   b716a:	bf00      	nop

000b716c <__aeabi_dcmpgt>:
   b716c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7170:	f7ff ffc4 	bl	b70fc <__aeabi_cdrcmple>
   b7174:	bf34      	ite	cc
   b7176:	2001      	movcc	r0, #1
   b7178:	2000      	movcs	r0, #0
   b717a:	f85d fb08 	ldr.w	pc, [sp], #8
   b717e:	bf00      	nop

000b7180 <__aeabi_d2iz>:
   b7180:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b7184:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b7188:	d215      	bcs.n	b71b6 <__aeabi_d2iz+0x36>
   b718a:	d511      	bpl.n	b71b0 <__aeabi_d2iz+0x30>
   b718c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b7190:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b7194:	d912      	bls.n	b71bc <__aeabi_d2iz+0x3c>
   b7196:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b719a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b719e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b71a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b71a6:	fa23 f002 	lsr.w	r0, r3, r2
   b71aa:	bf18      	it	ne
   b71ac:	4240      	negne	r0, r0
   b71ae:	4770      	bx	lr
   b71b0:	f04f 0000 	mov.w	r0, #0
   b71b4:	4770      	bx	lr
   b71b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b71ba:	d105      	bne.n	b71c8 <__aeabi_d2iz+0x48>
   b71bc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b71c0:	bf08      	it	eq
   b71c2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b71c6:	4770      	bx	lr
   b71c8:	f04f 0000 	mov.w	r0, #0
   b71cc:	4770      	bx	lr
   b71ce:	bf00      	nop

000b71d0 <__aeabi_d2f>:
   b71d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b71d4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b71d8:	bf24      	itt	cs
   b71da:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b71de:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b71e2:	d90d      	bls.n	b7200 <__aeabi_d2f+0x30>
   b71e4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b71e8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b71ec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b71f0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b71f4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b71f8:	bf08      	it	eq
   b71fa:	f020 0001 	biceq.w	r0, r0, #1
   b71fe:	4770      	bx	lr
   b7200:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b7204:	d121      	bne.n	b724a <__aeabi_d2f+0x7a>
   b7206:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b720a:	bfbc      	itt	lt
   b720c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b7210:	4770      	bxlt	lr
   b7212:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7216:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b721a:	f1c2 0218 	rsb	r2, r2, #24
   b721e:	f1c2 0c20 	rsb	ip, r2, #32
   b7222:	fa10 f30c 	lsls.w	r3, r0, ip
   b7226:	fa20 f002 	lsr.w	r0, r0, r2
   b722a:	bf18      	it	ne
   b722c:	f040 0001 	orrne.w	r0, r0, #1
   b7230:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7234:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b7238:	fa03 fc0c 	lsl.w	ip, r3, ip
   b723c:	ea40 000c 	orr.w	r0, r0, ip
   b7240:	fa23 f302 	lsr.w	r3, r3, r2
   b7244:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b7248:	e7cc      	b.n	b71e4 <__aeabi_d2f+0x14>
   b724a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b724e:	d107      	bne.n	b7260 <__aeabi_d2f+0x90>
   b7250:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b7254:	bf1e      	ittt	ne
   b7256:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b725a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b725e:	4770      	bxne	lr
   b7260:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b7264:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b7268:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b726c:	4770      	bx	lr
   b726e:	bf00      	nop

000b7270 <atexit>:
   b7270:	2300      	movs	r3, #0
   b7272:	4601      	mov	r1, r0
   b7274:	461a      	mov	r2, r3
   b7276:	4618      	mov	r0, r3
   b7278:	f000 b84c 	b.w	b7314 <__register_exitproc>

000b727c <memcpy>:
   b727c:	440a      	add	r2, r1
   b727e:	4291      	cmp	r1, r2
   b7280:	f100 33ff 	add.w	r3, r0, #4294967295
   b7284:	d100      	bne.n	b7288 <memcpy+0xc>
   b7286:	4770      	bx	lr
   b7288:	b510      	push	{r4, lr}
   b728a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b728e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7292:	4291      	cmp	r1, r2
   b7294:	d1f9      	bne.n	b728a <memcpy+0xe>
   b7296:	bd10      	pop	{r4, pc}

000b7298 <memset>:
   b7298:	4402      	add	r2, r0
   b729a:	4603      	mov	r3, r0
   b729c:	4293      	cmp	r3, r2
   b729e:	d100      	bne.n	b72a2 <memset+0xa>
   b72a0:	4770      	bx	lr
   b72a2:	f803 1b01 	strb.w	r1, [r3], #1
   b72a6:	e7f9      	b.n	b729c <memset+0x4>

000b72a8 <srand>:
   b72a8:	b538      	push	{r3, r4, r5, lr}
   b72aa:	4b10      	ldr	r3, [pc, #64]	; (b72ec <srand+0x44>)
   b72ac:	681d      	ldr	r5, [r3, #0]
   b72ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b72b0:	4604      	mov	r4, r0
   b72b2:	b9b3      	cbnz	r3, b72e2 <srand+0x3a>
   b72b4:	2018      	movs	r0, #24
   b72b6:	f7fd fc13 	bl	b4ae0 <malloc>
   b72ba:	4602      	mov	r2, r0
   b72bc:	63a8      	str	r0, [r5, #56]	; 0x38
   b72be:	b920      	cbnz	r0, b72ca <srand+0x22>
   b72c0:	4b0b      	ldr	r3, [pc, #44]	; (b72f0 <srand+0x48>)
   b72c2:	480c      	ldr	r0, [pc, #48]	; (b72f4 <srand+0x4c>)
   b72c4:	2142      	movs	r1, #66	; 0x42
   b72c6:	f7fd fc23 	bl	b4b10 <__assert_func>
   b72ca:	490b      	ldr	r1, [pc, #44]	; (b72f8 <srand+0x50>)
   b72cc:	4b0b      	ldr	r3, [pc, #44]	; (b72fc <srand+0x54>)
   b72ce:	e9c0 1300 	strd	r1, r3, [r0]
   b72d2:	4b0b      	ldr	r3, [pc, #44]	; (b7300 <srand+0x58>)
   b72d4:	6083      	str	r3, [r0, #8]
   b72d6:	230b      	movs	r3, #11
   b72d8:	8183      	strh	r3, [r0, #12]
   b72da:	2100      	movs	r1, #0
   b72dc:	2001      	movs	r0, #1
   b72de:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b72e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b72e4:	2200      	movs	r2, #0
   b72e6:	611c      	str	r4, [r3, #16]
   b72e8:	615a      	str	r2, [r3, #20]
   b72ea:	bd38      	pop	{r3, r4, r5, pc}
   b72ec:	2003e624 	.word	0x2003e624
   b72f0:	000b7768 	.word	0x000b7768
   b72f4:	000b777f 	.word	0x000b777f
   b72f8:	abcd330e 	.word	0xabcd330e
   b72fc:	e66d1234 	.word	0xe66d1234
   b7300:	0005deec 	.word	0x0005deec

000b7304 <strlen>:
   b7304:	4603      	mov	r3, r0
   b7306:	f813 2b01 	ldrb.w	r2, [r3], #1
   b730a:	2a00      	cmp	r2, #0
   b730c:	d1fb      	bne.n	b7306 <strlen+0x2>
   b730e:	1a18      	subs	r0, r3, r0
   b7310:	3801      	subs	r0, #1
   b7312:	4770      	bx	lr

000b7314 <__register_exitproc>:
   b7314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7318:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b73d4 <__register_exitproc+0xc0>
   b731c:	4606      	mov	r6, r0
   b731e:	f8d8 0000 	ldr.w	r0, [r8]
   b7322:	461f      	mov	r7, r3
   b7324:	460d      	mov	r5, r1
   b7326:	4691      	mov	r9, r2
   b7328:	f000 f856 	bl	b73d8 <__retarget_lock_acquire_recursive>
   b732c:	4b25      	ldr	r3, [pc, #148]	; (b73c4 <__register_exitproc+0xb0>)
   b732e:	681c      	ldr	r4, [r3, #0]
   b7330:	b934      	cbnz	r4, b7340 <__register_exitproc+0x2c>
   b7332:	4c25      	ldr	r4, [pc, #148]	; (b73c8 <__register_exitproc+0xb4>)
   b7334:	601c      	str	r4, [r3, #0]
   b7336:	4b25      	ldr	r3, [pc, #148]	; (b73cc <__register_exitproc+0xb8>)
   b7338:	b113      	cbz	r3, b7340 <__register_exitproc+0x2c>
   b733a:	681b      	ldr	r3, [r3, #0]
   b733c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7340:	6863      	ldr	r3, [r4, #4]
   b7342:	2b1f      	cmp	r3, #31
   b7344:	dd07      	ble.n	b7356 <__register_exitproc+0x42>
   b7346:	f8d8 0000 	ldr.w	r0, [r8]
   b734a:	f000 f847 	bl	b73dc <__retarget_lock_release_recursive>
   b734e:	f04f 30ff 	mov.w	r0, #4294967295
   b7352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7356:	b34e      	cbz	r6, b73ac <__register_exitproc+0x98>
   b7358:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b735c:	b988      	cbnz	r0, b7382 <__register_exitproc+0x6e>
   b735e:	4b1c      	ldr	r3, [pc, #112]	; (b73d0 <__register_exitproc+0xbc>)
   b7360:	b923      	cbnz	r3, b736c <__register_exitproc+0x58>
   b7362:	f8d8 0000 	ldr.w	r0, [r8]
   b7366:	f000 f838 	bl	b73da <__retarget_lock_release>
   b736a:	e7f0      	b.n	b734e <__register_exitproc+0x3a>
   b736c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7370:	f7fd fbb6 	bl	b4ae0 <malloc>
   b7374:	2800      	cmp	r0, #0
   b7376:	d0f4      	beq.n	b7362 <__register_exitproc+0x4e>
   b7378:	2300      	movs	r3, #0
   b737a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b737e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7382:	6863      	ldr	r3, [r4, #4]
   b7384:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7388:	2201      	movs	r2, #1
   b738a:	409a      	lsls	r2, r3
   b738c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7390:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7394:	4313      	orrs	r3, r2
   b7396:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b739a:	2e02      	cmp	r6, #2
   b739c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b73a0:	bf02      	ittt	eq
   b73a2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b73a6:	4313      	orreq	r3, r2
   b73a8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b73ac:	6863      	ldr	r3, [r4, #4]
   b73ae:	f8d8 0000 	ldr.w	r0, [r8]
   b73b2:	1c5a      	adds	r2, r3, #1
   b73b4:	3302      	adds	r3, #2
   b73b6:	6062      	str	r2, [r4, #4]
   b73b8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b73bc:	f000 f80e 	bl	b73dc <__retarget_lock_release_recursive>
   b73c0:	2000      	movs	r0, #0
   b73c2:	e7c6      	b.n	b7352 <__register_exitproc+0x3e>
   b73c4:	2003e7e8 	.word	0x2003e7e8
   b73c8:	2003e75c 	.word	0x2003e75c
   b73cc:	00000000 	.word	0x00000000
   b73d0:	000b4ae1 	.word	0x000b4ae1
   b73d4:	2003e688 	.word	0x2003e688

000b73d8 <__retarget_lock_acquire_recursive>:
   b73d8:	4770      	bx	lr

000b73da <__retarget_lock_release>:
   b73da:	4770      	bx	lr

000b73dc <__retarget_lock_release_recursive>:
   b73dc:	4770      	bx	lr

000b73de <link_code_end>:
	...

000b73e0 <dynalib_user>:
   b73e0:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b73f0:	0000 0000 6157 6574 2072 656c 6576 3a6c     ....Water level:
   b7400:	2520 2069 000a 0000                          %i ....

000b7408 <CSWTCH.60>:
   b7408:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   b7418:	0050 0000                                   P...

000b741c <_ZTVN5spark13EthernetClassE>:
	...
   b7424:	4b8f 000b 4b85 000b 4b7b 000b 4b71 000b     .K...K..{K..qK..
   b7434:	4b65 000b 4b59 000b 5245 000b 524d 000b     eK..YK..ER..MR..
   b7444:	4b4d 000b 4b45 000b 4b3b 000b 4b31 000b     MK..EK..;K..1K..
   b7454:	527d 000b 7061 0070 5925 252d 2d6d 6425     }R..app.%Y-%m-%d
   b7464:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b7474:	6d69 0065                                   ime.

000b7478 <_ZTV9IPAddress>:
	...
   b7480:	4e8d 000b 4e7d 000b 4e7f 000b               .N..}N...N..

000b748c <_ZTV9USBSerial>:
	...
   b7494:	4f73 000b 4fdb 000b 4fb1 000b 4bf5 000b     sO...O...O...K..
   b74a4:	4fa3 000b 4f75 000b 4f85 000b 4fd5 000b     .O..uO...O...O..
   b74b4:	4f95 000b 4f6d 000b                         .O..mO..

000b74bc <_ZTV11USARTSerial>:
	...
   b74c4:	5075 000b 50e1 000b 50b9 000b 4bf5 000b     uP...P...P...K..
   b74d4:	5089 000b 50a5 000b 5097 000b 50b3 000b     .P...P...P...P..
   b74e4:	5077 000b 507b 000b                         wP..{P..

000b74ec <_ZTV7TwoWire>:
	...
   b74f4:	5119 000b 5163 000b 513b 000b 511b 000b     .Q..cQ..;Q...Q..
   b7504:	5143 000b 514b 000b 5153 000b 515b 000b     CQ..KQ..SQ..[Q..

000b7514 <_ZTVN5spark9WiFiClassE>:
	...
   b751c:	51e7 000b 51dd 000b 51d3 000b 5195 000b     .Q...Q...Q...Q..
   b752c:	4d01 000b 51c7 000b 5245 000b 524d 000b     .M...Q..ER..MR..
   b753c:	51bb 000b 51b3 000b 51a9 000b 519f 000b     .Q...Q...Q...Q..
   b754c:	527d 000b                                   }R..

000b7550 <_ZTVN5spark12NetworkClassE>:
	...
   b7558:	5205 000b 520f 000b 5219 000b 5223 000b     .R...R...R..#R..
   b7568:	522d 000b 5239 000b 5245 000b 524d 000b     -R..9R..ER..MR..
   b7578:	5255 000b 5261 000b 5269 000b 5273 000b     UR..aR..iR..sR..
   b7588:	527d 000b                                   }R..

000b758c <_ZSt7nothrow>:
   b758c:	0000 0000                                   ....

000b7590 <npio2_hw>:
   b7590:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
   b75a0:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
   b75b0:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
   b75c0:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
   b75d0:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
   b75e0:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
   b75f0:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
   b7600:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

000b7610 <two_over_pi>:
   b7610:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
   b7620:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
   b7630:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
   b7640:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
   b7650:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
   b7660:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
   b7670:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
   b7680:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
   b7690:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
   b76a0:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
   b76b0:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
   b76c0:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
   b76d0:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
   b76e0:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
   b76f0:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
   b7700:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
   b7710:	e27b 0060 8c6b 00c0                         {.`.k...

000b7718 <PIo2>:
   b7718:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
   b7728:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
   b7738:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
   b7748:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

000b7758 <init_jk>:
   b7758:	0002 0000 0003 0000 0004 0000 0006 0000     ................
   b7768:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   b7778:	6563 6465 6465 2f00 6e6d 2f74 6f77 6b72     ceeded./mnt/work
   b7788:	7073 6361 2f65 6f77 6b72 7073 6361 2f65     space/workspace/
   b7798:	4347 2d43 3031 702d 7069 6c65 6e69 2f65     GCC-10-pipeline/
   b77a8:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   b77b8:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   b77c8:	3231 5f34 3631 3630 3831 3630 3134 732f     124_1606180641/s
   b77d8:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   b77e8:	6c2f 6269 2f63 7473 6c64 6269 722f 6e61     /libc/stdlib/ran
   b77f8:	2e64 0063                                   d.c.

000b77fc <link_const_variable_data_end>:
   b77fc:	000b42c9 	.word	0x000b42c9
   b7800:	000b4759 	.word	0x000b4759
   b7804:	000b4b99 	.word	0x000b4b99
   b7808:	000b4bc1 	.word	0x000b4bc1
   b780c:	000b4be5 	.word	0x000b4be5
   b7810:	000b4d0d 	.word	0x000b4d0d
   b7814:	000b4d1d 	.word	0x000b4d1d
   b7818:	000b4d39 	.word	0x000b4d39
   b781c:	000b51f1 	.word	0x000b51f1
   b7820:	000b5355 	.word	0x000b5355

000b7824 <link_constructors_end>:
	...
