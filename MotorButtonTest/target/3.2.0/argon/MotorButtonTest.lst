
c:/Users/reed_/Documents/IoT/PredictiveWateringSystem/MotorButtonTest/target/3.2.0/argon/MotorButtonTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003160  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b7180  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e61c  000b7184  0001e61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000168  2003e688  2003e688  0002e688  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b71f0  000b71f0  000271f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b7218  000b7218  00027218  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f3938  00000000  00000000  0002721c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0000ff7f  00000000  00000000  0011ab54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0003084c  00000000  00000000  0012aad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000025a0  00000000  00000000  0015b31f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00009050  00000000  00000000  0015d8bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00034603  00000000  00000000  0016690f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003376b  00000000  00000000  0019af12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00123b38  00000000  00000000  001ce67d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00006c8c  00000000  00000000  002f21b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f002 fde3 	bl	b6bfc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f002 fdeb 	bl	b6c18 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e61c 	.word	0x2003e61c
   b404c:	000b7184 	.word	0x000b7184
   b4050:	2003e688 	.word	0x2003e688
   b4054:	2003e688 	.word	0x2003e688
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f000 fbcb 	bl	b47fc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b7154 	.word	0x000b7154
   b4080:	000b7178 	.word	0x000b7178

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b814 	b.w	b40b0 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f839 	bl	b4100 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f000 bb6b 	b.w	b476c <_post_loop>

000b4096 <_Znaj>:
   b4096:	f000 ba5d 	b.w	b4554 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 ba63 	b.w	b4564 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <setup>:
float     servoTime;                // Time in Seconds
int       offsetAmp;        // Positive offset of SIN wave amplitude
int       amp;              // amplitude of SIN wave


void setup() {
   b40b0:	b508      	push	{r3, lr}
  pinMode (BUTTONPIN, INPUT);
   b40b2:	2100      	movs	r1, #0
   b40b4:	2004      	movs	r0, #4
   b40b6:	f000 fe83 	bl	b4dc0 <pinMode>
  pinMode (MOTORPIN, OUTPUT);
   b40ba:	2101      	movs	r1, #1
   b40bc:	2010      	movs	r0, #16
   b40be:	f000 fe7f 	bl	b4dc0 <pinMode>

  period            = 5000.0;       // Set Flash rate to 5000 milliseconds
   b40c2:	4b09      	ldr	r3, [pc, #36]	; (b40e8 <setup+0x38>)
   b40c4:	4a09      	ldr	r2, [pc, #36]	; (b40ec <setup+0x3c>)
   b40c6:	601a      	str	r2, [r3, #0]
  amp               = 127;           // Set amplitude to 90
   b40c8:	4a09      	ldr	r2, [pc, #36]	; (b40f0 <setup+0x40>)
   b40ca:	237f      	movs	r3, #127	; 0x7f
   b40cc:	6013      	str	r3, [r2, #0]
  offsetAmp         = 127;           // Set amplitude offset to 90 for full range
   b40ce:	4a09      	ldr	r2, [pc, #36]	; (b40f4 <setup+0x44>)
   b40d0:	6013      	str	r3, [r2, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b40d2:	f000 f8eb 	bl	b42ac <HAL_Timer_Get_Milli_Seconds>
  endLoopTime       = millis();     // get current time and convert into seconds
   b40d6:	ee07 0a90 	vmov	s15, r0
   b40da:	4b07      	ldr	r3, [pc, #28]	; (b40f8 <setup+0x48>)
   b40dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b40e0:	edc3 7a00 	vstr	s15, [r3]


}
   b40e4:	bd08      	pop	{r3, pc}
   b40e6:	bf00      	nop
   b40e8:	2003e6b0 	.word	0x2003e6b0
   b40ec:	459c4000 	.word	0x459c4000
   b40f0:	2003e694 	.word	0x2003e694
   b40f4:	2003e6ac 	.word	0x2003e6ac
   b40f8:	2003e6a8 	.word	0x2003e6a8
   b40fc:	00000000 	.word	0x00000000

000b4100 <loop>:

void loop() {
   b4100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4102:	f000 f8d3 	bl	b42ac <HAL_Timer_Get_Milli_Seconds>
  currentTime = millis();                                      // get current time and convert into seconds
  deltaTime = currentTime - endLoopTime;
   b4106:	4e32      	ldr	r6, [pc, #200]	; (b41d0 <loop+0xd0>)
  currentTime = millis();                                      // get current time and convert into seconds
   b4108:	4f32      	ldr	r7, [pc, #200]	; (b41d4 <loop+0xd4>)
  deltaTime = currentTime - endLoopTime;
   b410a:	ed96 7a00 	vldr	s14, [r6]
   b410e:	4c32      	ldr	r4, [pc, #200]	; (b41d8 <loop+0xd8>)
  currentTime = millis();                                      // get current time and convert into seconds
   b4110:	ee07 0a90 	vmov	s15, r0
   b4114:	eef8 7a67 	vcvt.f32.u32	s15, s15

  button = digitalRead(BUTTONPIN);
   b4118:	2004      	movs	r0, #4
  currentTime = millis();                                      // get current time and convert into seconds
   b411a:	edc7 7a00 	vstr	s15, [r7]
  deltaTime = currentTime - endLoopTime;
   b411e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   b4122:	edc4 7a00 	vstr	s15, [r4]
  button = digitalRead(BUTTONPIN);
   b4126:	f000 fe75 	bl	b4e14 <digitalRead>
   b412a:	4b2c      	ldr	r3, [pc, #176]	; (b41dc <loop+0xdc>)

  if (button == 1) {
   b412c:	2801      	cmp	r0, #1
  button = digitalRead(BUTTONPIN);
   b412e:	6018      	str	r0, [r3, #0]
  if (button == 1) {
   b4130:	d142      	bne.n	b41b8 <loop+0xb8>
    servoTime += deltaTime;
   b4132:	4b2b      	ldr	r3, [pc, #172]	; (b41e0 <loop+0xe0>)
   b4134:	ed94 7a00 	vldr	s14, [r4]
   b4138:	edd3 7a00 	vldr	s15, [r3]
   b413c:	ee77 7a87 	vadd.f32	s15, s15, s14
   b4140:	edc3 7a00 	vstr	s15, [r3]
    angle = amp * sin(2*M_PI*servoTime/period) + offsetAmp;  //  determine the current value of angle
   b4144:	ee17 0a90 	vmov	r0, s15
   b4148:	f002 fa38 	bl	b65bc <__aeabi_f2d>
   b414c:	a31e      	add	r3, pc, #120	; (adr r3, b41c8 <loop+0xc8>)
   b414e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4152:	f002 fa8b 	bl	b666c <__aeabi_dmul>
   b4156:	4b23      	ldr	r3, [pc, #140]	; (b41e4 <loop+0xe4>)
   b4158:	4604      	mov	r4, r0
   b415a:	6818      	ldr	r0, [r3, #0]
   b415c:	460d      	mov	r5, r1
   b415e:	f002 fa2d 	bl	b65bc <__aeabi_f2d>
   b4162:	4602      	mov	r2, r0
   b4164:	460b      	mov	r3, r1
   b4166:	4620      	mov	r0, r4
   b4168:	4629      	mov	r1, r5
   b416a:	f002 fba9 	bl	b68c0 <__aeabi_ddiv>
   b416e:	ec41 0b10 	vmov	d0, r0, r1
   b4172:	f000 ff05 	bl	b4f80 <sin>
   b4176:	4b1c      	ldr	r3, [pc, #112]	; (b41e8 <loop+0xe8>)
   b4178:	ec55 4b10 	vmov	r4, r5, d0
   b417c:	6818      	ldr	r0, [r3, #0]
   b417e:	f002 fa0b 	bl	b6598 <__aeabi_i2d>
   b4182:	4622      	mov	r2, r4
   b4184:	462b      	mov	r3, r5
   b4186:	f002 fa71 	bl	b666c <__aeabi_dmul>
   b418a:	4b18      	ldr	r3, [pc, #96]	; (b41ec <loop+0xec>)
   b418c:	4604      	mov	r4, r0
   b418e:	6818      	ldr	r0, [r3, #0]
   b4190:	460d      	mov	r5, r1
   b4192:	f002 fa01 	bl	b6598 <__aeabi_i2d>
   b4196:	460b      	mov	r3, r1
   b4198:	4602      	mov	r2, r0
   b419a:	4629      	mov	r1, r5
   b419c:	4620      	mov	r0, r4
   b419e:	f002 f8af 	bl	b6300 <__adddf3>
   b41a2:	f002 fcfd 	bl	b6ba0 <__aeabi_d2iz>
   b41a6:	4b12      	ldr	r3, [pc, #72]	; (b41f0 <loop+0xf0>)
   b41a8:	4601      	mov	r1, r0
   b41aa:	6018      	str	r0, [r3, #0]
    analogWrite(MOTORPIN, angle);
   b41ac:	2010      	movs	r0, #16
   b41ae:	f000 fe44 	bl	b4e3a <_Z11analogWritetm>
  } else {
    digitalWrite(MOTORPIN, LOW);
  }
 endLoopTime = currentTime;
   b41b2:	683b      	ldr	r3, [r7, #0]
   b41b4:	6033      	str	r3, [r6, #0]

   b41b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    digitalWrite(MOTORPIN, LOW);
   b41b8:	2100      	movs	r1, #0
   b41ba:	2010      	movs	r0, #16
   b41bc:	f000 fe11 	bl	b4de2 <digitalWrite>
   b41c0:	e7f7      	b.n	b41b2 <loop+0xb2>
   b41c2:	bf00      	nop
   b41c4:	f3af 8000 	nop.w
   b41c8:	54442d18 	.word	0x54442d18
   b41cc:	401921fb 	.word	0x401921fb
   b41d0:	2003e6a8 	.word	0x2003e6a8
   b41d4:	2003e6a0 	.word	0x2003e6a0
   b41d8:	2003e6a4 	.word	0x2003e6a4
   b41dc:	2003e69c 	.word	0x2003e69c
   b41e0:	2003e6b4 	.word	0x2003e6b4
   b41e4:	2003e6b0 	.word	0x2003e6b0
   b41e8:	2003e694 	.word	0x2003e694
   b41ec:	2003e6ac 	.word	0x2003e6ac
   b41f0:	2003e698 	.word	0x2003e698

000b41f4 <_GLOBAL__sub_I_SystemMode>:

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b41f4:	4b04      	ldr	r3, [pc, #16]	; (b4208 <_GLOBAL__sub_I_SystemMode+0x14>)
   b41f6:	2200      	movs	r2, #0
   b41f8:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b41fc:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4200:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4202:	2002      	movs	r0, #2
   b4204:	f000 b922 	b.w	b444c <set_system_mode>
   b4208:	2003e688 	.word	0x2003e688

000b420c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b420c:	b508      	push	{r3, lr}
   b420e:	4b02      	ldr	r3, [pc, #8]	; (b4218 <netdb_freeaddrinfo+0xc>)
   b4210:	681b      	ldr	r3, [r3, #0]
   b4212:	689b      	ldr	r3, [r3, #8]
   b4214:	9301      	str	r3, [sp, #4]
   b4216:	bd08      	pop	{r3, pc}
   b4218:	00030268 	.word	0x00030268

000b421c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b421c:	b508      	push	{r3, lr}
   b421e:	4b02      	ldr	r3, [pc, #8]	; (b4228 <netdb_getaddrinfo+0xc>)
   b4220:	681b      	ldr	r3, [r3, #0]
   b4222:	68db      	ldr	r3, [r3, #12]
   b4224:	9301      	str	r3, [sp, #4]
   b4226:	bd08      	pop	{r3, pc}
   b4228:	00030268 	.word	0x00030268

000b422c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b422c:	b508      	push	{r3, lr}
   b422e:	4b02      	ldr	r3, [pc, #8]	; (b4238 <HAL_Validate_Pin_Function+0xc>)
   b4230:	681b      	ldr	r3, [r3, #0]
   b4232:	685b      	ldr	r3, [r3, #4]
   b4234:	9301      	str	r3, [sp, #4]
   b4236:	bd08      	pop	{r3, pc}
   b4238:	0003022c 	.word	0x0003022c

000b423c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b423c:	b508      	push	{r3, lr}
   b423e:	4b02      	ldr	r3, [pc, #8]	; (b4248 <HAL_Pin_Mode+0xc>)
   b4240:	681b      	ldr	r3, [r3, #0]
   b4242:	689b      	ldr	r3, [r3, #8]
   b4244:	9301      	str	r3, [sp, #4]
   b4246:	bd08      	pop	{r3, pc}
   b4248:	0003022c 	.word	0x0003022c

000b424c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b424c:	b508      	push	{r3, lr}
   b424e:	4b02      	ldr	r3, [pc, #8]	; (b4258 <HAL_Get_Pin_Mode+0xc>)
   b4250:	681b      	ldr	r3, [r3, #0]
   b4252:	68db      	ldr	r3, [r3, #12]
   b4254:	9301      	str	r3, [sp, #4]
   b4256:	bd08      	pop	{r3, pc}
   b4258:	0003022c 	.word	0x0003022c

000b425c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b425c:	b508      	push	{r3, lr}
   b425e:	4b02      	ldr	r3, [pc, #8]	; (b4268 <HAL_GPIO_Write+0xc>)
   b4260:	681b      	ldr	r3, [r3, #0]
   b4262:	691b      	ldr	r3, [r3, #16]
   b4264:	9301      	str	r3, [sp, #4]
   b4266:	bd08      	pop	{r3, pc}
   b4268:	0003022c 	.word	0x0003022c

000b426c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b426c:	b508      	push	{r3, lr}
   b426e:	4b02      	ldr	r3, [pc, #8]	; (b4278 <HAL_GPIO_Read+0xc>)
   b4270:	681b      	ldr	r3, [r3, #0]
   b4272:	695b      	ldr	r3, [r3, #20]
   b4274:	9301      	str	r3, [sp, #4]
   b4276:	bd08      	pop	{r3, pc}
   b4278:	0003022c 	.word	0x0003022c

000b427c <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   b427c:	b508      	push	{r3, lr}
   b427e:	4b02      	ldr	r3, [pc, #8]	; (b4288 <HAL_DAC_Write+0xc>)
   b4280:	681b      	ldr	r3, [r3, #0]
   b4282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4284:	9301      	str	r3, [sp, #4]
   b4286:	bd08      	pop	{r3, pc}
   b4288:	0003022c 	.word	0x0003022c

000b428c <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b428c:	b508      	push	{r3, lr}
   b428e:	4b02      	ldr	r3, [pc, #8]	; (b4298 <hal_pwm_write_ext+0xc>)
   b4290:	681b      	ldr	r3, [r3, #0]
   b4292:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b4294:	9301      	str	r3, [sp, #4]
   b4296:	bd08      	pop	{r3, pc}
   b4298:	0003022c 	.word	0x0003022c

000b429c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b429c:	b508      	push	{r3, lr}
   b429e:	4b02      	ldr	r3, [pc, #8]	; (b42a8 <HAL_RNG_GetRandomNumber+0xc>)
   b42a0:	681b      	ldr	r3, [r3, #0]
   b42a2:	685b      	ldr	r3, [r3, #4]
   b42a4:	9301      	str	r3, [sp, #4]
   b42a6:	bd08      	pop	{r3, pc}
   b42a8:	00030218 	.word	0x00030218

000b42ac <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b42ac:	b508      	push	{r3, lr}
   b42ae:	4b02      	ldr	r3, [pc, #8]	; (b42b8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b42b0:	681b      	ldr	r3, [r3, #0]
   b42b2:	695b      	ldr	r3, [r3, #20]
   b42b4:	9301      	str	r3, [sp, #4]
   b42b6:	bd08      	pop	{r3, pc}
   b42b8:	00030218 	.word	0x00030218

000b42bc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b42bc:	b508      	push	{r3, lr}
   b42be:	4b02      	ldr	r3, [pc, #8]	; (b42c8 <os_mutex_recursive_create+0xc>)
   b42c0:	681b      	ldr	r3, [r3, #0]
   b42c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b42c4:	9301      	str	r3, [sp, #4]
   b42c6:	bd08      	pop	{r3, pc}
   b42c8:	00030248 	.word	0x00030248

000b42cc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b42cc:	b508      	push	{r3, lr}
   b42ce:	4b02      	ldr	r3, [pc, #8]	; (b42d8 <inet_inet_ntop+0xc>)
   b42d0:	681b      	ldr	r3, [r3, #0]
   b42d2:	695b      	ldr	r3, [r3, #20]
   b42d4:	9301      	str	r3, [sp, #4]
   b42d6:	bd08      	pop	{r3, pc}
   b42d8:	00030264 	.word	0x00030264

000b42dc <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b42dc:	b508      	push	{r3, lr}
   b42de:	4b02      	ldr	r3, [pc, #8]	; (b42e8 <hal_usart_write+0xc>)
   b42e0:	681b      	ldr	r3, [r3, #0]
   b42e2:	68db      	ldr	r3, [r3, #12]
   b42e4:	9301      	str	r3, [sp, #4]
   b42e6:	bd08      	pop	{r3, pc}
   b42e8:	0003023c 	.word	0x0003023c

000b42ec <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b42ec:	b508      	push	{r3, lr}
   b42ee:	4b02      	ldr	r3, [pc, #8]	; (b42f8 <hal_usart_available+0xc>)
   b42f0:	681b      	ldr	r3, [r3, #0]
   b42f2:	691b      	ldr	r3, [r3, #16]
   b42f4:	9301      	str	r3, [sp, #4]
   b42f6:	bd08      	pop	{r3, pc}
   b42f8:	0003023c 	.word	0x0003023c

000b42fc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b42fc:	b508      	push	{r3, lr}
   b42fe:	4b02      	ldr	r3, [pc, #8]	; (b4308 <hal_usart_read+0xc>)
   b4300:	681b      	ldr	r3, [r3, #0]
   b4302:	695b      	ldr	r3, [r3, #20]
   b4304:	9301      	str	r3, [sp, #4]
   b4306:	bd08      	pop	{r3, pc}
   b4308:	0003023c 	.word	0x0003023c

000b430c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b430c:	b508      	push	{r3, lr}
   b430e:	4b02      	ldr	r3, [pc, #8]	; (b4318 <hal_usart_peek+0xc>)
   b4310:	681b      	ldr	r3, [r3, #0]
   b4312:	699b      	ldr	r3, [r3, #24]
   b4314:	9301      	str	r3, [sp, #4]
   b4316:	bd08      	pop	{r3, pc}
   b4318:	0003023c 	.word	0x0003023c

000b431c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b431c:	b508      	push	{r3, lr}
   b431e:	4b02      	ldr	r3, [pc, #8]	; (b4328 <hal_usart_flush+0xc>)
   b4320:	681b      	ldr	r3, [r3, #0]
   b4322:	69db      	ldr	r3, [r3, #28]
   b4324:	9301      	str	r3, [sp, #4]
   b4326:	bd08      	pop	{r3, pc}
   b4328:	0003023c 	.word	0x0003023c

000b432c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b432c:	b508      	push	{r3, lr}
   b432e:	4b02      	ldr	r3, [pc, #8]	; (b4338 <hal_usart_is_enabled+0xc>)
   b4330:	681b      	ldr	r3, [r3, #0]
   b4332:	6a1b      	ldr	r3, [r3, #32]
   b4334:	9301      	str	r3, [sp, #4]
   b4336:	bd08      	pop	{r3, pc}
   b4338:	0003023c 	.word	0x0003023c

000b433c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b433c:	b508      	push	{r3, lr}
   b433e:	4b02      	ldr	r3, [pc, #8]	; (b4348 <hal_usart_available_data_for_write+0xc>)
   b4340:	681b      	ldr	r3, [r3, #0]
   b4342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4344:	9301      	str	r3, [sp, #4]
   b4346:	bd08      	pop	{r3, pc}
   b4348:	0003023c 	.word	0x0003023c

000b434c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b434c:	b508      	push	{r3, lr}
   b434e:	4b02      	ldr	r3, [pc, #8]	; (b4358 <hal_usart_init_ex+0xc>)
   b4350:	681b      	ldr	r3, [r3, #0]
   b4352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4354:	9301      	str	r3, [sp, #4]
   b4356:	bd08      	pop	{r3, pc}
   b4358:	0003023c 	.word	0x0003023c

000b435c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b435c:	b508      	push	{r3, lr}
   b435e:	4b02      	ldr	r3, [pc, #8]	; (b4368 <hal_i2c_write+0xc>)
   b4360:	681b      	ldr	r3, [r3, #0]
   b4362:	6a1b      	ldr	r3, [r3, #32]
   b4364:	9301      	str	r3, [sp, #4]
   b4366:	bd08      	pop	{r3, pc}
   b4368:	00030228 	.word	0x00030228

000b436c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b436c:	b508      	push	{r3, lr}
   b436e:	4b02      	ldr	r3, [pc, #8]	; (b4378 <hal_i2c_available+0xc>)
   b4370:	681b      	ldr	r3, [r3, #0]
   b4372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4374:	9301      	str	r3, [sp, #4]
   b4376:	bd08      	pop	{r3, pc}
   b4378:	00030228 	.word	0x00030228

000b437c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b437c:	b508      	push	{r3, lr}
   b437e:	4b02      	ldr	r3, [pc, #8]	; (b4388 <hal_i2c_read+0xc>)
   b4380:	681b      	ldr	r3, [r3, #0]
   b4382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4384:	9301      	str	r3, [sp, #4]
   b4386:	bd08      	pop	{r3, pc}
   b4388:	00030228 	.word	0x00030228

000b438c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b438c:	b508      	push	{r3, lr}
   b438e:	4b02      	ldr	r3, [pc, #8]	; (b4398 <hal_i2c_peek+0xc>)
   b4390:	681b      	ldr	r3, [r3, #0]
   b4392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4394:	9301      	str	r3, [sp, #4]
   b4396:	bd08      	pop	{r3, pc}
   b4398:	00030228 	.word	0x00030228

000b439c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b439c:	b508      	push	{r3, lr}
   b439e:	4b02      	ldr	r3, [pc, #8]	; (b43a8 <hal_i2c_flush+0xc>)
   b43a0:	681b      	ldr	r3, [r3, #0]
   b43a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b43a4:	9301      	str	r3, [sp, #4]
   b43a6:	bd08      	pop	{r3, pc}
   b43a8:	00030228 	.word	0x00030228

000b43ac <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b43ac:	b508      	push	{r3, lr}
   b43ae:	4b02      	ldr	r3, [pc, #8]	; (b43b8 <hal_i2c_is_enabled+0xc>)
   b43b0:	681b      	ldr	r3, [r3, #0]
   b43b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b43b4:	9301      	str	r3, [sp, #4]
   b43b6:	bd08      	pop	{r3, pc}
   b43b8:	00030228 	.word	0x00030228

000b43bc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b43bc:	b508      	push	{r3, lr}
   b43be:	4b02      	ldr	r3, [pc, #8]	; (b43c8 <hal_i2c_init+0xc>)
   b43c0:	681b      	ldr	r3, [r3, #0]
   b43c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b43c4:	9301      	str	r3, [sp, #4]
   b43c6:	bd08      	pop	{r3, pc}
   b43c8:	00030228 	.word	0x00030228

000b43cc <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b43cc:	b508      	push	{r3, lr}
   b43ce:	4b02      	ldr	r3, [pc, #8]	; (b43d8 <hal_spi_init+0xc>)
   b43d0:	681b      	ldr	r3, [r3, #0]
   b43d2:	69db      	ldr	r3, [r3, #28]
   b43d4:	9301      	str	r3, [sp, #4]
   b43d6:	bd08      	pop	{r3, pc}
   b43d8:	00030230 	.word	0x00030230

000b43dc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b43dc:	b508      	push	{r3, lr}
   b43de:	4b02      	ldr	r3, [pc, #8]	; (b43e8 <hal_spi_is_enabled+0xc>)
   b43e0:	681b      	ldr	r3, [r3, #0]
   b43e2:	6a1b      	ldr	r3, [r3, #32]
   b43e4:	9301      	str	r3, [sp, #4]
   b43e6:	bd08      	pop	{r3, pc}
   b43e8:	00030230 	.word	0x00030230

000b43ec <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b43ec:	b508      	push	{r3, lr}
   b43ee:	4b02      	ldr	r3, [pc, #8]	; (b43f8 <HAL_USB_USART_Init+0xc>)
   b43f0:	681b      	ldr	r3, [r3, #0]
   b43f2:	681b      	ldr	r3, [r3, #0]
   b43f4:	9301      	str	r3, [sp, #4]
   b43f6:	bd08      	pop	{r3, pc}
   b43f8:	0003024c 	.word	0x0003024c

000b43fc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b43fc:	b508      	push	{r3, lr}
   b43fe:	4b02      	ldr	r3, [pc, #8]	; (b4408 <HAL_USB_USART_Available_Data+0xc>)
   b4400:	681b      	ldr	r3, [r3, #0]
   b4402:	691b      	ldr	r3, [r3, #16]
   b4404:	9301      	str	r3, [sp, #4]
   b4406:	bd08      	pop	{r3, pc}
   b4408:	0003024c 	.word	0x0003024c

000b440c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b440c:	b508      	push	{r3, lr}
   b440e:	4b02      	ldr	r3, [pc, #8]	; (b4418 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4410:	681b      	ldr	r3, [r3, #0]
   b4412:	695b      	ldr	r3, [r3, #20]
   b4414:	9301      	str	r3, [sp, #4]
   b4416:	bd08      	pop	{r3, pc}
   b4418:	0003024c 	.word	0x0003024c

000b441c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b441c:	b508      	push	{r3, lr}
   b441e:	4b02      	ldr	r3, [pc, #8]	; (b4428 <HAL_USB_USART_Receive_Data+0xc>)
   b4420:	681b      	ldr	r3, [r3, #0]
   b4422:	699b      	ldr	r3, [r3, #24]
   b4424:	9301      	str	r3, [sp, #4]
   b4426:	bd08      	pop	{r3, pc}
   b4428:	0003024c 	.word	0x0003024c

000b442c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b442c:	b508      	push	{r3, lr}
   b442e:	4b02      	ldr	r3, [pc, #8]	; (b4438 <HAL_USB_USART_Send_Data+0xc>)
   b4430:	681b      	ldr	r3, [r3, #0]
   b4432:	69db      	ldr	r3, [r3, #28]
   b4434:	9301      	str	r3, [sp, #4]
   b4436:	bd08      	pop	{r3, pc}
   b4438:	0003024c 	.word	0x0003024c

000b443c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b443c:	b508      	push	{r3, lr}
   b443e:	4b02      	ldr	r3, [pc, #8]	; (b4448 <HAL_USB_USART_Flush_Data+0xc>)
   b4440:	681b      	ldr	r3, [r3, #0]
   b4442:	6a1b      	ldr	r3, [r3, #32]
   b4444:	9301      	str	r3, [sp, #4]
   b4446:	bd08      	pop	{r3, pc}
   b4448:	0003024c 	.word	0x0003024c

000b444c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b444c:	b508      	push	{r3, lr}
   b444e:	4b02      	ldr	r3, [pc, #8]	; (b4458 <set_system_mode+0xc>)
   b4450:	681b      	ldr	r3, [r3, #0]
   b4452:	685b      	ldr	r3, [r3, #4]
   b4454:	9301      	str	r3, [sp, #4]
   b4456:	bd08      	pop	{r3, pc}
   b4458:	00030220 	.word	0x00030220

000b445c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b445c:	b508      	push	{r3, lr}
   b445e:	4b03      	ldr	r3, [pc, #12]	; (b446c <system_ctrl_set_app_request_handler+0x10>)
   b4460:	681b      	ldr	r3, [r3, #0]
   b4462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4466:	9301      	str	r3, [sp, #4]
   b4468:	bd08      	pop	{r3, pc}
   b446a:	0000      	.short	0x0000
   b446c:	00030220 	.word	0x00030220

000b4470 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4470:	b508      	push	{r3, lr}
   b4472:	4b03      	ldr	r3, [pc, #12]	; (b4480 <system_ctrl_set_result+0x10>)
   b4474:	681b      	ldr	r3, [r3, #0]
   b4476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b447a:	9301      	str	r3, [sp, #4]
   b447c:	bd08      	pop	{r3, pc}
   b447e:	0000      	.short	0x0000
   b4480:	00030220 	.word	0x00030220

000b4484 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4484:	b508      	push	{r3, lr}
   b4486:	4b02      	ldr	r3, [pc, #8]	; (b4490 <network_connect+0xc>)
   b4488:	681b      	ldr	r3, [r3, #0]
   b448a:	685b      	ldr	r3, [r3, #4]
   b448c:	9301      	str	r3, [sp, #4]
   b448e:	bd08      	pop	{r3, pc}
   b4490:	00030240 	.word	0x00030240

000b4494 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4494:	b508      	push	{r3, lr}
   b4496:	4b02      	ldr	r3, [pc, #8]	; (b44a0 <network_connecting+0xc>)
   b4498:	681b      	ldr	r3, [r3, #0]
   b449a:	689b      	ldr	r3, [r3, #8]
   b449c:	9301      	str	r3, [sp, #4]
   b449e:	bd08      	pop	{r3, pc}
   b44a0:	00030240 	.word	0x00030240

000b44a4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b44a4:	b508      	push	{r3, lr}
   b44a6:	4b02      	ldr	r3, [pc, #8]	; (b44b0 <network_disconnect+0xc>)
   b44a8:	681b      	ldr	r3, [r3, #0]
   b44aa:	68db      	ldr	r3, [r3, #12]
   b44ac:	9301      	str	r3, [sp, #4]
   b44ae:	bd08      	pop	{r3, pc}
   b44b0:	00030240 	.word	0x00030240

000b44b4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b44b4:	b508      	push	{r3, lr}
   b44b6:	4b02      	ldr	r3, [pc, #8]	; (b44c0 <network_ready+0xc>)
   b44b8:	681b      	ldr	r3, [r3, #0]
   b44ba:	691b      	ldr	r3, [r3, #16]
   b44bc:	9301      	str	r3, [sp, #4]
   b44be:	bd08      	pop	{r3, pc}
   b44c0:	00030240 	.word	0x00030240

000b44c4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b44c4:	b508      	push	{r3, lr}
   b44c6:	4b02      	ldr	r3, [pc, #8]	; (b44d0 <network_on+0xc>)
   b44c8:	681b      	ldr	r3, [r3, #0]
   b44ca:	695b      	ldr	r3, [r3, #20]
   b44cc:	9301      	str	r3, [sp, #4]
   b44ce:	bd08      	pop	{r3, pc}
   b44d0:	00030240 	.word	0x00030240

000b44d4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b44d4:	b508      	push	{r3, lr}
   b44d6:	4b02      	ldr	r3, [pc, #8]	; (b44e0 <network_off+0xc>)
   b44d8:	681b      	ldr	r3, [r3, #0]
   b44da:	699b      	ldr	r3, [r3, #24]
   b44dc:	9301      	str	r3, [sp, #4]
   b44de:	bd08      	pop	{r3, pc}
   b44e0:	00030240 	.word	0x00030240

000b44e4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b44e4:	b508      	push	{r3, lr}
   b44e6:	4b02      	ldr	r3, [pc, #8]	; (b44f0 <network_listen+0xc>)
   b44e8:	681b      	ldr	r3, [r3, #0]
   b44ea:	69db      	ldr	r3, [r3, #28]
   b44ec:	9301      	str	r3, [sp, #4]
   b44ee:	bd08      	pop	{r3, pc}
   b44f0:	00030240 	.word	0x00030240

000b44f4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b44f4:	b508      	push	{r3, lr}
   b44f6:	4b02      	ldr	r3, [pc, #8]	; (b4500 <network_listening+0xc>)
   b44f8:	681b      	ldr	r3, [r3, #0]
   b44fa:	6a1b      	ldr	r3, [r3, #32]
   b44fc:	9301      	str	r3, [sp, #4]
   b44fe:	bd08      	pop	{r3, pc}
   b4500:	00030240 	.word	0x00030240

000b4504 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4504:	b508      	push	{r3, lr}
   b4506:	4b02      	ldr	r3, [pc, #8]	; (b4510 <network_set_listen_timeout+0xc>)
   b4508:	681b      	ldr	r3, [r3, #0]
   b450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b450c:	9301      	str	r3, [sp, #4]
   b450e:	bd08      	pop	{r3, pc}
   b4510:	00030240 	.word	0x00030240

000b4514 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4514:	b508      	push	{r3, lr}
   b4516:	4b02      	ldr	r3, [pc, #8]	; (b4520 <network_get_listen_timeout+0xc>)
   b4518:	681b      	ldr	r3, [r3, #0]
   b451a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b451c:	9301      	str	r3, [sp, #4]
   b451e:	bd08      	pop	{r3, pc}
   b4520:	00030240 	.word	0x00030240

000b4524 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4524:	b508      	push	{r3, lr}
   b4526:	4b02      	ldr	r3, [pc, #8]	; (b4530 <network_is_on+0xc>)
   b4528:	681b      	ldr	r3, [r3, #0]
   b452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b452c:	9301      	str	r3, [sp, #4]
   b452e:	bd08      	pop	{r3, pc}
   b4530:	00030240 	.word	0x00030240

000b4534 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4534:	b508      	push	{r3, lr}
   b4536:	4b02      	ldr	r3, [pc, #8]	; (b4540 <network_is_off+0xc>)
   b4538:	681b      	ldr	r3, [r3, #0]
   b453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b453c:	9301      	str	r3, [sp, #4]
   b453e:	bd08      	pop	{r3, pc}
   b4540:	00030240 	.word	0x00030240

000b4544 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4544:	b508      	push	{r3, lr}
   b4546:	4b02      	ldr	r3, [pc, #8]	; (b4550 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4548:	681b      	ldr	r3, [r3, #0]
   b454a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b454c:	9301      	str	r3, [sp, #4]
   b454e:	bd08      	pop	{r3, pc}
   b4550:	00030244 	.word	0x00030244

000b4554 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4554:	b508      	push	{r3, lr}
   b4556:	4b02      	ldr	r3, [pc, #8]	; (b4560 <malloc+0xc>)
   b4558:	681b      	ldr	r3, [r3, #0]
   b455a:	681b      	ldr	r3, [r3, #0]
   b455c:	9301      	str	r3, [sp, #4]
   b455e:	bd08      	pop	{r3, pc}
   b4560:	0003021c 	.word	0x0003021c

000b4564 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4564:	b508      	push	{r3, lr}
   b4566:	4b02      	ldr	r3, [pc, #8]	; (b4570 <free+0xc>)
   b4568:	681b      	ldr	r3, [r3, #0]
   b456a:	685b      	ldr	r3, [r3, #4]
   b456c:	9301      	str	r3, [sp, #4]
   b456e:	bd08      	pop	{r3, pc}
   b4570:	0003021c 	.word	0x0003021c

000b4574 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4574:	b508      	push	{r3, lr}
   b4576:	4b02      	ldr	r3, [pc, #8]	; (b4580 <__assert_func+0xc>)
   b4578:	681b      	ldr	r3, [r3, #0]
   b457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b457c:	9301      	str	r3, [sp, #4]
   b457e:	bd08      	pop	{r3, pc}
   b4580:	0003021c 	.word	0x0003021c

000b4584 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4584:	b508      	push	{r3, lr}
   b4586:	4b02      	ldr	r3, [pc, #8]	; (b4590 <newlib_impure_ptr_callback+0xc>)
   b4588:	681b      	ldr	r3, [r3, #0]
   b458a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b458c:	9301      	str	r3, [sp, #4]
   b458e:	bd08      	pop	{r3, pc}
   b4590:	0003021c 	.word	0x0003021c

000b4594 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4594:	2200      	movs	r2, #0
   b4596:	6840      	ldr	r0, [r0, #4]
   b4598:	4611      	mov	r1, r2
   b459a:	f7ff bfab 	b.w	b44f4 <network_listening>

000b459e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b459e:	2200      	movs	r2, #0
   b45a0:	6840      	ldr	r0, [r0, #4]
   b45a2:	4611      	mov	r1, r2
   b45a4:	f7ff bfb6 	b.w	b4514 <network_get_listen_timeout>

000b45a8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b45a8:	6840      	ldr	r0, [r0, #4]
   b45aa:	2200      	movs	r2, #0
   b45ac:	f7ff bfaa 	b.w	b4504 <network_set_listen_timeout>

000b45b0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b45b0:	6840      	ldr	r0, [r0, #4]
   b45b2:	2200      	movs	r2, #0
   b45b4:	f081 0101 	eor.w	r1, r1, #1
   b45b8:	f7ff bf94 	b.w	b44e4 <network_listen>

000b45bc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b45bc:	2300      	movs	r3, #0
   b45be:	6840      	ldr	r0, [r0, #4]
   b45c0:	461a      	mov	r2, r3
   b45c2:	4619      	mov	r1, r3
   b45c4:	f7ff bf86 	b.w	b44d4 <network_off>

000b45c8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b45c8:	2300      	movs	r3, #0
   b45ca:	6840      	ldr	r0, [r0, #4]
   b45cc:	461a      	mov	r2, r3
   b45ce:	4619      	mov	r1, r3
   b45d0:	f7ff bf78 	b.w	b44c4 <network_on>

000b45d4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b45d4:	2200      	movs	r2, #0
   b45d6:	6840      	ldr	r0, [r0, #4]
   b45d8:	4611      	mov	r1, r2
   b45da:	f7ff bf6b 	b.w	b44b4 <network_ready>

000b45de <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b45de:	2200      	movs	r2, #0
   b45e0:	6840      	ldr	r0, [r0, #4]
   b45e2:	4611      	mov	r1, r2
   b45e4:	f7ff bf56 	b.w	b4494 <network_connecting>

000b45e8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b45e8:	6840      	ldr	r0, [r0, #4]
   b45ea:	2200      	movs	r2, #0
   b45ec:	2102      	movs	r1, #2
   b45ee:	f7ff bf59 	b.w	b44a4 <network_disconnect>

000b45f2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b45f2:	2300      	movs	r3, #0
   b45f4:	6840      	ldr	r0, [r0, #4]
   b45f6:	461a      	mov	r2, r3
   b45f8:	f7ff bf44 	b.w	b4484 <network_connect>

000b45fc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b45fc:	4b02      	ldr	r3, [pc, #8]	; (b4608 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b45fe:	2203      	movs	r2, #3
   b4600:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4602:	4a02      	ldr	r2, [pc, #8]	; (b460c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4604:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4606:	4770      	bx	lr
   b4608:	2003e6b8 	.word	0x2003e6b8
   b460c:	000b6d7c 	.word	0x000b6d7c

000b4610 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4610:	b510      	push	{r4, lr}
   b4612:	4604      	mov	r4, r0
   b4614:	4608      	mov	r0, r1
{
    _spi = spi;
   b4616:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4618:	f7ff fed8 	bl	b43cc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b461c:	2300      	movs	r3, #0
   b461e:	6063      	str	r3, [r4, #4]
}
   b4620:	4620      	mov	r0, r4
   b4622:	bd10      	pop	{r4, pc}

000b4624 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4624:	4b05      	ldr	r3, [pc, #20]	; (b463c <_GLOBAL__sub_I_System+0x18>)
   b4626:	2202      	movs	r2, #2
   b4628:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b462a:	4b05      	ldr	r3, [pc, #20]	; (b4640 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b462c:	4a05      	ldr	r2, [pc, #20]	; (b4644 <_GLOBAL__sub_I_System+0x20>)
   b462e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4630:	2000      	movs	r0, #0
   b4632:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4636:	f7ff bf09 	b.w	b444c <set_system_mode>
   b463a:	bf00      	nop
   b463c:	2003e6cc 	.word	0x2003e6cc
   b4640:	2003e6c0 	.word	0x2003e6c0
   b4644:	ffff0000 	.word	0xffff0000

000b4648 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4648:	4802      	ldr	r0, [pc, #8]	; (b4654 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b464a:	2300      	movs	r3, #0
   b464c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b464e:	f7ff be35 	b.w	b42bc <os_mutex_recursive_create>
   b4652:	bf00      	nop
   b4654:	2003e6d0 	.word	0x2003e6d0

000b4658 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b465a:	4606      	mov	r6, r0
   b465c:	460d      	mov	r5, r1
  size_t n = 0;
   b465e:	188f      	adds	r7, r1, r2
   b4660:	2400      	movs	r4, #0
  while (size--) {
   b4662:	42bd      	cmp	r5, r7
   b4664:	d00c      	beq.n	b4680 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4666:	6833      	ldr	r3, [r6, #0]
   b4668:	f815 1b01 	ldrb.w	r1, [r5], #1
   b466c:	689b      	ldr	r3, [r3, #8]
   b466e:	4630      	mov	r0, r6
   b4670:	4798      	blx	r3
     if (chunk>=0)
   b4672:	1e03      	subs	r3, r0, #0
   b4674:	db01      	blt.n	b467a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4676:	441c      	add	r4, r3
  while (size--) {
   b4678:	e7f3      	b.n	b4662 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b467a:	2c00      	cmp	r4, #0
   b467c:	bf08      	it	eq
   b467e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4680:	4620      	mov	r0, r4
   b4682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4684 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4684:	b513      	push	{r0, r1, r4, lr}
   b4686:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4688:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b468a:	b159      	cbz	r1, b46a4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b468c:	9101      	str	r1, [sp, #4]
   b468e:	f002 faf9 	bl	b6c84 <strlen>
   b4692:	6823      	ldr	r3, [r4, #0]
   b4694:	9901      	ldr	r1, [sp, #4]
   b4696:	68db      	ldr	r3, [r3, #12]
   b4698:	4602      	mov	r2, r0
   b469a:	4620      	mov	r0, r4
    }
   b469c:	b002      	add	sp, #8
   b469e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b46a2:	4718      	bx	r3
    }
   b46a4:	b002      	add	sp, #8
   b46a6:	bd10      	pop	{r4, pc}

000b46a8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b46a8:	6803      	ldr	r3, [r0, #0]
   b46aa:	689b      	ldr	r3, [r3, #8]
   b46ac:	4718      	bx	r3

000b46ae <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b46ae:	b530      	push	{r4, r5, lr}
   b46b0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b46b2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b46b4:	2a01      	cmp	r2, #1
  *str = '\0';
   b46b6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b46ba:	bf98      	it	ls
   b46bc:	220a      	movls	r2, #10
   b46be:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b46c0:	460d      	mov	r5, r1
   b46c2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b46c6:	fb01 5312 	mls	r3, r1, r2, r5
   b46ca:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b46ce:	2b09      	cmp	r3, #9
   b46d0:	bf94      	ite	ls
   b46d2:	3330      	addls	r3, #48	; 0x30
   b46d4:	3337      	addhi	r3, #55	; 0x37
   b46d6:	b2db      	uxtb	r3, r3
  } while(n);
   b46d8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b46da:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b46de:	d9ef      	bls.n	b46c0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b46e0:	4621      	mov	r1, r4
   b46e2:	f7ff ffcf 	bl	b4684 <_ZN5Print5writeEPKc>
}
   b46e6:	b00b      	add	sp, #44	; 0x2c
   b46e8:	bd30      	pop	{r4, r5, pc}

000b46ea <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b46ea:	2300      	movs	r3, #0
   b46ec:	6840      	ldr	r0, [r0, #4]
   b46ee:	461a      	mov	r2, r3
   b46f0:	4619      	mov	r1, r3
   b46f2:	f7ff bee7 	b.w	b44c4 <network_on>
	...

000b46f8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b46f8:	4b01      	ldr	r3, [pc, #4]	; (b4700 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b46fa:	4a02      	ldr	r2, [pc, #8]	; (b4704 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b46fc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b46fe:	4770      	bx	lr
   b4700:	2003e6d4 	.word	0x2003e6d4
   b4704:	000b6db0 	.word	0x000b6db0

000b4708 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4708:	4b02      	ldr	r3, [pc, #8]	; (b4714 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b470a:	681a      	ldr	r2, [r3, #0]
   b470c:	4b02      	ldr	r3, [pc, #8]	; (b4718 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b470e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4710:	4770      	bx	lr
   b4712:	bf00      	nop
   b4714:	2003e61c 	.word	0x2003e61c
   b4718:	2003e6d8 	.word	0x2003e6d8

000b471c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b471c:	4b01      	ldr	r3, [pc, #4]	; (b4724 <_GLOBAL__sub_I_RGB+0x8>)
   b471e:	2200      	movs	r2, #0
   b4720:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4722:	4770      	bx	lr
   b4724:	2003e6dc 	.word	0x2003e6dc

000b4728 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4728:	4b01      	ldr	r3, [pc, #4]	; (b4730 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b472a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b472c:	4770      	bx	lr
   b472e:	bf00      	nop
   b4730:	2003e620 	.word	0x2003e620

000b4734 <serialEventRun>:
{
   b4734:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4736:	4b0b      	ldr	r3, [pc, #44]	; (b4764 <serialEventRun+0x30>)
   b4738:	b143      	cbz	r3, b474c <serialEventRun+0x18>
   b473a:	f000 f963 	bl	b4a04 <_Z16_fetch_usbserialv>
   b473e:	6803      	ldr	r3, [r0, #0]
   b4740:	691b      	ldr	r3, [r3, #16]
   b4742:	4798      	blx	r3
   b4744:	2800      	cmp	r0, #0
   b4746:	dd01      	ble.n	b474c <serialEventRun+0x18>
        serialEvent();
   b4748:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b474c:	4b06      	ldr	r3, [pc, #24]	; (b4768 <serialEventRun+0x34>)
   b474e:	b143      	cbz	r3, b4762 <serialEventRun+0x2e>
   b4750:	f000 fbb4 	bl	b4ebc <_Z22__fetch_global_Serial1v>
   b4754:	6803      	ldr	r3, [r0, #0]
   b4756:	691b      	ldr	r3, [r3, #16]
   b4758:	4798      	blx	r3
   b475a:	2800      	cmp	r0, #0
   b475c:	dd01      	ble.n	b4762 <serialEventRun+0x2e>
        serialEvent1();
   b475e:	f3af 8000 	nop.w
}
   b4762:	bd08      	pop	{r3, pc}
	...

000b476c <_post_loop>:
{
   b476c:	b508      	push	{r3, lr}
	serialEventRun();
   b476e:	f7ff ffe1 	bl	b4734 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4772:	f7ff fd9b 	bl	b42ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4776:	4b01      	ldr	r3, [pc, #4]	; (b477c <_post_loop+0x10>)
   b4778:	6018      	str	r0, [r3, #0]
}
   b477a:	bd08      	pop	{r3, pc}
   b477c:	2003e740 	.word	0x2003e740

000b4780 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4780:	4805      	ldr	r0, [pc, #20]	; (b4798 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4782:	4a06      	ldr	r2, [pc, #24]	; (b479c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4784:	4906      	ldr	r1, [pc, #24]	; (b47a0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4786:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4788:	1a12      	subs	r2, r2, r0
   b478a:	f002 fa37 	bl	b6bfc <memcpy>
    __backup_sram_signature = signature;
   b478e:	4b05      	ldr	r3, [pc, #20]	; (b47a4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b4790:	4a05      	ldr	r2, [pc, #20]	; (b47a8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4792:	601a      	str	r2, [r3, #0]
}
   b4794:	bd08      	pop	{r3, pc}
   b4796:	bf00      	nop
   b4798:	2003f400 	.word	0x2003f400
   b479c:	2003f404 	.word	0x2003f404
   b47a0:	000b7180 	.word	0x000b7180
   b47a4:	2003f400 	.word	0x2003f400
   b47a8:	9a271c1e 	.word	0x9a271c1e

000b47ac <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b47ac:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b47ae:	2300      	movs	r3, #0
   b47b0:	9300      	str	r3, [sp, #0]
   b47b2:	461a      	mov	r2, r3
   b47b4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b47b8:	f7ff fe5a 	bl	b4470 <system_ctrl_set_result>
}
   b47bc:	b003      	add	sp, #12
   b47be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b47c4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b47c4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b47c6:	8843      	ldrh	r3, [r0, #2]
   b47c8:	2b0a      	cmp	r3, #10
   b47ca:	d008      	beq.n	b47de <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b47cc:	2b50      	cmp	r3, #80	; 0x50
   b47ce:	d10b      	bne.n	b47e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b47d0:	4b09      	ldr	r3, [pc, #36]	; (b47f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b47d2:	681b      	ldr	r3, [r3, #0]
   b47d4:	b14b      	cbz	r3, b47ea <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b47d6:	b003      	add	sp, #12
   b47d8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b47dc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b47de:	f7ff ffe5 	bl	b47ac <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b47e2:	b003      	add	sp, #12
   b47e4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b47e8:	2300      	movs	r3, #0
   b47ea:	9300      	str	r3, [sp, #0]
   b47ec:	461a      	mov	r2, r3
   b47ee:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b47f2:	f7ff fe3d 	bl	b4470 <system_ctrl_set_result>
}
   b47f6:	e7f4      	b.n	b47e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b47f8:	2003e6f0 	.word	0x2003e6f0

000b47fc <module_user_init_hook>:
{
   b47fc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b47fe:	4812      	ldr	r0, [pc, #72]	; (b4848 <module_user_init_hook+0x4c>)
   b4800:	2100      	movs	r1, #0
   b4802:	f7ff febf 	bl	b4584 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4806:	4b11      	ldr	r3, [pc, #68]	; (b484c <module_user_init_hook+0x50>)
   b4808:	681a      	ldr	r2, [r3, #0]
   b480a:	4b11      	ldr	r3, [pc, #68]	; (b4850 <module_user_init_hook+0x54>)
   b480c:	429a      	cmp	r2, r3
   b480e:	4b11      	ldr	r3, [pc, #68]	; (b4854 <module_user_init_hook+0x58>)
   b4810:	bf0c      	ite	eq
   b4812:	2201      	moveq	r2, #1
   b4814:	2200      	movne	r2, #0
   b4816:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4818:	d001      	beq.n	b481e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b481a:	f7ff ffb1 	bl	b4780 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b481e:	f7ff fd3d 	bl	b429c <HAL_RNG_GetRandomNumber>
   b4822:	4604      	mov	r4, r0
    srand(seed);
   b4824:	f002 fa00 	bl	b6c28 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4828:	4b0b      	ldr	r3, [pc, #44]	; (b4858 <module_user_init_hook+0x5c>)
   b482a:	b113      	cbz	r3, b4832 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b482c:	4620      	mov	r0, r4
   b482e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4832:	2100      	movs	r1, #0
   b4834:	4808      	ldr	r0, [pc, #32]	; (b4858 <module_user_init_hook+0x5c>)
   b4836:	f7ff fe85 	bl	b4544 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b483a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b483e:	4807      	ldr	r0, [pc, #28]	; (b485c <module_user_init_hook+0x60>)
   b4840:	2100      	movs	r1, #0
   b4842:	f7ff be0b 	b.w	b445c <system_ctrl_set_app_request_handler>
   b4846:	bf00      	nop
   b4848:	000b4729 	.word	0x000b4729
   b484c:	2003f400 	.word	0x2003f400
   b4850:	9a271c1e 	.word	0x9a271c1e
   b4854:	2003e6ec 	.word	0x2003e6ec
   b4858:	00000000 	.word	0x00000000
   b485c:	000b47c5 	.word	0x000b47c5

000b4860 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4860:	4770      	bx	lr

000b4862 <_ZN9IPAddressD0Ev>:
   b4862:	b510      	push	{r4, lr}
   b4864:	2118      	movs	r1, #24
   b4866:	4604      	mov	r4, r0
   b4868:	f7ff fc17 	bl	b409a <_ZdlPvj>
   b486c:	4620      	mov	r0, r4
   b486e:	bd10      	pop	{r4, pc}

000b4870 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4870:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4872:	7d03      	ldrb	r3, [r0, #20]
   b4874:	2b06      	cmp	r3, #6
{
   b4876:	b08d      	sub	sp, #52	; 0x34
   b4878:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b487a:	f100 0704 	add.w	r7, r0, #4
   b487e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4882:	d012      	beq.n	b48aa <_ZNK9IPAddress7printToER5Print+0x3a>
   b4884:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4888:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b488c:	220a      	movs	r2, #10
   b488e:	4630      	mov	r0, r6
   b4890:	f7ff ff0d 	bl	b46ae <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4894:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4896:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4898:	d019      	beq.n	b48ce <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b489a:	2c00      	cmp	r4, #0
   b489c:	d0f4      	beq.n	b4888 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b489e:	212e      	movs	r1, #46	; 0x2e
   b48a0:	4630      	mov	r0, r6
   b48a2:	f7ff ff01 	bl	b46a8 <_ZN5Print5printEc>
   b48a6:	4404      	add	r4, r0
   b48a8:	e7ee      	b.n	b4888 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b48aa:	232f      	movs	r3, #47	; 0x2f
   b48ac:	466a      	mov	r2, sp
   b48ae:	4639      	mov	r1, r7
   b48b0:	200a      	movs	r0, #10
		buf[0] = 0;
   b48b2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b48b6:	f7ff fd09 	bl	b42cc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b48ba:	4668      	mov	r0, sp
   b48bc:	f002 f9e2 	bl	b6c84 <strlen>
   b48c0:	6833      	ldr	r3, [r6, #0]
   b48c2:	4602      	mov	r2, r0
   b48c4:	68db      	ldr	r3, [r3, #12]
   b48c6:	4669      	mov	r1, sp
   b48c8:	4630      	mov	r0, r6
   b48ca:	4798      	blx	r3
   b48cc:	4604      	mov	r4, r0
    }
    return n;
}
   b48ce:	4620      	mov	r0, r4
   b48d0:	b00d      	add	sp, #52	; 0x34
   b48d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b48d4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b48d4:	b510      	push	{r4, lr}
   b48d6:	4b05      	ldr	r3, [pc, #20]	; (b48ec <_ZN9IPAddressC1Ev+0x18>)
   b48d8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b48da:	2211      	movs	r2, #17
   b48dc:	f840 3b04 	str.w	r3, [r0], #4
   b48e0:	2100      	movs	r1, #0
   b48e2:	f002 f999 	bl	b6c18 <memset>
}
   b48e6:	4620      	mov	r0, r4
   b48e8:	bd10      	pop	{r4, pc}
   b48ea:	bf00      	nop
   b48ec:	000b6dd8 	.word	0x000b6dd8

000b48f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b48f0:	4603      	mov	r3, r0
   b48f2:	4a07      	ldr	r2, [pc, #28]	; (b4910 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b48f4:	b510      	push	{r4, lr}
   b48f6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b48fa:	f101 0210 	add.w	r2, r1, #16
   b48fe:	f851 4b04 	ldr.w	r4, [r1], #4
   b4902:	f843 4b04 	str.w	r4, [r3], #4
   b4906:	4291      	cmp	r1, r2
   b4908:	d1f9      	bne.n	b48fe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b490a:	780a      	ldrb	r2, [r1, #0]
   b490c:	701a      	strb	r2, [r3, #0]
}
   b490e:	bd10      	pop	{r4, pc}
   b4910:	000b6dd8 	.word	0x000b6dd8

000b4914 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4914:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4916:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b491a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b491e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4922:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4926:	2304      	movs	r3, #4
   b4928:	6041      	str	r1, [r0, #4]
   b492a:	7503      	strb	r3, [r0, #20]
}
   b492c:	bd10      	pop	{r4, pc}
	...

000b4930 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4930:	b507      	push	{r0, r1, r2, lr}
   b4932:	4b06      	ldr	r3, [pc, #24]	; (b494c <_ZN9IPAddressC1EPKh+0x1c>)
   b4934:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4936:	78cb      	ldrb	r3, [r1, #3]
   b4938:	9300      	str	r3, [sp, #0]
   b493a:	788b      	ldrb	r3, [r1, #2]
   b493c:	784a      	ldrb	r2, [r1, #1]
   b493e:	7809      	ldrb	r1, [r1, #0]
   b4940:	f7ff ffe8 	bl	b4914 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4944:	b003      	add	sp, #12
   b4946:	f85d fb04 	ldr.w	pc, [sp], #4
   b494a:	bf00      	nop
   b494c:	000b6dd8 	.word	0x000b6dd8

000b4950 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4950:	7441      	strb	r1, [r0, #17]
}
   b4952:	4770      	bx	lr

000b4954 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4954:	4770      	bx	lr

000b4956 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4956:	4770      	bx	lr

000b4958 <_ZN9USBSerial4readEv>:
{
   b4958:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b495a:	2100      	movs	r1, #0
   b495c:	7c00      	ldrb	r0, [r0, #16]
   b495e:	f7ff fd5d 	bl	b441c <HAL_USB_USART_Receive_Data>
}
   b4962:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4966:	bd08      	pop	{r3, pc}

000b4968 <_ZN9USBSerial4peekEv>:
{
   b4968:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b496a:	2101      	movs	r1, #1
   b496c:	7c00      	ldrb	r0, [r0, #16]
   b496e:	f7ff fd55 	bl	b441c <HAL_USB_USART_Receive_Data>
}
   b4972:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4976:	bd08      	pop	{r3, pc}

000b4978 <_ZN9USBSerial17availableForWriteEv>:
{
   b4978:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b497a:	7c00      	ldrb	r0, [r0, #16]
   b497c:	f7ff fd46 	bl	b440c <HAL_USB_USART_Available_Data_For_Write>
}
   b4980:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4984:	bd08      	pop	{r3, pc}

000b4986 <_ZN9USBSerial9availableEv>:
{
   b4986:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4988:	7c00      	ldrb	r0, [r0, #16]
   b498a:	f7ff fd37 	bl	b43fc <HAL_USB_USART_Available_Data>
}
   b498e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4992:	bd08      	pop	{r3, pc}

000b4994 <_ZN9USBSerial5writeEh>:
{
   b4994:	b513      	push	{r0, r1, r4, lr}
   b4996:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4998:	7c00      	ldrb	r0, [r0, #16]
{
   b499a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b499c:	f7ff fd36 	bl	b440c <HAL_USB_USART_Available_Data_For_Write>
   b49a0:	2800      	cmp	r0, #0
   b49a2:	9901      	ldr	r1, [sp, #4]
   b49a4:	dc01      	bgt.n	b49aa <_ZN9USBSerial5writeEh+0x16>
   b49a6:	7c60      	ldrb	r0, [r4, #17]
   b49a8:	b120      	cbz	r0, b49b4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b49aa:	7c20      	ldrb	r0, [r4, #16]
   b49ac:	f7ff fd3e 	bl	b442c <HAL_USB_USART_Send_Data>
   b49b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b49b4:	b002      	add	sp, #8
   b49b6:	bd10      	pop	{r4, pc}

000b49b8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b49b8:	7c00      	ldrb	r0, [r0, #16]
   b49ba:	f7ff bd3f 	b.w	b443c <HAL_USB_USART_Flush_Data>

000b49be <_ZN9USBSerialD0Ev>:
   b49be:	b510      	push	{r4, lr}
   b49c0:	2114      	movs	r1, #20
   b49c2:	4604      	mov	r4, r0
   b49c4:	f7ff fb69 	bl	b409a <_ZdlPvj>
   b49c8:	4620      	mov	r0, r4
   b49ca:	bd10      	pop	{r4, pc}

000b49cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b49cc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b49ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b49d2:	4604      	mov	r4, r0
   b49d4:	4608      	mov	r0, r1
   b49d6:	2100      	movs	r1, #0
   b49d8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b49dc:	4b04      	ldr	r3, [pc, #16]	; (b49f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b49de:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b49e0:	2301      	movs	r3, #1
  _serial = serial;
   b49e2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b49e4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b49e6:	4611      	mov	r1, r2
   b49e8:	f7ff fd00 	bl	b43ec <HAL_USB_USART_Init>
}
   b49ec:	4620      	mov	r0, r4
   b49ee:	bd10      	pop	{r4, pc}
   b49f0:	000b6dec 	.word	0x000b6dec

000b49f4 <_Z19acquireSerialBufferv>:
{
   b49f4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b49f6:	2214      	movs	r2, #20
{
   b49f8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b49fa:	2100      	movs	r1, #0
   b49fc:	f002 f90c 	bl	b6c18 <memset>
}
   b4a00:	4620      	mov	r0, r4
   b4a02:	bd10      	pop	{r4, pc}

000b4a04 <_Z16_fetch_usbserialv>:
{
   b4a04:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4a06:	4c0f      	ldr	r4, [pc, #60]	; (b4a44 <_Z16_fetch_usbserialv+0x40>)
{
   b4a08:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4a0a:	a803      	add	r0, sp, #12
   b4a0c:	f7ff fff2 	bl	b49f4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4a10:	7821      	ldrb	r1, [r4, #0]
   b4a12:	f3bf 8f5b 	dmb	ish
   b4a16:	f011 0101 	ands.w	r1, r1, #1
   b4a1a:	d10f      	bne.n	b4a3c <_Z16_fetch_usbserialv+0x38>
   b4a1c:	4620      	mov	r0, r4
   b4a1e:	9101      	str	r1, [sp, #4]
   b4a20:	f7ff fb3d 	bl	b409e <__cxa_guard_acquire>
   b4a24:	9901      	ldr	r1, [sp, #4]
   b4a26:	b148      	cbz	r0, b4a3c <_Z16_fetch_usbserialv+0x38>
   b4a28:	aa03      	add	r2, sp, #12
   b4a2a:	4807      	ldr	r0, [pc, #28]	; (b4a48 <_Z16_fetch_usbserialv+0x44>)
   b4a2c:	f7ff ffce 	bl	b49cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4a30:	4620      	mov	r0, r4
   b4a32:	f7ff fb39 	bl	b40a8 <__cxa_guard_release>
   b4a36:	4805      	ldr	r0, [pc, #20]	; (b4a4c <_Z16_fetch_usbserialv+0x48>)
   b4a38:	f002 f8da 	bl	b6bf0 <atexit>
	return _usbserial;
}
   b4a3c:	4802      	ldr	r0, [pc, #8]	; (b4a48 <_Z16_fetch_usbserialv+0x44>)
   b4a3e:	b008      	add	sp, #32
   b4a40:	bd10      	pop	{r4, pc}
   b4a42:	bf00      	nop
   b4a44:	2003e6f4 	.word	0x2003e6f4
   b4a48:	2003e6f8 	.word	0x2003e6f8
   b4a4c:	000b4955 	.word	0x000b4955

000b4a50 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4a50:	4770      	bx	lr

000b4a52 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4a52:	7441      	strb	r1, [r0, #17]
}
   b4a54:	4770      	bx	lr

000b4a56 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4a56:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4a58:	7c00      	ldrb	r0, [r0, #16]
   b4a5a:	f7ff fc6f 	bl	b433c <hal_usart_available_data_for_write>
}
   b4a5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4a62:	bd08      	pop	{r3, pc}

000b4a64 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4a64:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4a66:	7c00      	ldrb	r0, [r0, #16]
   b4a68:	f7ff fc40 	bl	b42ec <hal_usart_available>
}
   b4a6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4a70:	bd08      	pop	{r3, pc}

000b4a72 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b4a72:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b4a74:	7c00      	ldrb	r0, [r0, #16]
   b4a76:	f7ff fc49 	bl	b430c <hal_usart_peek>
}
   b4a7a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4a7e:	bd08      	pop	{r3, pc}

000b4a80 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b4a80:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b4a82:	7c00      	ldrb	r0, [r0, #16]
   b4a84:	f7ff fc3a 	bl	b42fc <hal_usart_read>
}
   b4a88:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4a8c:	bd08      	pop	{r3, pc}

000b4a8e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b4a8e:	7c00      	ldrb	r0, [r0, #16]
   b4a90:	f7ff bc44 	b.w	b431c <hal_usart_flush>

000b4a94 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b4a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4a96:	7c45      	ldrb	r5, [r0, #17]
{
   b4a98:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4a9a:	b12d      	cbz	r5, b4aa8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4a9c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b4a9e:	b003      	add	sp, #12
   b4aa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b4aa4:	f7ff bc1a 	b.w	b42dc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4aa8:	7c00      	ldrb	r0, [r0, #16]
   b4aaa:	9101      	str	r1, [sp, #4]
   b4aac:	f7ff fc46 	bl	b433c <hal_usart_available_data_for_write>
   b4ab0:	2800      	cmp	r0, #0
   b4ab2:	9901      	ldr	r1, [sp, #4]
   b4ab4:	dcf2      	bgt.n	b4a9c <_ZN11USARTSerial5writeEh+0x8>
}
   b4ab6:	4628      	mov	r0, r5
   b4ab8:	b003      	add	sp, #12
   b4aba:	bd30      	pop	{r4, r5, pc}

000b4abc <_ZN11USARTSerialD0Ev>:
   b4abc:	b510      	push	{r4, lr}
   b4abe:	2114      	movs	r1, #20
   b4ac0:	4604      	mov	r4, r0
   b4ac2:	f7ff faea 	bl	b409a <_ZdlPvj>
   b4ac6:	4620      	mov	r0, r4
   b4ac8:	bd10      	pop	{r4, pc}
	...

000b4acc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b4acc:	b510      	push	{r4, lr}
   b4ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4ad2:	4604      	mov	r4, r0
   b4ad4:	4608      	mov	r0, r1
   b4ad6:	4611      	mov	r1, r2
   b4ad8:	2200      	movs	r2, #0
   b4ada:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4ade:	4b04      	ldr	r3, [pc, #16]	; (b4af0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b4ae0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4ae2:	2301      	movs	r3, #1
  _serial = serial;
   b4ae4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4ae6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b4ae8:	f7ff fc30 	bl	b434c <hal_usart_init_ex>
}
   b4aec:	4620      	mov	r0, r4
   b4aee:	bd10      	pop	{r4, pc}
   b4af0:	000b6e1c 	.word	0x000b6e1c

000b4af4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4af4:	4770      	bx	lr

000b4af6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4af6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4af8:	4606      	mov	r6, r0
   b4afa:	4615      	mov	r5, r2
   b4afc:	460c      	mov	r4, r1
   b4afe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4b00:	42bc      	cmp	r4, r7
   b4b02:	d006      	beq.n	b4b12 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4b04:	6833      	ldr	r3, [r6, #0]
   b4b06:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4b0a:	689b      	ldr	r3, [r3, #8]
   b4b0c:	4630      	mov	r0, r6
   b4b0e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4b10:	e7f6      	b.n	b4b00 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4b12:	4628      	mov	r0, r5
   b4b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4b16 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4b16:	7c00      	ldrb	r0, [r0, #16]
   b4b18:	2200      	movs	r2, #0
   b4b1a:	f7ff bc1f 	b.w	b435c <hal_i2c_write>

000b4b1e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4b1e:	7c00      	ldrb	r0, [r0, #16]
   b4b20:	2100      	movs	r1, #0
   b4b22:	f7ff bc23 	b.w	b436c <hal_i2c_available>

000b4b26 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4b26:	7c00      	ldrb	r0, [r0, #16]
   b4b28:	2100      	movs	r1, #0
   b4b2a:	f7ff bc27 	b.w	b437c <hal_i2c_read>

000b4b2e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4b2e:	7c00      	ldrb	r0, [r0, #16]
   b4b30:	2100      	movs	r1, #0
   b4b32:	f7ff bc2b 	b.w	b438c <hal_i2c_peek>

000b4b36 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4b36:	7c00      	ldrb	r0, [r0, #16]
   b4b38:	2100      	movs	r1, #0
   b4b3a:	f7ff bc2f 	b.w	b439c <hal_i2c_flush>

000b4b3e <_ZN7TwoWireD0Ev>:
   b4b3e:	b510      	push	{r4, lr}
   b4b40:	2114      	movs	r1, #20
   b4b42:	4604      	mov	r4, r0
   b4b44:	f7ff faa9 	bl	b409a <_ZdlPvj>
   b4b48:	4620      	mov	r0, r4
   b4b4a:	bd10      	pop	{r4, pc}

000b4b4c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4b4c:	b510      	push	{r4, lr}
   b4b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4b52:	4604      	mov	r4, r0
   b4b54:	4608      	mov	r0, r1
   b4b56:	2100      	movs	r1, #0
   b4b58:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4b5c:	4b03      	ldr	r3, [pc, #12]	; (b4b6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b4b5e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b4b60:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b4b62:	4611      	mov	r1, r2
   b4b64:	f7ff fc2a 	bl	b43bc <hal_i2c_init>
}
   b4b68:	4620      	mov	r0, r4
   b4b6a:	bd10      	pop	{r4, pc}
   b4b6c:	000b6e4c 	.word	0x000b6e4c

000b4b70 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b4b70:	2200      	movs	r2, #0
   b4b72:	6840      	ldr	r0, [r0, #4]
   b4b74:	4611      	mov	r1, r2
   b4b76:	f7ff bc9d 	b.w	b44b4 <network_ready>

000b4b7a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4b7a:	2200      	movs	r2, #0
   b4b7c:	6840      	ldr	r0, [r0, #4]
   b4b7e:	4611      	mov	r1, r2
   b4b80:	f7ff bcb8 	b.w	b44f4 <network_listening>

000b4b84 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4b84:	2200      	movs	r2, #0
   b4b86:	6840      	ldr	r0, [r0, #4]
   b4b88:	4611      	mov	r1, r2
   b4b8a:	f7ff bcc3 	b.w	b4514 <network_get_listen_timeout>

000b4b8e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4b8e:	6840      	ldr	r0, [r0, #4]
   b4b90:	2200      	movs	r2, #0
   b4b92:	f7ff bcb7 	b.w	b4504 <network_set_listen_timeout>

000b4b96 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4b96:	6840      	ldr	r0, [r0, #4]
   b4b98:	2200      	movs	r2, #0
   b4b9a:	f081 0101 	eor.w	r1, r1, #1
   b4b9e:	f7ff bca1 	b.w	b44e4 <network_listen>

000b4ba2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4ba2:	2300      	movs	r3, #0
   b4ba4:	6840      	ldr	r0, [r0, #4]
   b4ba6:	461a      	mov	r2, r3
   b4ba8:	4619      	mov	r1, r3
   b4baa:	f7ff bc93 	b.w	b44d4 <network_off>

000b4bae <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4bae:	2200      	movs	r2, #0
   b4bb0:	6840      	ldr	r0, [r0, #4]
   b4bb2:	4611      	mov	r1, r2
   b4bb4:	f7ff bc6e 	b.w	b4494 <network_connecting>

000b4bb8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4bb8:	6840      	ldr	r0, [r0, #4]
   b4bba:	2200      	movs	r2, #0
   b4bbc:	2102      	movs	r1, #2
   b4bbe:	f7ff bc71 	b.w	b44a4 <network_disconnect>

000b4bc2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4bc2:	2300      	movs	r3, #0
   b4bc4:	6840      	ldr	r0, [r0, #4]
   b4bc6:	461a      	mov	r2, r3
   b4bc8:	f7ff bc5c 	b.w	b4484 <network_connect>

000b4bcc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b4bcc:	4b02      	ldr	r3, [pc, #8]	; (b4bd8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b4bce:	2204      	movs	r2, #4
   b4bd0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b4bd2:	4a02      	ldr	r2, [pc, #8]	; (b4bdc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b4bd4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b4bd6:	4770      	bx	lr
   b4bd8:	2003e70c 	.word	0x2003e70c
   b4bdc:	000b6e74 	.word	0x000b6e74

000b4be0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4be0:	2300      	movs	r3, #0
   b4be2:	6840      	ldr	r0, [r0, #4]
   b4be4:	461a      	mov	r2, r3
   b4be6:	f7ff bc4d 	b.w	b4484 <network_connect>

000b4bea <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4bea:	6840      	ldr	r0, [r0, #4]
   b4bec:	2200      	movs	r2, #0
   b4bee:	2102      	movs	r1, #2
   b4bf0:	f7ff bc58 	b.w	b44a4 <network_disconnect>

000b4bf4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4bf4:	2200      	movs	r2, #0
   b4bf6:	6840      	ldr	r0, [r0, #4]
   b4bf8:	4611      	mov	r1, r2
   b4bfa:	f7ff bc4b 	b.w	b4494 <network_connecting>

000b4bfe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4bfe:	2200      	movs	r2, #0
   b4c00:	6840      	ldr	r0, [r0, #4]
   b4c02:	4611      	mov	r1, r2
   b4c04:	f7ff bc56 	b.w	b44b4 <network_ready>

000b4c08 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4c08:	2300      	movs	r3, #0
   b4c0a:	6840      	ldr	r0, [r0, #4]
   b4c0c:	461a      	mov	r2, r3
   b4c0e:	4619      	mov	r1, r3
   b4c10:	f7ff bc58 	b.w	b44c4 <network_on>

000b4c14 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4c14:	2300      	movs	r3, #0
   b4c16:	6840      	ldr	r0, [r0, #4]
   b4c18:	461a      	mov	r2, r3
   b4c1a:	4619      	mov	r1, r3
   b4c1c:	f7ff bc5a 	b.w	b44d4 <network_off>

000b4c20 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4c20:	6840      	ldr	r0, [r0, #4]
   b4c22:	2100      	movs	r1, #0
   b4c24:	f7ff bc7e 	b.w	b4524 <network_is_on>

000b4c28 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4c28:	6840      	ldr	r0, [r0, #4]
   b4c2a:	2100      	movs	r1, #0
   b4c2c:	f7ff bc82 	b.w	b4534 <network_is_off>

000b4c30 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4c30:	6840      	ldr	r0, [r0, #4]
   b4c32:	2200      	movs	r2, #0
   b4c34:	f081 0101 	eor.w	r1, r1, #1
   b4c38:	f7ff bc54 	b.w	b44e4 <network_listen>

000b4c3c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4c3c:	6840      	ldr	r0, [r0, #4]
   b4c3e:	2200      	movs	r2, #0
   b4c40:	f7ff bc60 	b.w	b4504 <network_set_listen_timeout>

000b4c44 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4c44:	2200      	movs	r2, #0
   b4c46:	6840      	ldr	r0, [r0, #4]
   b4c48:	4611      	mov	r1, r2
   b4c4a:	f7ff bc63 	b.w	b4514 <network_get_listen_timeout>

000b4c4e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4c4e:	2200      	movs	r2, #0
   b4c50:	6840      	ldr	r0, [r0, #4]
   b4c52:	4611      	mov	r1, r2
   b4c54:	f7ff bc4e 	b.w	b44f4 <network_listening>

000b4c58 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4c58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4c5c:	b095      	sub	sp, #84	; 0x54
   b4c5e:	4614      	mov	r4, r2
   b4c60:	460d      	mov	r5, r1
   b4c62:	4607      	mov	r7, r0
    IPAddress addr;
   b4c64:	f7ff fe36 	bl	b48d4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4c68:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4c6a:	221c      	movs	r2, #28
   b4c6c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4c6e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4c70:	f001 ffd2 	bl	b6c18 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4c74:	2340      	movs	r3, #64	; 0x40
   b4c76:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4c78:	4620      	mov	r0, r4
   b4c7a:	466b      	mov	r3, sp
   b4c7c:	aa0c      	add	r2, sp, #48	; 0x30
   b4c7e:	2100      	movs	r1, #0
   b4c80:	f7ff facc 	bl	b421c <netdb_getaddrinfo>
    if (!r) {
   b4c84:	4604      	mov	r4, r0
   b4c86:	2800      	cmp	r0, #0
   b4c88:	d14b      	bne.n	b4d22 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4c8a:	4602      	mov	r2, r0
   b4c8c:	2101      	movs	r1, #1
   b4c8e:	6868      	ldr	r0, [r5, #4]
   b4c90:	f7ff fc10 	bl	b44b4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4c94:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4c96:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4c98:	4622      	mov	r2, r4
   b4c9a:	6868      	ldr	r0, [r5, #4]
   b4c9c:	f7ff fc0a 	bl	b44b4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4ca0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4ca2:	4681      	mov	r9, r0
        bool ok = false;
   b4ca4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4ca6:	2e00      	cmp	r6, #0
   b4ca8:	d03b      	beq.n	b4d22 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4caa:	2900      	cmp	r1, #0
   b4cac:	d139      	bne.n	b4d22 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4cae:	6873      	ldr	r3, [r6, #4]
   b4cb0:	2b02      	cmp	r3, #2
   b4cb2:	d003      	beq.n	b4cbc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4cb4:	2b0a      	cmp	r3, #10
   b4cb6:	d011      	beq.n	b4cdc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4cb8:	69f6      	ldr	r6, [r6, #28]
   b4cba:	e7f4      	b.n	b4ca6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4cbc:	f1b8 0f00 	cmp.w	r8, #0
   b4cc0:	d0fa      	beq.n	b4cb8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4cc2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b4cc4:	a806      	add	r0, sp, #24
   b4cc6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4cc8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4cca:	f7ff fe31 	bl	b4930 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4cce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4cd0:	1d3c      	adds	r4, r7, #4
   b4cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4cd4:	682b      	ldr	r3, [r5, #0]
   b4cd6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4cd8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4cda:	e7ed      	b.n	b4cb8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4cdc:	f1b9 0f00 	cmp.w	r9, #0
   b4ce0:	d0ea      	beq.n	b4cb8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4ce2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4ce4:	2210      	movs	r2, #16
   b4ce6:	a801      	add	r0, sp, #4
   b4ce8:	f001 ff96 	bl	b6c18 <memset>
                    a.v = 6;
   b4cec:	2306      	movs	r3, #6
   b4cee:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4cf2:	ad01      	add	r5, sp, #4
   b4cf4:	f104 0308 	add.w	r3, r4, #8
   b4cf8:	3418      	adds	r4, #24
   b4cfa:	6818      	ldr	r0, [r3, #0]
   b4cfc:	6859      	ldr	r1, [r3, #4]
   b4cfe:	462a      	mov	r2, r5
   b4d00:	c203      	stmia	r2!, {r0, r1}
   b4d02:	3308      	adds	r3, #8
   b4d04:	42a3      	cmp	r3, r4
   b4d06:	4615      	mov	r5, r2
   b4d08:	d1f7      	bne.n	b4cfa <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4d0a:	a901      	add	r1, sp, #4
   b4d0c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4d0e:	ad07      	add	r5, sp, #28
   b4d10:	f7ff fdee 	bl	b48f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4d16:	1d3c      	adds	r4, r7, #4
   b4d18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4d1a:	682b      	ldr	r3, [r5, #0]
   b4d1c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4d1e:	4649      	mov	r1, r9
   b4d20:	e7ca      	b.n	b4cb8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4d22:	9800      	ldr	r0, [sp, #0]
   b4d24:	f7ff fa72 	bl	b420c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4d28:	4638      	mov	r0, r7
   b4d2a:	b015      	add	sp, #84	; 0x54
   b4d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4d30 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b4d30:	4b02      	ldr	r3, [pc, #8]	; (b4d3c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4d32:	4a03      	ldr	r2, [pc, #12]	; (b4d40 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4d34:	601a      	str	r2, [r3, #0]
   b4d36:	2200      	movs	r2, #0
   b4d38:	605a      	str	r2, [r3, #4]

} // spark
   b4d3a:	4770      	bx	lr
   b4d3c:	2003e714 	.word	0x2003e714
   b4d40:	000b6eb0 	.word	0x000b6eb0

000b4d44 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b4d44:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b4d46:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b4d48:	d902      	bls.n	b4d50 <pinAvailable+0xc>
    return false;
   b4d4a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b4d4c:	b002      	add	sp, #8
   b4d4e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b4d50:	f1a0 030b 	sub.w	r3, r0, #11
   b4d54:	2b02      	cmp	r3, #2
   b4d56:	d81a      	bhi.n	b4d8e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4d58:	4c17      	ldr	r4, [pc, #92]	; (b4db8 <pinAvailable+0x74>)
   b4d5a:	7821      	ldrb	r1, [r4, #0]
   b4d5c:	f3bf 8f5b 	dmb	ish
   b4d60:	f011 0101 	ands.w	r1, r1, #1
   b4d64:	d10b      	bne.n	b4d7e <pinAvailable+0x3a>
   b4d66:	4620      	mov	r0, r4
   b4d68:	9101      	str	r1, [sp, #4]
   b4d6a:	f7ff f998 	bl	b409e <__cxa_guard_acquire>
   b4d6e:	9901      	ldr	r1, [sp, #4]
   b4d70:	b128      	cbz	r0, b4d7e <pinAvailable+0x3a>
   b4d72:	4812      	ldr	r0, [pc, #72]	; (b4dbc <pinAvailable+0x78>)
   b4d74:	f7ff fc4c 	bl	b4610 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4d78:	4620      	mov	r0, r4
   b4d7a:	f7ff f995 	bl	b40a8 <__cxa_guard_release>
   b4d7e:	4b0f      	ldr	r3, [pc, #60]	; (b4dbc <pinAvailable+0x78>)
   b4d80:	7818      	ldrb	r0, [r3, #0]
   b4d82:	f7ff fb2b 	bl	b43dc <hal_spi_is_enabled>
   b4d86:	2800      	cmp	r0, #0
   b4d88:	d1df      	bne.n	b4d4a <pinAvailable+0x6>
  return true; // 'pin' is available
   b4d8a:	2001      	movs	r0, #1
   b4d8c:	e7de      	b.n	b4d4c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b4d8e:	2801      	cmp	r0, #1
   b4d90:	d809      	bhi.n	b4da6 <pinAvailable+0x62>
   b4d92:	f000 f8cf 	bl	b4f34 <_Z19__fetch_global_Wirev>
   b4d96:	2100      	movs	r1, #0
   b4d98:	7c00      	ldrb	r0, [r0, #16]
   b4d9a:	f7ff fb07 	bl	b43ac <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b4d9e:	f080 0001 	eor.w	r0, r0, #1
   b4da2:	b2c0      	uxtb	r0, r0
   b4da4:	e7d2      	b.n	b4d4c <pinAvailable+0x8>
   b4da6:	3809      	subs	r0, #9
   b4da8:	2801      	cmp	r0, #1
   b4daa:	d8ee      	bhi.n	b4d8a <pinAvailable+0x46>
   b4dac:	f000 f886 	bl	b4ebc <_Z22__fetch_global_Serial1v>
   b4db0:	7c00      	ldrb	r0, [r0, #16]
   b4db2:	f7ff fabb 	bl	b432c <hal_usart_is_enabled>
   b4db6:	e7f2      	b.n	b4d9e <pinAvailable+0x5a>
   b4db8:	2003e71c 	.word	0x2003e71c
   b4dbc:	2003e720 	.word	0x2003e720

000b4dc0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b4dc0:	2823      	cmp	r0, #35	; 0x23
{
   b4dc2:	b538      	push	{r3, r4, r5, lr}
   b4dc4:	4604      	mov	r4, r0
   b4dc6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b4dc8:	d80a      	bhi.n	b4de0 <pinMode+0x20>
   b4dca:	29ff      	cmp	r1, #255	; 0xff
   b4dcc:	d008      	beq.n	b4de0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b4dce:	f7ff ffb9 	bl	b4d44 <pinAvailable>
   b4dd2:	b128      	cbz	r0, b4de0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b4dd4:	4629      	mov	r1, r5
   b4dd6:	4620      	mov	r0, r4
}
   b4dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b4ddc:	f7ff ba2e 	b.w	b423c <HAL_Pin_Mode>
}
   b4de0:	bd38      	pop	{r3, r4, r5, pc}

000b4de2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b4de2:	b538      	push	{r3, r4, r5, lr}
   b4de4:	4604      	mov	r4, r0
   b4de6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b4de8:	f7ff fa30 	bl	b424c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b4dec:	28ff      	cmp	r0, #255	; 0xff
   b4dee:	d010      	beq.n	b4e12 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b4df0:	2806      	cmp	r0, #6
   b4df2:	d804      	bhi.n	b4dfe <digitalWrite+0x1c>
   b4df4:	234d      	movs	r3, #77	; 0x4d
   b4df6:	fa23 f000 	lsr.w	r0, r3, r0
   b4dfa:	07c3      	lsls	r3, r0, #31
   b4dfc:	d409      	bmi.n	b4e12 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b4dfe:	4620      	mov	r0, r4
   b4e00:	f7ff ffa0 	bl	b4d44 <pinAvailable>
   b4e04:	b128      	cbz	r0, b4e12 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b4e06:	4629      	mov	r1, r5
   b4e08:	4620      	mov	r0, r4
}
   b4e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b4e0e:	f7ff ba25 	b.w	b425c <HAL_GPIO_Write>
}
   b4e12:	bd38      	pop	{r3, r4, r5, pc}

000b4e14 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b4e14:	b510      	push	{r4, lr}
   b4e16:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b4e18:	f7ff fa18 	bl	b424c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b4e1c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b4e1e:	b2db      	uxtb	r3, r3
   b4e20:	2b01      	cmp	r3, #1
   b4e22:	d908      	bls.n	b4e36 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b4e24:	4620      	mov	r0, r4
   b4e26:	f7ff ff8d 	bl	b4d44 <pinAvailable>
   b4e2a:	b120      	cbz	r0, b4e36 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b4e2c:	4620      	mov	r0, r4
}
   b4e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b4e32:	f7ff ba1b 	b.w	b426c <HAL_GPIO_Read>
}
   b4e36:	2000      	movs	r0, #0
   b4e38:	bd10      	pop	{r4, pc}

000b4e3a <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   b4e3a:	b538      	push	{r3, r4, r5, lr}
   b4e3c:	4604      	mov	r4, r0
   b4e3e:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b4e40:	f7ff ff80 	bl	b4d44 <pinAvailable>
   b4e44:	b1f0      	cbz	r0, b4e84 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   b4e46:	2104      	movs	r1, #4
   b4e48:	4620      	mov	r0, r4
   b4e4a:	f7ff f9ef 	bl	b422c <HAL_Validate_Pin_Function>
   b4e4e:	2804      	cmp	r0, #4
   b4e50:	d105      	bne.n	b4e5e <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b4e52:	b2a9      	uxth	r1, r5
   b4e54:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b4e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b4e5a:	f7ff ba0f 	b.w	b427c <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   b4e5e:	2102      	movs	r1, #2
   b4e60:	4620      	mov	r0, r4
   b4e62:	f7ff f9e3 	bl	b422c <HAL_Validate_Pin_Function>
   b4e66:	2802      	cmp	r0, #2
   b4e68:	d10c      	bne.n	b4e84 <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   b4e6a:	4620      	mov	r0, r4
   b4e6c:	f7ff f9ee 	bl	b424c <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b4e70:	2801      	cmp	r0, #1
   b4e72:	d001      	beq.n	b4e78 <_Z11analogWritetm+0x3e>
   b4e74:	2804      	cmp	r0, #4
   b4e76:	d105      	bne.n	b4e84 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b4e78:	4629      	mov	r1, r5
   b4e7a:	4620      	mov	r0, r4
}
   b4e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b4e80:	f7ff ba04 	b.w	b428c <hal_pwm_write_ext>
}
   b4e84:	bd38      	pop	{r3, r4, r5, pc}

000b4e86 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4e86:	4770      	bx	lr

000b4e88 <_Z20acquireSerial1Bufferv>:
{
   b4e88:	b538      	push	{r3, r4, r5, lr}
   b4e8a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b4e8c:	2514      	movs	r5, #20
   b4e8e:	462a      	mov	r2, r5
   b4e90:	2100      	movs	r1, #0
   b4e92:	f001 fec1 	bl	b6c18 <memset>
   b4e96:	8025      	strh	r5, [r4, #0]
   b4e98:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4e9a:	4907      	ldr	r1, [pc, #28]	; (b4eb8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b4e9c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4e9e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b4ea0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4ea2:	f000 f86b 	bl	b4f7c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4ea6:	4904      	ldr	r1, [pc, #16]	; (b4eb8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b4ea8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4eaa:	4628      	mov	r0, r5
   b4eac:	f000 f866 	bl	b4f7c <_ZnajRKSt9nothrow_t>
    };
   b4eb0:	60e0      	str	r0, [r4, #12]
}
   b4eb2:	4620      	mov	r0, r4
   b4eb4:	bd38      	pop	{r3, r4, r5, pc}
   b4eb6:	bf00      	nop
   b4eb8:	000b6ee4 	.word	0x000b6ee4

000b4ebc <_Z22__fetch_global_Serial1v>:
{
   b4ebc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4ebe:	4d0e      	ldr	r5, [pc, #56]	; (b4ef8 <_Z22__fetch_global_Serial1v+0x3c>)
   b4ec0:	7829      	ldrb	r1, [r5, #0]
   b4ec2:	f3bf 8f5b 	dmb	ish
   b4ec6:	f011 0401 	ands.w	r4, r1, #1
{
   b4eca:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4ecc:	d111      	bne.n	b4ef2 <_Z22__fetch_global_Serial1v+0x36>
   b4ece:	4628      	mov	r0, r5
   b4ed0:	f7ff f8e5 	bl	b409e <__cxa_guard_acquire>
   b4ed4:	b168      	cbz	r0, b4ef2 <_Z22__fetch_global_Serial1v+0x36>
   b4ed6:	a801      	add	r0, sp, #4
   b4ed8:	f7ff ffd6 	bl	b4e88 <_Z20acquireSerial1Bufferv>
   b4edc:	aa01      	add	r2, sp, #4
   b4ede:	4621      	mov	r1, r4
   b4ee0:	4806      	ldr	r0, [pc, #24]	; (b4efc <_Z22__fetch_global_Serial1v+0x40>)
   b4ee2:	f7ff fdf3 	bl	b4acc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b4ee6:	4628      	mov	r0, r5
   b4ee8:	f7ff f8de 	bl	b40a8 <__cxa_guard_release>
   b4eec:	4804      	ldr	r0, [pc, #16]	; (b4f00 <_Z22__fetch_global_Serial1v+0x44>)
   b4eee:	f001 fe7f 	bl	b6bf0 <atexit>
    return serial1;
}
   b4ef2:	4802      	ldr	r0, [pc, #8]	; (b4efc <_Z22__fetch_global_Serial1v+0x40>)
   b4ef4:	b007      	add	sp, #28
   b4ef6:	bd30      	pop	{r4, r5, pc}
   b4ef8:	2003e728 	.word	0x2003e728
   b4efc:	2003e72c 	.word	0x2003e72c
   b4f00:	000b4e87 	.word	0x000b4e87

000b4f04 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b4f04:	4770      	bx	lr
	...

000b4f08 <_Z17acquireWireBufferv>:
{
   b4f08:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b4f0a:	2520      	movs	r5, #32
   b4f0c:	2314      	movs	r3, #20
{
   b4f0e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b4f10:	6003      	str	r3, [r0, #0]
   b4f12:	6085      	str	r5, [r0, #8]
   b4f14:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b4f16:	4906      	ldr	r1, [pc, #24]	; (b4f30 <_Z17acquireWireBufferv+0x28>)
   b4f18:	4628      	mov	r0, r5
   b4f1a:	f000 f82f 	bl	b4f7c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b4f1e:	4904      	ldr	r1, [pc, #16]	; (b4f30 <_Z17acquireWireBufferv+0x28>)
	};
   b4f20:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b4f22:	4628      	mov	r0, r5
   b4f24:	f000 f82a 	bl	b4f7c <_ZnajRKSt9nothrow_t>
	};
   b4f28:	60e0      	str	r0, [r4, #12]
}
   b4f2a:	4620      	mov	r0, r4
   b4f2c:	bd38      	pop	{r3, r4, r5, pc}
   b4f2e:	bf00      	nop
   b4f30:	000b6ee4 	.word	0x000b6ee4

000b4f34 <_Z19__fetch_global_Wirev>:
{
   b4f34:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b4f36:	4d0e      	ldr	r5, [pc, #56]	; (b4f70 <_Z19__fetch_global_Wirev+0x3c>)
   b4f38:	7829      	ldrb	r1, [r5, #0]
   b4f3a:	f3bf 8f5b 	dmb	ish
   b4f3e:	f011 0401 	ands.w	r4, r1, #1
{
   b4f42:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b4f44:	d111      	bne.n	b4f6a <_Z19__fetch_global_Wirev+0x36>
   b4f46:	4628      	mov	r0, r5
   b4f48:	f7ff f8a9 	bl	b409e <__cxa_guard_acquire>
   b4f4c:	b168      	cbz	r0, b4f6a <_Z19__fetch_global_Wirev+0x36>
   b4f4e:	a801      	add	r0, sp, #4
   b4f50:	f7ff ffda 	bl	b4f08 <_Z17acquireWireBufferv>
   b4f54:	aa01      	add	r2, sp, #4
   b4f56:	4621      	mov	r1, r4
   b4f58:	4806      	ldr	r0, [pc, #24]	; (b4f74 <_Z19__fetch_global_Wirev+0x40>)
   b4f5a:	f7ff fdf7 	bl	b4b4c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b4f5e:	4628      	mov	r0, r5
   b4f60:	f7ff f8a2 	bl	b40a8 <__cxa_guard_release>
   b4f64:	4804      	ldr	r0, [pc, #16]	; (b4f78 <_Z19__fetch_global_Wirev+0x44>)
   b4f66:	f001 fe43 	bl	b6bf0 <atexit>
	return wire;
}
   b4f6a:	4802      	ldr	r0, [pc, #8]	; (b4f74 <_Z19__fetch_global_Wirev+0x40>)
   b4f6c:	b007      	add	sp, #28
   b4f6e:	bd30      	pop	{r4, r5, pc}
   b4f70:	2003e744 	.word	0x2003e744
   b4f74:	2003e748 	.word	0x2003e748
   b4f78:	000b4f05 	.word	0x000b4f05

000b4f7c <_ZnajRKSt9nothrow_t>:
   b4f7c:	f7ff b88b 	b.w	b4096 <_Znaj>

000b4f80 <sin>:
   b4f80:	ec51 0b10 	vmov	r0, r1, d0
   b4f84:	4a20      	ldr	r2, [pc, #128]	; (b5008 <sin+0x88>)
   b4f86:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b4f8a:	4293      	cmp	r3, r2
   b4f8c:	dd27      	ble.n	b4fde <sin+0x5e>
   b4f8e:	b500      	push	{lr}
   b4f90:	4a1e      	ldr	r2, [pc, #120]	; (b500c <sin+0x8c>)
   b4f92:	4293      	cmp	r3, r2
   b4f94:	b085      	sub	sp, #20
   b4f96:	dd09      	ble.n	b4fac <sin+0x2c>
   b4f98:	ee10 2a10 	vmov	r2, s0
   b4f9c:	460b      	mov	r3, r1
   b4f9e:	f001 f9ad 	bl	b62fc <__aeabi_dsub>
   b4fa2:	ec41 0b10 	vmov	d0, r0, r1
   b4fa6:	b005      	add	sp, #20
   b4fa8:	f85d fb04 	ldr.w	pc, [sp], #4
   b4fac:	4668      	mov	r0, sp
   b4fae:	f000 f82f 	bl	b5010 <__ieee754_rem_pio2>
   b4fb2:	f000 0003 	and.w	r0, r0, #3
   b4fb6:	2801      	cmp	r0, #1
   b4fb8:	ed9d 1b02 	vldr	d1, [sp, #8]
   b4fbc:	ed9d 0b00 	vldr	d0, [sp]
   b4fc0:	d012      	beq.n	b4fe8 <sin+0x68>
   b4fc2:	2802      	cmp	r0, #2
   b4fc4:	d017      	beq.n	b4ff6 <sin+0x76>
   b4fc6:	b190      	cbz	r0, b4fee <sin+0x6e>
   b4fc8:	f000 fa4a 	bl	b5460 <__kernel_cos>
   b4fcc:	ec53 2b10 	vmov	r2, r3, d0
   b4fd0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   b4fd4:	ee00 3a90 	vmov	s1, r3
   b4fd8:	b005      	add	sp, #20
   b4fda:	f85d fb04 	ldr.w	pc, [sp], #4
   b4fde:	ed9f 1b08 	vldr	d1, [pc, #32]	; b5000 <sin+0x80>
   b4fe2:	2000      	movs	r0, #0
   b4fe4:	f000 bfa8 	b.w	b5f38 <__kernel_sin>
   b4fe8:	f000 fa3a 	bl	b5460 <__kernel_cos>
   b4fec:	e7db      	b.n	b4fa6 <sin+0x26>
   b4fee:	2001      	movs	r0, #1
   b4ff0:	f000 ffa2 	bl	b5f38 <__kernel_sin>
   b4ff4:	e7d7      	b.n	b4fa6 <sin+0x26>
   b4ff6:	2001      	movs	r0, #1
   b4ff8:	f000 ff9e 	bl	b5f38 <__kernel_sin>
   b4ffc:	e7e6      	b.n	b4fcc <sin+0x4c>
   b4ffe:	bf00      	nop
	...
   b5008:	3fe921fb 	.word	0x3fe921fb
   b500c:	7fefffff 	.word	0x7fefffff

000b5010 <__ieee754_rem_pio2>:
   b5010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5014:	ec53 2b10 	vmov	r2, r3, d0
   b5018:	ed2d 8b04 	vpush	{d8-d9}
   b501c:	4990      	ldr	r1, [pc, #576]	; (b5260 <__ieee754_rem_pio2+0x250>)
   b501e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   b5022:	428d      	cmp	r5, r1
   b5024:	b08b      	sub	sp, #44	; 0x2c
   b5026:	4604      	mov	r4, r0
   b5028:	f340 808c 	ble.w	b5144 <__ieee754_rem_pio2+0x134>
   b502c:	498d      	ldr	r1, [pc, #564]	; (b5264 <__ieee754_rem_pio2+0x254>)
   b502e:	428d      	cmp	r5, r1
   b5030:	461f      	mov	r7, r3
   b5032:	dc2b      	bgt.n	b508c <__ieee754_rem_pio2+0x7c>
   b5034:	2f00      	cmp	r7, #0
   b5036:	4619      	mov	r1, r3
   b5038:	ee10 0a10 	vmov	r0, s0
   b503c:	a37e      	add	r3, pc, #504	; (adr r3, b5238 <__ieee754_rem_pio2+0x228>)
   b503e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5042:	f340 81b6 	ble.w	b53b2 <__ieee754_rem_pio2+0x3a2>
   b5046:	f001 f959 	bl	b62fc <__aeabi_dsub>
   b504a:	4b87      	ldr	r3, [pc, #540]	; (b5268 <__ieee754_rem_pio2+0x258>)
   b504c:	429d      	cmp	r5, r3
   b504e:	4680      	mov	r8, r0
   b5050:	4689      	mov	r9, r1
   b5052:	f000 808f 	beq.w	b5174 <__ieee754_rem_pio2+0x164>
   b5056:	a37a      	add	r3, pc, #488	; (adr r3, b5240 <__ieee754_rem_pio2+0x230>)
   b5058:	e9d3 2300 	ldrd	r2, r3, [r3]
   b505c:	f001 f94e 	bl	b62fc <__aeabi_dsub>
   b5060:	4602      	mov	r2, r0
   b5062:	460b      	mov	r3, r1
   b5064:	e9c4 2300 	strd	r2, r3, [r4]
   b5068:	4640      	mov	r0, r8
   b506a:	4649      	mov	r1, r9
   b506c:	f001 f946 	bl	b62fc <__aeabi_dsub>
   b5070:	a373      	add	r3, pc, #460	; (adr r3, b5240 <__ieee754_rem_pio2+0x230>)
   b5072:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5076:	f001 f941 	bl	b62fc <__aeabi_dsub>
   b507a:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b507e:	2601      	movs	r6, #1
   b5080:	4630      	mov	r0, r6
   b5082:	b00b      	add	sp, #44	; 0x2c
   b5084:	ecbd 8b04 	vpop	{d8-d9}
   b5088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b508c:	4977      	ldr	r1, [pc, #476]	; (b526c <__ieee754_rem_pio2+0x25c>)
   b508e:	428d      	cmp	r5, r1
   b5090:	f340 8092 	ble.w	b51b8 <__ieee754_rem_pio2+0x1a8>
   b5094:	4976      	ldr	r1, [pc, #472]	; (b5270 <__ieee754_rem_pio2+0x260>)
   b5096:	428d      	cmp	r5, r1
   b5098:	dc61      	bgt.n	b515e <__ieee754_rem_pio2+0x14e>
   b509a:	152e      	asrs	r6, r5, #20
   b509c:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
   b50a0:	ee10 0a10 	vmov	r0, s0
   b50a4:	eba5 5106 	sub.w	r1, r5, r6, lsl #20
   b50a8:	4690      	mov	r8, r2
   b50aa:	4689      	mov	r9, r1
   b50ac:	f001 fd78 	bl	b6ba0 <__aeabi_d2iz>
   b50b0:	f001 fa72 	bl	b6598 <__aeabi_i2d>
   b50b4:	4602      	mov	r2, r0
   b50b6:	460b      	mov	r3, r1
   b50b8:	4640      	mov	r0, r8
   b50ba:	4649      	mov	r1, r9
   b50bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b50c0:	f001 f91c 	bl	b62fc <__aeabi_dsub>
   b50c4:	4b6b      	ldr	r3, [pc, #428]	; (b5274 <__ieee754_rem_pio2+0x264>)
   b50c6:	2200      	movs	r2, #0
   b50c8:	f001 fad0 	bl	b666c <__aeabi_dmul>
   b50cc:	4689      	mov	r9, r1
   b50ce:	4680      	mov	r8, r0
   b50d0:	f001 fd66 	bl	b6ba0 <__aeabi_d2iz>
   b50d4:	4605      	mov	r5, r0
   b50d6:	f001 fa5f 	bl	b6598 <__aeabi_i2d>
   b50da:	4602      	mov	r2, r0
   b50dc:	460b      	mov	r3, r1
   b50de:	4640      	mov	r0, r8
   b50e0:	4649      	mov	r1, r9
   b50e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b50e6:	f001 f909 	bl	b62fc <__aeabi_dsub>
   b50ea:	4b62      	ldr	r3, [pc, #392]	; (b5274 <__ieee754_rem_pio2+0x264>)
   b50ec:	2200      	movs	r2, #0
   b50ee:	f001 fabd 	bl	b666c <__aeabi_dmul>
   b50f2:	4602      	mov	r2, r0
   b50f4:	460b      	mov	r3, r1
   b50f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b50fa:	2200      	movs	r2, #0
   b50fc:	2300      	movs	r3, #0
   b50fe:	f001 fd1d 	bl	b6b3c <__aeabi_dcmpeq>
   b5102:	2800      	cmp	r0, #0
   b5104:	f000 8153 	beq.w	b53ae <__ieee754_rem_pio2+0x39e>
   b5108:	2d00      	cmp	r5, #0
   b510a:	bf0c      	ite	eq
   b510c:	2301      	moveq	r3, #1
   b510e:	2302      	movne	r3, #2
   b5110:	4a59      	ldr	r2, [pc, #356]	; (b5278 <__ieee754_rem_pio2+0x268>)
   b5112:	9201      	str	r2, [sp, #4]
   b5114:	2202      	movs	r2, #2
   b5116:	9200      	str	r2, [sp, #0]
   b5118:	4621      	mov	r1, r4
   b511a:	4632      	mov	r2, r6
   b511c:	a804      	add	r0, sp, #16
   b511e:	f000 fadf 	bl	b56e0 <__kernel_rem_pio2>
   b5122:	2f00      	cmp	r7, #0
   b5124:	4606      	mov	r6, r0
   b5126:	daab      	bge.n	b5080 <__ieee754_rem_pio2+0x70>
   b5128:	6861      	ldr	r1, [r4, #4]
   b512a:	6822      	ldr	r2, [r4, #0]
   b512c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b5130:	68e1      	ldr	r1, [r4, #12]
   b5132:	e9c4 2300 	strd	r2, r3, [r4]
   b5136:	68a2      	ldr	r2, [r4, #8]
   b5138:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b513c:	e9c4 2302 	strd	r2, r3, [r4, #8]
   b5140:	4246      	negs	r6, r0
   b5142:	e79d      	b.n	b5080 <__ieee754_rem_pio2+0x70>
   b5144:	2000      	movs	r0, #0
   b5146:	2100      	movs	r1, #0
   b5148:	2600      	movs	r6, #0
   b514a:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b514e:	4630      	mov	r0, r6
   b5150:	ed84 0b00 	vstr	d0, [r4]
   b5154:	b00b      	add	sp, #44	; 0x2c
   b5156:	ecbd 8b04 	vpop	{d8-d9}
   b515a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b515e:	ee10 0a10 	vmov	r0, s0
   b5162:	4619      	mov	r1, r3
   b5164:	f001 f8ca 	bl	b62fc <__aeabi_dsub>
   b5168:	2600      	movs	r6, #0
   b516a:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b516e:	e9c4 0100 	strd	r0, r1, [r4]
   b5172:	e785      	b.n	b5080 <__ieee754_rem_pio2+0x70>
   b5174:	a334      	add	r3, pc, #208	; (adr r3, b5248 <__ieee754_rem_pio2+0x238>)
   b5176:	e9d3 2300 	ldrd	r2, r3, [r3]
   b517a:	f001 f8bf 	bl	b62fc <__aeabi_dsub>
   b517e:	a334      	add	r3, pc, #208	; (adr r3, b5250 <__ieee754_rem_pio2+0x240>)
   b5180:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5184:	4680      	mov	r8, r0
   b5186:	4689      	mov	r9, r1
   b5188:	f001 f8b8 	bl	b62fc <__aeabi_dsub>
   b518c:	4602      	mov	r2, r0
   b518e:	460b      	mov	r3, r1
   b5190:	e9c4 2300 	strd	r2, r3, [r4]
   b5194:	4640      	mov	r0, r8
   b5196:	4649      	mov	r1, r9
   b5198:	f001 f8b0 	bl	b62fc <__aeabi_dsub>
   b519c:	a32c      	add	r3, pc, #176	; (adr r3, b5250 <__ieee754_rem_pio2+0x240>)
   b519e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b51a2:	f001 f8ab 	bl	b62fc <__aeabi_dsub>
   b51a6:	2601      	movs	r6, #1
   b51a8:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b51ac:	4630      	mov	r0, r6
   b51ae:	b00b      	add	sp, #44	; 0x2c
   b51b0:	ecbd 8b04 	vpop	{d8-d9}
   b51b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b51b8:	f000 ff7c 	bl	b60b4 <fabs>
   b51bc:	ec59 8b10 	vmov	r8, r9, d0
   b51c0:	ee10 0a10 	vmov	r0, s0
   b51c4:	a324      	add	r3, pc, #144	; (adr r3, b5258 <__ieee754_rem_pio2+0x248>)
   b51c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b51ca:	4649      	mov	r1, r9
   b51cc:	f001 fa4e 	bl	b666c <__aeabi_dmul>
   b51d0:	4b2a      	ldr	r3, [pc, #168]	; (b527c <__ieee754_rem_pio2+0x26c>)
   b51d2:	2200      	movs	r2, #0
   b51d4:	f001 f894 	bl	b6300 <__adddf3>
   b51d8:	f001 fce2 	bl	b6ba0 <__aeabi_d2iz>
   b51dc:	4606      	mov	r6, r0
   b51de:	f001 f9db 	bl	b6598 <__aeabi_i2d>
   b51e2:	4602      	mov	r2, r0
   b51e4:	460b      	mov	r3, r1
   b51e6:	ec43 2b18 	vmov	d8, r2, r3
   b51ea:	a313      	add	r3, pc, #76	; (adr r3, b5238 <__ieee754_rem_pio2+0x228>)
   b51ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   b51f0:	eeb0 9a48 	vmov.f32	s18, s16
   b51f4:	eef0 9a68 	vmov.f32	s19, s17
   b51f8:	f001 fa38 	bl	b666c <__aeabi_dmul>
   b51fc:	4602      	mov	r2, r0
   b51fe:	460b      	mov	r3, r1
   b5200:	4640      	mov	r0, r8
   b5202:	4649      	mov	r1, r9
   b5204:	f001 f87a 	bl	b62fc <__aeabi_dsub>
   b5208:	a30d      	add	r3, pc, #52	; (adr r3, b5240 <__ieee754_rem_pio2+0x230>)
   b520a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b520e:	4682      	mov	sl, r0
   b5210:	468b      	mov	fp, r1
   b5212:	ec51 0b18 	vmov	r0, r1, d8
   b5216:	f001 fa29 	bl	b666c <__aeabi_dmul>
   b521a:	2e1f      	cmp	r6, #31
   b521c:	ec41 0b18 	vmov	d8, r0, r1
   b5220:	dc30      	bgt.n	b5284 <__ieee754_rem_pio2+0x274>
   b5222:	4b17      	ldr	r3, [pc, #92]	; (b5280 <__ieee754_rem_pio2+0x270>)
   b5224:	1e72      	subs	r2, r6, #1
   b5226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   b522a:	42ab      	cmp	r3, r5
   b522c:	d02a      	beq.n	b5284 <__ieee754_rem_pio2+0x274>
   b522e:	4602      	mov	r2, r0
   b5230:	460b      	mov	r3, r1
   b5232:	e09b      	b.n	b536c <__ieee754_rem_pio2+0x35c>
   b5234:	f3af 8000 	nop.w
   b5238:	54400000 	.word	0x54400000
   b523c:	3ff921fb 	.word	0x3ff921fb
   b5240:	1a626331 	.word	0x1a626331
   b5244:	3dd0b461 	.word	0x3dd0b461
   b5248:	1a600000 	.word	0x1a600000
   b524c:	3dd0b461 	.word	0x3dd0b461
   b5250:	2e037073 	.word	0x2e037073
   b5254:	3ba3198a 	.word	0x3ba3198a
   b5258:	6dc9c883 	.word	0x6dc9c883
   b525c:	3fe45f30 	.word	0x3fe45f30
   b5260:	3fe921fb 	.word	0x3fe921fb
   b5264:	4002d97b 	.word	0x4002d97b
   b5268:	3ff921fb 	.word	0x3ff921fb
   b526c:	413921fb 	.word	0x413921fb
   b5270:	7fefffff 	.word	0x7fefffff
   b5274:	41700000 	.word	0x41700000
   b5278:	000b6f68 	.word	0x000b6f68
   b527c:	3fe00000 	.word	0x3fe00000
   b5280:	000b6ee8 	.word	0x000b6ee8
   b5284:	152b      	asrs	r3, r5, #20
   b5286:	9303      	str	r3, [sp, #12]
   b5288:	4650      	mov	r0, sl
   b528a:	ec53 2b18 	vmov	r2, r3, d8
   b528e:	4659      	mov	r1, fp
   b5290:	f001 f834 	bl	b62fc <__aeabi_dsub>
   b5294:	f3c1 530a 	ubfx	r3, r1, #20, #11
   b5298:	ebc3 5515 	rsb	r5, r3, r5, lsr #20
   b529c:	2d10      	cmp	r5, #16
   b529e:	4680      	mov	r8, r0
   b52a0:	4689      	mov	r9, r1
   b52a2:	dd69      	ble.n	b5378 <__ieee754_rem_pio2+0x368>
   b52a4:	a364      	add	r3, pc, #400	; (adr r3, b5438 <__ieee754_rem_pio2+0x428>)
   b52a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b52aa:	ec51 0b19 	vmov	r0, r1, d9
   b52ae:	f001 f9dd 	bl	b666c <__aeabi_dmul>
   b52b2:	4680      	mov	r8, r0
   b52b4:	4689      	mov	r9, r1
   b52b6:	4642      	mov	r2, r8
   b52b8:	464b      	mov	r3, r9
   b52ba:	4650      	mov	r0, sl
   b52bc:	4659      	mov	r1, fp
   b52be:	f001 f81d 	bl	b62fc <__aeabi_dsub>
   b52c2:	4602      	mov	r2, r0
   b52c4:	460b      	mov	r3, r1
   b52c6:	4650      	mov	r0, sl
   b52c8:	4659      	mov	r1, fp
   b52ca:	4692      	mov	sl, r2
   b52cc:	469b      	mov	fp, r3
   b52ce:	f001 f815 	bl	b62fc <__aeabi_dsub>
   b52d2:	4642      	mov	r2, r8
   b52d4:	464b      	mov	r3, r9
   b52d6:	f001 f811 	bl	b62fc <__aeabi_dsub>
   b52da:	a359      	add	r3, pc, #356	; (adr r3, b5440 <__ieee754_rem_pio2+0x430>)
   b52dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b52e0:	4680      	mov	r8, r0
   b52e2:	4689      	mov	r9, r1
   b52e4:	ec51 0b19 	vmov	r0, r1, d9
   b52e8:	f001 f9c0 	bl	b666c <__aeabi_dmul>
   b52ec:	4642      	mov	r2, r8
   b52ee:	464b      	mov	r3, r9
   b52f0:	f001 f804 	bl	b62fc <__aeabi_dsub>
   b52f4:	4602      	mov	r2, r0
   b52f6:	460b      	mov	r3, r1
   b52f8:	4650      	mov	r0, sl
   b52fa:	4659      	mov	r1, fp
   b52fc:	ec43 2b18 	vmov	d8, r2, r3
   b5300:	f000 fffc 	bl	b62fc <__aeabi_dsub>
   b5304:	9a03      	ldr	r2, [sp, #12]
   b5306:	f3c1 530a 	ubfx	r3, r1, #20, #11
   b530a:	1ad3      	subs	r3, r2, r3
   b530c:	2b31      	cmp	r3, #49	; 0x31
   b530e:	4680      	mov	r8, r0
   b5310:	4689      	mov	r9, r1
   b5312:	dd31      	ble.n	b5378 <__ieee754_rem_pio2+0x368>
   b5314:	a34d      	add	r3, pc, #308	; (adr r3, b544c <__ieee754_rem_pio2+0x43c>)
   b5316:	e9d3 2300 	ldrd	r2, r3, [r3]
   b531a:	ec51 0b19 	vmov	r0, r1, d9
   b531e:	f001 f9a5 	bl	b666c <__aeabi_dmul>
   b5322:	4680      	mov	r8, r0
   b5324:	4689      	mov	r9, r1
   b5326:	4642      	mov	r2, r8
   b5328:	464b      	mov	r3, r9
   b532a:	4650      	mov	r0, sl
   b532c:	4659      	mov	r1, fp
   b532e:	f000 ffe5 	bl	b62fc <__aeabi_dsub>
   b5332:	4602      	mov	r2, r0
   b5334:	460b      	mov	r3, r1
   b5336:	4650      	mov	r0, sl
   b5338:	4659      	mov	r1, fp
   b533a:	4692      	mov	sl, r2
   b533c:	469b      	mov	fp, r3
   b533e:	f000 ffdd 	bl	b62fc <__aeabi_dsub>
   b5342:	4642      	mov	r2, r8
   b5344:	464b      	mov	r3, r9
   b5346:	f000 ffd9 	bl	b62fc <__aeabi_dsub>
   b534a:	a342      	add	r3, pc, #264	; (adr r3, b5454 <__ieee754_rem_pio2+0x444>)
   b534c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5350:	4680      	mov	r8, r0
   b5352:	4689      	mov	r9, r1
   b5354:	ec51 0b19 	vmov	r0, r1, d9
   b5358:	f001 f988 	bl	b666c <__aeabi_dmul>
   b535c:	4642      	mov	r2, r8
   b535e:	464b      	mov	r3, r9
   b5360:	f000 ffcc 	bl	b62fc <__aeabi_dsub>
   b5364:	4602      	mov	r2, r0
   b5366:	460b      	mov	r3, r1
   b5368:	ec43 2b18 	vmov	d8, r2, r3
   b536c:	4650      	mov	r0, sl
   b536e:	4659      	mov	r1, fp
   b5370:	f000 ffc4 	bl	b62fc <__aeabi_dsub>
   b5374:	4680      	mov	r8, r0
   b5376:	4689      	mov	r9, r1
   b5378:	4642      	mov	r2, r8
   b537a:	464b      	mov	r3, r9
   b537c:	e9c4 8900 	strd	r8, r9, [r4]
   b5380:	4650      	mov	r0, sl
   b5382:	4659      	mov	r1, fp
   b5384:	f000 ffba 	bl	b62fc <__aeabi_dsub>
   b5388:	ec53 2b18 	vmov	r2, r3, d8
   b538c:	f000 ffb6 	bl	b62fc <__aeabi_dsub>
   b5390:	2f00      	cmp	r7, #0
   b5392:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b5396:	f6bf ae73 	bge.w	b5080 <__ieee754_rem_pio2+0x70>
   b539a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b539e:	e9c4 8300 	strd	r8, r3, [r4]
   b53a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b53a6:	e9c4 0302 	strd	r0, r3, [r4, #8]
   b53aa:	4276      	negs	r6, r6
   b53ac:	e668      	b.n	b5080 <__ieee754_rem_pio2+0x70>
   b53ae:	2303      	movs	r3, #3
   b53b0:	e6ae      	b.n	b5110 <__ieee754_rem_pio2+0x100>
   b53b2:	f000 ffa5 	bl	b6300 <__adddf3>
   b53b6:	4b24      	ldr	r3, [pc, #144]	; (b5448 <__ieee754_rem_pio2+0x438>)
   b53b8:	429d      	cmp	r5, r3
   b53ba:	4680      	mov	r8, r0
   b53bc:	4689      	mov	r9, r1
   b53be:	d016      	beq.n	b53ee <__ieee754_rem_pio2+0x3de>
   b53c0:	a31b      	add	r3, pc, #108	; (adr r3, b5430 <__ieee754_rem_pio2+0x420>)
   b53c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b53c6:	f000 ff9b 	bl	b6300 <__adddf3>
   b53ca:	4602      	mov	r2, r0
   b53cc:	460b      	mov	r3, r1
   b53ce:	e9c4 2300 	strd	r2, r3, [r4]
   b53d2:	4640      	mov	r0, r8
   b53d4:	4649      	mov	r1, r9
   b53d6:	f000 ff91 	bl	b62fc <__aeabi_dsub>
   b53da:	a315      	add	r3, pc, #84	; (adr r3, b5430 <__ieee754_rem_pio2+0x420>)
   b53dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b53e0:	f000 ff8e 	bl	b6300 <__adddf3>
   b53e4:	f04f 36ff 	mov.w	r6, #4294967295
   b53e8:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b53ec:	e648      	b.n	b5080 <__ieee754_rem_pio2+0x70>
   b53ee:	a312      	add	r3, pc, #72	; (adr r3, b5438 <__ieee754_rem_pio2+0x428>)
   b53f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b53f4:	f000 ff84 	bl	b6300 <__adddf3>
   b53f8:	a311      	add	r3, pc, #68	; (adr r3, b5440 <__ieee754_rem_pio2+0x430>)
   b53fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   b53fe:	4680      	mov	r8, r0
   b5400:	4689      	mov	r9, r1
   b5402:	f000 ff7d 	bl	b6300 <__adddf3>
   b5406:	4602      	mov	r2, r0
   b5408:	460b      	mov	r3, r1
   b540a:	e9c4 2300 	strd	r2, r3, [r4]
   b540e:	4640      	mov	r0, r8
   b5410:	4649      	mov	r1, r9
   b5412:	f000 ff73 	bl	b62fc <__aeabi_dsub>
   b5416:	a30a      	add	r3, pc, #40	; (adr r3, b5440 <__ieee754_rem_pio2+0x430>)
   b5418:	e9d3 2300 	ldrd	r2, r3, [r3]
   b541c:	f000 ff70 	bl	b6300 <__adddf3>
   b5420:	f04f 36ff 	mov.w	r6, #4294967295
   b5424:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b5428:	e62a      	b.n	b5080 <__ieee754_rem_pio2+0x70>
   b542a:	bf00      	nop
   b542c:	f3af 8000 	nop.w
   b5430:	1a626331 	.word	0x1a626331
   b5434:	3dd0b461 	.word	0x3dd0b461
   b5438:	1a600000 	.word	0x1a600000
   b543c:	3dd0b461 	.word	0x3dd0b461
   b5440:	2e037073 	.word	0x2e037073
   b5444:	3ba3198a 	.word	0x3ba3198a
   b5448:	3ff921fb 	.word	0x3ff921fb
   b544c:	2e000000 	.word	0x2e000000
   b5450:	3ba3198a 	.word	0x3ba3198a
   b5454:	252049c1 	.word	0x252049c1
   b5458:	397b839a 	.word	0x397b839a
   b545c:	00000000 	.word	0x00000000

000b5460 <__kernel_cos>:
   b5460:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5464:	ec57 6b10 	vmov	r6, r7, d0
   b5468:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   b546c:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   b5470:	ed2d 8b04 	vpush	{d8-d9}
   b5474:	ec5b ab11 	vmov	sl, fp, d1
   b5478:	da71      	bge.n	b555e <__kernel_cos+0xfe>
   b547a:	ee10 0a10 	vmov	r0, s0
   b547e:	4639      	mov	r1, r7
   b5480:	f001 fb8e 	bl	b6ba0 <__aeabi_d2iz>
   b5484:	2800      	cmp	r0, #0
   b5486:	f000 80f6 	beq.w	b5676 <__kernel_cos+0x216>
   b548a:	4632      	mov	r2, r6
   b548c:	463b      	mov	r3, r7
   b548e:	4630      	mov	r0, r6
   b5490:	4639      	mov	r1, r7
   b5492:	f001 f8eb 	bl	b666c <__aeabi_dmul>
   b5496:	a37c      	add	r3, pc, #496	; (adr r3, b5688 <__kernel_cos+0x228>)
   b5498:	e9d3 2300 	ldrd	r2, r3, [r3]
   b549c:	4604      	mov	r4, r0
   b549e:	460d      	mov	r5, r1
   b54a0:	f001 f8e4 	bl	b666c <__aeabi_dmul>
   b54a4:	a37a      	add	r3, pc, #488	; (adr r3, b5690 <__kernel_cos+0x230>)
   b54a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b54aa:	f000 ff29 	bl	b6300 <__adddf3>
   b54ae:	4622      	mov	r2, r4
   b54b0:	462b      	mov	r3, r5
   b54b2:	f001 f8db 	bl	b666c <__aeabi_dmul>
   b54b6:	a378      	add	r3, pc, #480	; (adr r3, b5698 <__kernel_cos+0x238>)
   b54b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b54bc:	f000 ff1e 	bl	b62fc <__aeabi_dsub>
   b54c0:	4622      	mov	r2, r4
   b54c2:	462b      	mov	r3, r5
   b54c4:	f001 f8d2 	bl	b666c <__aeabi_dmul>
   b54c8:	a375      	add	r3, pc, #468	; (adr r3, b56a0 <__kernel_cos+0x240>)
   b54ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   b54ce:	f000 ff17 	bl	b6300 <__adddf3>
   b54d2:	4622      	mov	r2, r4
   b54d4:	462b      	mov	r3, r5
   b54d6:	f001 f8c9 	bl	b666c <__aeabi_dmul>
   b54da:	a373      	add	r3, pc, #460	; (adr r3, b56a8 <__kernel_cos+0x248>)
   b54dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b54e0:	f000 ff0c 	bl	b62fc <__aeabi_dsub>
   b54e4:	4622      	mov	r2, r4
   b54e6:	462b      	mov	r3, r5
   b54e8:	f001 f8c0 	bl	b666c <__aeabi_dmul>
   b54ec:	a370      	add	r3, pc, #448	; (adr r3, b56b0 <__kernel_cos+0x250>)
   b54ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   b54f2:	f000 ff05 	bl	b6300 <__adddf3>
   b54f6:	4622      	mov	r2, r4
   b54f8:	462b      	mov	r3, r5
   b54fa:	f001 f8b7 	bl	b666c <__aeabi_dmul>
   b54fe:	ec41 0b18 	vmov	d8, r0, r1
   b5502:	4b71      	ldr	r3, [pc, #452]	; (b56c8 <__kernel_cos+0x268>)
   b5504:	2200      	movs	r2, #0
   b5506:	4620      	mov	r0, r4
   b5508:	4629      	mov	r1, r5
   b550a:	f001 f8af 	bl	b666c <__aeabi_dmul>
   b550e:	ec53 2b18 	vmov	r2, r3, d8
   b5512:	4680      	mov	r8, r0
   b5514:	4689      	mov	r9, r1
   b5516:	4620      	mov	r0, r4
   b5518:	4629      	mov	r1, r5
   b551a:	f001 f8a7 	bl	b666c <__aeabi_dmul>
   b551e:	4652      	mov	r2, sl
   b5520:	465b      	mov	r3, fp
   b5522:	4604      	mov	r4, r0
   b5524:	460d      	mov	r5, r1
   b5526:	4630      	mov	r0, r6
   b5528:	4639      	mov	r1, r7
   b552a:	f001 f89f 	bl	b666c <__aeabi_dmul>
   b552e:	4602      	mov	r2, r0
   b5530:	460b      	mov	r3, r1
   b5532:	4620      	mov	r0, r4
   b5534:	4629      	mov	r1, r5
   b5536:	f000 fee1 	bl	b62fc <__aeabi_dsub>
   b553a:	4602      	mov	r2, r0
   b553c:	460b      	mov	r3, r1
   b553e:	4640      	mov	r0, r8
   b5540:	4649      	mov	r1, r9
   b5542:	f000 fedb 	bl	b62fc <__aeabi_dsub>
   b5546:	4602      	mov	r2, r0
   b5548:	460b      	mov	r3, r1
   b554a:	2000      	movs	r0, #0
   b554c:	495f      	ldr	r1, [pc, #380]	; (b56cc <__kernel_cos+0x26c>)
   b554e:	f000 fed5 	bl	b62fc <__aeabi_dsub>
   b5552:	ecbd 8b04 	vpop	{d8-d9}
   b5556:	ec41 0b10 	vmov	d0, r0, r1
   b555a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b555e:	ee10 2a10 	vmov	r2, s0
   b5562:	ee10 0a10 	vmov	r0, s0
   b5566:	463b      	mov	r3, r7
   b5568:	4639      	mov	r1, r7
   b556a:	f001 f87f 	bl	b666c <__aeabi_dmul>
   b556e:	a346      	add	r3, pc, #280	; (adr r3, b5688 <__kernel_cos+0x228>)
   b5570:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5574:	4604      	mov	r4, r0
   b5576:	460d      	mov	r5, r1
   b5578:	f001 f878 	bl	b666c <__aeabi_dmul>
   b557c:	a344      	add	r3, pc, #272	; (adr r3, b5690 <__kernel_cos+0x230>)
   b557e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5582:	f000 febd 	bl	b6300 <__adddf3>
   b5586:	4622      	mov	r2, r4
   b5588:	462b      	mov	r3, r5
   b558a:	f001 f86f 	bl	b666c <__aeabi_dmul>
   b558e:	a342      	add	r3, pc, #264	; (adr r3, b5698 <__kernel_cos+0x238>)
   b5590:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5594:	f000 feb2 	bl	b62fc <__aeabi_dsub>
   b5598:	4622      	mov	r2, r4
   b559a:	462b      	mov	r3, r5
   b559c:	f001 f866 	bl	b666c <__aeabi_dmul>
   b55a0:	a33f      	add	r3, pc, #252	; (adr r3, b56a0 <__kernel_cos+0x240>)
   b55a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b55a6:	f000 feab 	bl	b6300 <__adddf3>
   b55aa:	4622      	mov	r2, r4
   b55ac:	462b      	mov	r3, r5
   b55ae:	f001 f85d 	bl	b666c <__aeabi_dmul>
   b55b2:	a33d      	add	r3, pc, #244	; (adr r3, b56a8 <__kernel_cos+0x248>)
   b55b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b55b8:	f000 fea0 	bl	b62fc <__aeabi_dsub>
   b55bc:	4622      	mov	r2, r4
   b55be:	462b      	mov	r3, r5
   b55c0:	f001 f854 	bl	b666c <__aeabi_dmul>
   b55c4:	a33a      	add	r3, pc, #232	; (adr r3, b56b0 <__kernel_cos+0x250>)
   b55c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b55ca:	f000 fe99 	bl	b6300 <__adddf3>
   b55ce:	462b      	mov	r3, r5
   b55d0:	4622      	mov	r2, r4
   b55d2:	f001 f84b 	bl	b666c <__aeabi_dmul>
   b55d6:	4b3e      	ldr	r3, [pc, #248]	; (b56d0 <__kernel_cos+0x270>)
   b55d8:	4599      	cmp	r9, r3
   b55da:	ec41 0b18 	vmov	d8, r0, r1
   b55de:	dd90      	ble.n	b5502 <__kernel_cos+0xa2>
   b55e0:	4b3c      	ldr	r3, [pc, #240]	; (b56d4 <__kernel_cos+0x274>)
   b55e2:	4599      	cmp	r9, r3
   b55e4:	dc3c      	bgt.n	b5660 <__kernel_cos+0x200>
   b55e6:	2200      	movs	r2, #0
   b55e8:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   b55ec:	4937      	ldr	r1, [pc, #220]	; (b56cc <__kernel_cos+0x26c>)
   b55ee:	2000      	movs	r0, #0
   b55f0:	4690      	mov	r8, r2
   b55f2:	4699      	mov	r9, r3
   b55f4:	f000 fe82 	bl	b62fc <__aeabi_dsub>
   b55f8:	ec41 0b19 	vmov	d9, r0, r1
   b55fc:	4b32      	ldr	r3, [pc, #200]	; (b56c8 <__kernel_cos+0x268>)
   b55fe:	2200      	movs	r2, #0
   b5600:	4620      	mov	r0, r4
   b5602:	4629      	mov	r1, r5
   b5604:	f001 f832 	bl	b666c <__aeabi_dmul>
   b5608:	4642      	mov	r2, r8
   b560a:	464b      	mov	r3, r9
   b560c:	f000 fe76 	bl	b62fc <__aeabi_dsub>
   b5610:	ec53 2b18 	vmov	r2, r3, d8
   b5614:	4680      	mov	r8, r0
   b5616:	4689      	mov	r9, r1
   b5618:	4620      	mov	r0, r4
   b561a:	4629      	mov	r1, r5
   b561c:	f001 f826 	bl	b666c <__aeabi_dmul>
   b5620:	4652      	mov	r2, sl
   b5622:	465b      	mov	r3, fp
   b5624:	4604      	mov	r4, r0
   b5626:	460d      	mov	r5, r1
   b5628:	4630      	mov	r0, r6
   b562a:	4639      	mov	r1, r7
   b562c:	f001 f81e 	bl	b666c <__aeabi_dmul>
   b5630:	4602      	mov	r2, r0
   b5632:	460b      	mov	r3, r1
   b5634:	4620      	mov	r0, r4
   b5636:	4629      	mov	r1, r5
   b5638:	f000 fe60 	bl	b62fc <__aeabi_dsub>
   b563c:	4602      	mov	r2, r0
   b563e:	460b      	mov	r3, r1
   b5640:	4640      	mov	r0, r8
   b5642:	4649      	mov	r1, r9
   b5644:	f000 fe5a 	bl	b62fc <__aeabi_dsub>
   b5648:	4602      	mov	r2, r0
   b564a:	460b      	mov	r3, r1
   b564c:	ec51 0b19 	vmov	r0, r1, d9
   b5650:	f000 fe54 	bl	b62fc <__aeabi_dsub>
   b5654:	ecbd 8b04 	vpop	{d8-d9}
   b5658:	ec41 0b10 	vmov	d0, r0, r1
   b565c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5660:	ed9f 7b15 	vldr	d7, [pc, #84]	; b56b8 <__kernel_cos+0x258>
   b5664:	f8df 9070 	ldr.w	r9, [pc, #112]	; b56d8 <__kernel_cos+0x278>
   b5668:	eeb0 9a47 	vmov.f32	s18, s14
   b566c:	eef0 9a67 	vmov.f32	s19, s15
   b5670:	f04f 0800 	mov.w	r8, #0
   b5674:	e7c2      	b.n	b55fc <__kernel_cos+0x19c>
   b5676:	ecbd 8b04 	vpop	{d8-d9}
   b567a:	ed9f 0b11 	vldr	d0, [pc, #68]	; b56c0 <__kernel_cos+0x260>
   b567e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5682:	bf00      	nop
   b5684:	f3af 8000 	nop.w
   b5688:	be8838d4 	.word	0xbe8838d4
   b568c:	bda8fae9 	.word	0xbda8fae9
   b5690:	bdb4b1c4 	.word	0xbdb4b1c4
   b5694:	3e21ee9e 	.word	0x3e21ee9e
   b5698:	809c52ad 	.word	0x809c52ad
   b569c:	3e927e4f 	.word	0x3e927e4f
   b56a0:	19cb1590 	.word	0x19cb1590
   b56a4:	3efa01a0 	.word	0x3efa01a0
   b56a8:	16c15177 	.word	0x16c15177
   b56ac:	3f56c16c 	.word	0x3f56c16c
   b56b0:	5555554c 	.word	0x5555554c
   b56b4:	3fa55555 	.word	0x3fa55555
   b56b8:	00000000 	.word	0x00000000
   b56bc:	3fe70000 	.word	0x3fe70000
   b56c0:	00000000 	.word	0x00000000
   b56c4:	3ff00000 	.word	0x3ff00000
   b56c8:	3fe00000 	.word	0x3fe00000
   b56cc:	3ff00000 	.word	0x3ff00000
   b56d0:	3fd33332 	.word	0x3fd33332
   b56d4:	3fe90000 	.word	0x3fe90000
   b56d8:	3fd20000 	.word	0x3fd20000
   b56dc:	00000000 	.word	0x00000000

000b56e0 <__kernel_rem_pio2>:
   b56e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b56e4:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
   b56e8:	461c      	mov	r4, r3
   b56ea:	9308      	str	r3, [sp, #32]
   b56ec:	910b      	str	r1, [sp, #44]	; 0x2c
   b56ee:	4bbb      	ldr	r3, [pc, #748]	; (b59dc <__kernel_rem_pio2+0x2fc>)
   b56f0:	99a2      	ldr	r1, [sp, #648]	; 0x288
   b56f2:	9004      	str	r0, [sp, #16]
   b56f4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
   b56f8:	9105      	str	r1, [sp, #20]
   b56fa:	1e63      	subs	r3, r4, #1
   b56fc:	f112 0f14 	cmn.w	r2, #20
   b5700:	9303      	str	r3, [sp, #12]
   b5702:	f2c0 834b 	blt.w	b5d9c <__kernel_rem_pio2+0x6bc>
   b5706:	49b6      	ldr	r1, [pc, #728]	; (b59e0 <__kernel_rem_pio2+0x300>)
   b5708:	1ed3      	subs	r3, r2, #3
   b570a:	fb81 0103 	smull	r0, r1, r1, r3
   b570e:	17db      	asrs	r3, r3, #31
   b5710:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   b5714:	9307      	str	r3, [sp, #28]
   b5716:	3301      	adds	r3, #1
   b5718:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   b571c:	00db      	lsls	r3, r3, #3
   b571e:	18d3      	adds	r3, r2, r3
   b5720:	9306      	str	r3, [sp, #24]
   b5722:	9a07      	ldr	r2, [sp, #28]
   b5724:	9b03      	ldr	r3, [sp, #12]
   b5726:	1ad4      	subs	r4, r2, r3
   b5728:	9a05      	ldr	r2, [sp, #20]
   b572a:	18d6      	adds	r6, r2, r3
   b572c:	d41a      	bmi.n	b5764 <__kernel_rem_pio2+0x84>
   b572e:	3601      	adds	r6, #1
   b5730:	9fa3      	ldr	r7, [sp, #652]	; 0x28c
   b5732:	4426      	add	r6, r4
   b5734:	ad20      	add	r5, sp, #128	; 0x80
   b5736:	f04f 0800 	mov.w	r8, #0
   b573a:	f04f 0900 	mov.w	r9, #0
   b573e:	e008      	b.n	b5752 <__kernel_rem_pio2+0x72>
   b5740:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   b5744:	f000 ff28 	bl	b6598 <__aeabi_i2d>
   b5748:	3401      	adds	r4, #1
   b574a:	42b4      	cmp	r4, r6
   b574c:	e8e5 0102 	strd	r0, r1, [r5], #8
   b5750:	d008      	beq.n	b5764 <__kernel_rem_pio2+0x84>
   b5752:	2c00      	cmp	r4, #0
   b5754:	daf4      	bge.n	b5740 <__kernel_rem_pio2+0x60>
   b5756:	3401      	adds	r4, #1
   b5758:	4640      	mov	r0, r8
   b575a:	4649      	mov	r1, r9
   b575c:	42b4      	cmp	r4, r6
   b575e:	e8e5 0102 	strd	r0, r1, [r5], #8
   b5762:	d1f6      	bne.n	b5752 <__kernel_rem_pio2+0x72>
   b5764:	9b05      	ldr	r3, [sp, #20]
   b5766:	2b00      	cmp	r3, #0
   b5768:	f2c0 83c8 	blt.w	b5efc <__kernel_rem_pio2+0x81c>
   b576c:	9b08      	ldr	r3, [sp, #32]
   b576e:	f8dd 900c 	ldr.w	r9, [sp, #12]
   b5772:	00da      	lsls	r2, r3, #3
   b5774:	9202      	str	r2, [sp, #8]
   b5776:	9a05      	ldr	r2, [sp, #20]
   b5778:	441a      	add	r2, r3
   b577a:	9201      	str	r2, [sp, #4]
   b577c:	9a04      	ldr	r2, [sp, #16]
   b577e:	a920      	add	r1, sp, #128	; 0x80
   b5780:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
   b5784:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
   b5788:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
   b578c:	9b03      	ldr	r3, [sp, #12]
   b578e:	2b00      	cmp	r3, #0
   b5790:	f2c0 81a9 	blt.w	b5ae6 <__kernel_rem_pio2+0x406>
   b5794:	9e04      	ldr	r6, [sp, #16]
   b5796:	4657      	mov	r7, sl
   b5798:	2400      	movs	r4, #0
   b579a:	2500      	movs	r5, #0
   b579c:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
   b57a0:	e8f6 0102 	ldrd	r0, r1, [r6], #8
   b57a4:	f000 ff62 	bl	b666c <__aeabi_dmul>
   b57a8:	4602      	mov	r2, r0
   b57aa:	460b      	mov	r3, r1
   b57ac:	4620      	mov	r0, r4
   b57ae:	4629      	mov	r1, r5
   b57b0:	f000 fda6 	bl	b6300 <__adddf3>
   b57b4:	4546      	cmp	r6, r8
   b57b6:	4604      	mov	r4, r0
   b57b8:	460d      	mov	r5, r1
   b57ba:	d1ef      	bne.n	b579c <__kernel_rem_pio2+0xbc>
   b57bc:	9b01      	ldr	r3, [sp, #4]
   b57be:	f109 0901 	add.w	r9, r9, #1
   b57c2:	4599      	cmp	r9, r3
   b57c4:	e8eb 4502 	strd	r4, r5, [fp], #8
   b57c8:	f10a 0a08 	add.w	sl, sl, #8
   b57cc:	d1de      	bne.n	b578c <__kernel_rem_pio2+0xac>
   b57ce:	9a04      	ldr	r2, [sp, #16]
   b57d0:	9b02      	ldr	r3, [sp, #8]
   b57d2:	4413      	add	r3, r2
   b57d4:	469b      	mov	fp, r3
   b57d6:	9b05      	ldr	r3, [sp, #20]
   b57d8:	a90b      	add	r1, sp, #44	; 0x2c
   b57da:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   b57de:	a90c      	add	r1, sp, #48	; 0x30
   b57e0:	920a      	str	r2, [sp, #40]	; 0x28
   b57e2:	461a      	mov	r2, r3
   b57e4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   b57e8:	3b08      	subs	r3, #8
   b57ea:	9309      	str	r3, [sp, #36]	; 0x24
   b57ec:	9201      	str	r2, [sp, #4]
   b57ee:	9a01      	ldr	r2, [sp, #4]
   b57f0:	a998      	add	r1, sp, #608	; 0x260
   b57f2:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   b57f6:	2a00      	cmp	r2, #0
   b57f8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   b57fc:	dd29      	ble.n	b5852 <__kernel_rem_pio2+0x172>
   b57fe:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
   b5802:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   b5806:	f10d 0930 	add.w	r9, sp, #48	; 0x30
   b580a:	4b76      	ldr	r3, [pc, #472]	; (b59e4 <__kernel_rem_pio2+0x304>)
   b580c:	2200      	movs	r2, #0
   b580e:	4620      	mov	r0, r4
   b5810:	4629      	mov	r1, r5
   b5812:	f000 ff2b 	bl	b666c <__aeabi_dmul>
   b5816:	f001 f9c3 	bl	b6ba0 <__aeabi_d2iz>
   b581a:	f000 febd 	bl	b6598 <__aeabi_i2d>
   b581e:	4b72      	ldr	r3, [pc, #456]	; (b59e8 <__kernel_rem_pio2+0x308>)
   b5820:	2200      	movs	r2, #0
   b5822:	4606      	mov	r6, r0
   b5824:	460f      	mov	r7, r1
   b5826:	f000 ff21 	bl	b666c <__aeabi_dmul>
   b582a:	4602      	mov	r2, r0
   b582c:	460b      	mov	r3, r1
   b582e:	4620      	mov	r0, r4
   b5830:	4629      	mov	r1, r5
   b5832:	f000 fd63 	bl	b62fc <__aeabi_dsub>
   b5836:	f001 f9b3 	bl	b6ba0 <__aeabi_d2iz>
   b583a:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   b583e:	f849 0b04 	str.w	r0, [r9], #4
   b5842:	4639      	mov	r1, r7
   b5844:	4630      	mov	r0, r6
   b5846:	f000 fd5b 	bl	b6300 <__adddf3>
   b584a:	45d0      	cmp	r8, sl
   b584c:	4604      	mov	r4, r0
   b584e:	460d      	mov	r5, r1
   b5850:	d1db      	bne.n	b580a <__kernel_rem_pio2+0x12a>
   b5852:	f8dd 9018 	ldr.w	r9, [sp, #24]
   b5856:	ec45 4b10 	vmov	d0, r4, r5
   b585a:	4648      	mov	r0, r9
   b585c:	f000 fcb8 	bl	b61d0 <scalbn>
   b5860:	ec55 4b10 	vmov	r4, r5, d0
   b5864:	2200      	movs	r2, #0
   b5866:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   b586a:	ee10 0a10 	vmov	r0, s0
   b586e:	4629      	mov	r1, r5
   b5870:	f000 fefc 	bl	b666c <__aeabi_dmul>
   b5874:	ec41 0b10 	vmov	d0, r0, r1
   b5878:	f000 fc26 	bl	b60c8 <floor>
   b587c:	4b5b      	ldr	r3, [pc, #364]	; (b59ec <__kernel_rem_pio2+0x30c>)
   b587e:	ec51 0b10 	vmov	r0, r1, d0
   b5882:	2200      	movs	r2, #0
   b5884:	f000 fef2 	bl	b666c <__aeabi_dmul>
   b5888:	4602      	mov	r2, r0
   b588a:	460b      	mov	r3, r1
   b588c:	4620      	mov	r0, r4
   b588e:	4629      	mov	r1, r5
   b5890:	f000 fd34 	bl	b62fc <__aeabi_dsub>
   b5894:	460d      	mov	r5, r1
   b5896:	4604      	mov	r4, r0
   b5898:	f001 f982 	bl	b6ba0 <__aeabi_d2iz>
   b589c:	4680      	mov	r8, r0
   b589e:	f000 fe7b 	bl	b6598 <__aeabi_i2d>
   b58a2:	460b      	mov	r3, r1
   b58a4:	4602      	mov	r2, r0
   b58a6:	4629      	mov	r1, r5
   b58a8:	4620      	mov	r0, r4
   b58aa:	f000 fd27 	bl	b62fc <__aeabi_dsub>
   b58ae:	464b      	mov	r3, r9
   b58b0:	2b00      	cmp	r3, #0
   b58b2:	4606      	mov	r6, r0
   b58b4:	460f      	mov	r7, r1
   b58b6:	f340 809b 	ble.w	b59f0 <__kernel_rem_pio2+0x310>
   b58ba:	9a01      	ldr	r2, [sp, #4]
   b58bc:	1e51      	subs	r1, r2, #1
   b58be:	aa0c      	add	r2, sp, #48	; 0x30
   b58c0:	f1c9 0318 	rsb	r3, r9, #24
   b58c4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   b58c8:	fa42 f003 	asr.w	r0, r2, r3
   b58cc:	fa00 f303 	lsl.w	r3, r0, r3
   b58d0:	1ad3      	subs	r3, r2, r3
   b58d2:	f1c9 0517 	rsb	r5, r9, #23
   b58d6:	aa0c      	add	r2, sp, #48	; 0x30
   b58d8:	fa43 f505 	asr.w	r5, r3, r5
   b58dc:	2d00      	cmp	r5, #0
   b58de:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   b58e2:	4480      	add	r8, r0
   b58e4:	f300 808e 	bgt.w	b5a04 <__kernel_rem_pio2+0x324>
   b58e8:	2200      	movs	r2, #0
   b58ea:	2300      	movs	r3, #0
   b58ec:	4630      	mov	r0, r6
   b58ee:	4639      	mov	r1, r7
   b58f0:	f001 f924 	bl	b6b3c <__aeabi_dcmpeq>
   b58f4:	2800      	cmp	r0, #0
   b58f6:	f000 8258 	beq.w	b5daa <__kernel_rem_pio2+0x6ca>
   b58fa:	9b01      	ldr	r3, [sp, #4]
   b58fc:	9a05      	ldr	r2, [sp, #20]
   b58fe:	f103 3aff 	add.w	sl, r3, #4294967295
   b5902:	4552      	cmp	r2, sl
   b5904:	dc10      	bgt.n	b5928 <__kernel_rem_pio2+0x248>
   b5906:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   b590a:	aa0c      	add	r2, sp, #48	; 0x30
   b590c:	3b01      	subs	r3, #1
   b590e:	980a      	ldr	r0, [sp, #40]	; 0x28
   b5910:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b5914:	2200      	movs	r2, #0
   b5916:	f853 1904 	ldr.w	r1, [r3], #-4
   b591a:	4283      	cmp	r3, r0
   b591c:	ea42 0201 	orr.w	r2, r2, r1
   b5920:	d1f9      	bne.n	b5916 <__kernel_rem_pio2+0x236>
   b5922:	2a00      	cmp	r2, #0
   b5924:	f040 80e2 	bne.w	b5aec <__kernel_rem_pio2+0x40c>
   b5928:	9b05      	ldr	r3, [sp, #20]
   b592a:	aa0c      	add	r2, sp, #48	; 0x30
   b592c:	3b01      	subs	r3, #1
   b592e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   b5932:	2b00      	cmp	r3, #0
   b5934:	f040 80d2 	bne.w	b5adc <__kernel_rem_pio2+0x3fc>
   b5938:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b593a:	2301      	movs	r3, #1
   b593c:	f852 1904 	ldr.w	r1, [r2], #-4
   b5940:	3301      	adds	r3, #1
   b5942:	2900      	cmp	r1, #0
   b5944:	d0fa      	beq.n	b593c <__kernel_rem_pio2+0x25c>
   b5946:	9a01      	ldr	r2, [sp, #4]
   b5948:	18d3      	adds	r3, r2, r3
   b594a:	9302      	str	r3, [sp, #8]
   b594c:	1c53      	adds	r3, r2, #1
   b594e:	4699      	mov	r9, r3
   b5950:	9a01      	ldr	r2, [sp, #4]
   b5952:	9908      	ldr	r1, [sp, #32]
   b5954:	440a      	add	r2, r1
   b5956:	4690      	mov	r8, r2
   b5958:	9a07      	ldr	r2, [sp, #28]
   b595a:	eb02 0a03 	add.w	sl, r2, r3
   b595e:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
   b5962:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
   b5964:	f10a 3aff 	add.w	sl, sl, #4294967295
   b5968:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
   b596c:	aa20      	add	r2, sp, #128	; 0x80
   b596e:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   b5972:	aa70      	add	r2, sp, #448	; 0x1c0
   b5974:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   b5978:	9301      	str	r3, [sp, #4]
   b597a:	f85a 0f04 	ldr.w	r0, [sl, #4]!
   b597e:	f000 fe0b 	bl	b6598 <__aeabi_i2d>
   b5982:	460b      	mov	r3, r1
   b5984:	9903      	ldr	r1, [sp, #12]
   b5986:	4602      	mov	r2, r0
   b5988:	2900      	cmp	r1, #0
   b598a:	e9c8 2300 	strd	r2, r3, [r8]
   b598e:	4647      	mov	r7, r8
   b5990:	f108 0808 	add.w	r8, r8, #8
   b5994:	db1e      	blt.n	b59d4 <__kernel_rem_pio2+0x2f4>
   b5996:	9e04      	ldr	r6, [sp, #16]
   b5998:	2400      	movs	r4, #0
   b599a:	2500      	movs	r5, #0
   b599c:	e001      	b.n	b59a2 <__kernel_rem_pio2+0x2c2>
   b599e:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
   b59a2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
   b59a6:	f000 fe61 	bl	b666c <__aeabi_dmul>
   b59aa:	4602      	mov	r2, r0
   b59ac:	460b      	mov	r3, r1
   b59ae:	4620      	mov	r0, r4
   b59b0:	4629      	mov	r1, r5
   b59b2:	f000 fca5 	bl	b6300 <__adddf3>
   b59b6:	455e      	cmp	r6, fp
   b59b8:	4604      	mov	r4, r0
   b59ba:	460d      	mov	r5, r1
   b59bc:	d1ef      	bne.n	b599e <__kernel_rem_pio2+0x2be>
   b59be:	9b01      	ldr	r3, [sp, #4]
   b59c0:	e8e3 4502 	strd	r4, r5, [r3], #8
   b59c4:	9301      	str	r3, [sp, #4]
   b59c6:	9b02      	ldr	r3, [sp, #8]
   b59c8:	f109 0901 	add.w	r9, r9, #1
   b59cc:	4599      	cmp	r9, r3
   b59ce:	ddd4      	ble.n	b597a <__kernel_rem_pio2+0x29a>
   b59d0:	9301      	str	r3, [sp, #4]
   b59d2:	e70c      	b.n	b57ee <__kernel_rem_pio2+0x10e>
   b59d4:	2400      	movs	r4, #0
   b59d6:	2500      	movs	r5, #0
   b59d8:	e7f1      	b.n	b59be <__kernel_rem_pio2+0x2de>
   b59da:	bf00      	nop
   b59dc:	000b70b0 	.word	0x000b70b0
   b59e0:	2aaaaaab 	.word	0x2aaaaaab
   b59e4:	3e700000 	.word	0x3e700000
   b59e8:	41700000 	.word	0x41700000
   b59ec:	40200000 	.word	0x40200000
   b59f0:	d16b      	bne.n	b5aca <__kernel_rem_pio2+0x3ea>
   b59f2:	9b01      	ldr	r3, [sp, #4]
   b59f4:	aa0c      	add	r2, sp, #48	; 0x30
   b59f6:	3b01      	subs	r3, #1
   b59f8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   b59fc:	15ed      	asrs	r5, r5, #23
   b59fe:	2d00      	cmp	r5, #0
   b5a00:	f77f af72 	ble.w	b58e8 <__kernel_rem_pio2+0x208>
   b5a04:	9b01      	ldr	r3, [sp, #4]
   b5a06:	2b00      	cmp	r3, #0
   b5a08:	f108 0801 	add.w	r8, r8, #1
   b5a0c:	f340 81cb 	ble.w	b5da6 <__kernel_rem_pio2+0x6c6>
   b5a10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b5a12:	2c00      	cmp	r4, #0
   b5a14:	d151      	bne.n	b5aba <__kernel_rem_pio2+0x3da>
   b5a16:	9b01      	ldr	r3, [sp, #4]
   b5a18:	2b01      	cmp	r3, #1
   b5a1a:	d020      	beq.n	b5a5e <__kernel_rem_pio2+0x37e>
   b5a1c:	ab0c      	add	r3, sp, #48	; 0x30
   b5a1e:	2201      	movs	r2, #1
   b5a20:	f853 4f04 	ldr.w	r4, [r3, #4]!
   b5a24:	2c00      	cmp	r4, #0
   b5a26:	d04b      	beq.n	b5ac0 <__kernel_rem_pio2+0x3e0>
   b5a28:	1c53      	adds	r3, r2, #1
   b5a2a:	a90c      	add	r1, sp, #48	; 0x30
   b5a2c:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
   b5a30:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
   b5a34:	9901      	ldr	r1, [sp, #4]
   b5a36:	4299      	cmp	r1, r3
   b5a38:	dd10      	ble.n	b5a5c <__kernel_rem_pio2+0x37c>
   b5a3a:	aa0c      	add	r2, sp, #48	; 0x30
   b5a3c:	a80c      	add	r0, sp, #48	; 0x30
   b5a3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   b5a42:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   b5a46:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   b5a4a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   b5a4e:	e000      	b.n	b5a52 <__kernel_rem_pio2+0x372>
   b5a50:	681a      	ldr	r2, [r3, #0]
   b5a52:	1a8a      	subs	r2, r1, r2
   b5a54:	f843 2b04 	str.w	r2, [r3], #4
   b5a58:	4283      	cmp	r3, r0
   b5a5a:	d1f9      	bne.n	b5a50 <__kernel_rem_pio2+0x370>
   b5a5c:	2401      	movs	r4, #1
   b5a5e:	9b06      	ldr	r3, [sp, #24]
   b5a60:	2b00      	cmp	r3, #0
   b5a62:	dd0e      	ble.n	b5a82 <__kernel_rem_pio2+0x3a2>
   b5a64:	2b01      	cmp	r3, #1
   b5a66:	f000 816c 	beq.w	b5d42 <__kernel_rem_pio2+0x662>
   b5a6a:	2b02      	cmp	r3, #2
   b5a6c:	d109      	bne.n	b5a82 <__kernel_rem_pio2+0x3a2>
   b5a6e:	9b01      	ldr	r3, [sp, #4]
   b5a70:	1e5a      	subs	r2, r3, #1
   b5a72:	ab0c      	add	r3, sp, #48	; 0x30
   b5a74:	a90c      	add	r1, sp, #48	; 0x30
   b5a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   b5a7a:	f3c3 0315 	ubfx	r3, r3, #0, #22
   b5a7e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   b5a82:	2d02      	cmp	r5, #2
   b5a84:	f47f af30 	bne.w	b58e8 <__kernel_rem_pio2+0x208>
   b5a88:	4632      	mov	r2, r6
   b5a8a:	463b      	mov	r3, r7
   b5a8c:	49b6      	ldr	r1, [pc, #728]	; (b5d68 <__kernel_rem_pio2+0x688>)
   b5a8e:	2000      	movs	r0, #0
   b5a90:	f000 fc34 	bl	b62fc <__aeabi_dsub>
   b5a94:	4606      	mov	r6, r0
   b5a96:	460f      	mov	r7, r1
   b5a98:	2c00      	cmp	r4, #0
   b5a9a:	f43f af25 	beq.w	b58e8 <__kernel_rem_pio2+0x208>
   b5a9e:	9806      	ldr	r0, [sp, #24]
   b5aa0:	ed9f 0bad 	vldr	d0, [pc, #692]	; b5d58 <__kernel_rem_pio2+0x678>
   b5aa4:	f000 fb94 	bl	b61d0 <scalbn>
   b5aa8:	4630      	mov	r0, r6
   b5aaa:	4639      	mov	r1, r7
   b5aac:	ec53 2b10 	vmov	r2, r3, d0
   b5ab0:	f000 fc24 	bl	b62fc <__aeabi_dsub>
   b5ab4:	4606      	mov	r6, r0
   b5ab6:	460f      	mov	r7, r1
   b5ab8:	e716      	b.n	b58e8 <__kernel_rem_pio2+0x208>
   b5aba:	2301      	movs	r3, #1
   b5abc:	2200      	movs	r2, #0
   b5abe:	e7b4      	b.n	b5a2a <__kernel_rem_pio2+0x34a>
   b5ac0:	9901      	ldr	r1, [sp, #4]
   b5ac2:	3201      	adds	r2, #1
   b5ac4:	428a      	cmp	r2, r1
   b5ac6:	d1ab      	bne.n	b5a20 <__kernel_rem_pio2+0x340>
   b5ac8:	e7c9      	b.n	b5a5e <__kernel_rem_pio2+0x37e>
   b5aca:	4ba8      	ldr	r3, [pc, #672]	; (b5d6c <__kernel_rem_pio2+0x68c>)
   b5acc:	2200      	movs	r2, #0
   b5ace:	f001 f853 	bl	b6b78 <__aeabi_dcmpge>
   b5ad2:	2800      	cmp	r0, #0
   b5ad4:	f040 8150 	bne.w	b5d78 <__kernel_rem_pio2+0x698>
   b5ad8:	4605      	mov	r5, r0
   b5ada:	e705      	b.n	b58e8 <__kernel_rem_pio2+0x208>
   b5adc:	9b01      	ldr	r3, [sp, #4]
   b5ade:	3301      	adds	r3, #1
   b5ae0:	4699      	mov	r9, r3
   b5ae2:	9302      	str	r3, [sp, #8]
   b5ae4:	e734      	b.n	b5950 <__kernel_rem_pio2+0x270>
   b5ae6:	2400      	movs	r4, #0
   b5ae8:	2500      	movs	r5, #0
   b5aea:	e667      	b.n	b57bc <__kernel_rem_pio2+0xdc>
   b5aec:	9b06      	ldr	r3, [sp, #24]
   b5aee:	9503      	str	r5, [sp, #12]
   b5af0:	f1a3 0218 	sub.w	r2, r3, #24
   b5af4:	ab0c      	add	r3, sp, #48	; 0x30
   b5af6:	f8cd 801c 	str.w	r8, [sp, #28]
   b5afa:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
   b5afe:	9206      	str	r2, [sp, #24]
   b5b00:	b973      	cbnz	r3, b5b20 <__kernel_rem_pio2+0x440>
   b5b02:	9b01      	ldr	r3, [sp, #4]
   b5b04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   b5b08:	3b02      	subs	r3, #2
   b5b0a:	a90c      	add	r1, sp, #48	; 0x30
   b5b0c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   b5b10:	f853 1904 	ldr.w	r1, [r3], #-4
   b5b14:	f10a 3aff 	add.w	sl, sl, #4294967295
   b5b18:	3a18      	subs	r2, #24
   b5b1a:	2900      	cmp	r1, #0
   b5b1c:	d0f8      	beq.n	b5b10 <__kernel_rem_pio2+0x430>
   b5b1e:	9206      	str	r2, [sp, #24]
   b5b20:	ed9f 0b8d 	vldr	d0, [pc, #564]	; b5d58 <__kernel_rem_pio2+0x678>
   b5b24:	9806      	ldr	r0, [sp, #24]
   b5b26:	f000 fb53 	bl	b61d0 <scalbn>
   b5b2a:	f1ba 0f00 	cmp.w	sl, #0
   b5b2e:	ec55 4b10 	vmov	r4, r5, d0
   b5b32:	f2c0 81d9 	blt.w	b5ee8 <__kernel_rem_pio2+0x808>
   b5b36:	ab70      	add	r3, sp, #448	; 0x1c0
   b5b38:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
   b5b3c:	aa0c      	add	r2, sp, #48	; 0x30
   b5b3e:	f10a 0301 	add.w	r3, sl, #1
   b5b42:	9306      	str	r3, [sp, #24]
   b5b44:	eb02 0683 	add.w	r6, r2, r3, lsl #2
   b5b48:	f8df 9224 	ldr.w	r9, [pc, #548]	; b5d70 <__kernel_rem_pio2+0x690>
   b5b4c:	ea4f 03ca 	mov.w	r3, sl, lsl #3
   b5b50:	9304      	str	r3, [sp, #16]
   b5b52:	f10b 0708 	add.w	r7, fp, #8
   b5b56:	f04f 0800 	mov.w	r8, #0
   b5b5a:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   b5b5e:	f000 fd1b 	bl	b6598 <__aeabi_i2d>
   b5b62:	4622      	mov	r2, r4
   b5b64:	462b      	mov	r3, r5
   b5b66:	f000 fd81 	bl	b666c <__aeabi_dmul>
   b5b6a:	464b      	mov	r3, r9
   b5b6c:	e967 0102 	strd	r0, r1, [r7, #-8]!
   b5b70:	4642      	mov	r2, r8
   b5b72:	4620      	mov	r0, r4
   b5b74:	4629      	mov	r1, r5
   b5b76:	f000 fd79 	bl	b666c <__aeabi_dmul>
   b5b7a:	ab0c      	add	r3, sp, #48	; 0x30
   b5b7c:	429e      	cmp	r6, r3
   b5b7e:	4604      	mov	r4, r0
   b5b80:	460d      	mov	r5, r1
   b5b82:	d1ea      	bne.n	b5b5a <__kernel_rem_pio2+0x47a>
   b5b84:	ab48      	add	r3, sp, #288	; 0x120
   b5b86:	e9cd 3a01 	strd	r3, sl, [sp, #4]
   b5b8a:	f8dd a014 	ldr.w	sl, [sp, #20]
   b5b8e:	f1ba 0f00 	cmp.w	sl, #0
   b5b92:	f04f 0900 	mov.w	r9, #0
   b5b96:	db2c      	blt.n	b5bf2 <__kernel_rem_pio2+0x512>
   b5b98:	a371      	add	r3, pc, #452	; (adr r3, b5d60 <__kernel_rem_pio2+0x680>)
   b5b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5b9e:	f8df 81d4 	ldr.w	r8, [pc, #468]	; b5d74 <__kernel_rem_pio2+0x694>
   b5ba2:	465f      	mov	r7, fp
   b5ba4:	2600      	movs	r6, #0
   b5ba6:	2400      	movs	r4, #0
   b5ba8:	2500      	movs	r5, #0
   b5baa:	e003      	b.n	b5bb4 <__kernel_rem_pio2+0x4d4>
   b5bac:	45b1      	cmp	r9, r6
   b5bae:	db10      	blt.n	b5bd2 <__kernel_rem_pio2+0x4f2>
   b5bb0:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   b5bb4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
   b5bb8:	f000 fd58 	bl	b666c <__aeabi_dmul>
   b5bbc:	4602      	mov	r2, r0
   b5bbe:	460b      	mov	r3, r1
   b5bc0:	4620      	mov	r0, r4
   b5bc2:	4629      	mov	r1, r5
   b5bc4:	f000 fb9c 	bl	b6300 <__adddf3>
   b5bc8:	3601      	adds	r6, #1
   b5bca:	45b2      	cmp	sl, r6
   b5bcc:	4604      	mov	r4, r0
   b5bce:	460d      	mov	r5, r1
   b5bd0:	daec      	bge.n	b5bac <__kernel_rem_pio2+0x4cc>
   b5bd2:	9b01      	ldr	r3, [sp, #4]
   b5bd4:	9a02      	ldr	r2, [sp, #8]
   b5bd6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   b5bda:	454a      	cmp	r2, r9
   b5bdc:	e9c3 4500 	strd	r4, r5, [r3]
   b5be0:	f1ab 0b08 	sub.w	fp, fp, #8
   b5be4:	f109 0301 	add.w	r3, r9, #1
   b5be8:	d006      	beq.n	b5bf8 <__kernel_rem_pio2+0x518>
   b5bea:	f1ba 0f00 	cmp.w	sl, #0
   b5bee:	4699      	mov	r9, r3
   b5bf0:	dad2      	bge.n	b5b98 <__kernel_rem_pio2+0x4b8>
   b5bf2:	2400      	movs	r4, #0
   b5bf4:	2500      	movs	r5, #0
   b5bf6:	e7ec      	b.n	b5bd2 <__kernel_rem_pio2+0x4f2>
   b5bf8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   b5bfa:	f8dd a008 	ldr.w	sl, [sp, #8]
   b5bfe:	2b02      	cmp	r3, #2
   b5c00:	dc1e      	bgt.n	b5c40 <__kernel_rem_pio2+0x560>
   b5c02:	2b00      	cmp	r3, #0
   b5c04:	f300 8107 	bgt.w	b5e16 <__kernel_rem_pio2+0x736>
   b5c08:	d113      	bne.n	b5c32 <__kernel_rem_pio2+0x552>
   b5c0a:	9c04      	ldr	r4, [sp, #16]
   b5c0c:	9d01      	ldr	r5, [sp, #4]
   b5c0e:	3408      	adds	r4, #8
   b5c10:	442c      	add	r4, r5
   b5c12:	2000      	movs	r0, #0
   b5c14:	2100      	movs	r1, #0
   b5c16:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   b5c1a:	f000 fb71 	bl	b6300 <__adddf3>
   b5c1e:	42a5      	cmp	r5, r4
   b5c20:	d1f9      	bne.n	b5c16 <__kernel_rem_pio2+0x536>
   b5c22:	9b03      	ldr	r3, [sp, #12]
   b5c24:	b113      	cbz	r3, b5c2c <__kernel_rem_pio2+0x54c>
   b5c26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b5c2a:	4619      	mov	r1, r3
   b5c2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b5c2e:	e9c3 0100 	strd	r0, r1, [r3]
   b5c32:	9b07      	ldr	r3, [sp, #28]
   b5c34:	f003 0007 	and.w	r0, r3, #7
   b5c38:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   b5c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5c40:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   b5c42:	2b03      	cmp	r3, #3
   b5c44:	d1f5      	bne.n	b5c32 <__kernel_rem_pio2+0x552>
   b5c46:	f1ba 0f00 	cmp.w	sl, #0
   b5c4a:	f000 8169 	beq.w	b5f20 <__kernel_rem_pio2+0x840>
   b5c4e:	9a01      	ldr	r2, [sp, #4]
   b5c50:	9b04      	ldr	r3, [sp, #16]
   b5c52:	18d3      	adds	r3, r2, r3
   b5c54:	e9d3 4500 	ldrd	r4, r5, [r3]
   b5c58:	eb02 0bca 	add.w	fp, r2, sl, lsl #3
   b5c5c:	e97b 6702 	ldrd	r6, r7, [fp, #-8]!
   b5c60:	4620      	mov	r0, r4
   b5c62:	4629      	mov	r1, r5
   b5c64:	4632      	mov	r2, r6
   b5c66:	463b      	mov	r3, r7
   b5c68:	f000 fb4a 	bl	b6300 <__adddf3>
   b5c6c:	46a0      	mov	r8, r4
   b5c6e:	46a9      	mov	r9, r5
   b5c70:	4604      	mov	r4, r0
   b5c72:	460d      	mov	r5, r1
   b5c74:	4622      	mov	r2, r4
   b5c76:	462b      	mov	r3, r5
   b5c78:	4630      	mov	r0, r6
   b5c7a:	4639      	mov	r1, r7
   b5c7c:	f000 fb3e 	bl	b62fc <__aeabi_dsub>
   b5c80:	464b      	mov	r3, r9
   b5c82:	4642      	mov	r2, r8
   b5c84:	f000 fb3c 	bl	b6300 <__adddf3>
   b5c88:	9b01      	ldr	r3, [sp, #4]
   b5c8a:	455b      	cmp	r3, fp
   b5c8c:	e9cb 0102 	strd	r0, r1, [fp, #8]
   b5c90:	e9cb 4500 	strd	r4, r5, [fp]
   b5c94:	d1e2      	bne.n	b5c5c <__kernel_rem_pio2+0x57c>
   b5c96:	f1ba 0f01 	cmp.w	sl, #1
   b5c9a:	f340 8141 	ble.w	b5f20 <__kernel_rem_pio2+0x840>
   b5c9e:	9a01      	ldr	r2, [sp, #4]
   b5ca0:	9b04      	ldr	r3, [sp, #16]
   b5ca2:	f10a 5a00 	add.w	sl, sl, #536870912	; 0x20000000
   b5ca6:	f10a 3aff 	add.w	sl, sl, #4294967295
   b5caa:	4413      	add	r3, r2
   b5cac:	ea4f 01ca 	mov.w	r1, sl, lsl #3
   b5cb0:	e9d3 4500 	ldrd	r4, r5, [r3]
   b5cb4:	f101 0a08 	add.w	sl, r1, #8
   b5cb8:	9102      	str	r1, [sp, #8]
   b5cba:	4492      	add	sl, r2
   b5cbc:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
   b5cc0:	e97a 6702 	ldrd	r6, r7, [sl, #-8]!
   b5cc4:	4620      	mov	r0, r4
   b5cc6:	4629      	mov	r1, r5
   b5cc8:	4632      	mov	r2, r6
   b5cca:	463b      	mov	r3, r7
   b5ccc:	f000 fb18 	bl	b6300 <__adddf3>
   b5cd0:	46a0      	mov	r8, r4
   b5cd2:	46a9      	mov	r9, r5
   b5cd4:	4604      	mov	r4, r0
   b5cd6:	460d      	mov	r5, r1
   b5cd8:	4622      	mov	r2, r4
   b5cda:	462b      	mov	r3, r5
   b5cdc:	4630      	mov	r0, r6
   b5cde:	4639      	mov	r1, r7
   b5ce0:	f000 fb0c 	bl	b62fc <__aeabi_dsub>
   b5ce4:	4642      	mov	r2, r8
   b5ce6:	464b      	mov	r3, r9
   b5ce8:	f000 fb0a 	bl	b6300 <__adddf3>
   b5cec:	45d3      	cmp	fp, sl
   b5cee:	e9ca 0102 	strd	r0, r1, [sl, #8]
   b5cf2:	e9ca 4500 	strd	r4, r5, [sl]
   b5cf6:	d1e3      	bne.n	b5cc0 <__kernel_rem_pio2+0x5e0>
   b5cf8:	9c02      	ldr	r4, [sp, #8]
   b5cfa:	9b01      	ldr	r3, [sp, #4]
   b5cfc:	3410      	adds	r4, #16
   b5cfe:	441c      	add	r4, r3
   b5d00:	f103 0510 	add.w	r5, r3, #16
   b5d04:	2000      	movs	r0, #0
   b5d06:	2100      	movs	r1, #0
   b5d08:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   b5d0c:	f000 faf8 	bl	b6300 <__adddf3>
   b5d10:	42a5      	cmp	r5, r4
   b5d12:	d1f9      	bne.n	b5d08 <__kernel_rem_pio2+0x628>
   b5d14:	9b03      	ldr	r3, [sp, #12]
   b5d16:	2b00      	cmp	r3, #0
   b5d18:	f040 80bb 	bne.w	b5e92 <__kernel_rem_pio2+0x7b2>
   b5d1c:	9d01      	ldr	r5, [sp, #4]
   b5d1e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   b5d20:	e9d5 2300 	ldrd	r2, r3, [r5]
   b5d24:	e9c4 2300 	strd	r2, r3, [r4]
   b5d28:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   b5d2c:	e9c4 2302 	strd	r2, r3, [r4, #8]
   b5d30:	9b07      	ldr	r3, [sp, #28]
   b5d32:	e9c4 0104 	strd	r0, r1, [r4, #16]
   b5d36:	f003 0007 	and.w	r0, r3, #7
   b5d3a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   b5d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5d42:	9b01      	ldr	r3, [sp, #4]
   b5d44:	1e5a      	subs	r2, r3, #1
   b5d46:	ab0c      	add	r3, sp, #48	; 0x30
   b5d48:	a90c      	add	r1, sp, #48	; 0x30
   b5d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   b5d4e:	f3c3 0316 	ubfx	r3, r3, #0, #23
   b5d52:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   b5d56:	e694      	b.n	b5a82 <__kernel_rem_pio2+0x3a2>
   b5d58:	00000000 	.word	0x00000000
   b5d5c:	3ff00000 	.word	0x3ff00000
   b5d60:	40000000 	.word	0x40000000
   b5d64:	3ff921fb 	.word	0x3ff921fb
   b5d68:	3ff00000 	.word	0x3ff00000
   b5d6c:	3fe00000 	.word	0x3fe00000
   b5d70:	3e700000 	.word	0x3e700000
   b5d74:	000b7078 	.word	0x000b7078
   b5d78:	9b01      	ldr	r3, [sp, #4]
   b5d7a:	2b00      	cmp	r3, #0
   b5d7c:	f108 0801 	add.w	r8, r8, #1
   b5d80:	bfc8      	it	gt
   b5d82:	2502      	movgt	r5, #2
   b5d84:	f73f ae44 	bgt.w	b5a10 <__kernel_rem_pio2+0x330>
   b5d88:	4632      	mov	r2, r6
   b5d8a:	463b      	mov	r3, r7
   b5d8c:	4966      	ldr	r1, [pc, #408]	; (b5f28 <__kernel_rem_pio2+0x848>)
   b5d8e:	2000      	movs	r0, #0
   b5d90:	f000 fab4 	bl	b62fc <__aeabi_dsub>
   b5d94:	2502      	movs	r5, #2
   b5d96:	4606      	mov	r6, r0
   b5d98:	460f      	mov	r7, r1
   b5d9a:	e5a5      	b.n	b58e8 <__kernel_rem_pio2+0x208>
   b5d9c:	2100      	movs	r1, #0
   b5d9e:	f06f 0317 	mvn.w	r3, #23
   b5da2:	9107      	str	r1, [sp, #28]
   b5da4:	e4bb      	b.n	b571e <__kernel_rem_pio2+0x3e>
   b5da6:	2400      	movs	r4, #0
   b5da8:	e659      	b.n	b5a5e <__kernel_rem_pio2+0x37e>
   b5daa:	ec47 6b10 	vmov	d0, r6, r7
   b5dae:	9e06      	ldr	r6, [sp, #24]
   b5db0:	9503      	str	r5, [sp, #12]
   b5db2:	4270      	negs	r0, r6
   b5db4:	f8cd 801c 	str.w	r8, [sp, #28]
   b5db8:	f000 fa0a 	bl	b61d0 <scalbn>
   b5dbc:	ec55 4b10 	vmov	r4, r5, d0
   b5dc0:	4b5a      	ldr	r3, [pc, #360]	; (b5f2c <__kernel_rem_pio2+0x84c>)
   b5dc2:	ee10 0a10 	vmov	r0, s0
   b5dc6:	2200      	movs	r2, #0
   b5dc8:	4629      	mov	r1, r5
   b5dca:	f000 fed5 	bl	b6b78 <__aeabi_dcmpge>
   b5dce:	2800      	cmp	r0, #0
   b5dd0:	d055      	beq.n	b5e7e <__kernel_rem_pio2+0x79e>
   b5dd2:	4b57      	ldr	r3, [pc, #348]	; (b5f30 <__kernel_rem_pio2+0x850>)
   b5dd4:	9f01      	ldr	r7, [sp, #4]
   b5dd6:	2200      	movs	r2, #0
   b5dd8:	3618      	adds	r6, #24
   b5dda:	4620      	mov	r0, r4
   b5ddc:	4629      	mov	r1, r5
   b5dde:	9606      	str	r6, [sp, #24]
   b5de0:	f000 fc44 	bl	b666c <__aeabi_dmul>
   b5de4:	f000 fedc 	bl	b6ba0 <__aeabi_d2iz>
   b5de8:	4606      	mov	r6, r0
   b5dea:	f000 fbd5 	bl	b6598 <__aeabi_i2d>
   b5dee:	4b4f      	ldr	r3, [pc, #316]	; (b5f2c <__kernel_rem_pio2+0x84c>)
   b5df0:	2200      	movs	r2, #0
   b5df2:	f000 fc3b 	bl	b666c <__aeabi_dmul>
   b5df6:	460b      	mov	r3, r1
   b5df8:	4602      	mov	r2, r0
   b5dfa:	4629      	mov	r1, r5
   b5dfc:	4620      	mov	r0, r4
   b5dfe:	f000 fa7d 	bl	b62fc <__aeabi_dsub>
   b5e02:	f000 fecd 	bl	b6ba0 <__aeabi_d2iz>
   b5e06:	f107 0a01 	add.w	sl, r7, #1
   b5e0a:	ab0c      	add	r3, sp, #48	; 0x30
   b5e0c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
   b5e10:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
   b5e14:	e684      	b.n	b5b20 <__kernel_rem_pio2+0x440>
   b5e16:	9d01      	ldr	r5, [sp, #4]
   b5e18:	9a06      	ldr	r2, [sp, #24]
   b5e1a:	2000      	movs	r0, #0
   b5e1c:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
   b5e20:	2100      	movs	r1, #0
   b5e22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   b5e26:	f000 fa6b 	bl	b6300 <__adddf3>
   b5e2a:	42a5      	cmp	r5, r4
   b5e2c:	d1f9      	bne.n	b5e22 <__kernel_rem_pio2+0x742>
   b5e2e:	9b03      	ldr	r3, [sp, #12]
   b5e30:	2b00      	cmp	r3, #0
   b5e32:	d149      	bne.n	b5ec8 <__kernel_rem_pio2+0x7e8>
   b5e34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b5e36:	e9c3 0100 	strd	r0, r1, [r3]
   b5e3a:	460b      	mov	r3, r1
   b5e3c:	9901      	ldr	r1, [sp, #4]
   b5e3e:	4602      	mov	r2, r0
   b5e40:	e9d1 0100 	ldrd	r0, r1, [r1]
   b5e44:	f000 fa5a 	bl	b62fc <__aeabi_dsub>
   b5e48:	f1ba 0f00 	cmp.w	sl, #0
   b5e4c:	dd0d      	ble.n	b5e6a <__kernel_rem_pio2+0x78a>
   b5e4e:	ad4a      	add	r5, sp, #296	; 0x128
   b5e50:	2401      	movs	r4, #1
   b5e52:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   b5e56:	3401      	adds	r4, #1
   b5e58:	f000 fa52 	bl	b6300 <__adddf3>
   b5e5c:	45a2      	cmp	sl, r4
   b5e5e:	daf8      	bge.n	b5e52 <__kernel_rem_pio2+0x772>
   b5e60:	9b03      	ldr	r3, [sp, #12]
   b5e62:	b113      	cbz	r3, b5e6a <__kernel_rem_pio2+0x78a>
   b5e64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b5e68:	4619      	mov	r1, r3
   b5e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b5e6c:	e9c3 0102 	strd	r0, r1, [r3, #8]
   b5e70:	9b07      	ldr	r3, [sp, #28]
   b5e72:	f003 0007 	and.w	r0, r3, #7
   b5e76:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   b5e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5e7e:	4620      	mov	r0, r4
   b5e80:	4629      	mov	r1, r5
   b5e82:	f000 fe8d 	bl	b6ba0 <__aeabi_d2iz>
   b5e86:	9b01      	ldr	r3, [sp, #4]
   b5e88:	aa0c      	add	r2, sp, #48	; 0x30
   b5e8a:	469a      	mov	sl, r3
   b5e8c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   b5e90:	e646      	b.n	b5b20 <__kernel_rem_pio2+0x440>
   b5e92:	9b01      	ldr	r3, [sp, #4]
   b5e94:	461e      	mov	r6, r3
   b5e96:	685c      	ldr	r4, [r3, #4]
   b5e98:	68dd      	ldr	r5, [r3, #12]
   b5e9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b5e9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   b5ea0:	4602      	mov	r2, r0
   b5ea2:	e9c1 2304 	strd	r2, r3, [r1, #16]
   b5ea6:	6832      	ldr	r2, [r6, #0]
   b5ea8:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   b5eac:	e9c1 2300 	strd	r2, r3, [r1]
   b5eb0:	68b2      	ldr	r2, [r6, #8]
   b5eb2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   b5eb6:	e9c1 2302 	strd	r2, r3, [r1, #8]
   b5eba:	9b07      	ldr	r3, [sp, #28]
   b5ebc:	f003 0007 	and.w	r0, r3, #7
   b5ec0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   b5ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5ec8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5eca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b5ece:	6053      	str	r3, [r2, #4]
   b5ed0:	460b      	mov	r3, r1
   b5ed2:	9901      	ldr	r1, [sp, #4]
   b5ed4:	6010      	str	r0, [r2, #0]
   b5ed6:	4602      	mov	r2, r0
   b5ed8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b5edc:	f000 fa0e 	bl	b62fc <__aeabi_dsub>
   b5ee0:	f1ba 0f00 	cmp.w	sl, #0
   b5ee4:	dcb3      	bgt.n	b5e4e <__kernel_rem_pio2+0x76e>
   b5ee6:	e7bd      	b.n	b5e64 <__kernel_rem_pio2+0x784>
   b5ee8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   b5eea:	2b02      	cmp	r3, #2
   b5eec:	dc0a      	bgt.n	b5f04 <__kernel_rem_pio2+0x824>
   b5eee:	2b00      	cmp	r3, #0
   b5ef0:	dc11      	bgt.n	b5f16 <__kernel_rem_pio2+0x836>
   b5ef2:	f47f ae9e 	bne.w	b5c32 <__kernel_rem_pio2+0x552>
   b5ef6:	2000      	movs	r0, #0
   b5ef8:	2100      	movs	r1, #0
   b5efa:	e692      	b.n	b5c22 <__kernel_rem_pio2+0x542>
   b5efc:	9b08      	ldr	r3, [sp, #32]
   b5efe:	00db      	lsls	r3, r3, #3
   b5f00:	9302      	str	r3, [sp, #8]
   b5f02:	e464      	b.n	b57ce <__kernel_rem_pio2+0xee>
   b5f04:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   b5f06:	2b03      	cmp	r3, #3
   b5f08:	f47f ae93 	bne.w	b5c32 <__kernel_rem_pio2+0x552>
   b5f0c:	ab48      	add	r3, sp, #288	; 0x120
   b5f0e:	2000      	movs	r0, #0
   b5f10:	2100      	movs	r1, #0
   b5f12:	9301      	str	r3, [sp, #4]
   b5f14:	e6fe      	b.n	b5d14 <__kernel_rem_pio2+0x634>
   b5f16:	ab48      	add	r3, sp, #288	; 0x120
   b5f18:	2000      	movs	r0, #0
   b5f1a:	2100      	movs	r1, #0
   b5f1c:	9301      	str	r3, [sp, #4]
   b5f1e:	e786      	b.n	b5e2e <__kernel_rem_pio2+0x74e>
   b5f20:	2000      	movs	r0, #0
   b5f22:	2100      	movs	r1, #0
   b5f24:	e6f6      	b.n	b5d14 <__kernel_rem_pio2+0x634>
   b5f26:	bf00      	nop
   b5f28:	3ff00000 	.word	0x3ff00000
   b5f2c:	41700000 	.word	0x41700000
   b5f30:	3e700000 	.word	0x3e700000
   b5f34:	00000000 	.word	0x00000000

000b5f38 <__kernel_sin>:
   b5f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5f3c:	ec55 4b10 	vmov	r4, r5, d0
   b5f40:	b085      	sub	sp, #20
   b5f42:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   b5f46:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   b5f4a:	ed8d 1b00 	vstr	d1, [sp]
   b5f4e:	9003      	str	r0, [sp, #12]
   b5f50:	da07      	bge.n	b5f62 <__kernel_sin+0x2a>
   b5f52:	ee10 0a10 	vmov	r0, s0
   b5f56:	4629      	mov	r1, r5
   b5f58:	f000 fe22 	bl	b6ba0 <__aeabi_d2iz>
   b5f5c:	2800      	cmp	r0, #0
   b5f5e:	f000 8089 	beq.w	b6074 <__kernel_sin+0x13c>
   b5f62:	4622      	mov	r2, r4
   b5f64:	462b      	mov	r3, r5
   b5f66:	4620      	mov	r0, r4
   b5f68:	4629      	mov	r1, r5
   b5f6a:	f000 fb7f 	bl	b666c <__aeabi_dmul>
   b5f6e:	4606      	mov	r6, r0
   b5f70:	460f      	mov	r7, r1
   b5f72:	4632      	mov	r2, r6
   b5f74:	463b      	mov	r3, r7
   b5f76:	4620      	mov	r0, r4
   b5f78:	4629      	mov	r1, r5
   b5f7a:	f000 fb77 	bl	b666c <__aeabi_dmul>
   b5f7e:	a343      	add	r3, pc, #268	; (adr r3, b608c <__kernel_sin+0x154>)
   b5f80:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5f84:	4682      	mov	sl, r0
   b5f86:	468b      	mov	fp, r1
   b5f88:	4630      	mov	r0, r6
   b5f8a:	4639      	mov	r1, r7
   b5f8c:	f000 fb6e 	bl	b666c <__aeabi_dmul>
   b5f90:	a340      	add	r3, pc, #256	; (adr r3, b6094 <__kernel_sin+0x15c>)
   b5f92:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5f96:	f000 f9b1 	bl	b62fc <__aeabi_dsub>
   b5f9a:	4632      	mov	r2, r6
   b5f9c:	463b      	mov	r3, r7
   b5f9e:	f000 fb65 	bl	b666c <__aeabi_dmul>
   b5fa2:	a33e      	add	r3, pc, #248	; (adr r3, b609c <__kernel_sin+0x164>)
   b5fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5fa8:	f000 f9aa 	bl	b6300 <__adddf3>
   b5fac:	4632      	mov	r2, r6
   b5fae:	463b      	mov	r3, r7
   b5fb0:	f000 fb5c 	bl	b666c <__aeabi_dmul>
   b5fb4:	a33b      	add	r3, pc, #236	; (adr r3, b60a4 <__kernel_sin+0x16c>)
   b5fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5fba:	f000 f99f 	bl	b62fc <__aeabi_dsub>
   b5fbe:	4632      	mov	r2, r6
   b5fc0:	463b      	mov	r3, r7
   b5fc2:	f000 fb53 	bl	b666c <__aeabi_dmul>
   b5fc6:	a339      	add	r3, pc, #228	; (adr r3, b60ac <__kernel_sin+0x174>)
   b5fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5fcc:	f000 f998 	bl	b6300 <__adddf3>
   b5fd0:	9b03      	ldr	r3, [sp, #12]
   b5fd2:	4680      	mov	r8, r0
   b5fd4:	4689      	mov	r9, r1
   b5fd6:	b3ab      	cbz	r3, b6044 <__kernel_sin+0x10c>
   b5fd8:	e9dd 0100 	ldrd	r0, r1, [sp]
   b5fdc:	4b2a      	ldr	r3, [pc, #168]	; (b6088 <__kernel_sin+0x150>)
   b5fde:	2200      	movs	r2, #0
   b5fe0:	f000 fb44 	bl	b666c <__aeabi_dmul>
   b5fe4:	4642      	mov	r2, r8
   b5fe6:	464b      	mov	r3, r9
   b5fe8:	4680      	mov	r8, r0
   b5fea:	4689      	mov	r9, r1
   b5fec:	4650      	mov	r0, sl
   b5fee:	4659      	mov	r1, fp
   b5ff0:	f000 fb3c 	bl	b666c <__aeabi_dmul>
   b5ff4:	4602      	mov	r2, r0
   b5ff6:	460b      	mov	r3, r1
   b5ff8:	4640      	mov	r0, r8
   b5ffa:	4649      	mov	r1, r9
   b5ffc:	f000 f97e 	bl	b62fc <__aeabi_dsub>
   b6000:	4632      	mov	r2, r6
   b6002:	463b      	mov	r3, r7
   b6004:	f000 fb32 	bl	b666c <__aeabi_dmul>
   b6008:	e9dd 2300 	ldrd	r2, r3, [sp]
   b600c:	f000 f976 	bl	b62fc <__aeabi_dsub>
   b6010:	a31b      	add	r3, pc, #108	; (adr r3, b6080 <__kernel_sin+0x148>)
   b6012:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6016:	4606      	mov	r6, r0
   b6018:	460f      	mov	r7, r1
   b601a:	4650      	mov	r0, sl
   b601c:	4659      	mov	r1, fp
   b601e:	f000 fb25 	bl	b666c <__aeabi_dmul>
   b6022:	4602      	mov	r2, r0
   b6024:	460b      	mov	r3, r1
   b6026:	4630      	mov	r0, r6
   b6028:	4639      	mov	r1, r7
   b602a:	f000 f969 	bl	b6300 <__adddf3>
   b602e:	4602      	mov	r2, r0
   b6030:	460b      	mov	r3, r1
   b6032:	4620      	mov	r0, r4
   b6034:	4629      	mov	r1, r5
   b6036:	f000 f961 	bl	b62fc <__aeabi_dsub>
   b603a:	ec41 0b10 	vmov	d0, r0, r1
   b603e:	b005      	add	sp, #20
   b6040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6044:	4602      	mov	r2, r0
   b6046:	460b      	mov	r3, r1
   b6048:	4630      	mov	r0, r6
   b604a:	4639      	mov	r1, r7
   b604c:	f000 fb0e 	bl	b666c <__aeabi_dmul>
   b6050:	a30b      	add	r3, pc, #44	; (adr r3, b6080 <__kernel_sin+0x148>)
   b6052:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6056:	f000 f951 	bl	b62fc <__aeabi_dsub>
   b605a:	4652      	mov	r2, sl
   b605c:	465b      	mov	r3, fp
   b605e:	f000 fb05 	bl	b666c <__aeabi_dmul>
   b6062:	4622      	mov	r2, r4
   b6064:	462b      	mov	r3, r5
   b6066:	f000 f94b 	bl	b6300 <__adddf3>
   b606a:	ec41 0b10 	vmov	d0, r0, r1
   b606e:	b005      	add	sp, #20
   b6070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6074:	ec45 4b10 	vmov	d0, r4, r5
   b6078:	b005      	add	sp, #20
   b607a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b607e:	bf00      	nop
   b6080:	55555549 	.word	0x55555549
   b6084:	3fc55555 	.word	0x3fc55555
   b6088:	3fe00000 	.word	0x3fe00000
   b608c:	5acfd57c 	.word	0x5acfd57c
   b6090:	3de5d93a 	.word	0x3de5d93a
   b6094:	8a2b9ceb 	.word	0x8a2b9ceb
   b6098:	3e5ae5e6 	.word	0x3e5ae5e6
   b609c:	57b1fe7d 	.word	0x57b1fe7d
   b60a0:	3ec71de3 	.word	0x3ec71de3
   b60a4:	19c161d5 	.word	0x19c161d5
   b60a8:	3f2a01a0 	.word	0x3f2a01a0
   b60ac:	1110f8a6 	.word	0x1110f8a6
   b60b0:	3f811111 	.word	0x3f811111

000b60b4 <fabs>:
   b60b4:	ec51 0b10 	vmov	r0, r1, d0
   b60b8:	ee10 2a10 	vmov	r2, s0
   b60bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b60c0:	ec43 2b10 	vmov	d0, r2, r3
   b60c4:	4770      	bx	lr
   b60c6:	bf00      	nop

000b60c8 <floor>:
   b60c8:	ec51 0b10 	vmov	r0, r1, d0
   b60cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b60ce:	f3c1 530a 	ubfx	r3, r1, #20, #11
   b60d2:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   b60d6:	2d13      	cmp	r5, #19
   b60d8:	ee10 6a10 	vmov	r6, s0
   b60dc:	460c      	mov	r4, r1
   b60de:	dc30      	bgt.n	b6142 <floor+0x7a>
   b60e0:	2d00      	cmp	r5, #0
   b60e2:	db1e      	blt.n	b6122 <floor+0x5a>
   b60e4:	4f38      	ldr	r7, [pc, #224]	; (b61c8 <floor+0x100>)
   b60e6:	412f      	asrs	r7, r5
   b60e8:	ea01 0307 	and.w	r3, r1, r7
   b60ec:	4303      	orrs	r3, r0
   b60ee:	d02d      	beq.n	b614c <floor+0x84>
   b60f0:	a333      	add	r3, pc, #204	; (adr r3, b61c0 <floor+0xf8>)
   b60f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b60f6:	f000 f903 	bl	b6300 <__adddf3>
   b60fa:	2200      	movs	r2, #0
   b60fc:	2300      	movs	r3, #0
   b60fe:	f000 fd45 	bl	b6b8c <__aeabi_dcmpgt>
   b6102:	b148      	cbz	r0, b6118 <floor+0x50>
   b6104:	2c00      	cmp	r4, #0
   b6106:	da04      	bge.n	b6112 <floor+0x4a>
   b6108:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   b610c:	fa43 f505 	asr.w	r5, r3, r5
   b6110:	442c      	add	r4, r5
   b6112:	ea24 0407 	bic.w	r4, r4, r7
   b6116:	2600      	movs	r6, #0
   b6118:	4623      	mov	r3, r4
   b611a:	4632      	mov	r2, r6
   b611c:	ec43 2b10 	vmov	d0, r2, r3
   b6120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6122:	a327      	add	r3, pc, #156	; (adr r3, b61c0 <floor+0xf8>)
   b6124:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6128:	f000 f8ea 	bl	b6300 <__adddf3>
   b612c:	2200      	movs	r2, #0
   b612e:	2300      	movs	r3, #0
   b6130:	f000 fd2c 	bl	b6b8c <__aeabi_dcmpgt>
   b6134:	2800      	cmp	r0, #0
   b6136:	d0ef      	beq.n	b6118 <floor+0x50>
   b6138:	2c00      	cmp	r4, #0
   b613a:	db29      	blt.n	b6190 <floor+0xc8>
   b613c:	2600      	movs	r6, #0
   b613e:	4634      	mov	r4, r6
   b6140:	e7ea      	b.n	b6118 <floor+0x50>
   b6142:	2d33      	cmp	r5, #51	; 0x33
   b6144:	dd05      	ble.n	b6152 <floor+0x8a>
   b6146:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   b614a:	d019      	beq.n	b6180 <floor+0xb8>
   b614c:	ec41 0b10 	vmov	d0, r0, r1
   b6150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6152:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   b6156:	f04f 37ff 	mov.w	r7, #4294967295
   b615a:	40df      	lsrs	r7, r3
   b615c:	4207      	tst	r7, r0
   b615e:	d0f5      	beq.n	b614c <floor+0x84>
   b6160:	a317      	add	r3, pc, #92	; (adr r3, b61c0 <floor+0xf8>)
   b6162:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6166:	f000 f8cb 	bl	b6300 <__adddf3>
   b616a:	2200      	movs	r2, #0
   b616c:	2300      	movs	r3, #0
   b616e:	f000 fd0d 	bl	b6b8c <__aeabi_dcmpgt>
   b6172:	2800      	cmp	r0, #0
   b6174:	d0d0      	beq.n	b6118 <floor+0x50>
   b6176:	2c00      	cmp	r4, #0
   b6178:	db13      	blt.n	b61a2 <floor+0xda>
   b617a:	ea26 0607 	bic.w	r6, r6, r7
   b617e:	e7cb      	b.n	b6118 <floor+0x50>
   b6180:	ee10 2a10 	vmov	r2, s0
   b6184:	460b      	mov	r3, r1
   b6186:	f000 f8bb 	bl	b6300 <__adddf3>
   b618a:	ec41 0b10 	vmov	d0, r0, r1
   b618e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6190:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   b6194:	4a0d      	ldr	r2, [pc, #52]	; (b61cc <floor+0x104>)
   b6196:	431e      	orrs	r6, r3
   b6198:	2e00      	cmp	r6, #0
   b619a:	bf18      	it	ne
   b619c:	4614      	movne	r4, r2
   b619e:	2600      	movs	r6, #0
   b61a0:	e7ba      	b.n	b6118 <floor+0x50>
   b61a2:	2d14      	cmp	r5, #20
   b61a4:	d008      	beq.n	b61b8 <floor+0xf0>
   b61a6:	2301      	movs	r3, #1
   b61a8:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   b61ac:	fa03 f505 	lsl.w	r5, r3, r5
   b61b0:	19ae      	adds	r6, r5, r6
   b61b2:	bf28      	it	cs
   b61b4:	18e4      	addcs	r4, r4, r3
   b61b6:	e7e0      	b.n	b617a <floor+0xb2>
   b61b8:	3401      	adds	r4, #1
   b61ba:	e7de      	b.n	b617a <floor+0xb2>
   b61bc:	f3af 8000 	nop.w
   b61c0:	8800759c 	.word	0x8800759c
   b61c4:	7e37e43c 	.word	0x7e37e43c
   b61c8:	000fffff 	.word	0x000fffff
   b61cc:	bff00000 	.word	0xbff00000

000b61d0 <scalbn>:
   b61d0:	b538      	push	{r3, r4, r5, lr}
   b61d2:	ec53 2b10 	vmov	r2, r3, d0
   b61d6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b61da:	4604      	mov	r4, r0
   b61dc:	469c      	mov	ip, r3
   b61de:	bb89      	cbnz	r1, b6244 <scalbn+0x74>
   b61e0:	ee10 1a10 	vmov	r1, s0
   b61e4:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b61e8:	ea5c 0101 	orrs.w	r1, ip, r1
   b61ec:	d029      	beq.n	b6242 <scalbn+0x72>
   b61ee:	4619      	mov	r1, r3
   b61f0:	2200      	movs	r2, #0
   b61f2:	4b3d      	ldr	r3, [pc, #244]	; (b62e8 <scalbn+0x118>)
   b61f4:	4d3d      	ldr	r5, [pc, #244]	; (b62ec <scalbn+0x11c>)
   b61f6:	ee10 0a10 	vmov	r0, s0
   b61fa:	f000 fa37 	bl	b666c <__aeabi_dmul>
   b61fe:	42ac      	cmp	r4, r5
   b6200:	4602      	mov	r2, r0
   b6202:	460b      	mov	r3, r1
   b6204:	db16      	blt.n	b6234 <scalbn+0x64>
   b6206:	468c      	mov	ip, r1
   b6208:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b620c:	3936      	subs	r1, #54	; 0x36
   b620e:	4421      	add	r1, r4
   b6210:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b6214:	4281      	cmp	r1, r0
   b6216:	dc21      	bgt.n	b625c <scalbn+0x8c>
   b6218:	2900      	cmp	r1, #0
   b621a:	dc47      	bgt.n	b62ac <scalbn+0xdc>
   b621c:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b6220:	da34      	bge.n	b628c <scalbn+0xbc>
   b6222:	f24c 3150 	movw	r1, #50000	; 0xc350
   b6226:	428c      	cmp	r4, r1
   b6228:	dc18      	bgt.n	b625c <scalbn+0x8c>
   b622a:	2b00      	cmp	r3, #0
   b622c:	a126      	add	r1, pc, #152	; (adr r1, b62c8 <scalbn+0xf8>)
   b622e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6232:	db44      	blt.n	b62be <scalbn+0xee>
   b6234:	a324      	add	r3, pc, #144	; (adr r3, b62c8 <scalbn+0xf8>)
   b6236:	e9d3 2300 	ldrd	r2, r3, [r3]
   b623a:	f000 fa17 	bl	b666c <__aeabi_dmul>
   b623e:	ec41 0b10 	vmov	d0, r0, r1
   b6242:	bd38      	pop	{r3, r4, r5, pc}
   b6244:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b6248:	4281      	cmp	r1, r0
   b624a:	d1e0      	bne.n	b620e <scalbn+0x3e>
   b624c:	ee10 0a10 	vmov	r0, s0
   b6250:	4619      	mov	r1, r3
   b6252:	f000 f855 	bl	b6300 <__adddf3>
   b6256:	ec41 0b10 	vmov	d0, r0, r1
   b625a:	bd38      	pop	{r3, r4, r5, pc}
   b625c:	2b00      	cmp	r3, #0
   b625e:	a11c      	add	r1, pc, #112	; (adr r1, b62d0 <scalbn+0x100>)
   b6260:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6264:	db07      	blt.n	b6276 <scalbn+0xa6>
   b6266:	a31a      	add	r3, pc, #104	; (adr r3, b62d0 <scalbn+0x100>)
   b6268:	e9d3 2300 	ldrd	r2, r3, [r3]
   b626c:	f000 f9fe 	bl	b666c <__aeabi_dmul>
   b6270:	ec41 0b10 	vmov	d0, r0, r1
   b6274:	bd38      	pop	{r3, r4, r5, pc}
   b6276:	a118      	add	r1, pc, #96	; (adr r1, b62d8 <scalbn+0x108>)
   b6278:	e9d1 0100 	ldrd	r0, r1, [r1]
   b627c:	a314      	add	r3, pc, #80	; (adr r3, b62d0 <scalbn+0x100>)
   b627e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6282:	f000 f9f3 	bl	b666c <__aeabi_dmul>
   b6286:	ec41 0b10 	vmov	d0, r0, r1
   b628a:	e7f3      	b.n	b6274 <scalbn+0xa4>
   b628c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b6290:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b6294:	3136      	adds	r1, #54	; 0x36
   b6296:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b629a:	4610      	mov	r0, r2
   b629c:	4619      	mov	r1, r3
   b629e:	2200      	movs	r2, #0
   b62a0:	4b13      	ldr	r3, [pc, #76]	; (b62f0 <scalbn+0x120>)
   b62a2:	f000 f9e3 	bl	b666c <__aeabi_dmul>
   b62a6:	ec41 0b10 	vmov	d0, r0, r1
   b62aa:	bd38      	pop	{r3, r4, r5, pc}
   b62ac:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b62b0:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b62b4:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b62b8:	ec43 2b10 	vmov	d0, r2, r3
   b62bc:	bd38      	pop	{r3, r4, r5, pc}
   b62be:	a108      	add	r1, pc, #32	; (adr r1, b62e0 <scalbn+0x110>)
   b62c0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b62c4:	e7b6      	b.n	b6234 <scalbn+0x64>
   b62c6:	bf00      	nop
   b62c8:	c2f8f359 	.word	0xc2f8f359
   b62cc:	01a56e1f 	.word	0x01a56e1f
   b62d0:	8800759c 	.word	0x8800759c
   b62d4:	7e37e43c 	.word	0x7e37e43c
   b62d8:	8800759c 	.word	0x8800759c
   b62dc:	fe37e43c 	.word	0xfe37e43c
   b62e0:	c2f8f359 	.word	0xc2f8f359
   b62e4:	81a56e1f 	.word	0x81a56e1f
   b62e8:	43500000 	.word	0x43500000
   b62ec:	ffff3cb0 	.word	0xffff3cb0
   b62f0:	3c900000 	.word	0x3c900000

000b62f4 <__aeabi_drsub>:
   b62f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b62f8:	e002      	b.n	b6300 <__adddf3>
   b62fa:	bf00      	nop

000b62fc <__aeabi_dsub>:
   b62fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b6300 <__adddf3>:
   b6300:	b530      	push	{r4, r5, lr}
   b6302:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b6306:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b630a:	ea94 0f05 	teq	r4, r5
   b630e:	bf08      	it	eq
   b6310:	ea90 0f02 	teqeq	r0, r2
   b6314:	bf1f      	itttt	ne
   b6316:	ea54 0c00 	orrsne.w	ip, r4, r0
   b631a:	ea55 0c02 	orrsne.w	ip, r5, r2
   b631e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b6322:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6326:	f000 80e2 	beq.w	b64ee <__adddf3+0x1ee>
   b632a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b632e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b6332:	bfb8      	it	lt
   b6334:	426d      	neglt	r5, r5
   b6336:	dd0c      	ble.n	b6352 <__adddf3+0x52>
   b6338:	442c      	add	r4, r5
   b633a:	ea80 0202 	eor.w	r2, r0, r2
   b633e:	ea81 0303 	eor.w	r3, r1, r3
   b6342:	ea82 0000 	eor.w	r0, r2, r0
   b6346:	ea83 0101 	eor.w	r1, r3, r1
   b634a:	ea80 0202 	eor.w	r2, r0, r2
   b634e:	ea81 0303 	eor.w	r3, r1, r3
   b6352:	2d36      	cmp	r5, #54	; 0x36
   b6354:	bf88      	it	hi
   b6356:	bd30      	pophi	{r4, r5, pc}
   b6358:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b635c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6360:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b6364:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6368:	d002      	beq.n	b6370 <__adddf3+0x70>
   b636a:	4240      	negs	r0, r0
   b636c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6370:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b6374:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6378:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b637c:	d002      	beq.n	b6384 <__adddf3+0x84>
   b637e:	4252      	negs	r2, r2
   b6380:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6384:	ea94 0f05 	teq	r4, r5
   b6388:	f000 80a7 	beq.w	b64da <__adddf3+0x1da>
   b638c:	f1a4 0401 	sub.w	r4, r4, #1
   b6390:	f1d5 0e20 	rsbs	lr, r5, #32
   b6394:	db0d      	blt.n	b63b2 <__adddf3+0xb2>
   b6396:	fa02 fc0e 	lsl.w	ip, r2, lr
   b639a:	fa22 f205 	lsr.w	r2, r2, r5
   b639e:	1880      	adds	r0, r0, r2
   b63a0:	f141 0100 	adc.w	r1, r1, #0
   b63a4:	fa03 f20e 	lsl.w	r2, r3, lr
   b63a8:	1880      	adds	r0, r0, r2
   b63aa:	fa43 f305 	asr.w	r3, r3, r5
   b63ae:	4159      	adcs	r1, r3
   b63b0:	e00e      	b.n	b63d0 <__adddf3+0xd0>
   b63b2:	f1a5 0520 	sub.w	r5, r5, #32
   b63b6:	f10e 0e20 	add.w	lr, lr, #32
   b63ba:	2a01      	cmp	r2, #1
   b63bc:	fa03 fc0e 	lsl.w	ip, r3, lr
   b63c0:	bf28      	it	cs
   b63c2:	f04c 0c02 	orrcs.w	ip, ip, #2
   b63c6:	fa43 f305 	asr.w	r3, r3, r5
   b63ca:	18c0      	adds	r0, r0, r3
   b63cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b63d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b63d4:	d507      	bpl.n	b63e6 <__adddf3+0xe6>
   b63d6:	f04f 0e00 	mov.w	lr, #0
   b63da:	f1dc 0c00 	rsbs	ip, ip, #0
   b63de:	eb7e 0000 	sbcs.w	r0, lr, r0
   b63e2:	eb6e 0101 	sbc.w	r1, lr, r1
   b63e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b63ea:	d31b      	bcc.n	b6424 <__adddf3+0x124>
   b63ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b63f0:	d30c      	bcc.n	b640c <__adddf3+0x10c>
   b63f2:	0849      	lsrs	r1, r1, #1
   b63f4:	ea5f 0030 	movs.w	r0, r0, rrx
   b63f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b63fc:	f104 0401 	add.w	r4, r4, #1
   b6400:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b6404:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b6408:	f080 809a 	bcs.w	b6540 <__adddf3+0x240>
   b640c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b6410:	bf08      	it	eq
   b6412:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6416:	f150 0000 	adcs.w	r0, r0, #0
   b641a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b641e:	ea41 0105 	orr.w	r1, r1, r5
   b6422:	bd30      	pop	{r4, r5, pc}
   b6424:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b6428:	4140      	adcs	r0, r0
   b642a:	eb41 0101 	adc.w	r1, r1, r1
   b642e:	3c01      	subs	r4, #1
   b6430:	bf28      	it	cs
   b6432:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b6436:	d2e9      	bcs.n	b640c <__adddf3+0x10c>
   b6438:	f091 0f00 	teq	r1, #0
   b643c:	bf04      	itt	eq
   b643e:	4601      	moveq	r1, r0
   b6440:	2000      	moveq	r0, #0
   b6442:	fab1 f381 	clz	r3, r1
   b6446:	bf08      	it	eq
   b6448:	3320      	addeq	r3, #32
   b644a:	f1a3 030b 	sub.w	r3, r3, #11
   b644e:	f1b3 0220 	subs.w	r2, r3, #32
   b6452:	da0c      	bge.n	b646e <__adddf3+0x16e>
   b6454:	320c      	adds	r2, #12
   b6456:	dd08      	ble.n	b646a <__adddf3+0x16a>
   b6458:	f102 0c14 	add.w	ip, r2, #20
   b645c:	f1c2 020c 	rsb	r2, r2, #12
   b6460:	fa01 f00c 	lsl.w	r0, r1, ip
   b6464:	fa21 f102 	lsr.w	r1, r1, r2
   b6468:	e00c      	b.n	b6484 <__adddf3+0x184>
   b646a:	f102 0214 	add.w	r2, r2, #20
   b646e:	bfd8      	it	le
   b6470:	f1c2 0c20 	rsble	ip, r2, #32
   b6474:	fa01 f102 	lsl.w	r1, r1, r2
   b6478:	fa20 fc0c 	lsr.w	ip, r0, ip
   b647c:	bfdc      	itt	le
   b647e:	ea41 010c 	orrle.w	r1, r1, ip
   b6482:	4090      	lslle	r0, r2
   b6484:	1ae4      	subs	r4, r4, r3
   b6486:	bfa2      	ittt	ge
   b6488:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b648c:	4329      	orrge	r1, r5
   b648e:	bd30      	popge	{r4, r5, pc}
   b6490:	ea6f 0404 	mvn.w	r4, r4
   b6494:	3c1f      	subs	r4, #31
   b6496:	da1c      	bge.n	b64d2 <__adddf3+0x1d2>
   b6498:	340c      	adds	r4, #12
   b649a:	dc0e      	bgt.n	b64ba <__adddf3+0x1ba>
   b649c:	f104 0414 	add.w	r4, r4, #20
   b64a0:	f1c4 0220 	rsb	r2, r4, #32
   b64a4:	fa20 f004 	lsr.w	r0, r0, r4
   b64a8:	fa01 f302 	lsl.w	r3, r1, r2
   b64ac:	ea40 0003 	orr.w	r0, r0, r3
   b64b0:	fa21 f304 	lsr.w	r3, r1, r4
   b64b4:	ea45 0103 	orr.w	r1, r5, r3
   b64b8:	bd30      	pop	{r4, r5, pc}
   b64ba:	f1c4 040c 	rsb	r4, r4, #12
   b64be:	f1c4 0220 	rsb	r2, r4, #32
   b64c2:	fa20 f002 	lsr.w	r0, r0, r2
   b64c6:	fa01 f304 	lsl.w	r3, r1, r4
   b64ca:	ea40 0003 	orr.w	r0, r0, r3
   b64ce:	4629      	mov	r1, r5
   b64d0:	bd30      	pop	{r4, r5, pc}
   b64d2:	fa21 f004 	lsr.w	r0, r1, r4
   b64d6:	4629      	mov	r1, r5
   b64d8:	bd30      	pop	{r4, r5, pc}
   b64da:	f094 0f00 	teq	r4, #0
   b64de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b64e2:	bf06      	itte	eq
   b64e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b64e8:	3401      	addeq	r4, #1
   b64ea:	3d01      	subne	r5, #1
   b64ec:	e74e      	b.n	b638c <__adddf3+0x8c>
   b64ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b64f2:	bf18      	it	ne
   b64f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b64f8:	d029      	beq.n	b654e <__adddf3+0x24e>
   b64fa:	ea94 0f05 	teq	r4, r5
   b64fe:	bf08      	it	eq
   b6500:	ea90 0f02 	teqeq	r0, r2
   b6504:	d005      	beq.n	b6512 <__adddf3+0x212>
   b6506:	ea54 0c00 	orrs.w	ip, r4, r0
   b650a:	bf04      	itt	eq
   b650c:	4619      	moveq	r1, r3
   b650e:	4610      	moveq	r0, r2
   b6510:	bd30      	pop	{r4, r5, pc}
   b6512:	ea91 0f03 	teq	r1, r3
   b6516:	bf1e      	ittt	ne
   b6518:	2100      	movne	r1, #0
   b651a:	2000      	movne	r0, #0
   b651c:	bd30      	popne	{r4, r5, pc}
   b651e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b6522:	d105      	bne.n	b6530 <__adddf3+0x230>
   b6524:	0040      	lsls	r0, r0, #1
   b6526:	4149      	adcs	r1, r1
   b6528:	bf28      	it	cs
   b652a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b652e:	bd30      	pop	{r4, r5, pc}
   b6530:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b6534:	bf3c      	itt	cc
   b6536:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b653a:	bd30      	popcc	{r4, r5, pc}
   b653c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6540:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b6544:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6548:	f04f 0000 	mov.w	r0, #0
   b654c:	bd30      	pop	{r4, r5, pc}
   b654e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6552:	bf1a      	itte	ne
   b6554:	4619      	movne	r1, r3
   b6556:	4610      	movne	r0, r2
   b6558:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b655c:	bf1c      	itt	ne
   b655e:	460b      	movne	r3, r1
   b6560:	4602      	movne	r2, r0
   b6562:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6566:	bf06      	itte	eq
   b6568:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b656c:	ea91 0f03 	teqeq	r1, r3
   b6570:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b6574:	bd30      	pop	{r4, r5, pc}
   b6576:	bf00      	nop

000b6578 <__aeabi_ui2d>:
   b6578:	f090 0f00 	teq	r0, #0
   b657c:	bf04      	itt	eq
   b657e:	2100      	moveq	r1, #0
   b6580:	4770      	bxeq	lr
   b6582:	b530      	push	{r4, r5, lr}
   b6584:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6588:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b658c:	f04f 0500 	mov.w	r5, #0
   b6590:	f04f 0100 	mov.w	r1, #0
   b6594:	e750      	b.n	b6438 <__adddf3+0x138>
   b6596:	bf00      	nop

000b6598 <__aeabi_i2d>:
   b6598:	f090 0f00 	teq	r0, #0
   b659c:	bf04      	itt	eq
   b659e:	2100      	moveq	r1, #0
   b65a0:	4770      	bxeq	lr
   b65a2:	b530      	push	{r4, r5, lr}
   b65a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b65a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b65ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b65b0:	bf48      	it	mi
   b65b2:	4240      	negmi	r0, r0
   b65b4:	f04f 0100 	mov.w	r1, #0
   b65b8:	e73e      	b.n	b6438 <__adddf3+0x138>
   b65ba:	bf00      	nop

000b65bc <__aeabi_f2d>:
   b65bc:	0042      	lsls	r2, r0, #1
   b65be:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b65c2:	ea4f 0131 	mov.w	r1, r1, rrx
   b65c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b65ca:	bf1f      	itttt	ne
   b65cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b65d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b65d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b65d8:	4770      	bxne	lr
   b65da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b65de:	bf08      	it	eq
   b65e0:	4770      	bxeq	lr
   b65e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b65e6:	bf04      	itt	eq
   b65e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b65ec:	4770      	bxeq	lr
   b65ee:	b530      	push	{r4, r5, lr}
   b65f0:	f44f 7460 	mov.w	r4, #896	; 0x380
   b65f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b65f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b65fc:	e71c      	b.n	b6438 <__adddf3+0x138>
   b65fe:	bf00      	nop

000b6600 <__aeabi_ul2d>:
   b6600:	ea50 0201 	orrs.w	r2, r0, r1
   b6604:	bf08      	it	eq
   b6606:	4770      	bxeq	lr
   b6608:	b530      	push	{r4, r5, lr}
   b660a:	f04f 0500 	mov.w	r5, #0
   b660e:	e00a      	b.n	b6626 <__aeabi_l2d+0x16>

000b6610 <__aeabi_l2d>:
   b6610:	ea50 0201 	orrs.w	r2, r0, r1
   b6614:	bf08      	it	eq
   b6616:	4770      	bxeq	lr
   b6618:	b530      	push	{r4, r5, lr}
   b661a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b661e:	d502      	bpl.n	b6626 <__aeabi_l2d+0x16>
   b6620:	4240      	negs	r0, r0
   b6622:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6626:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b662a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b662e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b6632:	f43f aed8 	beq.w	b63e6 <__adddf3+0xe6>
   b6636:	f04f 0203 	mov.w	r2, #3
   b663a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b663e:	bf18      	it	ne
   b6640:	3203      	addne	r2, #3
   b6642:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6646:	bf18      	it	ne
   b6648:	3203      	addne	r2, #3
   b664a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b664e:	f1c2 0320 	rsb	r3, r2, #32
   b6652:	fa00 fc03 	lsl.w	ip, r0, r3
   b6656:	fa20 f002 	lsr.w	r0, r0, r2
   b665a:	fa01 fe03 	lsl.w	lr, r1, r3
   b665e:	ea40 000e 	orr.w	r0, r0, lr
   b6662:	fa21 f102 	lsr.w	r1, r1, r2
   b6666:	4414      	add	r4, r2
   b6668:	e6bd      	b.n	b63e6 <__adddf3+0xe6>
   b666a:	bf00      	nop

000b666c <__aeabi_dmul>:
   b666c:	b570      	push	{r4, r5, r6, lr}
   b666e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6672:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6676:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b667a:	bf1d      	ittte	ne
   b667c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6680:	ea94 0f0c 	teqne	r4, ip
   b6684:	ea95 0f0c 	teqne	r5, ip
   b6688:	f000 f8de 	bleq	b6848 <__aeabi_dmul+0x1dc>
   b668c:	442c      	add	r4, r5
   b668e:	ea81 0603 	eor.w	r6, r1, r3
   b6692:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b6696:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b669a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b669e:	bf18      	it	ne
   b66a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b66a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b66a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b66ac:	d038      	beq.n	b6720 <__aeabi_dmul+0xb4>
   b66ae:	fba0 ce02 	umull	ip, lr, r0, r2
   b66b2:	f04f 0500 	mov.w	r5, #0
   b66b6:	fbe1 e502 	umlal	lr, r5, r1, r2
   b66ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b66be:	fbe0 e503 	umlal	lr, r5, r0, r3
   b66c2:	f04f 0600 	mov.w	r6, #0
   b66c6:	fbe1 5603 	umlal	r5, r6, r1, r3
   b66ca:	f09c 0f00 	teq	ip, #0
   b66ce:	bf18      	it	ne
   b66d0:	f04e 0e01 	orrne.w	lr, lr, #1
   b66d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b66d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b66dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b66e0:	d204      	bcs.n	b66ec <__aeabi_dmul+0x80>
   b66e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b66e6:	416d      	adcs	r5, r5
   b66e8:	eb46 0606 	adc.w	r6, r6, r6
   b66ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b66f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b66f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b66f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b66fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6700:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6704:	bf88      	it	hi
   b6706:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b670a:	d81e      	bhi.n	b674a <__aeabi_dmul+0xde>
   b670c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b6710:	bf08      	it	eq
   b6712:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b6716:	f150 0000 	adcs.w	r0, r0, #0
   b671a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b671e:	bd70      	pop	{r4, r5, r6, pc}
   b6720:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b6724:	ea46 0101 	orr.w	r1, r6, r1
   b6728:	ea40 0002 	orr.w	r0, r0, r2
   b672c:	ea81 0103 	eor.w	r1, r1, r3
   b6730:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b6734:	bfc2      	ittt	gt
   b6736:	ebd4 050c 	rsbsgt	r5, r4, ip
   b673a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b673e:	bd70      	popgt	{r4, r5, r6, pc}
   b6740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6744:	f04f 0e00 	mov.w	lr, #0
   b6748:	3c01      	subs	r4, #1
   b674a:	f300 80ab 	bgt.w	b68a4 <__aeabi_dmul+0x238>
   b674e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b6752:	bfde      	ittt	le
   b6754:	2000      	movle	r0, #0
   b6756:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b675a:	bd70      	pople	{r4, r5, r6, pc}
   b675c:	f1c4 0400 	rsb	r4, r4, #0
   b6760:	3c20      	subs	r4, #32
   b6762:	da35      	bge.n	b67d0 <__aeabi_dmul+0x164>
   b6764:	340c      	adds	r4, #12
   b6766:	dc1b      	bgt.n	b67a0 <__aeabi_dmul+0x134>
   b6768:	f104 0414 	add.w	r4, r4, #20
   b676c:	f1c4 0520 	rsb	r5, r4, #32
   b6770:	fa00 f305 	lsl.w	r3, r0, r5
   b6774:	fa20 f004 	lsr.w	r0, r0, r4
   b6778:	fa01 f205 	lsl.w	r2, r1, r5
   b677c:	ea40 0002 	orr.w	r0, r0, r2
   b6780:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b6784:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b678c:	fa21 f604 	lsr.w	r6, r1, r4
   b6790:	eb42 0106 	adc.w	r1, r2, r6
   b6794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6798:	bf08      	it	eq
   b679a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b679e:	bd70      	pop	{r4, r5, r6, pc}
   b67a0:	f1c4 040c 	rsb	r4, r4, #12
   b67a4:	f1c4 0520 	rsb	r5, r4, #32
   b67a8:	fa00 f304 	lsl.w	r3, r0, r4
   b67ac:	fa20 f005 	lsr.w	r0, r0, r5
   b67b0:	fa01 f204 	lsl.w	r2, r1, r4
   b67b4:	ea40 0002 	orr.w	r0, r0, r2
   b67b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b67bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b67c0:	f141 0100 	adc.w	r1, r1, #0
   b67c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b67c8:	bf08      	it	eq
   b67ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b67ce:	bd70      	pop	{r4, r5, r6, pc}
   b67d0:	f1c4 0520 	rsb	r5, r4, #32
   b67d4:	fa00 f205 	lsl.w	r2, r0, r5
   b67d8:	ea4e 0e02 	orr.w	lr, lr, r2
   b67dc:	fa20 f304 	lsr.w	r3, r0, r4
   b67e0:	fa01 f205 	lsl.w	r2, r1, r5
   b67e4:	ea43 0302 	orr.w	r3, r3, r2
   b67e8:	fa21 f004 	lsr.w	r0, r1, r4
   b67ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b67f0:	fa21 f204 	lsr.w	r2, r1, r4
   b67f4:	ea20 0002 	bic.w	r0, r0, r2
   b67f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b67fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6800:	bf08      	it	eq
   b6802:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6806:	bd70      	pop	{r4, r5, r6, pc}
   b6808:	f094 0f00 	teq	r4, #0
   b680c:	d10f      	bne.n	b682e <__aeabi_dmul+0x1c2>
   b680e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b6812:	0040      	lsls	r0, r0, #1
   b6814:	eb41 0101 	adc.w	r1, r1, r1
   b6818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b681c:	bf08      	it	eq
   b681e:	3c01      	subeq	r4, #1
   b6820:	d0f7      	beq.n	b6812 <__aeabi_dmul+0x1a6>
   b6822:	ea41 0106 	orr.w	r1, r1, r6
   b6826:	f095 0f00 	teq	r5, #0
   b682a:	bf18      	it	ne
   b682c:	4770      	bxne	lr
   b682e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b6832:	0052      	lsls	r2, r2, #1
   b6834:	eb43 0303 	adc.w	r3, r3, r3
   b6838:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b683c:	bf08      	it	eq
   b683e:	3d01      	subeq	r5, #1
   b6840:	d0f7      	beq.n	b6832 <__aeabi_dmul+0x1c6>
   b6842:	ea43 0306 	orr.w	r3, r3, r6
   b6846:	4770      	bx	lr
   b6848:	ea94 0f0c 	teq	r4, ip
   b684c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6850:	bf18      	it	ne
   b6852:	ea95 0f0c 	teqne	r5, ip
   b6856:	d00c      	beq.n	b6872 <__aeabi_dmul+0x206>
   b6858:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b685c:	bf18      	it	ne
   b685e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6862:	d1d1      	bne.n	b6808 <__aeabi_dmul+0x19c>
   b6864:	ea81 0103 	eor.w	r1, r1, r3
   b6868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b686c:	f04f 0000 	mov.w	r0, #0
   b6870:	bd70      	pop	{r4, r5, r6, pc}
   b6872:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6876:	bf06      	itte	eq
   b6878:	4610      	moveq	r0, r2
   b687a:	4619      	moveq	r1, r3
   b687c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6880:	d019      	beq.n	b68b6 <__aeabi_dmul+0x24a>
   b6882:	ea94 0f0c 	teq	r4, ip
   b6886:	d102      	bne.n	b688e <__aeabi_dmul+0x222>
   b6888:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b688c:	d113      	bne.n	b68b6 <__aeabi_dmul+0x24a>
   b688e:	ea95 0f0c 	teq	r5, ip
   b6892:	d105      	bne.n	b68a0 <__aeabi_dmul+0x234>
   b6894:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6898:	bf1c      	itt	ne
   b689a:	4610      	movne	r0, r2
   b689c:	4619      	movne	r1, r3
   b689e:	d10a      	bne.n	b68b6 <__aeabi_dmul+0x24a>
   b68a0:	ea81 0103 	eor.w	r1, r1, r3
   b68a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b68a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b68ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b68b0:	f04f 0000 	mov.w	r0, #0
   b68b4:	bd70      	pop	{r4, r5, r6, pc}
   b68b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b68ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b68be:	bd70      	pop	{r4, r5, r6, pc}

000b68c0 <__aeabi_ddiv>:
   b68c0:	b570      	push	{r4, r5, r6, lr}
   b68c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b68c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b68ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b68ce:	bf1d      	ittte	ne
   b68d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b68d4:	ea94 0f0c 	teqne	r4, ip
   b68d8:	ea95 0f0c 	teqne	r5, ip
   b68dc:	f000 f8a7 	bleq	b6a2e <__aeabi_ddiv+0x16e>
   b68e0:	eba4 0405 	sub.w	r4, r4, r5
   b68e4:	ea81 0e03 	eor.w	lr, r1, r3
   b68e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b68ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b68f0:	f000 8088 	beq.w	b6a04 <__aeabi_ddiv+0x144>
   b68f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b68f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b68fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b6900:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b6904:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b6908:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b690c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b6910:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b6914:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b6918:	429d      	cmp	r5, r3
   b691a:	bf08      	it	eq
   b691c:	4296      	cmpeq	r6, r2
   b691e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b6922:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b6926:	d202      	bcs.n	b692e <__aeabi_ddiv+0x6e>
   b6928:	085b      	lsrs	r3, r3, #1
   b692a:	ea4f 0232 	mov.w	r2, r2, rrx
   b692e:	1ab6      	subs	r6, r6, r2
   b6930:	eb65 0503 	sbc.w	r5, r5, r3
   b6934:	085b      	lsrs	r3, r3, #1
   b6936:	ea4f 0232 	mov.w	r2, r2, rrx
   b693a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b693e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b6942:	ebb6 0e02 	subs.w	lr, r6, r2
   b6946:	eb75 0e03 	sbcs.w	lr, r5, r3
   b694a:	bf22      	ittt	cs
   b694c:	1ab6      	subcs	r6, r6, r2
   b694e:	4675      	movcs	r5, lr
   b6950:	ea40 000c 	orrcs.w	r0, r0, ip
   b6954:	085b      	lsrs	r3, r3, #1
   b6956:	ea4f 0232 	mov.w	r2, r2, rrx
   b695a:	ebb6 0e02 	subs.w	lr, r6, r2
   b695e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6962:	bf22      	ittt	cs
   b6964:	1ab6      	subcs	r6, r6, r2
   b6966:	4675      	movcs	r5, lr
   b6968:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b696c:	085b      	lsrs	r3, r3, #1
   b696e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6972:	ebb6 0e02 	subs.w	lr, r6, r2
   b6976:	eb75 0e03 	sbcs.w	lr, r5, r3
   b697a:	bf22      	ittt	cs
   b697c:	1ab6      	subcs	r6, r6, r2
   b697e:	4675      	movcs	r5, lr
   b6980:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b6984:	085b      	lsrs	r3, r3, #1
   b6986:	ea4f 0232 	mov.w	r2, r2, rrx
   b698a:	ebb6 0e02 	subs.w	lr, r6, r2
   b698e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6992:	bf22      	ittt	cs
   b6994:	1ab6      	subcs	r6, r6, r2
   b6996:	4675      	movcs	r5, lr
   b6998:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b699c:	ea55 0e06 	orrs.w	lr, r5, r6
   b69a0:	d018      	beq.n	b69d4 <__aeabi_ddiv+0x114>
   b69a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b69a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b69aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b69ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b69b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b69b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b69ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b69be:	d1c0      	bne.n	b6942 <__aeabi_ddiv+0x82>
   b69c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b69c4:	d10b      	bne.n	b69de <__aeabi_ddiv+0x11e>
   b69c6:	ea41 0100 	orr.w	r1, r1, r0
   b69ca:	f04f 0000 	mov.w	r0, #0
   b69ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b69d2:	e7b6      	b.n	b6942 <__aeabi_ddiv+0x82>
   b69d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b69d8:	bf04      	itt	eq
   b69da:	4301      	orreq	r1, r0
   b69dc:	2000      	moveq	r0, #0
   b69de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b69e2:	bf88      	it	hi
   b69e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b69e8:	f63f aeaf 	bhi.w	b674a <__aeabi_dmul+0xde>
   b69ec:	ebb5 0c03 	subs.w	ip, r5, r3
   b69f0:	bf04      	itt	eq
   b69f2:	ebb6 0c02 	subseq.w	ip, r6, r2
   b69f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b69fa:	f150 0000 	adcs.w	r0, r0, #0
   b69fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6a02:	bd70      	pop	{r4, r5, r6, pc}
   b6a04:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b6a08:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b6a0c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b6a10:	bfc2      	ittt	gt
   b6a12:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6a16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6a1a:	bd70      	popgt	{r4, r5, r6, pc}
   b6a1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6a20:	f04f 0e00 	mov.w	lr, #0
   b6a24:	3c01      	subs	r4, #1
   b6a26:	e690      	b.n	b674a <__aeabi_dmul+0xde>
   b6a28:	ea45 0e06 	orr.w	lr, r5, r6
   b6a2c:	e68d      	b.n	b674a <__aeabi_dmul+0xde>
   b6a2e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6a32:	ea94 0f0c 	teq	r4, ip
   b6a36:	bf08      	it	eq
   b6a38:	ea95 0f0c 	teqeq	r5, ip
   b6a3c:	f43f af3b 	beq.w	b68b6 <__aeabi_dmul+0x24a>
   b6a40:	ea94 0f0c 	teq	r4, ip
   b6a44:	d10a      	bne.n	b6a5c <__aeabi_ddiv+0x19c>
   b6a46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6a4a:	f47f af34 	bne.w	b68b6 <__aeabi_dmul+0x24a>
   b6a4e:	ea95 0f0c 	teq	r5, ip
   b6a52:	f47f af25 	bne.w	b68a0 <__aeabi_dmul+0x234>
   b6a56:	4610      	mov	r0, r2
   b6a58:	4619      	mov	r1, r3
   b6a5a:	e72c      	b.n	b68b6 <__aeabi_dmul+0x24a>
   b6a5c:	ea95 0f0c 	teq	r5, ip
   b6a60:	d106      	bne.n	b6a70 <__aeabi_ddiv+0x1b0>
   b6a62:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6a66:	f43f aefd 	beq.w	b6864 <__aeabi_dmul+0x1f8>
   b6a6a:	4610      	mov	r0, r2
   b6a6c:	4619      	mov	r1, r3
   b6a6e:	e722      	b.n	b68b6 <__aeabi_dmul+0x24a>
   b6a70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6a74:	bf18      	it	ne
   b6a76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6a7a:	f47f aec5 	bne.w	b6808 <__aeabi_dmul+0x19c>
   b6a7e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b6a82:	f47f af0d 	bne.w	b68a0 <__aeabi_dmul+0x234>
   b6a86:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b6a8a:	f47f aeeb 	bne.w	b6864 <__aeabi_dmul+0x1f8>
   b6a8e:	e712      	b.n	b68b6 <__aeabi_dmul+0x24a>

000b6a90 <__gedf2>:
   b6a90:	f04f 3cff 	mov.w	ip, #4294967295
   b6a94:	e006      	b.n	b6aa4 <__cmpdf2+0x4>
   b6a96:	bf00      	nop

000b6a98 <__ledf2>:
   b6a98:	f04f 0c01 	mov.w	ip, #1
   b6a9c:	e002      	b.n	b6aa4 <__cmpdf2+0x4>
   b6a9e:	bf00      	nop

000b6aa0 <__cmpdf2>:
   b6aa0:	f04f 0c01 	mov.w	ip, #1
   b6aa4:	f84d cd04 	str.w	ip, [sp, #-4]!
   b6aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6ab4:	bf18      	it	ne
   b6ab6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b6aba:	d01b      	beq.n	b6af4 <__cmpdf2+0x54>
   b6abc:	b001      	add	sp, #4
   b6abe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b6ac2:	bf0c      	ite	eq
   b6ac4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b6ac8:	ea91 0f03 	teqne	r1, r3
   b6acc:	bf02      	ittt	eq
   b6ace:	ea90 0f02 	teqeq	r0, r2
   b6ad2:	2000      	moveq	r0, #0
   b6ad4:	4770      	bxeq	lr
   b6ad6:	f110 0f00 	cmn.w	r0, #0
   b6ada:	ea91 0f03 	teq	r1, r3
   b6ade:	bf58      	it	pl
   b6ae0:	4299      	cmppl	r1, r3
   b6ae2:	bf08      	it	eq
   b6ae4:	4290      	cmpeq	r0, r2
   b6ae6:	bf2c      	ite	cs
   b6ae8:	17d8      	asrcs	r0, r3, #31
   b6aea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b6aee:	f040 0001 	orr.w	r0, r0, #1
   b6af2:	4770      	bx	lr
   b6af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6afc:	d102      	bne.n	b6b04 <__cmpdf2+0x64>
   b6afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b6b02:	d107      	bne.n	b6b14 <__cmpdf2+0x74>
   b6b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6b0c:	d1d6      	bne.n	b6abc <__cmpdf2+0x1c>
   b6b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b6b12:	d0d3      	beq.n	b6abc <__cmpdf2+0x1c>
   b6b14:	f85d 0b04 	ldr.w	r0, [sp], #4
   b6b18:	4770      	bx	lr
   b6b1a:	bf00      	nop

000b6b1c <__aeabi_cdrcmple>:
   b6b1c:	4684      	mov	ip, r0
   b6b1e:	4610      	mov	r0, r2
   b6b20:	4662      	mov	r2, ip
   b6b22:	468c      	mov	ip, r1
   b6b24:	4619      	mov	r1, r3
   b6b26:	4663      	mov	r3, ip
   b6b28:	e000      	b.n	b6b2c <__aeabi_cdcmpeq>
   b6b2a:	bf00      	nop

000b6b2c <__aeabi_cdcmpeq>:
   b6b2c:	b501      	push	{r0, lr}
   b6b2e:	f7ff ffb7 	bl	b6aa0 <__cmpdf2>
   b6b32:	2800      	cmp	r0, #0
   b6b34:	bf48      	it	mi
   b6b36:	f110 0f00 	cmnmi.w	r0, #0
   b6b3a:	bd01      	pop	{r0, pc}

000b6b3c <__aeabi_dcmpeq>:
   b6b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6b40:	f7ff fff4 	bl	b6b2c <__aeabi_cdcmpeq>
   b6b44:	bf0c      	ite	eq
   b6b46:	2001      	moveq	r0, #1
   b6b48:	2000      	movne	r0, #0
   b6b4a:	f85d fb08 	ldr.w	pc, [sp], #8
   b6b4e:	bf00      	nop

000b6b50 <__aeabi_dcmplt>:
   b6b50:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6b54:	f7ff ffea 	bl	b6b2c <__aeabi_cdcmpeq>
   b6b58:	bf34      	ite	cc
   b6b5a:	2001      	movcc	r0, #1
   b6b5c:	2000      	movcs	r0, #0
   b6b5e:	f85d fb08 	ldr.w	pc, [sp], #8
   b6b62:	bf00      	nop

000b6b64 <__aeabi_dcmple>:
   b6b64:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6b68:	f7ff ffe0 	bl	b6b2c <__aeabi_cdcmpeq>
   b6b6c:	bf94      	ite	ls
   b6b6e:	2001      	movls	r0, #1
   b6b70:	2000      	movhi	r0, #0
   b6b72:	f85d fb08 	ldr.w	pc, [sp], #8
   b6b76:	bf00      	nop

000b6b78 <__aeabi_dcmpge>:
   b6b78:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6b7c:	f7ff ffce 	bl	b6b1c <__aeabi_cdrcmple>
   b6b80:	bf94      	ite	ls
   b6b82:	2001      	movls	r0, #1
   b6b84:	2000      	movhi	r0, #0
   b6b86:	f85d fb08 	ldr.w	pc, [sp], #8
   b6b8a:	bf00      	nop

000b6b8c <__aeabi_dcmpgt>:
   b6b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6b90:	f7ff ffc4 	bl	b6b1c <__aeabi_cdrcmple>
   b6b94:	bf34      	ite	cc
   b6b96:	2001      	movcc	r0, #1
   b6b98:	2000      	movcs	r0, #0
   b6b9a:	f85d fb08 	ldr.w	pc, [sp], #8
   b6b9e:	bf00      	nop

000b6ba0 <__aeabi_d2iz>:
   b6ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b6ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b6ba8:	d215      	bcs.n	b6bd6 <__aeabi_d2iz+0x36>
   b6baa:	d511      	bpl.n	b6bd0 <__aeabi_d2iz+0x30>
   b6bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b6bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b6bb4:	d912      	bls.n	b6bdc <__aeabi_d2iz+0x3c>
   b6bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b6bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b6bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6bc6:	fa23 f002 	lsr.w	r0, r3, r2
   b6bca:	bf18      	it	ne
   b6bcc:	4240      	negne	r0, r0
   b6bce:	4770      	bx	lr
   b6bd0:	f04f 0000 	mov.w	r0, #0
   b6bd4:	4770      	bx	lr
   b6bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b6bda:	d105      	bne.n	b6be8 <__aeabi_d2iz+0x48>
   b6bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b6be0:	bf08      	it	eq
   b6be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b6be6:	4770      	bx	lr
   b6be8:	f04f 0000 	mov.w	r0, #0
   b6bec:	4770      	bx	lr
   b6bee:	bf00      	nop

000b6bf0 <atexit>:
   b6bf0:	2300      	movs	r3, #0
   b6bf2:	4601      	mov	r1, r0
   b6bf4:	461a      	mov	r2, r3
   b6bf6:	4618      	mov	r0, r3
   b6bf8:	f000 b84c 	b.w	b6c94 <__register_exitproc>

000b6bfc <memcpy>:
   b6bfc:	440a      	add	r2, r1
   b6bfe:	4291      	cmp	r1, r2
   b6c00:	f100 33ff 	add.w	r3, r0, #4294967295
   b6c04:	d100      	bne.n	b6c08 <memcpy+0xc>
   b6c06:	4770      	bx	lr
   b6c08:	b510      	push	{r4, lr}
   b6c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6c0e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6c12:	4291      	cmp	r1, r2
   b6c14:	d1f9      	bne.n	b6c0a <memcpy+0xe>
   b6c16:	bd10      	pop	{r4, pc}

000b6c18 <memset>:
   b6c18:	4402      	add	r2, r0
   b6c1a:	4603      	mov	r3, r0
   b6c1c:	4293      	cmp	r3, r2
   b6c1e:	d100      	bne.n	b6c22 <memset+0xa>
   b6c20:	4770      	bx	lr
   b6c22:	f803 1b01 	strb.w	r1, [r3], #1
   b6c26:	e7f9      	b.n	b6c1c <memset+0x4>

000b6c28 <srand>:
   b6c28:	b538      	push	{r3, r4, r5, lr}
   b6c2a:	4b10      	ldr	r3, [pc, #64]	; (b6c6c <srand+0x44>)
   b6c2c:	681d      	ldr	r5, [r3, #0]
   b6c2e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6c30:	4604      	mov	r4, r0
   b6c32:	b9b3      	cbnz	r3, b6c62 <srand+0x3a>
   b6c34:	2018      	movs	r0, #24
   b6c36:	f7fd fc8d 	bl	b4554 <malloc>
   b6c3a:	4602      	mov	r2, r0
   b6c3c:	63a8      	str	r0, [r5, #56]	; 0x38
   b6c3e:	b920      	cbnz	r0, b6c4a <srand+0x22>
   b6c40:	4b0b      	ldr	r3, [pc, #44]	; (b6c70 <srand+0x48>)
   b6c42:	480c      	ldr	r0, [pc, #48]	; (b6c74 <srand+0x4c>)
   b6c44:	2142      	movs	r1, #66	; 0x42
   b6c46:	f7fd fc95 	bl	b4574 <__assert_func>
   b6c4a:	490b      	ldr	r1, [pc, #44]	; (b6c78 <srand+0x50>)
   b6c4c:	4b0b      	ldr	r3, [pc, #44]	; (b6c7c <srand+0x54>)
   b6c4e:	e9c0 1300 	strd	r1, r3, [r0]
   b6c52:	4b0b      	ldr	r3, [pc, #44]	; (b6c80 <srand+0x58>)
   b6c54:	6083      	str	r3, [r0, #8]
   b6c56:	230b      	movs	r3, #11
   b6c58:	8183      	strh	r3, [r0, #12]
   b6c5a:	2100      	movs	r1, #0
   b6c5c:	2001      	movs	r0, #1
   b6c5e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6c62:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6c64:	2200      	movs	r2, #0
   b6c66:	611c      	str	r4, [r3, #16]
   b6c68:	615a      	str	r2, [r3, #20]
   b6c6a:	bd38      	pop	{r3, r4, r5, pc}
   b6c6c:	2003e620 	.word	0x2003e620
   b6c70:	000b70c0 	.word	0x000b70c0
   b6c74:	000b70d7 	.word	0x000b70d7
   b6c78:	abcd330e 	.word	0xabcd330e
   b6c7c:	e66d1234 	.word	0xe66d1234
   b6c80:	0005deec 	.word	0x0005deec

000b6c84 <strlen>:
   b6c84:	4603      	mov	r3, r0
   b6c86:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6c8a:	2a00      	cmp	r2, #0
   b6c8c:	d1fb      	bne.n	b6c86 <strlen+0x2>
   b6c8e:	1a18      	subs	r0, r3, r0
   b6c90:	3801      	subs	r0, #1
   b6c92:	4770      	bx	lr

000b6c94 <__register_exitproc>:
   b6c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6c98:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6d54 <__register_exitproc+0xc0>
   b6c9c:	4606      	mov	r6, r0
   b6c9e:	f8d8 0000 	ldr.w	r0, [r8]
   b6ca2:	461f      	mov	r7, r3
   b6ca4:	460d      	mov	r5, r1
   b6ca6:	4691      	mov	r9, r2
   b6ca8:	f000 f856 	bl	b6d58 <__retarget_lock_acquire_recursive>
   b6cac:	4b25      	ldr	r3, [pc, #148]	; (b6d44 <__register_exitproc+0xb0>)
   b6cae:	681c      	ldr	r4, [r3, #0]
   b6cb0:	b934      	cbnz	r4, b6cc0 <__register_exitproc+0x2c>
   b6cb2:	4c25      	ldr	r4, [pc, #148]	; (b6d48 <__register_exitproc+0xb4>)
   b6cb4:	601c      	str	r4, [r3, #0]
   b6cb6:	4b25      	ldr	r3, [pc, #148]	; (b6d4c <__register_exitproc+0xb8>)
   b6cb8:	b113      	cbz	r3, b6cc0 <__register_exitproc+0x2c>
   b6cba:	681b      	ldr	r3, [r3, #0]
   b6cbc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6cc0:	6863      	ldr	r3, [r4, #4]
   b6cc2:	2b1f      	cmp	r3, #31
   b6cc4:	dd07      	ble.n	b6cd6 <__register_exitproc+0x42>
   b6cc6:	f8d8 0000 	ldr.w	r0, [r8]
   b6cca:	f000 f847 	bl	b6d5c <__retarget_lock_release_recursive>
   b6cce:	f04f 30ff 	mov.w	r0, #4294967295
   b6cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6cd6:	b34e      	cbz	r6, b6d2c <__register_exitproc+0x98>
   b6cd8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6cdc:	b988      	cbnz	r0, b6d02 <__register_exitproc+0x6e>
   b6cde:	4b1c      	ldr	r3, [pc, #112]	; (b6d50 <__register_exitproc+0xbc>)
   b6ce0:	b923      	cbnz	r3, b6cec <__register_exitproc+0x58>
   b6ce2:	f8d8 0000 	ldr.w	r0, [r8]
   b6ce6:	f000 f838 	bl	b6d5a <__retarget_lock_release>
   b6cea:	e7f0      	b.n	b6cce <__register_exitproc+0x3a>
   b6cec:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6cf0:	f7fd fc30 	bl	b4554 <malloc>
   b6cf4:	2800      	cmp	r0, #0
   b6cf6:	d0f4      	beq.n	b6ce2 <__register_exitproc+0x4e>
   b6cf8:	2300      	movs	r3, #0
   b6cfa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6cfe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6d02:	6863      	ldr	r3, [r4, #4]
   b6d04:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6d08:	2201      	movs	r2, #1
   b6d0a:	409a      	lsls	r2, r3
   b6d0c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6d10:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6d14:	4313      	orrs	r3, r2
   b6d16:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6d1a:	2e02      	cmp	r6, #2
   b6d1c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6d20:	bf02      	ittt	eq
   b6d22:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6d26:	4313      	orreq	r3, r2
   b6d28:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6d2c:	6863      	ldr	r3, [r4, #4]
   b6d2e:	f8d8 0000 	ldr.w	r0, [r8]
   b6d32:	1c5a      	adds	r2, r3, #1
   b6d34:	3302      	adds	r3, #2
   b6d36:	6062      	str	r2, [r4, #4]
   b6d38:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6d3c:	f000 f80e 	bl	b6d5c <__retarget_lock_release_recursive>
   b6d40:	2000      	movs	r0, #0
   b6d42:	e7c6      	b.n	b6cd2 <__register_exitproc+0x3e>
   b6d44:	2003e7e8 	.word	0x2003e7e8
   b6d48:	2003e75c 	.word	0x2003e75c
   b6d4c:	00000000 	.word	0x00000000
   b6d50:	000b4555 	.word	0x000b4555
   b6d54:	2003e684 	.word	0x2003e684

000b6d58 <__retarget_lock_acquire_recursive>:
   b6d58:	4770      	bx	lr

000b6d5a <__retarget_lock_release>:
   b6d5a:	4770      	bx	lr

000b6d5c <__retarget_lock_release_recursive>:
   b6d5c:	4770      	bx	lr

000b6d5e <link_code_end>:
	...

000b6d60 <dynalib_user>:
   b6d60:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b6d70:	0000 0000                                   ....

000b6d74 <_ZTVN5spark13EthernetClassE>:
	...
   b6d7c:	45f3 000b 45e9 000b 45df 000b 45d5 000b     .E...E...E...E..
   b6d8c:	45c9 000b 45bd 000b 4c21 000b 4c29 000b     .E...E..!L..)L..
   b6d9c:	45b1 000b 45a9 000b 459f 000b 4595 000b     .E...E...E...E..
   b6dac:	4c59 000b 7061 0070 5925 252d 2d6d 6425     YL..app.%Y-%m-%d
   b6dbc:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b6dcc:	6d69 0065                                   ime.

000b6dd0 <_ZTV9IPAddress>:
	...
   b6dd8:	4871 000b 4861 000b 4863 000b               qH..aH..cH..

000b6de4 <_ZTV9USBSerial>:
	...
   b6dec:	4957 000b 49bf 000b 4995 000b 4659 000b     WI...I...I..YF..
   b6dfc:	4987 000b 4959 000b 4969 000b 49b9 000b     .I..YI..iI...I..
   b6e0c:	4979 000b 4951 000b                         yI..QI..

000b6e14 <_ZTV11USARTSerial>:
	...
   b6e1c:	4a51 000b 4abd 000b 4a95 000b 4659 000b     QJ...J...J..YF..
   b6e2c:	4a65 000b 4a81 000b 4a73 000b 4a8f 000b     eJ...J..sJ...J..
   b6e3c:	4a53 000b 4a57 000b                         SJ..WJ..

000b6e44 <_ZTV7TwoWire>:
	...
   b6e4c:	4af5 000b 4b3f 000b 4b17 000b 4af7 000b     .J..?K...K...J..
   b6e5c:	4b1f 000b 4b27 000b 4b2f 000b 4b37 000b     .K..'K../K..7K..

000b6e6c <_ZTVN5spark9WiFiClassE>:
	...
   b6e74:	4bc3 000b 4bb9 000b 4baf 000b 4b71 000b     .K...K...K..qK..
   b6e84:	46eb 000b 4ba3 000b 4c21 000b 4c29 000b     .F...K..!L..)L..
   b6e94:	4b97 000b 4b8f 000b 4b85 000b 4b7b 000b     .K...K...K..{K..
   b6ea4:	4c59 000b                                   YL..

000b6ea8 <_ZTVN5spark12NetworkClassE>:
	...
   b6eb0:	4be1 000b 4beb 000b 4bf5 000b 4bff 000b     .K...K...K...K..
   b6ec0:	4c09 000b 4c15 000b 4c21 000b 4c29 000b     .L...L..!L..)L..
   b6ed0:	4c31 000b 4c3d 000b 4c45 000b 4c4f 000b     1L..=L..EL..OL..
   b6ee0:	4c59 000b                                   YL..

000b6ee4 <_ZSt7nothrow>:
   b6ee4:	0000 0000                                   ....

000b6ee8 <npio2_hw>:
   b6ee8:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
   b6ef8:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
   b6f08:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
   b6f18:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
   b6f28:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
   b6f38:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
   b6f48:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
   b6f58:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

000b6f68 <two_over_pi>:
   b6f68:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
   b6f78:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
   b6f88:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
   b6f98:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
   b6fa8:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
   b6fb8:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
   b6fc8:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
   b6fd8:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
   b6fe8:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
   b6ff8:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
   b7008:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
   b7018:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
   b7028:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
   b7038:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
   b7048:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
   b7058:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
   b7068:	e27b 0060 8c6b 00c0                         {.`.k...

000b7070 <PIo2>:
   b7070:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
   b7080:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
   b7090:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
   b70a0:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

000b70b0 <init_jk>:
   b70b0:	0002 0000 0003 0000 0004 0000 0006 0000     ................
   b70c0:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   b70d0:	6563 6465 6465 2f00 6e6d 2f74 6f77 6b72     ceeded./mnt/work
   b70e0:	7073 6361 2f65 6f77 6b72 7073 6361 2f65     space/workspace/
   b70f0:	4347 2d43 3031 702d 7069 6c65 6e69 2f65     GCC-10-pipeline/
   b7100:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   b7110:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   b7120:	3231 5f34 3631 3630 3831 3630 3134 732f     124_1606180641/s
   b7130:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   b7140:	6c2f 6269 2f63 7473 6c64 6269 722f 6e61     /libc/stdlib/ran
   b7150:	2e64 0063                                   d.c.

000b7154 <link_const_variable_data_end>:
   b7154:	000b41f5 	.word	0x000b41f5
   b7158:	000b45fd 	.word	0x000b45fd
   b715c:	000b4625 	.word	0x000b4625
   b7160:	000b4649 	.word	0x000b4649
   b7164:	000b46f9 	.word	0x000b46f9
   b7168:	000b4709 	.word	0x000b4709
   b716c:	000b471d 	.word	0x000b471d
   b7170:	000b4bcd 	.word	0x000b4bcd
   b7174:	000b4d31 	.word	0x000b4d31

000b7178 <link_constructors_end>:
	...
