
c:/Users/reed_/Documents/IoT/PredictivePlantWatering/DustSensorTest/target/3.2.0/argon/DustSensorTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002ed0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b6ef0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003e614  000b6ef4  0001e614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000016c  2003e684  2003e684  0002e684  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b6f64  000b6f64  00026f64  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b6f8c  000b6f8c  00026f8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f3c94  00000000  00000000  00026f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0001001d  00000000  00000000  0011ac24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00030944  00000000  00000000  0012ac41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000025a8  00000000  00000000  0015b585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00009088  00000000  00000000  0015db2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00034603  00000000  00000000  00166bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000338cd  00000000  00000000  0019b1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00123c3b  00000000  00000000  001cea85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00006cd0  00000000  00000000  002f26c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f002 fd6d 	bl	b6b10 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f002 fd75 	bl	b6b2c <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e614 	.word	0x2003e614
   b404c:	000b6ef4 	.word	0x000b6ef4
   b4050:	2003e684 	.word	0x2003e684
   b4054:	2003e684 	.word	0x2003e684
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f000 fc85 	bl	b4970 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b6ecc 	.word	0x000b6ecc
   b4080:	000b6ef0 	.word	0x000b6ef0

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b822 	b.w	b40cc <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f841 	bl	b4110 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f000 bc25 	b.w	b48e0 <_post_loop>

000b4096 <_Znaj>:
   b4096:	f000 bacb 	b.w	b4630 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bad1 	b.w	b4640 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40ae:	b40e      	push	{r1, r2, r3}
   b40b0:	b503      	push	{r0, r1, lr}
   b40b2:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40b4:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40b6:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40ba:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40bc:	f000 fb9f 	bl	b47fe <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40c0:	b002      	add	sp, #8
   b40c2:	f85d eb04 	ldr.w	lr, [sp], #4
   b40c6:	b003      	add	sp, #12
   b40c8:	4770      	bx	lr
	...

000b40cc <setup>:
  int          sampleStart;
  



void setup() {
   b40cc:	b508      	push	{r3, lr}
  Serial.begin(9600);
   b40ce:	f000 fd57 	bl	b4b80 <_Z16_fetch_usbserialv>
   b40d2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40d6:	f000 fd47 	bl	b4b68 <_ZN9USBSerial5beginEl>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b40da:	f000 f94d 	bl	b4378 <HAL_Timer_Get_Milli_Seconds>
  sampleStart = millis();
   b40de:	4b07      	ldr	r3, [pc, #28]	; (b40fc <setup+0x30>)

  pinMode(DUSTPIN, INPUT);
   b40e0:	2100      	movs	r1, #0
  sampleStart = millis();
   b40e2:	6018      	str	r0, [r3, #0]
  pinMode(DUSTPIN, INPUT);
   b40e4:	2005      	movs	r0, #5
   b40e6:	f000 ff29 	bl	b4f3c <pinMode>

  lowPulseOccupancy = 0;        //  Initialize all variables
   b40ea:	4b05      	ldr	r3, [pc, #20]	; (b4100 <setup+0x34>)
   b40ec:	2200      	movs	r2, #0
   b40ee:	601a      	str	r2, [r3, #0]
  ratio             = 0;
   b40f0:	4a04      	ldr	r2, [pc, #16]	; (b4104 <setup+0x38>)
   b40f2:	2300      	movs	r3, #0
   b40f4:	6013      	str	r3, [r2, #0]
  concentration     = 0;  
   b40f6:	4a04      	ldr	r2, [pc, #16]	; (b4108 <setup+0x3c>)
   b40f8:	6013      	str	r3, [r2, #0]
}
   b40fa:	bd08      	pop	{r3, pc}
   b40fc:	2003e6ac 	.word	0x2003e6ac
   b4100:	2003e6a4 	.word	0x2003e6a4
   b4104:	2003e6a8 	.word	0x2003e6a8
   b4108:	2003e690 	.word	0x2003e690
   b410c:	00000000 	.word	0x00000000

000b4110 <loop>:

void loop() {
   b4110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //  Get current Dust levels
  duration     = 0;                                    //  Reset duration timer
   b4114:	4d6a      	ldr	r5, [pc, #424]	; (b42c0 <loop+0x1b0>)
  dustFlag     = 0;                                    //  Pulse has not started
   b4116:	4c6b      	ldr	r4, [pc, #428]	; (b42c4 <loop+0x1b4>)
  dustTime     = 0;                                    //  Time the current pulse started
   b4118:	4f6b      	ldr	r7, [pc, #428]	; (b42c8 <loop+0x1b8>)
  throwAwayOld = digitalRead(DUSTPIN);                 //  Set edge detection
   b411a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; b42e0 <loop+0x1d0>
  dustStart    = micros();                             //  Start the wait-for-pulse timer
   b411e:	f8df 81c4 	ldr.w	r8, [pc, #452]	; b42e4 <loop+0x1d4>
   b4122:	4e6a      	ldr	r6, [pc, #424]	; (b42cc <loop+0x1bc>)
  duration     = 0;                                    //  Reset duration timer
   b4124:	2300      	movs	r3, #0
void loop() {
   b4126:	b085      	sub	sp, #20
  throwAwayOld = digitalRead(DUSTPIN);                 //  Set edge detection
   b4128:	2005      	movs	r0, #5
  duration     = 0;                                    //  Reset duration timer
   b412a:	602b      	str	r3, [r5, #0]
  dustFlag     = 0;                                    //  Pulse has not started
   b412c:	7023      	strb	r3, [r4, #0]
  dustTime     = 0;                                    //  Time the current pulse started
   b412e:	603b      	str	r3, [r7, #0]
  throwAwayOld = digitalRead(DUSTPIN);                 //  Set edge detection
   b4130:	f000 ff15 	bl	b4f5e <digitalRead>
   b4134:	f8c9 0000 	str.w	r0, [r9]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4138:	f000 f916 	bl	b4368 <HAL_Timer_Get_Micro_Seconds>
  while(micros() - dustStart < DUSTTO && !dustFlag) {  //  Start looking for pulse. timeout after 1000uS
    throwAway = digitalRead(DUSTPIN);                  //  Read the Dust Sensor in put pin. value irrelevant at this time
    if (throwAway == 0 && throwAway != throwAwayOld){  //  Low pulse detected and edge detected.
       dustFlag = 1;                                   //  Pulse has started set flag
   b413c:	f04f 0a01 	mov.w	sl, #1
  dustStart    = micros();                             //  Start the wait-for-pulse timer
   b4140:	f8c8 0000 	str.w	r0, [r8]
   b4144:	f000 f910 	bl	b4368 <HAL_Timer_Get_Micro_Seconds>
  while(micros() - dustStart < DUSTTO && !dustFlag) {  //  Start looking for pulse. timeout after 1000uS
   b4148:	f8d8 3000 	ldr.w	r3, [r8]
   b414c:	1ac0      	subs	r0, r0, r3
   b414e:	2863      	cmp	r0, #99	; 0x63
   b4150:	d816      	bhi.n	b4180 <loop+0x70>
   b4152:	7823      	ldrb	r3, [r4, #0]
   b4154:	b9a3      	cbnz	r3, b4180 <loop+0x70>
    throwAway = digitalRead(DUSTPIN);                  //  Read the Dust Sensor in put pin. value irrelevant at this time
   b4156:	2005      	movs	r0, #5
   b4158:	f000 ff01 	bl	b4f5e <digitalRead>
   b415c:	6030      	str	r0, [r6, #0]
    if (throwAway == 0 && throwAway != throwAwayOld){  //  Low pulse detected and edge detected.
   b415e:	b940      	cbnz	r0, b4172 <loop+0x62>
   b4160:	f8d9 3000 	ldr.w	r3, [r9]
   b4164:	b12b      	cbz	r3, b4172 <loop+0x62>
       dustFlag = 1;                                   //  Pulse has started set flag
   b4166:	f884 a000 	strb.w	sl, [r4]
   b416a:	f000 f8fd 	bl	b4368 <HAL_Timer_Get_Micro_Seconds>
       dustTime = micros();                            //  Set Time the current pulse started
   b416e:	6038      	str	r0, [r7, #0]
   b4170:	e7e8      	b.n	b4144 <loop+0x34>
     } else {                                          //  No pulse detected
       throwAwayOld = throwAway;                       //  Update edge detector
   b4172:	f8c9 0000 	str.w	r0, [r9]
   b4176:	f000 f8f7 	bl	b4368 <HAL_Timer_Get_Micro_Seconds>
       dustStart = micros();                           //  Increment timeout timer
   b417a:	f8c8 0000 	str.w	r0, [r8]
   b417e:	e7e1      	b.n	b4144 <loop+0x34>
     }
  }
  while(throwAway == 0 && dustFlag) {                  //  Measure length of low pulse ONLY IF pulse was discovered during timeout interval
   b4180:	6833      	ldr	r3, [r6, #0]
   b4182:	b95b      	cbnz	r3, b419c <loop+0x8c>
   b4184:	7823      	ldrb	r3, [r4, #0]
   b4186:	b14b      	cbz	r3, b419c <loop+0x8c>
   b4188:	f000 f8ee 	bl	b4368 <HAL_Timer_Get_Micro_Seconds>
    duration = micros() - dustTime;                    //  Measure length of pulse through time difference
   b418c:	683b      	ldr	r3, [r7, #0]
   b418e:	1ac0      	subs	r0, r0, r3
   b4190:	6028      	str	r0, [r5, #0]
    throwAway = digitalRead(DUSTPIN);                  //  ReCheck for end of pulse
   b4192:	2005      	movs	r0, #5
   b4194:	f000 fee3 	bl	b4f5e <digitalRead>
   b4198:	6030      	str	r0, [r6, #0]
  while(throwAway == 0 && dustFlag) {                  //  Measure length of low pulse ONLY IF pulse was discovered during timeout interval
   b419a:	e7f1      	b.n	b4180 <loop+0x70>
  }
//  duration = pulseIn(DUSTPIN, LOW);                   //  Read the input pin for low pulses
  
  lowPulseOccupancy += duration;                       //  summ the total amount of low time
   b419c:	4c4c      	ldr	r4, [pc, #304]	; (b42d0 <loop+0x1c0>)
   b419e:	682a      	ldr	r2, [r5, #0]
   b41a0:	6823      	ldr	r3, [r4, #0]
  if (millis() - sampleStart > SAMPLETIME) {           //  Once the air has been samples for 30 sec
   b41a2:	f8df b144 	ldr.w	fp, [pc, #324]	; b42e8 <loop+0x1d8>
  lowPulseOccupancy += duration;                       //  summ the total amount of low time
   b41a6:	4413      	add	r3, r2
   b41a8:	6023      	str	r3, [r4, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b41aa:	f000 f8e5 	bl	b4378 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - sampleStart > SAMPLETIME) {           //  Once the air has been samples for 30 sec
   b41ae:	f8db 3000 	ldr.w	r3, [fp]
   b41b2:	1ac0      	subs	r0, r0, r3
   b41b4:	f247 5330 	movw	r3, #30000	; 0x7530
   b41b8:	4298      	cmp	r0, r3
   b41ba:	d967      	bls.n	b428c <loop+0x17c>
    ratio = lowPulseOccupancy / (SAMPLETIME * 10.0);   // calculate the ratio
   b41bc:	6820      	ldr	r0, [r4, #0]
   b41be:	f8df a12c 	ldr.w	sl, [pc, #300]	; b42ec <loop+0x1dc>
    concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) +520.0 * ratio + 0.62;  //  Calculate the concentration
   b41c2:	4d44      	ldr	r5, [pc, #272]	; (b42d4 <loop+0x1c4>)
    ratio = lowPulseOccupancy / (SAMPLETIME * 10.0);   // calculate the ratio
   b41c4:	f002 f934 	bl	b6430 <__aeabi_i2d>
   b41c8:	a333      	add	r3, pc, #204	; (adr r3, b4298 <loop+0x188>)
   b41ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   b41ce:	f002 fac3 	bl	b6758 <__aeabi_ddiv>
   b41d2:	f002 fc47 	bl	b6a64 <__aeabi_d2f>
   b41d6:	f8ca 0000 	str.w	r0, [sl]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b41da:	f002 f93b 	bl	b6454 <__aeabi_f2d>
   b41de:	ed9f 1b30 	vldr	d1, [pc, #192]	; b42a0 <loop+0x190>
   b41e2:	ec41 0b10 	vmov	d0, r0, r1
   b41e6:	f000 ff4b 	bl	b5080 <pow>
   b41ea:	f8da 0000 	ldr.w	r0, [sl]
   b41ee:	ec59 8b10 	vmov	r8, r9, d0
   b41f2:	f002 f92f 	bl	b6454 <__aeabi_f2d>
    concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) +520.0 * ratio + 0.62;  //  Calculate the concentration
   b41f6:	a32c      	add	r3, pc, #176	; (adr r3, b42a8 <loop+0x198>)
   b41f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b41fc:	4606      	mov	r6, r0
   b41fe:	460f      	mov	r7, r1
   b4200:	4640      	mov	r0, r8
   b4202:	4649      	mov	r1, r9
   b4204:	f002 f97e 	bl	b6504 <__aeabi_dmul>
   b4208:	4632      	mov	r2, r6
   b420a:	4680      	mov	r8, r0
   b420c:	4689      	mov	r9, r1
   b420e:	463b      	mov	r3, r7
   b4210:	4630      	mov	r0, r6
   b4212:	4639      	mov	r1, r7
   b4214:	f002 f976 	bl	b6504 <__aeabi_dmul>
   b4218:	a325      	add	r3, pc, #148	; (adr r3, b42b0 <loop+0x1a0>)
   b421a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b421e:	f002 f971 	bl	b6504 <__aeabi_dmul>
   b4222:	4602      	mov	r2, r0
   b4224:	460b      	mov	r3, r1
   b4226:	4640      	mov	r0, r8
   b4228:	4649      	mov	r1, r9
   b422a:	f001 ffb3 	bl	b6194 <__aeabi_dsub>
   b422e:	4b2a      	ldr	r3, [pc, #168]	; (b42d8 <loop+0x1c8>)
   b4230:	4680      	mov	r8, r0
   b4232:	4689      	mov	r9, r1
   b4234:	2200      	movs	r2, #0
   b4236:	4630      	mov	r0, r6
   b4238:	4639      	mov	r1, r7
   b423a:	f002 f963 	bl	b6504 <__aeabi_dmul>
   b423e:	4602      	mov	r2, r0
   b4240:	460b      	mov	r3, r1
   b4242:	4640      	mov	r0, r8
   b4244:	4649      	mov	r1, r9
   b4246:	f001 ffa7 	bl	b6198 <__adddf3>
   b424a:	a31b      	add	r3, pc, #108	; (adr r3, b42b8 <loop+0x1a8>)
   b424c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4250:	f001 ffa2 	bl	b6198 <__adddf3>
   b4254:	f002 fc06 	bl	b6a64 <__aeabi_d2f>
   b4258:	6028      	str	r0, [r5, #0]
    Serial.printf("LPO %i, concen %0.2f, ratio %0.2f\n", lowPulseOccupancy, concentration, ratio);
   b425a:	f000 fc91 	bl	b4b80 <_Z16_fetch_usbserialv>
   b425e:	4606      	mov	r6, r0
   b4260:	f8da 0000 	ldr.w	r0, [sl]
   b4264:	f002 f8f6 	bl	b6454 <__aeabi_f2d>
   b4268:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b426c:	6828      	ldr	r0, [r5, #0]
   b426e:	f002 f8f1 	bl	b6454 <__aeabi_f2d>
   b4272:	e9cd 0100 	strd	r0, r1, [sp]
   b4276:	4919      	ldr	r1, [pc, #100]	; (b42dc <loop+0x1cc>)
   b4278:	6822      	ldr	r2, [r4, #0]
   b427a:	4630      	mov	r0, r6
   b427c:	f7ff ff17 	bl	b40ae <_ZN5Print6printfEPKcz>
    lowPulseOccupancy = 0;                             // reset the LPO
   b4280:	2300      	movs	r3, #0
   b4282:	6023      	str	r3, [r4, #0]
   b4284:	f000 f878 	bl	b4378 <HAL_Timer_Get_Milli_Seconds>
    sampleStart = millis();                            // Reset the timer
   b4288:	f8cb 0000 	str.w	r0, [fp]
  }

   b428c:	b005      	add	sp, #20
   b428e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4292:	bf00      	nop
   b4294:	f3af 8000 	nop.w
   b4298:	00000000 	.word	0x00000000
   b429c:	41124f80 	.word	0x41124f80
   b42a0:	00000000 	.word	0x00000000
   b42a4:	40080000 	.word	0x40080000
   b42a8:	9999999a 	.word	0x9999999a
   b42ac:	3ff19999 	.word	0x3ff19999
   b42b0:	66666666 	.word	0x66666666
   b42b4:	400e6666 	.word	0x400e6666
   b42b8:	3d70a3d7 	.word	0x3d70a3d7
   b42bc:	3fe3d70a 	.word	0x3fe3d70a
   b42c0:	2003e694 	.word	0x2003e694
   b42c4:	2003e698 	.word	0x2003e698
   b42c8:	2003e6a0 	.word	0x2003e6a0
   b42cc:	2003e6b0 	.word	0x2003e6b0
   b42d0:	2003e6a4 	.word	0x2003e6a4
   b42d4:	2003e690 	.word	0x2003e690
   b42d8:	40804000 	.word	0x40804000
   b42dc:	000b6c88 	.word	0x000b6c88
   b42e0:	2003e6b4 	.word	0x2003e6b4
   b42e4:	2003e69c 	.word	0x2003e69c
   b42e8:	2003e6ac 	.word	0x2003e6ac
   b42ec:	2003e6a8 	.word	0x2003e6a8

000b42f0 <_GLOBAL__sub_I_SystemMode>:

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b42f0:	4b04      	ldr	r3, [pc, #16]	; (b4304 <_GLOBAL__sub_I_SystemMode+0x14>)
   b42f2:	2200      	movs	r2, #0
   b42f4:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b42f8:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b42fc:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b42fe:	2002      	movs	r0, #2
   b4300:	f000 b912 	b.w	b4528 <set_system_mode>
   b4304:	2003e684 	.word	0x2003e684

000b4308 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4308:	b508      	push	{r3, lr}
   b430a:	4b02      	ldr	r3, [pc, #8]	; (b4314 <netdb_freeaddrinfo+0xc>)
   b430c:	681b      	ldr	r3, [r3, #0]
   b430e:	689b      	ldr	r3, [r3, #8]
   b4310:	9301      	str	r3, [sp, #4]
   b4312:	bd08      	pop	{r3, pc}
   b4314:	00030268 	.word	0x00030268

000b4318 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4318:	b508      	push	{r3, lr}
   b431a:	4b02      	ldr	r3, [pc, #8]	; (b4324 <netdb_getaddrinfo+0xc>)
   b431c:	681b      	ldr	r3, [r3, #0]
   b431e:	68db      	ldr	r3, [r3, #12]
   b4320:	9301      	str	r3, [sp, #4]
   b4322:	bd08      	pop	{r3, pc}
   b4324:	00030268 	.word	0x00030268

000b4328 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4328:	b508      	push	{r3, lr}
   b432a:	4b02      	ldr	r3, [pc, #8]	; (b4334 <HAL_Pin_Mode+0xc>)
   b432c:	681b      	ldr	r3, [r3, #0]
   b432e:	689b      	ldr	r3, [r3, #8]
   b4330:	9301      	str	r3, [sp, #4]
   b4332:	bd08      	pop	{r3, pc}
   b4334:	0003022c 	.word	0x0003022c

000b4338 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4338:	b508      	push	{r3, lr}
   b433a:	4b02      	ldr	r3, [pc, #8]	; (b4344 <HAL_Get_Pin_Mode+0xc>)
   b433c:	681b      	ldr	r3, [r3, #0]
   b433e:	68db      	ldr	r3, [r3, #12]
   b4340:	9301      	str	r3, [sp, #4]
   b4342:	bd08      	pop	{r3, pc}
   b4344:	0003022c 	.word	0x0003022c

000b4348 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b4348:	b508      	push	{r3, lr}
   b434a:	4b02      	ldr	r3, [pc, #8]	; (b4354 <HAL_GPIO_Read+0xc>)
   b434c:	681b      	ldr	r3, [r3, #0]
   b434e:	695b      	ldr	r3, [r3, #20]
   b4350:	9301      	str	r3, [sp, #4]
   b4352:	bd08      	pop	{r3, pc}
   b4354:	0003022c 	.word	0x0003022c

000b4358 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4358:	b508      	push	{r3, lr}
   b435a:	4b02      	ldr	r3, [pc, #8]	; (b4364 <HAL_RNG_GetRandomNumber+0xc>)
   b435c:	681b      	ldr	r3, [r3, #0]
   b435e:	685b      	ldr	r3, [r3, #4]
   b4360:	9301      	str	r3, [sp, #4]
   b4362:	bd08      	pop	{r3, pc}
   b4364:	00030218 	.word	0x00030218

000b4368 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b4368:	b508      	push	{r3, lr}
   b436a:	4b02      	ldr	r3, [pc, #8]	; (b4374 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b436c:	681b      	ldr	r3, [r3, #0]
   b436e:	691b      	ldr	r3, [r3, #16]
   b4370:	9301      	str	r3, [sp, #4]
   b4372:	bd08      	pop	{r3, pc}
   b4374:	00030218 	.word	0x00030218

000b4378 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4378:	b508      	push	{r3, lr}
   b437a:	4b02      	ldr	r3, [pc, #8]	; (b4384 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b437c:	681b      	ldr	r3, [r3, #0]
   b437e:	695b      	ldr	r3, [r3, #20]
   b4380:	9301      	str	r3, [sp, #4]
   b4382:	bd08      	pop	{r3, pc}
   b4384:	00030218 	.word	0x00030218

000b4388 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4388:	b508      	push	{r3, lr}
   b438a:	4b02      	ldr	r3, [pc, #8]	; (b4394 <os_mutex_recursive_create+0xc>)
   b438c:	681b      	ldr	r3, [r3, #0]
   b438e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4390:	9301      	str	r3, [sp, #4]
   b4392:	bd08      	pop	{r3, pc}
   b4394:	00030248 	.word	0x00030248

000b4398 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4398:	b508      	push	{r3, lr}
   b439a:	4b02      	ldr	r3, [pc, #8]	; (b43a4 <inet_inet_ntop+0xc>)
   b439c:	681b      	ldr	r3, [r3, #0]
   b439e:	695b      	ldr	r3, [r3, #20]
   b43a0:	9301      	str	r3, [sp, #4]
   b43a2:	bd08      	pop	{r3, pc}
   b43a4:	00030264 	.word	0x00030264

000b43a8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b43a8:	b508      	push	{r3, lr}
   b43aa:	4b02      	ldr	r3, [pc, #8]	; (b43b4 <hal_usart_write+0xc>)
   b43ac:	681b      	ldr	r3, [r3, #0]
   b43ae:	68db      	ldr	r3, [r3, #12]
   b43b0:	9301      	str	r3, [sp, #4]
   b43b2:	bd08      	pop	{r3, pc}
   b43b4:	0003023c 	.word	0x0003023c

000b43b8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b43b8:	b508      	push	{r3, lr}
   b43ba:	4b02      	ldr	r3, [pc, #8]	; (b43c4 <hal_usart_available+0xc>)
   b43bc:	681b      	ldr	r3, [r3, #0]
   b43be:	691b      	ldr	r3, [r3, #16]
   b43c0:	9301      	str	r3, [sp, #4]
   b43c2:	bd08      	pop	{r3, pc}
   b43c4:	0003023c 	.word	0x0003023c

000b43c8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b43c8:	b508      	push	{r3, lr}
   b43ca:	4b02      	ldr	r3, [pc, #8]	; (b43d4 <hal_usart_read+0xc>)
   b43cc:	681b      	ldr	r3, [r3, #0]
   b43ce:	695b      	ldr	r3, [r3, #20]
   b43d0:	9301      	str	r3, [sp, #4]
   b43d2:	bd08      	pop	{r3, pc}
   b43d4:	0003023c 	.word	0x0003023c

000b43d8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b43d8:	b508      	push	{r3, lr}
   b43da:	4b02      	ldr	r3, [pc, #8]	; (b43e4 <hal_usart_peek+0xc>)
   b43dc:	681b      	ldr	r3, [r3, #0]
   b43de:	699b      	ldr	r3, [r3, #24]
   b43e0:	9301      	str	r3, [sp, #4]
   b43e2:	bd08      	pop	{r3, pc}
   b43e4:	0003023c 	.word	0x0003023c

000b43e8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b43e8:	b508      	push	{r3, lr}
   b43ea:	4b02      	ldr	r3, [pc, #8]	; (b43f4 <hal_usart_flush+0xc>)
   b43ec:	681b      	ldr	r3, [r3, #0]
   b43ee:	69db      	ldr	r3, [r3, #28]
   b43f0:	9301      	str	r3, [sp, #4]
   b43f2:	bd08      	pop	{r3, pc}
   b43f4:	0003023c 	.word	0x0003023c

000b43f8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b43f8:	b508      	push	{r3, lr}
   b43fa:	4b02      	ldr	r3, [pc, #8]	; (b4404 <hal_usart_is_enabled+0xc>)
   b43fc:	681b      	ldr	r3, [r3, #0]
   b43fe:	6a1b      	ldr	r3, [r3, #32]
   b4400:	9301      	str	r3, [sp, #4]
   b4402:	bd08      	pop	{r3, pc}
   b4404:	0003023c 	.word	0x0003023c

000b4408 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4408:	b508      	push	{r3, lr}
   b440a:	4b02      	ldr	r3, [pc, #8]	; (b4414 <hal_usart_available_data_for_write+0xc>)
   b440c:	681b      	ldr	r3, [r3, #0]
   b440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4410:	9301      	str	r3, [sp, #4]
   b4412:	bd08      	pop	{r3, pc}
   b4414:	0003023c 	.word	0x0003023c

000b4418 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4418:	b508      	push	{r3, lr}
   b441a:	4b02      	ldr	r3, [pc, #8]	; (b4424 <hal_usart_init_ex+0xc>)
   b441c:	681b      	ldr	r3, [r3, #0]
   b441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4420:	9301      	str	r3, [sp, #4]
   b4422:	bd08      	pop	{r3, pc}
   b4424:	0003023c 	.word	0x0003023c

000b4428 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4428:	b508      	push	{r3, lr}
   b442a:	4b02      	ldr	r3, [pc, #8]	; (b4434 <hal_i2c_write+0xc>)
   b442c:	681b      	ldr	r3, [r3, #0]
   b442e:	6a1b      	ldr	r3, [r3, #32]
   b4430:	9301      	str	r3, [sp, #4]
   b4432:	bd08      	pop	{r3, pc}
   b4434:	00030228 	.word	0x00030228

000b4438 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4438:	b508      	push	{r3, lr}
   b443a:	4b02      	ldr	r3, [pc, #8]	; (b4444 <hal_i2c_available+0xc>)
   b443c:	681b      	ldr	r3, [r3, #0]
   b443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4440:	9301      	str	r3, [sp, #4]
   b4442:	bd08      	pop	{r3, pc}
   b4444:	00030228 	.word	0x00030228

000b4448 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4448:	b508      	push	{r3, lr}
   b444a:	4b02      	ldr	r3, [pc, #8]	; (b4454 <hal_i2c_read+0xc>)
   b444c:	681b      	ldr	r3, [r3, #0]
   b444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4450:	9301      	str	r3, [sp, #4]
   b4452:	bd08      	pop	{r3, pc}
   b4454:	00030228 	.word	0x00030228

000b4458 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4458:	b508      	push	{r3, lr}
   b445a:	4b02      	ldr	r3, [pc, #8]	; (b4464 <hal_i2c_peek+0xc>)
   b445c:	681b      	ldr	r3, [r3, #0]
   b445e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4460:	9301      	str	r3, [sp, #4]
   b4462:	bd08      	pop	{r3, pc}
   b4464:	00030228 	.word	0x00030228

000b4468 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4468:	b508      	push	{r3, lr}
   b446a:	4b02      	ldr	r3, [pc, #8]	; (b4474 <hal_i2c_flush+0xc>)
   b446c:	681b      	ldr	r3, [r3, #0]
   b446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4470:	9301      	str	r3, [sp, #4]
   b4472:	bd08      	pop	{r3, pc}
   b4474:	00030228 	.word	0x00030228

000b4478 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4478:	b508      	push	{r3, lr}
   b447a:	4b02      	ldr	r3, [pc, #8]	; (b4484 <hal_i2c_is_enabled+0xc>)
   b447c:	681b      	ldr	r3, [r3, #0]
   b447e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4480:	9301      	str	r3, [sp, #4]
   b4482:	bd08      	pop	{r3, pc}
   b4484:	00030228 	.word	0x00030228

000b4488 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4488:	b508      	push	{r3, lr}
   b448a:	4b02      	ldr	r3, [pc, #8]	; (b4494 <hal_i2c_init+0xc>)
   b448c:	681b      	ldr	r3, [r3, #0]
   b448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4490:	9301      	str	r3, [sp, #4]
   b4492:	bd08      	pop	{r3, pc}
   b4494:	00030228 	.word	0x00030228

000b4498 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4498:	b508      	push	{r3, lr}
   b449a:	4b02      	ldr	r3, [pc, #8]	; (b44a4 <hal_spi_init+0xc>)
   b449c:	681b      	ldr	r3, [r3, #0]
   b449e:	69db      	ldr	r3, [r3, #28]
   b44a0:	9301      	str	r3, [sp, #4]
   b44a2:	bd08      	pop	{r3, pc}
   b44a4:	00030230 	.word	0x00030230

000b44a8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b44a8:	b508      	push	{r3, lr}
   b44aa:	4b02      	ldr	r3, [pc, #8]	; (b44b4 <hal_spi_is_enabled+0xc>)
   b44ac:	681b      	ldr	r3, [r3, #0]
   b44ae:	6a1b      	ldr	r3, [r3, #32]
   b44b0:	9301      	str	r3, [sp, #4]
   b44b2:	bd08      	pop	{r3, pc}
   b44b4:	00030230 	.word	0x00030230

000b44b8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b44b8:	b508      	push	{r3, lr}
   b44ba:	4b02      	ldr	r3, [pc, #8]	; (b44c4 <HAL_USB_USART_Init+0xc>)
   b44bc:	681b      	ldr	r3, [r3, #0]
   b44be:	681b      	ldr	r3, [r3, #0]
   b44c0:	9301      	str	r3, [sp, #4]
   b44c2:	bd08      	pop	{r3, pc}
   b44c4:	0003024c 	.word	0x0003024c

000b44c8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b44c8:	b508      	push	{r3, lr}
   b44ca:	4b02      	ldr	r3, [pc, #8]	; (b44d4 <HAL_USB_USART_Begin+0xc>)
   b44cc:	681b      	ldr	r3, [r3, #0]
   b44ce:	685b      	ldr	r3, [r3, #4]
   b44d0:	9301      	str	r3, [sp, #4]
   b44d2:	bd08      	pop	{r3, pc}
   b44d4:	0003024c 	.word	0x0003024c

000b44d8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b44d8:	b508      	push	{r3, lr}
   b44da:	4b02      	ldr	r3, [pc, #8]	; (b44e4 <HAL_USB_USART_Available_Data+0xc>)
   b44dc:	681b      	ldr	r3, [r3, #0]
   b44de:	691b      	ldr	r3, [r3, #16]
   b44e0:	9301      	str	r3, [sp, #4]
   b44e2:	bd08      	pop	{r3, pc}
   b44e4:	0003024c 	.word	0x0003024c

000b44e8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b44e8:	b508      	push	{r3, lr}
   b44ea:	4b02      	ldr	r3, [pc, #8]	; (b44f4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b44ec:	681b      	ldr	r3, [r3, #0]
   b44ee:	695b      	ldr	r3, [r3, #20]
   b44f0:	9301      	str	r3, [sp, #4]
   b44f2:	bd08      	pop	{r3, pc}
   b44f4:	0003024c 	.word	0x0003024c

000b44f8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b44f8:	b508      	push	{r3, lr}
   b44fa:	4b02      	ldr	r3, [pc, #8]	; (b4504 <HAL_USB_USART_Receive_Data+0xc>)
   b44fc:	681b      	ldr	r3, [r3, #0]
   b44fe:	699b      	ldr	r3, [r3, #24]
   b4500:	9301      	str	r3, [sp, #4]
   b4502:	bd08      	pop	{r3, pc}
   b4504:	0003024c 	.word	0x0003024c

000b4508 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4508:	b508      	push	{r3, lr}
   b450a:	4b02      	ldr	r3, [pc, #8]	; (b4514 <HAL_USB_USART_Send_Data+0xc>)
   b450c:	681b      	ldr	r3, [r3, #0]
   b450e:	69db      	ldr	r3, [r3, #28]
   b4510:	9301      	str	r3, [sp, #4]
   b4512:	bd08      	pop	{r3, pc}
   b4514:	0003024c 	.word	0x0003024c

000b4518 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4518:	b508      	push	{r3, lr}
   b451a:	4b02      	ldr	r3, [pc, #8]	; (b4524 <HAL_USB_USART_Flush_Data+0xc>)
   b451c:	681b      	ldr	r3, [r3, #0]
   b451e:	6a1b      	ldr	r3, [r3, #32]
   b4520:	9301      	str	r3, [sp, #4]
   b4522:	bd08      	pop	{r3, pc}
   b4524:	0003024c 	.word	0x0003024c

000b4528 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4528:	b508      	push	{r3, lr}
   b452a:	4b02      	ldr	r3, [pc, #8]	; (b4534 <set_system_mode+0xc>)
   b452c:	681b      	ldr	r3, [r3, #0]
   b452e:	685b      	ldr	r3, [r3, #4]
   b4530:	9301      	str	r3, [sp, #4]
   b4532:	bd08      	pop	{r3, pc}
   b4534:	00030220 	.word	0x00030220

000b4538 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4538:	b508      	push	{r3, lr}
   b453a:	4b03      	ldr	r3, [pc, #12]	; (b4548 <system_ctrl_set_app_request_handler+0x10>)
   b453c:	681b      	ldr	r3, [r3, #0]
   b453e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4542:	9301      	str	r3, [sp, #4]
   b4544:	bd08      	pop	{r3, pc}
   b4546:	0000      	.short	0x0000
   b4548:	00030220 	.word	0x00030220

000b454c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b454c:	b508      	push	{r3, lr}
   b454e:	4b03      	ldr	r3, [pc, #12]	; (b455c <system_ctrl_set_result+0x10>)
   b4550:	681b      	ldr	r3, [r3, #0]
   b4552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4556:	9301      	str	r3, [sp, #4]
   b4558:	bd08      	pop	{r3, pc}
   b455a:	0000      	.short	0x0000
   b455c:	00030220 	.word	0x00030220

000b4560 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4560:	b508      	push	{r3, lr}
   b4562:	4b02      	ldr	r3, [pc, #8]	; (b456c <network_connect+0xc>)
   b4564:	681b      	ldr	r3, [r3, #0]
   b4566:	685b      	ldr	r3, [r3, #4]
   b4568:	9301      	str	r3, [sp, #4]
   b456a:	bd08      	pop	{r3, pc}
   b456c:	00030240 	.word	0x00030240

000b4570 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4570:	b508      	push	{r3, lr}
   b4572:	4b02      	ldr	r3, [pc, #8]	; (b457c <network_connecting+0xc>)
   b4574:	681b      	ldr	r3, [r3, #0]
   b4576:	689b      	ldr	r3, [r3, #8]
   b4578:	9301      	str	r3, [sp, #4]
   b457a:	bd08      	pop	{r3, pc}
   b457c:	00030240 	.word	0x00030240

000b4580 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4580:	b508      	push	{r3, lr}
   b4582:	4b02      	ldr	r3, [pc, #8]	; (b458c <network_disconnect+0xc>)
   b4584:	681b      	ldr	r3, [r3, #0]
   b4586:	68db      	ldr	r3, [r3, #12]
   b4588:	9301      	str	r3, [sp, #4]
   b458a:	bd08      	pop	{r3, pc}
   b458c:	00030240 	.word	0x00030240

000b4590 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4590:	b508      	push	{r3, lr}
   b4592:	4b02      	ldr	r3, [pc, #8]	; (b459c <network_ready+0xc>)
   b4594:	681b      	ldr	r3, [r3, #0]
   b4596:	691b      	ldr	r3, [r3, #16]
   b4598:	9301      	str	r3, [sp, #4]
   b459a:	bd08      	pop	{r3, pc}
   b459c:	00030240 	.word	0x00030240

000b45a0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b45a0:	b508      	push	{r3, lr}
   b45a2:	4b02      	ldr	r3, [pc, #8]	; (b45ac <network_on+0xc>)
   b45a4:	681b      	ldr	r3, [r3, #0]
   b45a6:	695b      	ldr	r3, [r3, #20]
   b45a8:	9301      	str	r3, [sp, #4]
   b45aa:	bd08      	pop	{r3, pc}
   b45ac:	00030240 	.word	0x00030240

000b45b0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b45b0:	b508      	push	{r3, lr}
   b45b2:	4b02      	ldr	r3, [pc, #8]	; (b45bc <network_off+0xc>)
   b45b4:	681b      	ldr	r3, [r3, #0]
   b45b6:	699b      	ldr	r3, [r3, #24]
   b45b8:	9301      	str	r3, [sp, #4]
   b45ba:	bd08      	pop	{r3, pc}
   b45bc:	00030240 	.word	0x00030240

000b45c0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b45c0:	b508      	push	{r3, lr}
   b45c2:	4b02      	ldr	r3, [pc, #8]	; (b45cc <network_listen+0xc>)
   b45c4:	681b      	ldr	r3, [r3, #0]
   b45c6:	69db      	ldr	r3, [r3, #28]
   b45c8:	9301      	str	r3, [sp, #4]
   b45ca:	bd08      	pop	{r3, pc}
   b45cc:	00030240 	.word	0x00030240

000b45d0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b45d0:	b508      	push	{r3, lr}
   b45d2:	4b02      	ldr	r3, [pc, #8]	; (b45dc <network_listening+0xc>)
   b45d4:	681b      	ldr	r3, [r3, #0]
   b45d6:	6a1b      	ldr	r3, [r3, #32]
   b45d8:	9301      	str	r3, [sp, #4]
   b45da:	bd08      	pop	{r3, pc}
   b45dc:	00030240 	.word	0x00030240

000b45e0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b45e0:	b508      	push	{r3, lr}
   b45e2:	4b02      	ldr	r3, [pc, #8]	; (b45ec <network_set_listen_timeout+0xc>)
   b45e4:	681b      	ldr	r3, [r3, #0]
   b45e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b45e8:	9301      	str	r3, [sp, #4]
   b45ea:	bd08      	pop	{r3, pc}
   b45ec:	00030240 	.word	0x00030240

000b45f0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b45f0:	b508      	push	{r3, lr}
   b45f2:	4b02      	ldr	r3, [pc, #8]	; (b45fc <network_get_listen_timeout+0xc>)
   b45f4:	681b      	ldr	r3, [r3, #0]
   b45f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b45f8:	9301      	str	r3, [sp, #4]
   b45fa:	bd08      	pop	{r3, pc}
   b45fc:	00030240 	.word	0x00030240

000b4600 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4600:	b508      	push	{r3, lr}
   b4602:	4b02      	ldr	r3, [pc, #8]	; (b460c <network_is_on+0xc>)
   b4604:	681b      	ldr	r3, [r3, #0]
   b4606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4608:	9301      	str	r3, [sp, #4]
   b460a:	bd08      	pop	{r3, pc}
   b460c:	00030240 	.word	0x00030240

000b4610 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4610:	b508      	push	{r3, lr}
   b4612:	4b02      	ldr	r3, [pc, #8]	; (b461c <network_is_off+0xc>)
   b4614:	681b      	ldr	r3, [r3, #0]
   b4616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4618:	9301      	str	r3, [sp, #4]
   b461a:	bd08      	pop	{r3, pc}
   b461c:	00030240 	.word	0x00030240

000b4620 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4620:	b508      	push	{r3, lr}
   b4622:	4b02      	ldr	r3, [pc, #8]	; (b462c <spark_set_random_seed_from_cloud_handler+0xc>)
   b4624:	681b      	ldr	r3, [r3, #0]
   b4626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4628:	9301      	str	r3, [sp, #4]
   b462a:	bd08      	pop	{r3, pc}
   b462c:	00030244 	.word	0x00030244

000b4630 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4630:	b508      	push	{r3, lr}
   b4632:	4b02      	ldr	r3, [pc, #8]	; (b463c <malloc+0xc>)
   b4634:	681b      	ldr	r3, [r3, #0]
   b4636:	681b      	ldr	r3, [r3, #0]
   b4638:	9301      	str	r3, [sp, #4]
   b463a:	bd08      	pop	{r3, pc}
   b463c:	0003021c 	.word	0x0003021c

000b4640 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4640:	b508      	push	{r3, lr}
   b4642:	4b02      	ldr	r3, [pc, #8]	; (b464c <free+0xc>)
   b4644:	681b      	ldr	r3, [r3, #0]
   b4646:	685b      	ldr	r3, [r3, #4]
   b4648:	9301      	str	r3, [sp, #4]
   b464a:	bd08      	pop	{r3, pc}
   b464c:	0003021c 	.word	0x0003021c

000b4650 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4650:	b508      	push	{r3, lr}
   b4652:	4b02      	ldr	r3, [pc, #8]	; (b465c <vsnprintf+0xc>)
   b4654:	681b      	ldr	r3, [r3, #0]
   b4656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4658:	9301      	str	r3, [sp, #4]
   b465a:	bd08      	pop	{r3, pc}
   b465c:	0003021c 	.word	0x0003021c

000b4660 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4660:	b508      	push	{r3, lr}
   b4662:	4b02      	ldr	r3, [pc, #8]	; (b466c <__errno+0xc>)
   b4664:	681b      	ldr	r3, [r3, #0]
   b4666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4668:	9301      	str	r3, [sp, #4]
   b466a:	bd08      	pop	{r3, pc}
   b466c:	0003021c 	.word	0x0003021c

000b4670 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4670:	b508      	push	{r3, lr}
   b4672:	4b02      	ldr	r3, [pc, #8]	; (b467c <__assert_func+0xc>)
   b4674:	681b      	ldr	r3, [r3, #0]
   b4676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4678:	9301      	str	r3, [sp, #4]
   b467a:	bd08      	pop	{r3, pc}
   b467c:	0003021c 	.word	0x0003021c

000b4680 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4680:	b508      	push	{r3, lr}
   b4682:	4b02      	ldr	r3, [pc, #8]	; (b468c <newlib_impure_ptr_callback+0xc>)
   b4684:	681b      	ldr	r3, [r3, #0]
   b4686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4688:	9301      	str	r3, [sp, #4]
   b468a:	bd08      	pop	{r3, pc}
   b468c:	0003021c 	.word	0x0003021c

000b4690 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4690:	2200      	movs	r2, #0
   b4692:	6840      	ldr	r0, [r0, #4]
   b4694:	4611      	mov	r1, r2
   b4696:	f7ff bf9b 	b.w	b45d0 <network_listening>

000b469a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b469a:	2200      	movs	r2, #0
   b469c:	6840      	ldr	r0, [r0, #4]
   b469e:	4611      	mov	r1, r2
   b46a0:	f7ff bfa6 	b.w	b45f0 <network_get_listen_timeout>

000b46a4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b46a4:	6840      	ldr	r0, [r0, #4]
   b46a6:	2200      	movs	r2, #0
   b46a8:	f7ff bf9a 	b.w	b45e0 <network_set_listen_timeout>

000b46ac <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b46ac:	6840      	ldr	r0, [r0, #4]
   b46ae:	2200      	movs	r2, #0
   b46b0:	f081 0101 	eor.w	r1, r1, #1
   b46b4:	f7ff bf84 	b.w	b45c0 <network_listen>

000b46b8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b46b8:	2300      	movs	r3, #0
   b46ba:	6840      	ldr	r0, [r0, #4]
   b46bc:	461a      	mov	r2, r3
   b46be:	4619      	mov	r1, r3
   b46c0:	f7ff bf76 	b.w	b45b0 <network_off>

000b46c4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b46c4:	2300      	movs	r3, #0
   b46c6:	6840      	ldr	r0, [r0, #4]
   b46c8:	461a      	mov	r2, r3
   b46ca:	4619      	mov	r1, r3
   b46cc:	f7ff bf68 	b.w	b45a0 <network_on>

000b46d0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b46d0:	2200      	movs	r2, #0
   b46d2:	6840      	ldr	r0, [r0, #4]
   b46d4:	4611      	mov	r1, r2
   b46d6:	f7ff bf5b 	b.w	b4590 <network_ready>

000b46da <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b46da:	2200      	movs	r2, #0
   b46dc:	6840      	ldr	r0, [r0, #4]
   b46de:	4611      	mov	r1, r2
   b46e0:	f7ff bf46 	b.w	b4570 <network_connecting>

000b46e4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b46e4:	6840      	ldr	r0, [r0, #4]
   b46e6:	2200      	movs	r2, #0
   b46e8:	2102      	movs	r1, #2
   b46ea:	f7ff bf49 	b.w	b4580 <network_disconnect>

000b46ee <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b46ee:	2300      	movs	r3, #0
   b46f0:	6840      	ldr	r0, [r0, #4]
   b46f2:	461a      	mov	r2, r3
   b46f4:	f7ff bf34 	b.w	b4560 <network_connect>

000b46f8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b46f8:	4b02      	ldr	r3, [pc, #8]	; (b4704 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b46fa:	2203      	movs	r2, #3
   b46fc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b46fe:	4a02      	ldr	r2, [pc, #8]	; (b4708 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4700:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4702:	4770      	bx	lr
   b4704:	2003e6b8 	.word	0x2003e6b8
   b4708:	000b6cb4 	.word	0x000b6cb4

000b470c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b470c:	b510      	push	{r4, lr}
   b470e:	4604      	mov	r4, r0
   b4710:	4608      	mov	r0, r1
{
    _spi = spi;
   b4712:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4714:	f7ff fec0 	bl	b4498 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4718:	2300      	movs	r3, #0
   b471a:	6063      	str	r3, [r4, #4]
}
   b471c:	4620      	mov	r0, r4
   b471e:	bd10      	pop	{r4, pc}

000b4720 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4720:	4b05      	ldr	r3, [pc, #20]	; (b4738 <_GLOBAL__sub_I_System+0x18>)
   b4722:	2202      	movs	r2, #2
   b4724:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4726:	4b05      	ldr	r3, [pc, #20]	; (b473c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4728:	4a05      	ldr	r2, [pc, #20]	; (b4740 <_GLOBAL__sub_I_System+0x20>)
   b472a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b472c:	2000      	movs	r0, #0
   b472e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4732:	f7ff bef9 	b.w	b4528 <set_system_mode>
   b4736:	bf00      	nop
   b4738:	2003e6cc 	.word	0x2003e6cc
   b473c:	2003e6c0 	.word	0x2003e6c0
   b4740:	ffff0000 	.word	0xffff0000

000b4744 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4744:	4802      	ldr	r0, [pc, #8]	; (b4750 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4746:	2300      	movs	r3, #0
   b4748:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b474a:	f7ff be1d 	b.w	b4388 <os_mutex_recursive_create>
   b474e:	bf00      	nop
   b4750:	2003e6d0 	.word	0x2003e6d0

000b4754 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4756:	4606      	mov	r6, r0
   b4758:	460d      	mov	r5, r1
  size_t n = 0;
   b475a:	188f      	adds	r7, r1, r2
   b475c:	2400      	movs	r4, #0
  while (size--) {
   b475e:	42bd      	cmp	r5, r7
   b4760:	d00c      	beq.n	b477c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4762:	6833      	ldr	r3, [r6, #0]
   b4764:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4768:	689b      	ldr	r3, [r3, #8]
   b476a:	4630      	mov	r0, r6
   b476c:	4798      	blx	r3
     if (chunk>=0)
   b476e:	1e03      	subs	r3, r0, #0
   b4770:	db01      	blt.n	b4776 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4772:	441c      	add	r4, r3
  while (size--) {
   b4774:	e7f3      	b.n	b475e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4776:	2c00      	cmp	r4, #0
   b4778:	bf08      	it	eq
   b477a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b477c:	4620      	mov	r0, r4
   b477e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4780 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4780:	b513      	push	{r0, r1, r4, lr}
   b4782:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4784:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4786:	b159      	cbz	r1, b47a0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4788:	9101      	str	r1, [sp, #4]
   b478a:	f002 fa05 	bl	b6b98 <strlen>
   b478e:	6823      	ldr	r3, [r4, #0]
   b4790:	9901      	ldr	r1, [sp, #4]
   b4792:	68db      	ldr	r3, [r3, #12]
   b4794:	4602      	mov	r2, r0
   b4796:	4620      	mov	r0, r4
    }
   b4798:	b002      	add	sp, #8
   b479a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b479e:	4718      	bx	r3
    }
   b47a0:	b002      	add	sp, #8
   b47a2:	bd10      	pop	{r4, pc}

000b47a4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b47a4:	6803      	ldr	r3, [r0, #0]
   b47a6:	689b      	ldr	r3, [r3, #8]
   b47a8:	4718      	bx	r3

000b47aa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b47aa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b47ac:	210d      	movs	r1, #13
{
   b47ae:	4605      	mov	r5, r0
  size_t n = print('\r');
   b47b0:	f7ff fff8 	bl	b47a4 <_ZN5Print5printEc>
  n += print('\n');
   b47b4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b47b6:	4604      	mov	r4, r0
  n += print('\n');
   b47b8:	4628      	mov	r0, r5
   b47ba:	f7ff fff3 	bl	b47a4 <_ZN5Print5printEc>
  return n;
}
   b47be:	4420      	add	r0, r4
   b47c0:	bd38      	pop	{r3, r4, r5, pc}

000b47c2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b47c2:	b530      	push	{r4, r5, lr}
   b47c4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b47c6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b47c8:	2a01      	cmp	r2, #1
  *str = '\0';
   b47ca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b47ce:	bf98      	it	ls
   b47d0:	220a      	movls	r2, #10
   b47d2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b47d4:	460d      	mov	r5, r1
   b47d6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b47da:	fb01 5312 	mls	r3, r1, r2, r5
   b47de:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b47e2:	2b09      	cmp	r3, #9
   b47e4:	bf94      	ite	ls
   b47e6:	3330      	addls	r3, #48	; 0x30
   b47e8:	3337      	addhi	r3, #55	; 0x37
   b47ea:	b2db      	uxtb	r3, r3
  } while(n);
   b47ec:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b47ee:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b47f2:	d9ef      	bls.n	b47d4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b47f4:	4621      	mov	r1, r4
   b47f6:	f7ff ffc3 	bl	b4780 <_ZN5Print5writeEPKc>
}
   b47fa:	b00b      	add	sp, #44	; 0x2c
   b47fc:	bd30      	pop	{r4, r5, pc}

000b47fe <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b47fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4802:	b086      	sub	sp, #24
   b4804:	af00      	add	r7, sp, #0
   b4806:	4605      	mov	r5, r0
   b4808:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b480a:	1d38      	adds	r0, r7, #4
   b480c:	2114      	movs	r1, #20
{
   b480e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b4810:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b4812:	f7ff ff1d 	bl	b4650 <vsnprintf>

    if (n<bufsize)
   b4816:	2813      	cmp	r0, #19
   b4818:	d80e      	bhi.n	b4838 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b481a:	1d39      	adds	r1, r7, #4
   b481c:	4628      	mov	r0, r5
   b481e:	f7ff ffaf 	bl	b4780 <_ZN5Print5writeEPKc>
   b4822:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b4824:	b11e      	cbz	r6, b482e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b4826:	4628      	mov	r0, r5
   b4828:	f7ff ffbf 	bl	b47aa <_ZN5Print7printlnEv>
   b482c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b482e:	4620      	mov	r0, r4
   b4830:	3718      	adds	r7, #24
   b4832:	46bd      	mov	sp, r7
   b4834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b4838:	f100 0308 	add.w	r3, r0, #8
   b483c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b4840:	46e8      	mov	r8, sp
        char bigger[n+1];
   b4842:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b4846:	4622      	mov	r2, r4
   b4848:	1c41      	adds	r1, r0, #1
   b484a:	683b      	ldr	r3, [r7, #0]
   b484c:	4668      	mov	r0, sp
   b484e:	f7ff feff 	bl	b4650 <vsnprintf>
  return write(str);
   b4852:	4669      	mov	r1, sp
   b4854:	4628      	mov	r0, r5
   b4856:	f7ff ff93 	bl	b4780 <_ZN5Print5writeEPKc>
   b485a:	4604      	mov	r4, r0
   b485c:	46c5      	mov	sp, r8
   b485e:	e7e1      	b.n	b4824 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b4860 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4860:	2300      	movs	r3, #0
   b4862:	6840      	ldr	r0, [r0, #4]
   b4864:	461a      	mov	r2, r3
   b4866:	4619      	mov	r1, r3
   b4868:	f7ff be9a 	b.w	b45a0 <network_on>

000b486c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b486c:	4b01      	ldr	r3, [pc, #4]	; (b4874 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b486e:	4a02      	ldr	r2, [pc, #8]	; (b4878 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4870:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4872:	4770      	bx	lr
   b4874:	2003e6d4 	.word	0x2003e6d4
   b4878:	000b6ce8 	.word	0x000b6ce8

000b487c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b487c:	4b02      	ldr	r3, [pc, #8]	; (b4888 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b487e:	681a      	ldr	r2, [r3, #0]
   b4880:	4b02      	ldr	r3, [pc, #8]	; (b488c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4882:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4884:	4770      	bx	lr
   b4886:	bf00      	nop
   b4888:	2003e614 	.word	0x2003e614
   b488c:	2003e6d8 	.word	0x2003e6d8

000b4890 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4890:	4b01      	ldr	r3, [pc, #4]	; (b4898 <_GLOBAL__sub_I_RGB+0x8>)
   b4892:	2200      	movs	r2, #0
   b4894:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4896:	4770      	bx	lr
   b4898:	2003e6dc 	.word	0x2003e6dc

000b489c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b489c:	4b01      	ldr	r3, [pc, #4]	; (b48a4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b489e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b48a0:	4770      	bx	lr
   b48a2:	bf00      	nop
   b48a4:	2003e61c 	.word	0x2003e61c

000b48a8 <serialEventRun>:
{
   b48a8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b48aa:	4b0b      	ldr	r3, [pc, #44]	; (b48d8 <serialEventRun+0x30>)
   b48ac:	b143      	cbz	r3, b48c0 <serialEventRun+0x18>
   b48ae:	f000 f967 	bl	b4b80 <_Z16_fetch_usbserialv>
   b48b2:	6803      	ldr	r3, [r0, #0]
   b48b4:	691b      	ldr	r3, [r3, #16]
   b48b6:	4798      	blx	r3
   b48b8:	2800      	cmp	r0, #0
   b48ba:	dd01      	ble.n	b48c0 <serialEventRun+0x18>
        serialEvent();
   b48bc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b48c0:	4b06      	ldr	r3, [pc, #24]	; (b48dc <serialEventRun+0x34>)
   b48c2:	b143      	cbz	r3, b48d6 <serialEventRun+0x2e>
   b48c4:	f000 fb7a 	bl	b4fbc <_Z22__fetch_global_Serial1v>
   b48c8:	6803      	ldr	r3, [r0, #0]
   b48ca:	691b      	ldr	r3, [r3, #16]
   b48cc:	4798      	blx	r3
   b48ce:	2800      	cmp	r0, #0
   b48d0:	dd01      	ble.n	b48d6 <serialEventRun+0x2e>
        serialEvent1();
   b48d2:	f3af 8000 	nop.w
}
   b48d6:	bd08      	pop	{r3, pc}
	...

000b48e0 <_post_loop>:
{
   b48e0:	b508      	push	{r3, lr}
	serialEventRun();
   b48e2:	f7ff ffe1 	bl	b48a8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b48e6:	f7ff fd47 	bl	b4378 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b48ea:	4b01      	ldr	r3, [pc, #4]	; (b48f0 <_post_loop+0x10>)
   b48ec:	6018      	str	r0, [r3, #0]
}
   b48ee:	bd08      	pop	{r3, pc}
   b48f0:	2003e740 	.word	0x2003e740

000b48f4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b48f4:	4805      	ldr	r0, [pc, #20]	; (b490c <_Z33system_initialize_user_backup_ramv+0x18>)
   b48f6:	4a06      	ldr	r2, [pc, #24]	; (b4910 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b48f8:	4906      	ldr	r1, [pc, #24]	; (b4914 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b48fa:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b48fc:	1a12      	subs	r2, r2, r0
   b48fe:	f002 f907 	bl	b6b10 <memcpy>
    __backup_sram_signature = signature;
   b4902:	4b05      	ldr	r3, [pc, #20]	; (b4918 <_Z33system_initialize_user_backup_ramv+0x24>)
   b4904:	4a05      	ldr	r2, [pc, #20]	; (b491c <_Z33system_initialize_user_backup_ramv+0x28>)
   b4906:	601a      	str	r2, [r3, #0]
}
   b4908:	bd08      	pop	{r3, pc}
   b490a:	bf00      	nop
   b490c:	2003f400 	.word	0x2003f400
   b4910:	2003f404 	.word	0x2003f404
   b4914:	000b6ef0 	.word	0x000b6ef0
   b4918:	2003f400 	.word	0x2003f400
   b491c:	9a271c1e 	.word	0x9a271c1e

000b4920 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4920:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4922:	2300      	movs	r3, #0
   b4924:	9300      	str	r3, [sp, #0]
   b4926:	461a      	mov	r2, r3
   b4928:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b492c:	f7ff fe0e 	bl	b454c <system_ctrl_set_result>
}
   b4930:	b003      	add	sp, #12
   b4932:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4938 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4938:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b493a:	8843      	ldrh	r3, [r0, #2]
   b493c:	2b0a      	cmp	r3, #10
   b493e:	d008      	beq.n	b4952 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4940:	2b50      	cmp	r3, #80	; 0x50
   b4942:	d10b      	bne.n	b495c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4944:	4b09      	ldr	r3, [pc, #36]	; (b496c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4946:	681b      	ldr	r3, [r3, #0]
   b4948:	b14b      	cbz	r3, b495e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b494a:	b003      	add	sp, #12
   b494c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4950:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4952:	f7ff ffe5 	bl	b4920 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4956:	b003      	add	sp, #12
   b4958:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b495c:	2300      	movs	r3, #0
   b495e:	9300      	str	r3, [sp, #0]
   b4960:	461a      	mov	r2, r3
   b4962:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4966:	f7ff fdf1 	bl	b454c <system_ctrl_set_result>
}
   b496a:	e7f4      	b.n	b4956 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b496c:	2003e6f0 	.word	0x2003e6f0

000b4970 <module_user_init_hook>:
{
   b4970:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4972:	4812      	ldr	r0, [pc, #72]	; (b49bc <module_user_init_hook+0x4c>)
   b4974:	2100      	movs	r1, #0
   b4976:	f7ff fe83 	bl	b4680 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b497a:	4b11      	ldr	r3, [pc, #68]	; (b49c0 <module_user_init_hook+0x50>)
   b497c:	681a      	ldr	r2, [r3, #0]
   b497e:	4b11      	ldr	r3, [pc, #68]	; (b49c4 <module_user_init_hook+0x54>)
   b4980:	429a      	cmp	r2, r3
   b4982:	4b11      	ldr	r3, [pc, #68]	; (b49c8 <module_user_init_hook+0x58>)
   b4984:	bf0c      	ite	eq
   b4986:	2201      	moveq	r2, #1
   b4988:	2200      	movne	r2, #0
   b498a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b498c:	d001      	beq.n	b4992 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b498e:	f7ff ffb1 	bl	b48f4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4992:	f7ff fce1 	bl	b4358 <HAL_RNG_GetRandomNumber>
   b4996:	4604      	mov	r4, r0
    srand(seed);
   b4998:	f002 f8d0 	bl	b6b3c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b499c:	4b0b      	ldr	r3, [pc, #44]	; (b49cc <module_user_init_hook+0x5c>)
   b499e:	b113      	cbz	r3, b49a6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b49a0:	4620      	mov	r0, r4
   b49a2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b49a6:	2100      	movs	r1, #0
   b49a8:	4808      	ldr	r0, [pc, #32]	; (b49cc <module_user_init_hook+0x5c>)
   b49aa:	f7ff fe39 	bl	b4620 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b49ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b49b2:	4807      	ldr	r0, [pc, #28]	; (b49d0 <module_user_init_hook+0x60>)
   b49b4:	2100      	movs	r1, #0
   b49b6:	f7ff bdbf 	b.w	b4538 <system_ctrl_set_app_request_handler>
   b49ba:	bf00      	nop
   b49bc:	000b489d 	.word	0x000b489d
   b49c0:	2003f400 	.word	0x2003f400
   b49c4:	9a271c1e 	.word	0x9a271c1e
   b49c8:	2003e6ec 	.word	0x2003e6ec
   b49cc:	00000000 	.word	0x00000000
   b49d0:	000b4939 	.word	0x000b4939

000b49d4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b49d4:	4770      	bx	lr

000b49d6 <_ZN9IPAddressD0Ev>:
   b49d6:	b510      	push	{r4, lr}
   b49d8:	2118      	movs	r1, #24
   b49da:	4604      	mov	r4, r0
   b49dc:	f7ff fb5d 	bl	b409a <_ZdlPvj>
   b49e0:	4620      	mov	r0, r4
   b49e2:	bd10      	pop	{r4, pc}

000b49e4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b49e4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b49e6:	7d03      	ldrb	r3, [r0, #20]
   b49e8:	2b06      	cmp	r3, #6
{
   b49ea:	b08d      	sub	sp, #52	; 0x34
   b49ec:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b49ee:	f100 0704 	add.w	r7, r0, #4
   b49f2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b49f6:	d012      	beq.n	b4a1e <_ZNK9IPAddress7printToER5Print+0x3a>
   b49f8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b49fc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4a00:	220a      	movs	r2, #10
   b4a02:	4630      	mov	r0, r6
   b4a04:	f7ff fedd 	bl	b47c2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4a08:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4a0a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4a0c:	d019      	beq.n	b4a42 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4a0e:	2c00      	cmp	r4, #0
   b4a10:	d0f4      	beq.n	b49fc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4a12:	212e      	movs	r1, #46	; 0x2e
   b4a14:	4630      	mov	r0, r6
   b4a16:	f7ff fec5 	bl	b47a4 <_ZN5Print5printEc>
   b4a1a:	4404      	add	r4, r0
   b4a1c:	e7ee      	b.n	b49fc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4a1e:	232f      	movs	r3, #47	; 0x2f
   b4a20:	466a      	mov	r2, sp
   b4a22:	4639      	mov	r1, r7
   b4a24:	200a      	movs	r0, #10
		buf[0] = 0;
   b4a26:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4a2a:	f7ff fcb5 	bl	b4398 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4a2e:	4668      	mov	r0, sp
   b4a30:	f002 f8b2 	bl	b6b98 <strlen>
   b4a34:	6833      	ldr	r3, [r6, #0]
   b4a36:	4602      	mov	r2, r0
   b4a38:	68db      	ldr	r3, [r3, #12]
   b4a3a:	4669      	mov	r1, sp
   b4a3c:	4630      	mov	r0, r6
   b4a3e:	4798      	blx	r3
   b4a40:	4604      	mov	r4, r0
    }
    return n;
}
   b4a42:	4620      	mov	r0, r4
   b4a44:	b00d      	add	sp, #52	; 0x34
   b4a46:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4a48 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4a48:	b510      	push	{r4, lr}
   b4a4a:	4b05      	ldr	r3, [pc, #20]	; (b4a60 <_ZN9IPAddressC1Ev+0x18>)
   b4a4c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4a4e:	2211      	movs	r2, #17
   b4a50:	f840 3b04 	str.w	r3, [r0], #4
   b4a54:	2100      	movs	r1, #0
   b4a56:	f002 f869 	bl	b6b2c <memset>
}
   b4a5a:	4620      	mov	r0, r4
   b4a5c:	bd10      	pop	{r4, pc}
   b4a5e:	bf00      	nop
   b4a60:	000b6d10 	.word	0x000b6d10

000b4a64 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4a64:	4603      	mov	r3, r0
   b4a66:	4a07      	ldr	r2, [pc, #28]	; (b4a84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4a68:	b510      	push	{r4, lr}
   b4a6a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4a6e:	f101 0210 	add.w	r2, r1, #16
   b4a72:	f851 4b04 	ldr.w	r4, [r1], #4
   b4a76:	f843 4b04 	str.w	r4, [r3], #4
   b4a7a:	4291      	cmp	r1, r2
   b4a7c:	d1f9      	bne.n	b4a72 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4a7e:	780a      	ldrb	r2, [r1, #0]
   b4a80:	701a      	strb	r2, [r3, #0]
}
   b4a82:	bd10      	pop	{r4, pc}
   b4a84:	000b6d10 	.word	0x000b6d10

000b4a88 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4a88:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4a8a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4a8e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4a92:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4a96:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4a9a:	2304      	movs	r3, #4
   b4a9c:	6041      	str	r1, [r0, #4]
   b4a9e:	7503      	strb	r3, [r0, #20]
}
   b4aa0:	bd10      	pop	{r4, pc}
	...

000b4aa4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4aa4:	b507      	push	{r0, r1, r2, lr}
   b4aa6:	4b06      	ldr	r3, [pc, #24]	; (b4ac0 <_ZN9IPAddressC1EPKh+0x1c>)
   b4aa8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4aaa:	78cb      	ldrb	r3, [r1, #3]
   b4aac:	9300      	str	r3, [sp, #0]
   b4aae:	788b      	ldrb	r3, [r1, #2]
   b4ab0:	784a      	ldrb	r2, [r1, #1]
   b4ab2:	7809      	ldrb	r1, [r1, #0]
   b4ab4:	f7ff ffe8 	bl	b4a88 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4ab8:	b003      	add	sp, #12
   b4aba:	f85d fb04 	ldr.w	pc, [sp], #4
   b4abe:	bf00      	nop
   b4ac0:	000b6d10 	.word	0x000b6d10

000b4ac4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4ac4:	7441      	strb	r1, [r0, #17]
}
   b4ac6:	4770      	bx	lr

000b4ac8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4ac8:	4770      	bx	lr

000b4aca <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4aca:	4770      	bx	lr

000b4acc <_ZN9USBSerial4readEv>:
{
   b4acc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4ace:	2100      	movs	r1, #0
   b4ad0:	7c00      	ldrb	r0, [r0, #16]
   b4ad2:	f7ff fd11 	bl	b44f8 <HAL_USB_USART_Receive_Data>
}
   b4ad6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4ada:	bd08      	pop	{r3, pc}

000b4adc <_ZN9USBSerial4peekEv>:
{
   b4adc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4ade:	2101      	movs	r1, #1
   b4ae0:	7c00      	ldrb	r0, [r0, #16]
   b4ae2:	f7ff fd09 	bl	b44f8 <HAL_USB_USART_Receive_Data>
}
   b4ae6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4aea:	bd08      	pop	{r3, pc}

000b4aec <_ZN9USBSerial17availableForWriteEv>:
{
   b4aec:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4aee:	7c00      	ldrb	r0, [r0, #16]
   b4af0:	f7ff fcfa 	bl	b44e8 <HAL_USB_USART_Available_Data_For_Write>
}
   b4af4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4af8:	bd08      	pop	{r3, pc}

000b4afa <_ZN9USBSerial9availableEv>:
{
   b4afa:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4afc:	7c00      	ldrb	r0, [r0, #16]
   b4afe:	f7ff fceb 	bl	b44d8 <HAL_USB_USART_Available_Data>
}
   b4b02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4b06:	bd08      	pop	{r3, pc}

000b4b08 <_ZN9USBSerial5writeEh>:
{
   b4b08:	b513      	push	{r0, r1, r4, lr}
   b4b0a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4b0c:	7c00      	ldrb	r0, [r0, #16]
{
   b4b0e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4b10:	f7ff fcea 	bl	b44e8 <HAL_USB_USART_Available_Data_For_Write>
   b4b14:	2800      	cmp	r0, #0
   b4b16:	9901      	ldr	r1, [sp, #4]
   b4b18:	dc01      	bgt.n	b4b1e <_ZN9USBSerial5writeEh+0x16>
   b4b1a:	7c60      	ldrb	r0, [r4, #17]
   b4b1c:	b120      	cbz	r0, b4b28 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4b1e:	7c20      	ldrb	r0, [r4, #16]
   b4b20:	f7ff fcf2 	bl	b4508 <HAL_USB_USART_Send_Data>
   b4b24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4b28:	b002      	add	sp, #8
   b4b2a:	bd10      	pop	{r4, pc}

000b4b2c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4b2c:	7c00      	ldrb	r0, [r0, #16]
   b4b2e:	f7ff bcf3 	b.w	b4518 <HAL_USB_USART_Flush_Data>

000b4b32 <_ZN9USBSerialD0Ev>:
   b4b32:	b510      	push	{r4, lr}
   b4b34:	2114      	movs	r1, #20
   b4b36:	4604      	mov	r4, r0
   b4b38:	f7ff faaf 	bl	b409a <_ZdlPvj>
   b4b3c:	4620      	mov	r0, r4
   b4b3e:	bd10      	pop	{r4, pc}

000b4b40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4b40:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4b46:	4604      	mov	r4, r0
   b4b48:	4608      	mov	r0, r1
   b4b4a:	2100      	movs	r1, #0
   b4b4c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4b50:	4b04      	ldr	r3, [pc, #16]	; (b4b64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4b52:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4b54:	2301      	movs	r3, #1
  _serial = serial;
   b4b56:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4b58:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4b5a:	4611      	mov	r1, r2
   b4b5c:	f7ff fcac 	bl	b44b8 <HAL_USB_USART_Init>
}
   b4b60:	4620      	mov	r0, r4
   b4b62:	bd10      	pop	{r4, pc}
   b4b64:	000b6d24 	.word	0x000b6d24

000b4b68 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b4b68:	7c00      	ldrb	r0, [r0, #16]
   b4b6a:	2200      	movs	r2, #0
   b4b6c:	f7ff bcac 	b.w	b44c8 <HAL_USB_USART_Begin>

000b4b70 <_Z19acquireSerialBufferv>:
{
   b4b70:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4b72:	2214      	movs	r2, #20
{
   b4b74:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4b76:	2100      	movs	r1, #0
   b4b78:	f001 ffd8 	bl	b6b2c <memset>
}
   b4b7c:	4620      	mov	r0, r4
   b4b7e:	bd10      	pop	{r4, pc}

000b4b80 <_Z16_fetch_usbserialv>:
{
   b4b80:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4b82:	4c0f      	ldr	r4, [pc, #60]	; (b4bc0 <_Z16_fetch_usbserialv+0x40>)
{
   b4b84:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4b86:	a803      	add	r0, sp, #12
   b4b88:	f7ff fff2 	bl	b4b70 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4b8c:	7821      	ldrb	r1, [r4, #0]
   b4b8e:	f3bf 8f5b 	dmb	ish
   b4b92:	f011 0101 	ands.w	r1, r1, #1
   b4b96:	d10f      	bne.n	b4bb8 <_Z16_fetch_usbserialv+0x38>
   b4b98:	4620      	mov	r0, r4
   b4b9a:	9101      	str	r1, [sp, #4]
   b4b9c:	f7ff fa7f 	bl	b409e <__cxa_guard_acquire>
   b4ba0:	9901      	ldr	r1, [sp, #4]
   b4ba2:	b148      	cbz	r0, b4bb8 <_Z16_fetch_usbserialv+0x38>
   b4ba4:	aa03      	add	r2, sp, #12
   b4ba6:	4807      	ldr	r0, [pc, #28]	; (b4bc4 <_Z16_fetch_usbserialv+0x44>)
   b4ba8:	f7ff ffca 	bl	b4b40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4bac:	4620      	mov	r0, r4
   b4bae:	f7ff fa7b 	bl	b40a8 <__cxa_guard_release>
   b4bb2:	4805      	ldr	r0, [pc, #20]	; (b4bc8 <_Z16_fetch_usbserialv+0x48>)
   b4bb4:	f001 ffa6 	bl	b6b04 <atexit>
	return _usbserial;
}
   b4bb8:	4802      	ldr	r0, [pc, #8]	; (b4bc4 <_Z16_fetch_usbserialv+0x44>)
   b4bba:	b008      	add	sp, #32
   b4bbc:	bd10      	pop	{r4, pc}
   b4bbe:	bf00      	nop
   b4bc0:	2003e6f4 	.word	0x2003e6f4
   b4bc4:	2003e6f8 	.word	0x2003e6f8
   b4bc8:	000b4ac9 	.word	0x000b4ac9

000b4bcc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4bcc:	4770      	bx	lr

000b4bce <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4bce:	7441      	strb	r1, [r0, #17]
}
   b4bd0:	4770      	bx	lr

000b4bd2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4bd2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4bd4:	7c00      	ldrb	r0, [r0, #16]
   b4bd6:	f7ff fc17 	bl	b4408 <hal_usart_available_data_for_write>
}
   b4bda:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4bde:	bd08      	pop	{r3, pc}

000b4be0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4be0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4be2:	7c00      	ldrb	r0, [r0, #16]
   b4be4:	f7ff fbe8 	bl	b43b8 <hal_usart_available>
}
   b4be8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4bec:	bd08      	pop	{r3, pc}

000b4bee <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b4bee:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b4bf0:	7c00      	ldrb	r0, [r0, #16]
   b4bf2:	f7ff fbf1 	bl	b43d8 <hal_usart_peek>
}
   b4bf6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4bfa:	bd08      	pop	{r3, pc}

000b4bfc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b4bfc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b4bfe:	7c00      	ldrb	r0, [r0, #16]
   b4c00:	f7ff fbe2 	bl	b43c8 <hal_usart_read>
}
   b4c04:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4c08:	bd08      	pop	{r3, pc}

000b4c0a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b4c0a:	7c00      	ldrb	r0, [r0, #16]
   b4c0c:	f7ff bbec 	b.w	b43e8 <hal_usart_flush>

000b4c10 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b4c10:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4c12:	7c45      	ldrb	r5, [r0, #17]
{
   b4c14:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4c16:	b12d      	cbz	r5, b4c24 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4c18:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b4c1a:	b003      	add	sp, #12
   b4c1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b4c20:	f7ff bbc2 	b.w	b43a8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4c24:	7c00      	ldrb	r0, [r0, #16]
   b4c26:	9101      	str	r1, [sp, #4]
   b4c28:	f7ff fbee 	bl	b4408 <hal_usart_available_data_for_write>
   b4c2c:	2800      	cmp	r0, #0
   b4c2e:	9901      	ldr	r1, [sp, #4]
   b4c30:	dcf2      	bgt.n	b4c18 <_ZN11USARTSerial5writeEh+0x8>
}
   b4c32:	4628      	mov	r0, r5
   b4c34:	b003      	add	sp, #12
   b4c36:	bd30      	pop	{r4, r5, pc}

000b4c38 <_ZN11USARTSerialD0Ev>:
   b4c38:	b510      	push	{r4, lr}
   b4c3a:	2114      	movs	r1, #20
   b4c3c:	4604      	mov	r4, r0
   b4c3e:	f7ff fa2c 	bl	b409a <_ZdlPvj>
   b4c42:	4620      	mov	r0, r4
   b4c44:	bd10      	pop	{r4, pc}
	...

000b4c48 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b4c48:	b510      	push	{r4, lr}
   b4c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4c4e:	4604      	mov	r4, r0
   b4c50:	4608      	mov	r0, r1
   b4c52:	4611      	mov	r1, r2
   b4c54:	2200      	movs	r2, #0
   b4c56:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4c5a:	4b04      	ldr	r3, [pc, #16]	; (b4c6c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b4c5c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4c5e:	2301      	movs	r3, #1
  _serial = serial;
   b4c60:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4c62:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b4c64:	f7ff fbd8 	bl	b4418 <hal_usart_init_ex>
}
   b4c68:	4620      	mov	r0, r4
   b4c6a:	bd10      	pop	{r4, pc}
   b4c6c:	000b6d54 	.word	0x000b6d54

000b4c70 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4c70:	4770      	bx	lr

000b4c72 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4c74:	4606      	mov	r6, r0
   b4c76:	4615      	mov	r5, r2
   b4c78:	460c      	mov	r4, r1
   b4c7a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4c7c:	42bc      	cmp	r4, r7
   b4c7e:	d006      	beq.n	b4c8e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4c80:	6833      	ldr	r3, [r6, #0]
   b4c82:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4c86:	689b      	ldr	r3, [r3, #8]
   b4c88:	4630      	mov	r0, r6
   b4c8a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4c8c:	e7f6      	b.n	b4c7c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4c8e:	4628      	mov	r0, r5
   b4c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4c92 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4c92:	7c00      	ldrb	r0, [r0, #16]
   b4c94:	2200      	movs	r2, #0
   b4c96:	f7ff bbc7 	b.w	b4428 <hal_i2c_write>

000b4c9a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4c9a:	7c00      	ldrb	r0, [r0, #16]
   b4c9c:	2100      	movs	r1, #0
   b4c9e:	f7ff bbcb 	b.w	b4438 <hal_i2c_available>

000b4ca2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4ca2:	7c00      	ldrb	r0, [r0, #16]
   b4ca4:	2100      	movs	r1, #0
   b4ca6:	f7ff bbcf 	b.w	b4448 <hal_i2c_read>

000b4caa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4caa:	7c00      	ldrb	r0, [r0, #16]
   b4cac:	2100      	movs	r1, #0
   b4cae:	f7ff bbd3 	b.w	b4458 <hal_i2c_peek>

000b4cb2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4cb2:	7c00      	ldrb	r0, [r0, #16]
   b4cb4:	2100      	movs	r1, #0
   b4cb6:	f7ff bbd7 	b.w	b4468 <hal_i2c_flush>

000b4cba <_ZN7TwoWireD0Ev>:
   b4cba:	b510      	push	{r4, lr}
   b4cbc:	2114      	movs	r1, #20
   b4cbe:	4604      	mov	r4, r0
   b4cc0:	f7ff f9eb 	bl	b409a <_ZdlPvj>
   b4cc4:	4620      	mov	r0, r4
   b4cc6:	bd10      	pop	{r4, pc}

000b4cc8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4cc8:	b510      	push	{r4, lr}
   b4cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4cce:	4604      	mov	r4, r0
   b4cd0:	4608      	mov	r0, r1
   b4cd2:	2100      	movs	r1, #0
   b4cd4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4cd8:	4b03      	ldr	r3, [pc, #12]	; (b4ce8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b4cda:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b4cdc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b4cde:	4611      	mov	r1, r2
   b4ce0:	f7ff fbd2 	bl	b4488 <hal_i2c_init>
}
   b4ce4:	4620      	mov	r0, r4
   b4ce6:	bd10      	pop	{r4, pc}
   b4ce8:	000b6d84 	.word	0x000b6d84

000b4cec <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b4cec:	2200      	movs	r2, #0
   b4cee:	6840      	ldr	r0, [r0, #4]
   b4cf0:	4611      	mov	r1, r2
   b4cf2:	f7ff bc4d 	b.w	b4590 <network_ready>

000b4cf6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4cf6:	2200      	movs	r2, #0
   b4cf8:	6840      	ldr	r0, [r0, #4]
   b4cfa:	4611      	mov	r1, r2
   b4cfc:	f7ff bc68 	b.w	b45d0 <network_listening>

000b4d00 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4d00:	2200      	movs	r2, #0
   b4d02:	6840      	ldr	r0, [r0, #4]
   b4d04:	4611      	mov	r1, r2
   b4d06:	f7ff bc73 	b.w	b45f0 <network_get_listen_timeout>

000b4d0a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4d0a:	6840      	ldr	r0, [r0, #4]
   b4d0c:	2200      	movs	r2, #0
   b4d0e:	f7ff bc67 	b.w	b45e0 <network_set_listen_timeout>

000b4d12 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4d12:	6840      	ldr	r0, [r0, #4]
   b4d14:	2200      	movs	r2, #0
   b4d16:	f081 0101 	eor.w	r1, r1, #1
   b4d1a:	f7ff bc51 	b.w	b45c0 <network_listen>

000b4d1e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4d1e:	2300      	movs	r3, #0
   b4d20:	6840      	ldr	r0, [r0, #4]
   b4d22:	461a      	mov	r2, r3
   b4d24:	4619      	mov	r1, r3
   b4d26:	f7ff bc43 	b.w	b45b0 <network_off>

000b4d2a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4d2a:	2200      	movs	r2, #0
   b4d2c:	6840      	ldr	r0, [r0, #4]
   b4d2e:	4611      	mov	r1, r2
   b4d30:	f7ff bc1e 	b.w	b4570 <network_connecting>

000b4d34 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4d34:	6840      	ldr	r0, [r0, #4]
   b4d36:	2200      	movs	r2, #0
   b4d38:	2102      	movs	r1, #2
   b4d3a:	f7ff bc21 	b.w	b4580 <network_disconnect>

000b4d3e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4d3e:	2300      	movs	r3, #0
   b4d40:	6840      	ldr	r0, [r0, #4]
   b4d42:	461a      	mov	r2, r3
   b4d44:	f7ff bc0c 	b.w	b4560 <network_connect>

000b4d48 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b4d48:	4b02      	ldr	r3, [pc, #8]	; (b4d54 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b4d4a:	2204      	movs	r2, #4
   b4d4c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b4d4e:	4a02      	ldr	r2, [pc, #8]	; (b4d58 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b4d50:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b4d52:	4770      	bx	lr
   b4d54:	2003e70c 	.word	0x2003e70c
   b4d58:	000b6dac 	.word	0x000b6dac

000b4d5c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4d5c:	2300      	movs	r3, #0
   b4d5e:	6840      	ldr	r0, [r0, #4]
   b4d60:	461a      	mov	r2, r3
   b4d62:	f7ff bbfd 	b.w	b4560 <network_connect>

000b4d66 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4d66:	6840      	ldr	r0, [r0, #4]
   b4d68:	2200      	movs	r2, #0
   b4d6a:	2102      	movs	r1, #2
   b4d6c:	f7ff bc08 	b.w	b4580 <network_disconnect>

000b4d70 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4d70:	2200      	movs	r2, #0
   b4d72:	6840      	ldr	r0, [r0, #4]
   b4d74:	4611      	mov	r1, r2
   b4d76:	f7ff bbfb 	b.w	b4570 <network_connecting>

000b4d7a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4d7a:	2200      	movs	r2, #0
   b4d7c:	6840      	ldr	r0, [r0, #4]
   b4d7e:	4611      	mov	r1, r2
   b4d80:	f7ff bc06 	b.w	b4590 <network_ready>

000b4d84 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4d84:	2300      	movs	r3, #0
   b4d86:	6840      	ldr	r0, [r0, #4]
   b4d88:	461a      	mov	r2, r3
   b4d8a:	4619      	mov	r1, r3
   b4d8c:	f7ff bc08 	b.w	b45a0 <network_on>

000b4d90 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4d90:	2300      	movs	r3, #0
   b4d92:	6840      	ldr	r0, [r0, #4]
   b4d94:	461a      	mov	r2, r3
   b4d96:	4619      	mov	r1, r3
   b4d98:	f7ff bc0a 	b.w	b45b0 <network_off>

000b4d9c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4d9c:	6840      	ldr	r0, [r0, #4]
   b4d9e:	2100      	movs	r1, #0
   b4da0:	f7ff bc2e 	b.w	b4600 <network_is_on>

000b4da4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4da4:	6840      	ldr	r0, [r0, #4]
   b4da6:	2100      	movs	r1, #0
   b4da8:	f7ff bc32 	b.w	b4610 <network_is_off>

000b4dac <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4dac:	6840      	ldr	r0, [r0, #4]
   b4dae:	2200      	movs	r2, #0
   b4db0:	f081 0101 	eor.w	r1, r1, #1
   b4db4:	f7ff bc04 	b.w	b45c0 <network_listen>

000b4db8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4db8:	6840      	ldr	r0, [r0, #4]
   b4dba:	2200      	movs	r2, #0
   b4dbc:	f7ff bc10 	b.w	b45e0 <network_set_listen_timeout>

000b4dc0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4dc0:	2200      	movs	r2, #0
   b4dc2:	6840      	ldr	r0, [r0, #4]
   b4dc4:	4611      	mov	r1, r2
   b4dc6:	f7ff bc13 	b.w	b45f0 <network_get_listen_timeout>

000b4dca <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4dca:	2200      	movs	r2, #0
   b4dcc:	6840      	ldr	r0, [r0, #4]
   b4dce:	4611      	mov	r1, r2
   b4dd0:	f7ff bbfe 	b.w	b45d0 <network_listening>

000b4dd4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4dd8:	b095      	sub	sp, #84	; 0x54
   b4dda:	4614      	mov	r4, r2
   b4ddc:	460d      	mov	r5, r1
   b4dde:	4607      	mov	r7, r0
    IPAddress addr;
   b4de0:	f7ff fe32 	bl	b4a48 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4de4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4de6:	221c      	movs	r2, #28
   b4de8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4dea:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4dec:	f001 fe9e 	bl	b6b2c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4df0:	2340      	movs	r3, #64	; 0x40
   b4df2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4df4:	4620      	mov	r0, r4
   b4df6:	466b      	mov	r3, sp
   b4df8:	aa0c      	add	r2, sp, #48	; 0x30
   b4dfa:	2100      	movs	r1, #0
   b4dfc:	f7ff fa8c 	bl	b4318 <netdb_getaddrinfo>
    if (!r) {
   b4e00:	4604      	mov	r4, r0
   b4e02:	2800      	cmp	r0, #0
   b4e04:	d14b      	bne.n	b4e9e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4e06:	4602      	mov	r2, r0
   b4e08:	2101      	movs	r1, #1
   b4e0a:	6868      	ldr	r0, [r5, #4]
   b4e0c:	f7ff fbc0 	bl	b4590 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4e10:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4e12:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4e14:	4622      	mov	r2, r4
   b4e16:	6868      	ldr	r0, [r5, #4]
   b4e18:	f7ff fbba 	bl	b4590 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4e1c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4e1e:	4681      	mov	r9, r0
        bool ok = false;
   b4e20:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4e22:	2e00      	cmp	r6, #0
   b4e24:	d03b      	beq.n	b4e9e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4e26:	2900      	cmp	r1, #0
   b4e28:	d139      	bne.n	b4e9e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4e2a:	6873      	ldr	r3, [r6, #4]
   b4e2c:	2b02      	cmp	r3, #2
   b4e2e:	d003      	beq.n	b4e38 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4e30:	2b0a      	cmp	r3, #10
   b4e32:	d011      	beq.n	b4e58 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4e34:	69f6      	ldr	r6, [r6, #28]
   b4e36:	e7f4      	b.n	b4e22 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4e38:	f1b8 0f00 	cmp.w	r8, #0
   b4e3c:	d0fa      	beq.n	b4e34 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4e3e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b4e40:	a806      	add	r0, sp, #24
   b4e42:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4e44:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4e46:	f7ff fe2d 	bl	b4aa4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4e4c:	1d3c      	adds	r4, r7, #4
   b4e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4e50:	682b      	ldr	r3, [r5, #0]
   b4e52:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4e54:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4e56:	e7ed      	b.n	b4e34 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4e58:	f1b9 0f00 	cmp.w	r9, #0
   b4e5c:	d0ea      	beq.n	b4e34 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4e5e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4e60:	2210      	movs	r2, #16
   b4e62:	a801      	add	r0, sp, #4
   b4e64:	f001 fe62 	bl	b6b2c <memset>
                    a.v = 6;
   b4e68:	2306      	movs	r3, #6
   b4e6a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4e6e:	ad01      	add	r5, sp, #4
   b4e70:	f104 0308 	add.w	r3, r4, #8
   b4e74:	3418      	adds	r4, #24
   b4e76:	6818      	ldr	r0, [r3, #0]
   b4e78:	6859      	ldr	r1, [r3, #4]
   b4e7a:	462a      	mov	r2, r5
   b4e7c:	c203      	stmia	r2!, {r0, r1}
   b4e7e:	3308      	adds	r3, #8
   b4e80:	42a3      	cmp	r3, r4
   b4e82:	4615      	mov	r5, r2
   b4e84:	d1f7      	bne.n	b4e76 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4e86:	a901      	add	r1, sp, #4
   b4e88:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4e8a:	ad07      	add	r5, sp, #28
   b4e8c:	f7ff fdea 	bl	b4a64 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4e92:	1d3c      	adds	r4, r7, #4
   b4e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4e96:	682b      	ldr	r3, [r5, #0]
   b4e98:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4e9a:	4649      	mov	r1, r9
   b4e9c:	e7ca      	b.n	b4e34 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4e9e:	9800      	ldr	r0, [sp, #0]
   b4ea0:	f7ff fa32 	bl	b4308 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4ea4:	4638      	mov	r0, r7
   b4ea6:	b015      	add	sp, #84	; 0x54
   b4ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4eac <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b4eac:	4b02      	ldr	r3, [pc, #8]	; (b4eb8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4eae:	4a03      	ldr	r2, [pc, #12]	; (b4ebc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4eb0:	601a      	str	r2, [r3, #0]
   b4eb2:	2200      	movs	r2, #0
   b4eb4:	605a      	str	r2, [r3, #4]

} // spark
   b4eb6:	4770      	bx	lr
   b4eb8:	2003e714 	.word	0x2003e714
   b4ebc:	000b6de8 	.word	0x000b6de8

000b4ec0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b4ec0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b4ec2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b4ec4:	d902      	bls.n	b4ecc <pinAvailable+0xc>
    return false;
   b4ec6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b4ec8:	b002      	add	sp, #8
   b4eca:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b4ecc:	f1a0 030b 	sub.w	r3, r0, #11
   b4ed0:	2b02      	cmp	r3, #2
   b4ed2:	d81a      	bhi.n	b4f0a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4ed4:	4c17      	ldr	r4, [pc, #92]	; (b4f34 <pinAvailable+0x74>)
   b4ed6:	7821      	ldrb	r1, [r4, #0]
   b4ed8:	f3bf 8f5b 	dmb	ish
   b4edc:	f011 0101 	ands.w	r1, r1, #1
   b4ee0:	d10b      	bne.n	b4efa <pinAvailable+0x3a>
   b4ee2:	4620      	mov	r0, r4
   b4ee4:	9101      	str	r1, [sp, #4]
   b4ee6:	f7ff f8da 	bl	b409e <__cxa_guard_acquire>
   b4eea:	9901      	ldr	r1, [sp, #4]
   b4eec:	b128      	cbz	r0, b4efa <pinAvailable+0x3a>
   b4eee:	4812      	ldr	r0, [pc, #72]	; (b4f38 <pinAvailable+0x78>)
   b4ef0:	f7ff fc0c 	bl	b470c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4ef4:	4620      	mov	r0, r4
   b4ef6:	f7ff f8d7 	bl	b40a8 <__cxa_guard_release>
   b4efa:	4b0f      	ldr	r3, [pc, #60]	; (b4f38 <pinAvailable+0x78>)
   b4efc:	7818      	ldrb	r0, [r3, #0]
   b4efe:	f7ff fad3 	bl	b44a8 <hal_spi_is_enabled>
   b4f02:	2800      	cmp	r0, #0
   b4f04:	d1df      	bne.n	b4ec6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b4f06:	2001      	movs	r0, #1
   b4f08:	e7de      	b.n	b4ec8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b4f0a:	2801      	cmp	r0, #1
   b4f0c:	d809      	bhi.n	b4f22 <pinAvailable+0x62>
   b4f0e:	f000 f891 	bl	b5034 <_Z19__fetch_global_Wirev>
   b4f12:	2100      	movs	r1, #0
   b4f14:	7c00      	ldrb	r0, [r0, #16]
   b4f16:	f7ff faaf 	bl	b4478 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b4f1a:	f080 0001 	eor.w	r0, r0, #1
   b4f1e:	b2c0      	uxtb	r0, r0
   b4f20:	e7d2      	b.n	b4ec8 <pinAvailable+0x8>
   b4f22:	3809      	subs	r0, #9
   b4f24:	2801      	cmp	r0, #1
   b4f26:	d8ee      	bhi.n	b4f06 <pinAvailable+0x46>
   b4f28:	f000 f848 	bl	b4fbc <_Z22__fetch_global_Serial1v>
   b4f2c:	7c00      	ldrb	r0, [r0, #16]
   b4f2e:	f7ff fa63 	bl	b43f8 <hal_usart_is_enabled>
   b4f32:	e7f2      	b.n	b4f1a <pinAvailable+0x5a>
   b4f34:	2003e71c 	.word	0x2003e71c
   b4f38:	2003e720 	.word	0x2003e720

000b4f3c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b4f3c:	2823      	cmp	r0, #35	; 0x23
{
   b4f3e:	b538      	push	{r3, r4, r5, lr}
   b4f40:	4604      	mov	r4, r0
   b4f42:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b4f44:	d80a      	bhi.n	b4f5c <pinMode+0x20>
   b4f46:	29ff      	cmp	r1, #255	; 0xff
   b4f48:	d008      	beq.n	b4f5c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b4f4a:	f7ff ffb9 	bl	b4ec0 <pinAvailable>
   b4f4e:	b128      	cbz	r0, b4f5c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b4f50:	4629      	mov	r1, r5
   b4f52:	4620      	mov	r0, r4
}
   b4f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b4f58:	f7ff b9e6 	b.w	b4328 <HAL_Pin_Mode>
}
   b4f5c:	bd38      	pop	{r3, r4, r5, pc}

000b4f5e <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b4f5e:	b510      	push	{r4, lr}
   b4f60:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b4f62:	f7ff f9e9 	bl	b4338 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b4f66:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b4f68:	b2db      	uxtb	r3, r3
   b4f6a:	2b01      	cmp	r3, #1
   b4f6c:	d908      	bls.n	b4f80 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b4f6e:	4620      	mov	r0, r4
   b4f70:	f7ff ffa6 	bl	b4ec0 <pinAvailable>
   b4f74:	b120      	cbz	r0, b4f80 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b4f76:	4620      	mov	r0, r4
}
   b4f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b4f7c:	f7ff b9e4 	b.w	b4348 <HAL_GPIO_Read>
}
   b4f80:	2000      	movs	r0, #0
   b4f82:	bd10      	pop	{r4, pc}

000b4f84 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4f84:	4770      	bx	lr
	...

000b4f88 <_Z20acquireSerial1Bufferv>:
{
   b4f88:	b538      	push	{r3, r4, r5, lr}
   b4f8a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b4f8c:	2514      	movs	r5, #20
   b4f8e:	462a      	mov	r2, r5
   b4f90:	2100      	movs	r1, #0
   b4f92:	f001 fdcb 	bl	b6b2c <memset>
   b4f96:	8025      	strh	r5, [r4, #0]
   b4f98:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4f9a:	4907      	ldr	r1, [pc, #28]	; (b4fb8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b4f9c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4f9e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b4fa0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4fa2:	f000 f86b 	bl	b507c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4fa6:	4904      	ldr	r1, [pc, #16]	; (b4fb8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b4fa8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4faa:	4628      	mov	r0, r5
   b4fac:	f000 f866 	bl	b507c <_ZnajRKSt9nothrow_t>
    };
   b4fb0:	60e0      	str	r0, [r4, #12]
}
   b4fb2:	4620      	mov	r0, r4
   b4fb4:	bd38      	pop	{r3, r4, r5, pc}
   b4fb6:	bf00      	nop
   b4fb8:	000b6e1c 	.word	0x000b6e1c

000b4fbc <_Z22__fetch_global_Serial1v>:
{
   b4fbc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4fbe:	4d0e      	ldr	r5, [pc, #56]	; (b4ff8 <_Z22__fetch_global_Serial1v+0x3c>)
   b4fc0:	7829      	ldrb	r1, [r5, #0]
   b4fc2:	f3bf 8f5b 	dmb	ish
   b4fc6:	f011 0401 	ands.w	r4, r1, #1
{
   b4fca:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4fcc:	d111      	bne.n	b4ff2 <_Z22__fetch_global_Serial1v+0x36>
   b4fce:	4628      	mov	r0, r5
   b4fd0:	f7ff f865 	bl	b409e <__cxa_guard_acquire>
   b4fd4:	b168      	cbz	r0, b4ff2 <_Z22__fetch_global_Serial1v+0x36>
   b4fd6:	a801      	add	r0, sp, #4
   b4fd8:	f7ff ffd6 	bl	b4f88 <_Z20acquireSerial1Bufferv>
   b4fdc:	aa01      	add	r2, sp, #4
   b4fde:	4621      	mov	r1, r4
   b4fe0:	4806      	ldr	r0, [pc, #24]	; (b4ffc <_Z22__fetch_global_Serial1v+0x40>)
   b4fe2:	f7ff fe31 	bl	b4c48 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b4fe6:	4628      	mov	r0, r5
   b4fe8:	f7ff f85e 	bl	b40a8 <__cxa_guard_release>
   b4fec:	4804      	ldr	r0, [pc, #16]	; (b5000 <_Z22__fetch_global_Serial1v+0x44>)
   b4fee:	f001 fd89 	bl	b6b04 <atexit>
    return serial1;
}
   b4ff2:	4802      	ldr	r0, [pc, #8]	; (b4ffc <_Z22__fetch_global_Serial1v+0x40>)
   b4ff4:	b007      	add	sp, #28
   b4ff6:	bd30      	pop	{r4, r5, pc}
   b4ff8:	2003e728 	.word	0x2003e728
   b4ffc:	2003e72c 	.word	0x2003e72c
   b5000:	000b4f85 	.word	0x000b4f85

000b5004 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5004:	4770      	bx	lr
	...

000b5008 <_Z17acquireWireBufferv>:
{
   b5008:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b500a:	2520      	movs	r5, #32
   b500c:	2314      	movs	r3, #20
{
   b500e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5010:	6003      	str	r3, [r0, #0]
   b5012:	6085      	str	r5, [r0, #8]
   b5014:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5016:	4906      	ldr	r1, [pc, #24]	; (b5030 <_Z17acquireWireBufferv+0x28>)
   b5018:	4628      	mov	r0, r5
   b501a:	f000 f82f 	bl	b507c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b501e:	4904      	ldr	r1, [pc, #16]	; (b5030 <_Z17acquireWireBufferv+0x28>)
	};
   b5020:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5022:	4628      	mov	r0, r5
   b5024:	f000 f82a 	bl	b507c <_ZnajRKSt9nothrow_t>
	};
   b5028:	60e0      	str	r0, [r4, #12]
}
   b502a:	4620      	mov	r0, r4
   b502c:	bd38      	pop	{r3, r4, r5, pc}
   b502e:	bf00      	nop
   b5030:	000b6e1c 	.word	0x000b6e1c

000b5034 <_Z19__fetch_global_Wirev>:
{
   b5034:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5036:	4d0e      	ldr	r5, [pc, #56]	; (b5070 <_Z19__fetch_global_Wirev+0x3c>)
   b5038:	7829      	ldrb	r1, [r5, #0]
   b503a:	f3bf 8f5b 	dmb	ish
   b503e:	f011 0401 	ands.w	r4, r1, #1
{
   b5042:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5044:	d111      	bne.n	b506a <_Z19__fetch_global_Wirev+0x36>
   b5046:	4628      	mov	r0, r5
   b5048:	f7ff f829 	bl	b409e <__cxa_guard_acquire>
   b504c:	b168      	cbz	r0, b506a <_Z19__fetch_global_Wirev+0x36>
   b504e:	a801      	add	r0, sp, #4
   b5050:	f7ff ffda 	bl	b5008 <_Z17acquireWireBufferv>
   b5054:	aa01      	add	r2, sp, #4
   b5056:	4621      	mov	r1, r4
   b5058:	4806      	ldr	r0, [pc, #24]	; (b5074 <_Z19__fetch_global_Wirev+0x40>)
   b505a:	f7ff fe35 	bl	b4cc8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b505e:	4628      	mov	r0, r5
   b5060:	f7ff f822 	bl	b40a8 <__cxa_guard_release>
   b5064:	4804      	ldr	r0, [pc, #16]	; (b5078 <_Z19__fetch_global_Wirev+0x44>)
   b5066:	f001 fd4d 	bl	b6b04 <atexit>
	return wire;
}
   b506a:	4802      	ldr	r0, [pc, #8]	; (b5074 <_Z19__fetch_global_Wirev+0x40>)
   b506c:	b007      	add	sp, #28
   b506e:	bd30      	pop	{r4, r5, pc}
   b5070:	2003e744 	.word	0x2003e744
   b5074:	2003e748 	.word	0x2003e748
   b5078:	000b5005 	.word	0x000b5005

000b507c <_ZnajRKSt9nothrow_t>:
   b507c:	f7ff b80b 	b.w	b4096 <_Znaj>

000b5080 <pow>:
   b5080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5082:	ed2d 8b02 	vpush	{d8}
   b5086:	ec57 6b10 	vmov	r6, r7, d0
   b508a:	ec55 4b11 	vmov	r4, r5, d1
   b508e:	f000 f8cb 	bl	b5228 <__ieee754_pow>
   b5092:	4b63      	ldr	r3, [pc, #396]	; (b5220 <pow+0x1a0>)
   b5094:	eeb0 8a40 	vmov.f32	s16, s0
   b5098:	eef0 8a60 	vmov.f32	s17, s1
   b509c:	f993 3000 	ldrsb.w	r3, [r3]
   b50a0:	3301      	adds	r3, #1
   b50a2:	d02a      	beq.n	b50fa <pow+0x7a>
   b50a4:	4622      	mov	r2, r4
   b50a6:	462b      	mov	r3, r5
   b50a8:	4620      	mov	r0, r4
   b50aa:	4629      	mov	r1, r5
   b50ac:	f001 fcc4 	bl	b6a38 <__aeabi_dcmpun>
   b50b0:	bb18      	cbnz	r0, b50fa <pow+0x7a>
   b50b2:	4632      	mov	r2, r6
   b50b4:	463b      	mov	r3, r7
   b50b6:	4630      	mov	r0, r6
   b50b8:	4639      	mov	r1, r7
   b50ba:	f001 fcbd 	bl	b6a38 <__aeabi_dcmpun>
   b50be:	2800      	cmp	r0, #0
   b50c0:	d144      	bne.n	b514c <pow+0xcc>
   b50c2:	2200      	movs	r2, #0
   b50c4:	2300      	movs	r3, #0
   b50c6:	4630      	mov	r0, r6
   b50c8:	4639      	mov	r1, r7
   b50ca:	f001 fc83 	bl	b69d4 <__aeabi_dcmpeq>
   b50ce:	b1d8      	cbz	r0, b5108 <pow+0x88>
   b50d0:	2200      	movs	r2, #0
   b50d2:	2300      	movs	r3, #0
   b50d4:	4620      	mov	r0, r4
   b50d6:	4629      	mov	r1, r5
   b50d8:	f001 fc7c 	bl	b69d4 <__aeabi_dcmpeq>
   b50dc:	2800      	cmp	r0, #0
   b50de:	d13d      	bne.n	b515c <pow+0xdc>
   b50e0:	ec45 4b10 	vmov	d0, r4, r5
   b50e4:	f000 ff10 	bl	b5f08 <finite>
   b50e8:	b138      	cbz	r0, b50fa <pow+0x7a>
   b50ea:	4620      	mov	r0, r4
   b50ec:	4629      	mov	r1, r5
   b50ee:	2200      	movs	r2, #0
   b50f0:	2300      	movs	r3, #0
   b50f2:	f001 fc79 	bl	b69e8 <__aeabi_dcmplt>
   b50f6:	2800      	cmp	r0, #0
   b50f8:	d15c      	bne.n	b51b4 <pow+0x134>
   b50fa:	eeb0 0a48 	vmov.f32	s0, s16
   b50fe:	eef0 0a68 	vmov.f32	s1, s17
   b5102:	ecbd 8b02 	vpop	{d8}
   b5106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5108:	eeb0 0a48 	vmov.f32	s0, s16
   b510c:	eef0 0a68 	vmov.f32	s1, s17
   b5110:	f000 fefa 	bl	b5f08 <finite>
   b5114:	b358      	cbz	r0, b516e <pow+0xee>
   b5116:	ec51 0b18 	vmov	r0, r1, d8
   b511a:	2200      	movs	r2, #0
   b511c:	2300      	movs	r3, #0
   b511e:	f001 fc59 	bl	b69d4 <__aeabi_dcmpeq>
   b5122:	2800      	cmp	r0, #0
   b5124:	d0e9      	beq.n	b50fa <pow+0x7a>
   b5126:	ec47 6b10 	vmov	d0, r6, r7
   b512a:	f000 feed 	bl	b5f08 <finite>
   b512e:	2800      	cmp	r0, #0
   b5130:	d0e3      	beq.n	b50fa <pow+0x7a>
   b5132:	ec45 4b10 	vmov	d0, r4, r5
   b5136:	f000 fee7 	bl	b5f08 <finite>
   b513a:	2800      	cmp	r0, #0
   b513c:	d0dd      	beq.n	b50fa <pow+0x7a>
   b513e:	f7ff fa8f 	bl	b4660 <__errno>
   b5142:	2322      	movs	r3, #34	; 0x22
   b5144:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b5200 <pow+0x180>
   b5148:	6003      	str	r3, [r0, #0]
   b514a:	e7d6      	b.n	b50fa <pow+0x7a>
   b514c:	4620      	mov	r0, r4
   b514e:	4629      	mov	r1, r5
   b5150:	2200      	movs	r2, #0
   b5152:	2300      	movs	r3, #0
   b5154:	f001 fc3e 	bl	b69d4 <__aeabi_dcmpeq>
   b5158:	2800      	cmp	r0, #0
   b515a:	d0ce      	beq.n	b50fa <pow+0x7a>
   b515c:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b5208 <pow+0x188>
   b5160:	eeb0 0a48 	vmov.f32	s0, s16
   b5164:	eef0 0a68 	vmov.f32	s1, s17
   b5168:	ecbd 8b02 	vpop	{d8}
   b516c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b516e:	ec47 6b10 	vmov	d0, r6, r7
   b5172:	f000 fec9 	bl	b5f08 <finite>
   b5176:	2800      	cmp	r0, #0
   b5178:	d0cd      	beq.n	b5116 <pow+0x96>
   b517a:	ec45 4b10 	vmov	d0, r4, r5
   b517e:	f000 fec3 	bl	b5f08 <finite>
   b5182:	2800      	cmp	r0, #0
   b5184:	d0c7      	beq.n	b5116 <pow+0x96>
   b5186:	ec53 2b18 	vmov	r2, r3, d8
   b518a:	ee18 0a10 	vmov	r0, s16
   b518e:	4619      	mov	r1, r3
   b5190:	f001 fc52 	bl	b6a38 <__aeabi_dcmpun>
   b5194:	bb20      	cbnz	r0, b51e0 <pow+0x160>
   b5196:	f7ff fa63 	bl	b4660 <__errno>
   b519a:	4603      	mov	r3, r0
   b519c:	2222      	movs	r2, #34	; 0x22
   b519e:	601a      	str	r2, [r3, #0]
   b51a0:	4630      	mov	r0, r6
   b51a2:	4639      	mov	r1, r7
   b51a4:	2200      	movs	r2, #0
   b51a6:	2300      	movs	r3, #0
   b51a8:	f001 fc1e 	bl	b69e8 <__aeabi_dcmplt>
   b51ac:	b948      	cbnz	r0, b51c2 <pow+0x142>
   b51ae:	ed9f 8b18 	vldr	d8, [pc, #96]	; b5210 <pow+0x190>
   b51b2:	e7a2      	b.n	b50fa <pow+0x7a>
   b51b4:	f7ff fa54 	bl	b4660 <__errno>
   b51b8:	2321      	movs	r3, #33	; 0x21
   b51ba:	ed9f 8b17 	vldr	d8, [pc, #92]	; b5218 <pow+0x198>
   b51be:	6003      	str	r3, [r0, #0]
   b51c0:	e79b      	b.n	b50fa <pow+0x7a>
   b51c2:	ec45 4b10 	vmov	d0, r4, r5
   b51c6:	f000 feb3 	bl	b5f30 <rint>
   b51ca:	4622      	mov	r2, r4
   b51cc:	ec51 0b10 	vmov	r0, r1, d0
   b51d0:	462b      	mov	r3, r5
   b51d2:	f001 fbff 	bl	b69d4 <__aeabi_dcmpeq>
   b51d6:	2800      	cmp	r0, #0
   b51d8:	d1e9      	bne.n	b51ae <pow+0x12e>
   b51da:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b5218 <pow+0x198>
   b51de:	e78c      	b.n	b50fa <pow+0x7a>
   b51e0:	f7ff fa3e 	bl	b4660 <__errno>
   b51e4:	2200      	movs	r2, #0
   b51e6:	2300      	movs	r3, #0
   b51e8:	2121      	movs	r1, #33	; 0x21
   b51ea:	6001      	str	r1, [r0, #0]
   b51ec:	4610      	mov	r0, r2
   b51ee:	4619      	mov	r1, r3
   b51f0:	f001 fab2 	bl	b6758 <__aeabi_ddiv>
   b51f4:	ec41 0b18 	vmov	d8, r0, r1
   b51f8:	e77f      	b.n	b50fa <pow+0x7a>
   b51fa:	bf00      	nop
   b51fc:	f3af 8000 	nop.w
	...
   b520c:	3ff00000 	.word	0x3ff00000
   b5210:	00000000 	.word	0x00000000
   b5214:	7ff00000 	.word	0x7ff00000
   b5218:	00000000 	.word	0x00000000
   b521c:	fff00000 	.word	0xfff00000
   b5220:	2003e618 	.word	0x2003e618
   b5224:	00000000 	.word	0x00000000

000b5228 <__ieee754_pow>:
   b5228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b522c:	ec57 6b11 	vmov	r6, r7, d1
   b5230:	ed2d 8b0c 	vpush	{d8-d13}
   b5234:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b5238:	ea5a 0206 	orrs.w	r2, sl, r6
   b523c:	b087      	sub	sp, #28
   b523e:	d03d      	beq.n	b52bc <__ieee754_pow+0x94>
   b5240:	ec55 4b10 	vmov	r4, r5, d0
   b5244:	4972      	ldr	r1, [pc, #456]	; (b5410 <__ieee754_pow+0x1e8>)
   b5246:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b524a:	4588      	cmp	r8, r1
   b524c:	ee10 2a10 	vmov	r2, s0
   b5250:	46a9      	mov	r9, r5
   b5252:	dc2c      	bgt.n	b52ae <__ieee754_pow+0x86>
   b5254:	ee11 3a10 	vmov	r3, s2
   b5258:	46bb      	mov	fp, r7
   b525a:	d036      	beq.n	b52ca <__ieee754_pow+0xa2>
   b525c:	458a      	cmp	sl, r1
   b525e:	dc26      	bgt.n	b52ae <__ieee754_pow+0x86>
   b5260:	496b      	ldr	r1, [pc, #428]	; (b5410 <__ieee754_pow+0x1e8>)
   b5262:	458a      	cmp	sl, r1
   b5264:	d021      	beq.n	b52aa <__ieee754_pow+0x82>
   b5266:	f1b9 0f00 	cmp.w	r9, #0
   b526a:	db39      	blt.n	b52e0 <__ieee754_pow+0xb8>
   b526c:	2100      	movs	r1, #0
   b526e:	9100      	str	r1, [sp, #0]
   b5270:	2b00      	cmp	r3, #0
   b5272:	d151      	bne.n	b5318 <__ieee754_pow+0xf0>
   b5274:	4b66      	ldr	r3, [pc, #408]	; (b5410 <__ieee754_pow+0x1e8>)
   b5276:	459a      	cmp	sl, r3
   b5278:	f000 80a2 	beq.w	b53c0 <__ieee754_pow+0x198>
   b527c:	4b65      	ldr	r3, [pc, #404]	; (b5414 <__ieee754_pow+0x1ec>)
   b527e:	459a      	cmp	sl, r3
   b5280:	f000 80b0 	beq.w	b53e4 <__ieee754_pow+0x1bc>
   b5284:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b5288:	f000 84c0 	beq.w	b5c0c <__ieee754_pow+0x9e4>
   b528c:	4b62      	ldr	r3, [pc, #392]	; (b5418 <__ieee754_pow+0x1f0>)
   b528e:	459b      	cmp	fp, r3
   b5290:	d142      	bne.n	b5318 <__ieee754_pow+0xf0>
   b5292:	f1b9 0f00 	cmp.w	r9, #0
   b5296:	db3f      	blt.n	b5318 <__ieee754_pow+0xf0>
   b5298:	ec45 4b10 	vmov	d0, r4, r5
   b529c:	b007      	add	sp, #28
   b529e:	ecbd 8b0c 	vpop	{d8-d13}
   b52a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b52a6:	f000 bd59 	b.w	b5d5c <__ieee754_sqrt>
   b52aa:	2b00      	cmp	r3, #0
   b52ac:	d0db      	beq.n	b5266 <__ieee754_pow+0x3e>
   b52ae:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b52b2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b52b6:	ea58 0302 	orrs.w	r3, r8, r2
   b52ba:	d109      	bne.n	b52d0 <__ieee754_pow+0xa8>
   b52bc:	ed9f 0b50 	vldr	d0, [pc, #320]	; b5400 <__ieee754_pow+0x1d8>
   b52c0:	b007      	add	sp, #28
   b52c2:	ecbd 8b0c 	vpop	{d8-d13}
   b52c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b52ca:	b90c      	cbnz	r4, b52d0 <__ieee754_pow+0xa8>
   b52cc:	45c2      	cmp	sl, r8
   b52ce:	ddc7      	ble.n	b5260 <__ieee754_pow+0x38>
   b52d0:	4852      	ldr	r0, [pc, #328]	; (b541c <__ieee754_pow+0x1f4>)
   b52d2:	b007      	add	sp, #28
   b52d4:	ecbd 8b0c 	vpop	{d8-d13}
   b52d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b52dc:	f000 be20 	b.w	b5f20 <nan>
   b52e0:	494f      	ldr	r1, [pc, #316]	; (b5420 <__ieee754_pow+0x1f8>)
   b52e2:	458a      	cmp	sl, r1
   b52e4:	f300 8085 	bgt.w	b53f2 <__ieee754_pow+0x1ca>
   b52e8:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b52ec:	458a      	cmp	sl, r1
   b52ee:	dd0f      	ble.n	b5310 <__ieee754_pow+0xe8>
   b52f0:	ea4f 512a 	mov.w	r1, sl, asr #20
   b52f4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b52f8:	2914      	cmp	r1, #20
   b52fa:	f340 849b 	ble.w	b5c34 <__ieee754_pow+0xa0c>
   b52fe:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b5302:	fa23 f001 	lsr.w	r0, r3, r1
   b5306:	fa00 f101 	lsl.w	r1, r0, r1
   b530a:	4299      	cmp	r1, r3
   b530c:	f000 84ed 	beq.w	b5cea <__ieee754_pow+0xac2>
   b5310:	2100      	movs	r1, #0
   b5312:	9100      	str	r1, [sp, #0]
   b5314:	2b00      	cmp	r3, #0
   b5316:	d0b1      	beq.n	b527c <__ieee754_pow+0x54>
   b5318:	ec45 4b10 	vmov	d0, r4, r5
   b531c:	9202      	str	r2, [sp, #8]
   b531e:	f000 fde9 	bl	b5ef4 <fabs>
   b5322:	9a02      	ldr	r2, [sp, #8]
   b5324:	bb5a      	cbnz	r2, b537e <__ieee754_pow+0x156>
   b5326:	f1b8 0f00 	cmp.w	r8, #0
   b532a:	d004      	beq.n	b5336 <__ieee754_pow+0x10e>
   b532c:	4b39      	ldr	r3, [pc, #228]	; (b5414 <__ieee754_pow+0x1ec>)
   b532e:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b5332:	429a      	cmp	r2, r3
   b5334:	d123      	bne.n	b537e <__ieee754_pow+0x156>
   b5336:	f1bb 0f00 	cmp.w	fp, #0
   b533a:	da07      	bge.n	b534c <__ieee754_pow+0x124>
   b533c:	ec53 2b10 	vmov	r2, r3, d0
   b5340:	4934      	ldr	r1, [pc, #208]	; (b5414 <__ieee754_pow+0x1ec>)
   b5342:	2000      	movs	r0, #0
   b5344:	f001 fa08 	bl	b6758 <__aeabi_ddiv>
   b5348:	ec41 0b10 	vmov	d0, r0, r1
   b534c:	f1b9 0f00 	cmp.w	r9, #0
   b5350:	dab6      	bge.n	b52c0 <__ieee754_pow+0x98>
   b5352:	9b00      	ldr	r3, [sp, #0]
   b5354:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b5358:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b535c:	ea58 0303 	orrs.w	r3, r8, r3
   b5360:	f040 848d 	bne.w	b5c7e <__ieee754_pow+0xa56>
   b5364:	ec53 2b10 	vmov	r2, r3, d0
   b5368:	4610      	mov	r0, r2
   b536a:	4619      	mov	r1, r3
   b536c:	f000 ff12 	bl	b6194 <__aeabi_dsub>
   b5370:	4602      	mov	r2, r0
   b5372:	460b      	mov	r3, r1
   b5374:	f001 f9f0 	bl	b6758 <__aeabi_ddiv>
   b5378:	ec41 0b10 	vmov	d0, r0, r1
   b537c:	e7a0      	b.n	b52c0 <__ieee754_pow+0x98>
   b537e:	9a00      	ldr	r2, [sp, #0]
   b5380:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b5384:	3b01      	subs	r3, #1
   b5386:	9304      	str	r3, [sp, #16]
   b5388:	4313      	orrs	r3, r2
   b538a:	d035      	beq.n	b53f8 <__ieee754_pow+0x1d0>
   b538c:	4b25      	ldr	r3, [pc, #148]	; (b5424 <__ieee754_pow+0x1fc>)
   b538e:	459a      	cmp	sl, r3
   b5390:	dd4c      	ble.n	b542c <__ieee754_pow+0x204>
   b5392:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b5396:	459a      	cmp	sl, r3
   b5398:	4b23      	ldr	r3, [pc, #140]	; (b5428 <__ieee754_pow+0x200>)
   b539a:	f340 83db 	ble.w	b5b54 <__ieee754_pow+0x92c>
   b539e:	4598      	cmp	r8, r3
   b53a0:	f340 8360 	ble.w	b5a64 <__ieee754_pow+0x83c>
   b53a4:	f1bb 0f00 	cmp.w	fp, #0
   b53a8:	f340 8360 	ble.w	b5a6c <__ieee754_pow+0x844>
   b53ac:	a316      	add	r3, pc, #88	; (adr r3, b5408 <__ieee754_pow+0x1e0>)
   b53ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   b53b2:	4610      	mov	r0, r2
   b53b4:	4619      	mov	r1, r3
   b53b6:	f001 f8a5 	bl	b6504 <__aeabi_dmul>
   b53ba:	ec41 0b10 	vmov	d0, r0, r1
   b53be:	e77f      	b.n	b52c0 <__ieee754_pow+0x98>
   b53c0:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b53c4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b53c8:	4313      	orrs	r3, r2
   b53ca:	f43f af77 	beq.w	b52bc <__ieee754_pow+0x94>
   b53ce:	4b16      	ldr	r3, [pc, #88]	; (b5428 <__ieee754_pow+0x200>)
   b53d0:	4598      	cmp	r8, r3
   b53d2:	f340 837a 	ble.w	b5aca <__ieee754_pow+0x8a2>
   b53d6:	f1bb 0f00 	cmp.w	fp, #0
   b53da:	f2c0 8347 	blt.w	b5a6c <__ieee754_pow+0x844>
   b53de:	ec47 6b10 	vmov	d0, r6, r7
   b53e2:	e76d      	b.n	b52c0 <__ieee754_pow+0x98>
   b53e4:	f1bb 0f00 	cmp.w	fp, #0
   b53e8:	f2c0 841a 	blt.w	b5c20 <__ieee754_pow+0x9f8>
   b53ec:	ec45 4b10 	vmov	d0, r4, r5
   b53f0:	e766      	b.n	b52c0 <__ieee754_pow+0x98>
   b53f2:	2102      	movs	r1, #2
   b53f4:	9100      	str	r1, [sp, #0]
   b53f6:	e73b      	b.n	b5270 <__ieee754_pow+0x48>
   b53f8:	4622      	mov	r2, r4
   b53fa:	462b      	mov	r3, r5
   b53fc:	e7b4      	b.n	b5368 <__ieee754_pow+0x140>
   b53fe:	bf00      	nop
   b5400:	00000000 	.word	0x00000000
   b5404:	3ff00000 	.word	0x3ff00000
   b5408:	8800759c 	.word	0x8800759c
   b540c:	7e37e43c 	.word	0x7e37e43c
   b5410:	7ff00000 	.word	0x7ff00000
   b5414:	3ff00000 	.word	0x3ff00000
   b5418:	3fe00000 	.word	0x3fe00000
   b541c:	000b6e20 	.word	0x000b6e20
   b5420:	433fffff 	.word	0x433fffff
   b5424:	41e00000 	.word	0x41e00000
   b5428:	3fefffff 	.word	0x3fefffff
   b542c:	4be4      	ldr	r3, [pc, #912]	; (b57c0 <__ieee754_pow+0x598>)
   b542e:	ea09 0303 	and.w	r3, r9, r3
   b5432:	2200      	movs	r2, #0
   b5434:	b953      	cbnz	r3, b544c <__ieee754_pow+0x224>
   b5436:	ec51 0b10 	vmov	r0, r1, d0
   b543a:	4be2      	ldr	r3, [pc, #904]	; (b57c4 <__ieee754_pow+0x59c>)
   b543c:	f001 f862 	bl	b6504 <__aeabi_dmul>
   b5440:	ec41 0b10 	vmov	d0, r0, r1
   b5444:	ee10 8a90 	vmov	r8, s1
   b5448:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b544c:	ea4f 5328 	mov.w	r3, r8, asr #20
   b5450:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b5454:	189a      	adds	r2, r3, r2
   b5456:	4bdc      	ldr	r3, [pc, #880]	; (b57c8 <__ieee754_pow+0x5a0>)
   b5458:	9205      	str	r2, [sp, #20]
   b545a:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b545e:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b5462:	4598      	cmp	r8, r3
   b5464:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b5468:	dd07      	ble.n	b547a <__ieee754_pow+0x252>
   b546a:	4bd8      	ldr	r3, [pc, #864]	; (b57cc <__ieee754_pow+0x5a4>)
   b546c:	4598      	cmp	r8, r3
   b546e:	f340 8414 	ble.w	b5c9a <__ieee754_pow+0xa72>
   b5472:	3201      	adds	r2, #1
   b5474:	9205      	str	r2, [sp, #20]
   b5476:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b547a:	ed9f 6bb9 	vldr	d6, [pc, #740]	; b5760 <__ieee754_pow+0x538>
   b547e:	ed9f 7bba 	vldr	d7, [pc, #744]	; b5768 <__ieee754_pow+0x540>
   b5482:	ec53 2b16 	vmov	r2, r3, d6
   b5486:	eeb0 ca47 	vmov.f32	s24, s14
   b548a:	eef0 ca67 	vmov.f32	s25, s15
   b548e:	2500      	movs	r5, #0
   b5490:	eeb0 da47 	vmov.f32	s26, s14
   b5494:	eef0 da67 	vmov.f32	s27, s15
   b5498:	ec5b ab10 	vmov	sl, fp, d0
   b549c:	46a3      	mov	fp, r4
   b549e:	4650      	mov	r0, sl
   b54a0:	4659      	mov	r1, fp
   b54a2:	ec43 2b1a 	vmov	d10, r2, r3
   b54a6:	f000 fe75 	bl	b6194 <__aeabi_dsub>
   b54aa:	ec53 2b1a 	vmov	r2, r3, d10
   b54ae:	4680      	mov	r8, r0
   b54b0:	4689      	mov	r9, r1
   b54b2:	4650      	mov	r0, sl
   b54b4:	4659      	mov	r1, fp
   b54b6:	f000 fe6f 	bl	b6198 <__adddf3>
   b54ba:	4602      	mov	r2, r0
   b54bc:	460b      	mov	r3, r1
   b54be:	2000      	movs	r0, #0
   b54c0:	49c3      	ldr	r1, [pc, #780]	; (b57d0 <__ieee754_pow+0x5a8>)
   b54c2:	f001 f949 	bl	b6758 <__aeabi_ddiv>
   b54c6:	ec41 0b1b 	vmov	d11, r0, r1
   b54ca:	4640      	mov	r0, r8
   b54cc:	ec53 2b1b 	vmov	r2, r3, d11
   b54d0:	4649      	mov	r1, r9
   b54d2:	f001 f817 	bl	b6504 <__aeabi_dmul>
   b54d6:	ec41 0b18 	vmov	d8, r0, r1
   b54da:	460a      	mov	r2, r1
   b54dc:	4601      	mov	r1, r0
   b54de:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b54e2:	2100      	movs	r1, #0
   b54e4:	9102      	str	r1, [sp, #8]
   b54e6:	1064      	asrs	r4, r4, #1
   b54e8:	ec4b ab19 	vmov	d9, sl, fp
   b54ec:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b54f0:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b54f4:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b54f8:	2000      	movs	r0, #0
   b54fa:	1959      	adds	r1, r3, r5
   b54fc:	4604      	mov	r4, r0
   b54fe:	460d      	mov	r5, r1
   b5500:	4602      	mov	r2, r0
   b5502:	460b      	mov	r3, r1
   b5504:	4650      	mov	r0, sl
   b5506:	4659      	mov	r1, fp
   b5508:	f000 fffc 	bl	b6504 <__aeabi_dmul>
   b550c:	4602      	mov	r2, r0
   b550e:	460b      	mov	r3, r1
   b5510:	4640      	mov	r0, r8
   b5512:	4649      	mov	r1, r9
   b5514:	f000 fe3e 	bl	b6194 <__aeabi_dsub>
   b5518:	ec53 2b1a 	vmov	r2, r3, d10
   b551c:	4680      	mov	r8, r0
   b551e:	4689      	mov	r9, r1
   b5520:	4620      	mov	r0, r4
   b5522:	4629      	mov	r1, r5
   b5524:	f000 fe36 	bl	b6194 <__aeabi_dsub>
   b5528:	4602      	mov	r2, r0
   b552a:	460b      	mov	r3, r1
   b552c:	ec51 0b19 	vmov	r0, r1, d9
   b5530:	f000 fe30 	bl	b6194 <__aeabi_dsub>
   b5534:	4652      	mov	r2, sl
   b5536:	465b      	mov	r3, fp
   b5538:	f000 ffe4 	bl	b6504 <__aeabi_dmul>
   b553c:	4602      	mov	r2, r0
   b553e:	460b      	mov	r3, r1
   b5540:	4640      	mov	r0, r8
   b5542:	4649      	mov	r1, r9
   b5544:	f000 fe26 	bl	b6194 <__aeabi_dsub>
   b5548:	ec53 2b1b 	vmov	r2, r3, d11
   b554c:	f000 ffda 	bl	b6504 <__aeabi_dmul>
   b5550:	ec53 2b18 	vmov	r2, r3, d8
   b5554:	ec41 0b19 	vmov	d9, r0, r1
   b5558:	ec51 0b18 	vmov	r0, r1, d8
   b555c:	f000 ffd2 	bl	b6504 <__aeabi_dmul>
   b5560:	a383      	add	r3, pc, #524	; (adr r3, b5770 <__ieee754_pow+0x548>)
   b5562:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5566:	4604      	mov	r4, r0
   b5568:	460d      	mov	r5, r1
   b556a:	f000 ffcb 	bl	b6504 <__aeabi_dmul>
   b556e:	a382      	add	r3, pc, #520	; (adr r3, b5778 <__ieee754_pow+0x550>)
   b5570:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5574:	f000 fe10 	bl	b6198 <__adddf3>
   b5578:	4622      	mov	r2, r4
   b557a:	462b      	mov	r3, r5
   b557c:	f000 ffc2 	bl	b6504 <__aeabi_dmul>
   b5580:	a37f      	add	r3, pc, #508	; (adr r3, b5780 <__ieee754_pow+0x558>)
   b5582:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5586:	f000 fe07 	bl	b6198 <__adddf3>
   b558a:	4622      	mov	r2, r4
   b558c:	462b      	mov	r3, r5
   b558e:	f000 ffb9 	bl	b6504 <__aeabi_dmul>
   b5592:	a37d      	add	r3, pc, #500	; (adr r3, b5788 <__ieee754_pow+0x560>)
   b5594:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5598:	f000 fdfe 	bl	b6198 <__adddf3>
   b559c:	4622      	mov	r2, r4
   b559e:	462b      	mov	r3, r5
   b55a0:	f000 ffb0 	bl	b6504 <__aeabi_dmul>
   b55a4:	a37a      	add	r3, pc, #488	; (adr r3, b5790 <__ieee754_pow+0x568>)
   b55a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b55aa:	f000 fdf5 	bl	b6198 <__adddf3>
   b55ae:	4622      	mov	r2, r4
   b55b0:	462b      	mov	r3, r5
   b55b2:	f000 ffa7 	bl	b6504 <__aeabi_dmul>
   b55b6:	a378      	add	r3, pc, #480	; (adr r3, b5798 <__ieee754_pow+0x570>)
   b55b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b55bc:	f000 fdec 	bl	b6198 <__adddf3>
   b55c0:	4622      	mov	r2, r4
   b55c2:	4680      	mov	r8, r0
   b55c4:	4689      	mov	r9, r1
   b55c6:	462b      	mov	r3, r5
   b55c8:	4620      	mov	r0, r4
   b55ca:	4629      	mov	r1, r5
   b55cc:	f000 ff9a 	bl	b6504 <__aeabi_dmul>
   b55d0:	4602      	mov	r2, r0
   b55d2:	460b      	mov	r3, r1
   b55d4:	4640      	mov	r0, r8
   b55d6:	4649      	mov	r1, r9
   b55d8:	f000 ff94 	bl	b6504 <__aeabi_dmul>
   b55dc:	4652      	mov	r2, sl
   b55de:	4604      	mov	r4, r0
   b55e0:	460d      	mov	r5, r1
   b55e2:	465b      	mov	r3, fp
   b55e4:	ec51 0b18 	vmov	r0, r1, d8
   b55e8:	f000 fdd6 	bl	b6198 <__adddf3>
   b55ec:	ec53 2b19 	vmov	r2, r3, d9
   b55f0:	f000 ff88 	bl	b6504 <__aeabi_dmul>
   b55f4:	4622      	mov	r2, r4
   b55f6:	462b      	mov	r3, r5
   b55f8:	f000 fdce 	bl	b6198 <__adddf3>
   b55fc:	4652      	mov	r2, sl
   b55fe:	4680      	mov	r8, r0
   b5600:	4689      	mov	r9, r1
   b5602:	465b      	mov	r3, fp
   b5604:	4650      	mov	r0, sl
   b5606:	4659      	mov	r1, fp
   b5608:	f000 ff7c 	bl	b6504 <__aeabi_dmul>
   b560c:	4602      	mov	r2, r0
   b560e:	460b      	mov	r3, r1
   b5610:	ec43 2b1a 	vmov	d10, r2, r3
   b5614:	4b6f      	ldr	r3, [pc, #444]	; (b57d4 <__ieee754_pow+0x5ac>)
   b5616:	2200      	movs	r2, #0
   b5618:	f000 fdbe 	bl	b6198 <__adddf3>
   b561c:	4642      	mov	r2, r8
   b561e:	464b      	mov	r3, r9
   b5620:	f000 fdba 	bl	b6198 <__adddf3>
   b5624:	2400      	movs	r4, #0
   b5626:	460d      	mov	r5, r1
   b5628:	4622      	mov	r2, r4
   b562a:	462b      	mov	r3, r5
   b562c:	4650      	mov	r0, sl
   b562e:	4659      	mov	r1, fp
   b5630:	f000 ff68 	bl	b6504 <__aeabi_dmul>
   b5634:	4b67      	ldr	r3, [pc, #412]	; (b57d4 <__ieee754_pow+0x5ac>)
   b5636:	4682      	mov	sl, r0
   b5638:	468b      	mov	fp, r1
   b563a:	2200      	movs	r2, #0
   b563c:	4620      	mov	r0, r4
   b563e:	4629      	mov	r1, r5
   b5640:	f000 fda8 	bl	b6194 <__aeabi_dsub>
   b5644:	ec53 2b1a 	vmov	r2, r3, d10
   b5648:	f000 fda4 	bl	b6194 <__aeabi_dsub>
   b564c:	4602      	mov	r2, r0
   b564e:	460b      	mov	r3, r1
   b5650:	4640      	mov	r0, r8
   b5652:	4649      	mov	r1, r9
   b5654:	f000 fd9e 	bl	b6194 <__aeabi_dsub>
   b5658:	ec53 2b18 	vmov	r2, r3, d8
   b565c:	f000 ff52 	bl	b6504 <__aeabi_dmul>
   b5660:	4622      	mov	r2, r4
   b5662:	462b      	mov	r3, r5
   b5664:	4604      	mov	r4, r0
   b5666:	460d      	mov	r5, r1
   b5668:	ec51 0b19 	vmov	r0, r1, d9
   b566c:	f000 ff4a 	bl	b6504 <__aeabi_dmul>
   b5670:	4602      	mov	r2, r0
   b5672:	460b      	mov	r3, r1
   b5674:	4620      	mov	r0, r4
   b5676:	4629      	mov	r1, r5
   b5678:	f000 fd8e 	bl	b6198 <__adddf3>
   b567c:	4680      	mov	r8, r0
   b567e:	4689      	mov	r9, r1
   b5680:	4642      	mov	r2, r8
   b5682:	464b      	mov	r3, r9
   b5684:	4650      	mov	r0, sl
   b5686:	4659      	mov	r1, fp
   b5688:	f000 fd86 	bl	b6198 <__adddf3>
   b568c:	a344      	add	r3, pc, #272	; (adr r3, b57a0 <__ieee754_pow+0x578>)
   b568e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5692:	2000      	movs	r0, #0
   b5694:	4604      	mov	r4, r0
   b5696:	460d      	mov	r5, r1
   b5698:	f000 ff34 	bl	b6504 <__aeabi_dmul>
   b569c:	4652      	mov	r2, sl
   b569e:	ec41 0b19 	vmov	d9, r0, r1
   b56a2:	465b      	mov	r3, fp
   b56a4:	4620      	mov	r0, r4
   b56a6:	4629      	mov	r1, r5
   b56a8:	f000 fd74 	bl	b6194 <__aeabi_dsub>
   b56ac:	4602      	mov	r2, r0
   b56ae:	460b      	mov	r3, r1
   b56b0:	4640      	mov	r0, r8
   b56b2:	4649      	mov	r1, r9
   b56b4:	f000 fd6e 	bl	b6194 <__aeabi_dsub>
   b56b8:	a33b      	add	r3, pc, #236	; (adr r3, b57a8 <__ieee754_pow+0x580>)
   b56ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   b56be:	f000 ff21 	bl	b6504 <__aeabi_dmul>
   b56c2:	4602      	mov	r2, r0
   b56c4:	460b      	mov	r3, r1
   b56c6:	4620      	mov	r0, r4
   b56c8:	4629      	mov	r1, r5
   b56ca:	4614      	mov	r4, r2
   b56cc:	461d      	mov	r5, r3
   b56ce:	a338      	add	r3, pc, #224	; (adr r3, b57b0 <__ieee754_pow+0x588>)
   b56d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b56d4:	f000 ff16 	bl	b6504 <__aeabi_dmul>
   b56d8:	4602      	mov	r2, r0
   b56da:	460b      	mov	r3, r1
   b56dc:	4620      	mov	r0, r4
   b56de:	4629      	mov	r1, r5
   b56e0:	f000 fd5a 	bl	b6198 <__adddf3>
   b56e4:	ec53 2b1d 	vmov	r2, r3, d13
   b56e8:	f000 fd56 	bl	b6198 <__adddf3>
   b56ec:	4680      	mov	r8, r0
   b56ee:	9805      	ldr	r0, [sp, #20]
   b56f0:	4689      	mov	r9, r1
   b56f2:	f000 fe9d 	bl	b6430 <__aeabi_i2d>
   b56f6:	4642      	mov	r2, r8
   b56f8:	4682      	mov	sl, r0
   b56fa:	468b      	mov	fp, r1
   b56fc:	464b      	mov	r3, r9
   b56fe:	ec51 0b19 	vmov	r0, r1, d9
   b5702:	f000 fd49 	bl	b6198 <__adddf3>
   b5706:	ec53 2b1c 	vmov	r2, r3, d12
   b570a:	f000 fd45 	bl	b6198 <__adddf3>
   b570e:	4652      	mov	r2, sl
   b5710:	465b      	mov	r3, fp
   b5712:	f000 fd41 	bl	b6198 <__adddf3>
   b5716:	4652      	mov	r2, sl
   b5718:	465b      	mov	r3, fp
   b571a:	2000      	movs	r0, #0
   b571c:	4604      	mov	r4, r0
   b571e:	460d      	mov	r5, r1
   b5720:	f000 fd38 	bl	b6194 <__aeabi_dsub>
   b5724:	ec53 2b1c 	vmov	r2, r3, d12
   b5728:	f000 fd34 	bl	b6194 <__aeabi_dsub>
   b572c:	ec53 2b19 	vmov	r2, r3, d9
   b5730:	f000 fd30 	bl	b6194 <__aeabi_dsub>
   b5734:	4602      	mov	r2, r0
   b5736:	460b      	mov	r3, r1
   b5738:	4640      	mov	r0, r8
   b573a:	4649      	mov	r1, r9
   b573c:	f000 fd2a 	bl	b6194 <__aeabi_dsub>
   b5740:	9b00      	ldr	r3, [sp, #0]
   b5742:	9a04      	ldr	r2, [sp, #16]
   b5744:	3b01      	subs	r3, #1
   b5746:	4313      	orrs	r3, r2
   b5748:	4682      	mov	sl, r0
   b574a:	468b      	mov	fp, r1
   b574c:	f040 81b6 	bne.w	b5abc <__ieee754_pow+0x894>
   b5750:	ed9f 7b19 	vldr	d7, [pc, #100]	; b57b8 <__ieee754_pow+0x590>
   b5754:	eeb0 8a47 	vmov.f32	s16, s14
   b5758:	eef0 8a67 	vmov.f32	s17, s15
   b575c:	e03c      	b.n	b57d8 <__ieee754_pow+0x5b0>
   b575e:	bf00      	nop
   b5760:	00000000 	.word	0x00000000
   b5764:	3ff00000 	.word	0x3ff00000
	...
   b5770:	4a454eef 	.word	0x4a454eef
   b5774:	3fca7e28 	.word	0x3fca7e28
   b5778:	93c9db65 	.word	0x93c9db65
   b577c:	3fcd864a 	.word	0x3fcd864a
   b5780:	a91d4101 	.word	0xa91d4101
   b5784:	3fd17460 	.word	0x3fd17460
   b5788:	518f264d 	.word	0x518f264d
   b578c:	3fd55555 	.word	0x3fd55555
   b5790:	db6fabff 	.word	0xdb6fabff
   b5794:	3fdb6db6 	.word	0x3fdb6db6
   b5798:	33333303 	.word	0x33333303
   b579c:	3fe33333 	.word	0x3fe33333
   b57a0:	e0000000 	.word	0xe0000000
   b57a4:	3feec709 	.word	0x3feec709
   b57a8:	dc3a03fd 	.word	0xdc3a03fd
   b57ac:	3feec709 	.word	0x3feec709
   b57b0:	145b01f5 	.word	0x145b01f5
   b57b4:	be3e2fe0 	.word	0xbe3e2fe0
   b57b8:	00000000 	.word	0x00000000
   b57bc:	bff00000 	.word	0xbff00000
   b57c0:	7ff00000 	.word	0x7ff00000
   b57c4:	43400000 	.word	0x43400000
   b57c8:	0003988e 	.word	0x0003988e
   b57cc:	000bb679 	.word	0x000bb679
   b57d0:	3ff00000 	.word	0x3ff00000
   b57d4:	40080000 	.word	0x40080000
   b57d8:	2300      	movs	r3, #0
   b57da:	e9cd 6700 	strd	r6, r7, [sp]
   b57de:	9300      	str	r3, [sp, #0]
   b57e0:	e9dd 8900 	ldrd	r8, r9, [sp]
   b57e4:	4630      	mov	r0, r6
   b57e6:	4642      	mov	r2, r8
   b57e8:	464b      	mov	r3, r9
   b57ea:	4639      	mov	r1, r7
   b57ec:	f000 fcd2 	bl	b6194 <__aeabi_dsub>
   b57f0:	4622      	mov	r2, r4
   b57f2:	462b      	mov	r3, r5
   b57f4:	f000 fe86 	bl	b6504 <__aeabi_dmul>
   b57f8:	4632      	mov	r2, r6
   b57fa:	463b      	mov	r3, r7
   b57fc:	4606      	mov	r6, r0
   b57fe:	460f      	mov	r7, r1
   b5800:	4650      	mov	r0, sl
   b5802:	4659      	mov	r1, fp
   b5804:	f000 fe7e 	bl	b6504 <__aeabi_dmul>
   b5808:	4602      	mov	r2, r0
   b580a:	460b      	mov	r3, r1
   b580c:	4630      	mov	r0, r6
   b580e:	4639      	mov	r1, r7
   b5810:	f000 fcc2 	bl	b6198 <__adddf3>
   b5814:	4642      	mov	r2, r8
   b5816:	464b      	mov	r3, r9
   b5818:	4606      	mov	r6, r0
   b581a:	460f      	mov	r7, r1
   b581c:	4620      	mov	r0, r4
   b581e:	4629      	mov	r1, r5
   b5820:	f000 fe70 	bl	b6504 <__aeabi_dmul>
   b5824:	4604      	mov	r4, r0
   b5826:	460d      	mov	r5, r1
   b5828:	462b      	mov	r3, r5
   b582a:	4630      	mov	r0, r6
   b582c:	4639      	mov	r1, r7
   b582e:	4622      	mov	r2, r4
   b5830:	f000 fcb2 	bl	b6198 <__adddf3>
   b5834:	4bc2      	ldr	r3, [pc, #776]	; (b5b40 <__ieee754_pow+0x918>)
   b5836:	4299      	cmp	r1, r3
   b5838:	4680      	mov	r8, r0
   b583a:	4689      	mov	r9, r1
   b583c:	468a      	mov	sl, r1
   b583e:	f340 8118 	ble.w	b5a72 <__ieee754_pow+0x84a>
   b5842:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   b5846:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   b584a:	4303      	orrs	r3, r0
   b584c:	f040 8207 	bne.w	b5c5e <__ieee754_pow+0xa36>
   b5850:	a3a3      	add	r3, pc, #652	; (adr r3, b5ae0 <__ieee754_pow+0x8b8>)
   b5852:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5856:	4630      	mov	r0, r6
   b5858:	4639      	mov	r1, r7
   b585a:	f000 fc9d 	bl	b6198 <__adddf3>
   b585e:	4602      	mov	r2, r0
   b5860:	460b      	mov	r3, r1
   b5862:	4640      	mov	r0, r8
   b5864:	4649      	mov	r1, r9
   b5866:	4690      	mov	r8, r2
   b5868:	4699      	mov	r9, r3
   b586a:	4622      	mov	r2, r4
   b586c:	462b      	mov	r3, r5
   b586e:	f000 fc91 	bl	b6194 <__aeabi_dsub>
   b5872:	4602      	mov	r2, r0
   b5874:	460b      	mov	r3, r1
   b5876:	4640      	mov	r0, r8
   b5878:	4649      	mov	r1, r9
   b587a:	f001 f8d3 	bl	b6a24 <__aeabi_dcmpgt>
   b587e:	2800      	cmp	r0, #0
   b5880:	f040 81ed 	bne.w	b5c5e <__ieee754_pow+0xa36>
   b5884:	f3ca 530a 	ubfx	r3, sl, #20, #11
   b5888:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   b588c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   b5890:	fa42 f303 	asr.w	r3, r2, r3
   b5894:	4453      	add	r3, sl
   b5896:	49ab      	ldr	r1, [pc, #684]	; (b5b44 <__ieee754_pow+0x91c>)
   b5898:	f3c3 520a 	ubfx	r2, r3, #20, #11
   b589c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   b58a0:	fa41 fc02 	asr.w	ip, r1, r2
   b58a4:	f3c3 0113 	ubfx	r1, r3, #0, #20
   b58a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b58ac:	f1c2 0214 	rsb	r2, r2, #20
   b58b0:	fa41 f202 	asr.w	r2, r1, r2
   b58b4:	2000      	movs	r0, #0
   b58b6:	ea23 010c 	bic.w	r1, r3, ip
   b58ba:	f1ba 0f00 	cmp.w	sl, #0
   b58be:	9200      	str	r2, [sp, #0]
   b58c0:	460b      	mov	r3, r1
   b58c2:	4602      	mov	r2, r0
   b58c4:	da02      	bge.n	b58cc <__ieee754_pow+0x6a4>
   b58c6:	9900      	ldr	r1, [sp, #0]
   b58c8:	4249      	negs	r1, r1
   b58ca:	9100      	str	r1, [sp, #0]
   b58cc:	4620      	mov	r0, r4
   b58ce:	4629      	mov	r1, r5
   b58d0:	f000 fc60 	bl	b6194 <__aeabi_dsub>
   b58d4:	9b00      	ldr	r3, [sp, #0]
   b58d6:	051b      	lsls	r3, r3, #20
   b58d8:	9302      	str	r3, [sp, #8]
   b58da:	4602      	mov	r2, r0
   b58dc:	460b      	mov	r3, r1
   b58de:	4604      	mov	r4, r0
   b58e0:	460d      	mov	r5, r1
   b58e2:	4630      	mov	r0, r6
   b58e4:	4639      	mov	r1, r7
   b58e6:	f000 fc57 	bl	b6198 <__adddf3>
   b58ea:	4689      	mov	r9, r1
   b58ec:	f04f 0800 	mov.w	r8, #0
   b58f0:	a37d      	add	r3, pc, #500	; (adr r3, b5ae8 <__ieee754_pow+0x8c0>)
   b58f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b58f6:	4640      	mov	r0, r8
   b58f8:	4649      	mov	r1, r9
   b58fa:	f000 fe03 	bl	b6504 <__aeabi_dmul>
   b58fe:	4622      	mov	r2, r4
   b5900:	462b      	mov	r3, r5
   b5902:	4682      	mov	sl, r0
   b5904:	468b      	mov	fp, r1
   b5906:	4640      	mov	r0, r8
   b5908:	4649      	mov	r1, r9
   b590a:	f000 fc43 	bl	b6194 <__aeabi_dsub>
   b590e:	4602      	mov	r2, r0
   b5910:	460b      	mov	r3, r1
   b5912:	4630      	mov	r0, r6
   b5914:	4639      	mov	r1, r7
   b5916:	f000 fc3d 	bl	b6194 <__aeabi_dsub>
   b591a:	a375      	add	r3, pc, #468	; (adr r3, b5af0 <__ieee754_pow+0x8c8>)
   b591c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5920:	f000 fdf0 	bl	b6504 <__aeabi_dmul>
   b5924:	a374      	add	r3, pc, #464	; (adr r3, b5af8 <__ieee754_pow+0x8d0>)
   b5926:	e9d3 2300 	ldrd	r2, r3, [r3]
   b592a:	4604      	mov	r4, r0
   b592c:	460d      	mov	r5, r1
   b592e:	4640      	mov	r0, r8
   b5930:	4649      	mov	r1, r9
   b5932:	f000 fde7 	bl	b6504 <__aeabi_dmul>
   b5936:	4602      	mov	r2, r0
   b5938:	460b      	mov	r3, r1
   b593a:	4620      	mov	r0, r4
   b593c:	4629      	mov	r1, r5
   b593e:	f000 fc2b 	bl	b6198 <__adddf3>
   b5942:	4606      	mov	r6, r0
   b5944:	460f      	mov	r7, r1
   b5946:	4632      	mov	r2, r6
   b5948:	463b      	mov	r3, r7
   b594a:	4650      	mov	r0, sl
   b594c:	4659      	mov	r1, fp
   b594e:	f000 fc23 	bl	b6198 <__adddf3>
   b5952:	4652      	mov	r2, sl
   b5954:	465b      	mov	r3, fp
   b5956:	4604      	mov	r4, r0
   b5958:	460d      	mov	r5, r1
   b595a:	f000 fc1b 	bl	b6194 <__aeabi_dsub>
   b595e:	4602      	mov	r2, r0
   b5960:	460b      	mov	r3, r1
   b5962:	4630      	mov	r0, r6
   b5964:	4639      	mov	r1, r7
   b5966:	f000 fc15 	bl	b6194 <__aeabi_dsub>
   b596a:	4622      	mov	r2, r4
   b596c:	4680      	mov	r8, r0
   b596e:	4689      	mov	r9, r1
   b5970:	462b      	mov	r3, r5
   b5972:	4620      	mov	r0, r4
   b5974:	4629      	mov	r1, r5
   b5976:	f000 fdc5 	bl	b6504 <__aeabi_dmul>
   b597a:	a361      	add	r3, pc, #388	; (adr r3, b5b00 <__ieee754_pow+0x8d8>)
   b597c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5980:	4606      	mov	r6, r0
   b5982:	460f      	mov	r7, r1
   b5984:	f000 fdbe 	bl	b6504 <__aeabi_dmul>
   b5988:	a35f      	add	r3, pc, #380	; (adr r3, b5b08 <__ieee754_pow+0x8e0>)
   b598a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b598e:	f000 fc01 	bl	b6194 <__aeabi_dsub>
   b5992:	4632      	mov	r2, r6
   b5994:	463b      	mov	r3, r7
   b5996:	f000 fdb5 	bl	b6504 <__aeabi_dmul>
   b599a:	a35d      	add	r3, pc, #372	; (adr r3, b5b10 <__ieee754_pow+0x8e8>)
   b599c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b59a0:	f000 fbfa 	bl	b6198 <__adddf3>
   b59a4:	4632      	mov	r2, r6
   b59a6:	463b      	mov	r3, r7
   b59a8:	f000 fdac 	bl	b6504 <__aeabi_dmul>
   b59ac:	a35a      	add	r3, pc, #360	; (adr r3, b5b18 <__ieee754_pow+0x8f0>)
   b59ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   b59b2:	f000 fbef 	bl	b6194 <__aeabi_dsub>
   b59b6:	4632      	mov	r2, r6
   b59b8:	463b      	mov	r3, r7
   b59ba:	f000 fda3 	bl	b6504 <__aeabi_dmul>
   b59be:	a358      	add	r3, pc, #352	; (adr r3, b5b20 <__ieee754_pow+0x8f8>)
   b59c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b59c4:	f000 fbe8 	bl	b6198 <__adddf3>
   b59c8:	4632      	mov	r2, r6
   b59ca:	463b      	mov	r3, r7
   b59cc:	f000 fd9a 	bl	b6504 <__aeabi_dmul>
   b59d0:	4602      	mov	r2, r0
   b59d2:	460b      	mov	r3, r1
   b59d4:	4620      	mov	r0, r4
   b59d6:	4629      	mov	r1, r5
   b59d8:	f000 fbdc 	bl	b6194 <__aeabi_dsub>
   b59dc:	4606      	mov	r6, r0
   b59de:	460f      	mov	r7, r1
   b59e0:	4632      	mov	r2, r6
   b59e2:	463b      	mov	r3, r7
   b59e4:	4620      	mov	r0, r4
   b59e6:	4629      	mov	r1, r5
   b59e8:	f000 fd8c 	bl	b6504 <__aeabi_dmul>
   b59ec:	4602      	mov	r2, r0
   b59ee:	460b      	mov	r3, r1
   b59f0:	4630      	mov	r0, r6
   b59f2:	4639      	mov	r1, r7
   b59f4:	4616      	mov	r6, r2
   b59f6:	461f      	mov	r7, r3
   b59f8:	2200      	movs	r2, #0
   b59fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b59fe:	f000 fbc9 	bl	b6194 <__aeabi_dsub>
   b5a02:	4602      	mov	r2, r0
   b5a04:	460b      	mov	r3, r1
   b5a06:	4630      	mov	r0, r6
   b5a08:	4639      	mov	r1, r7
   b5a0a:	f000 fea5 	bl	b6758 <__aeabi_ddiv>
   b5a0e:	4642      	mov	r2, r8
   b5a10:	4606      	mov	r6, r0
   b5a12:	460f      	mov	r7, r1
   b5a14:	464b      	mov	r3, r9
   b5a16:	4620      	mov	r0, r4
   b5a18:	4629      	mov	r1, r5
   b5a1a:	f000 fd73 	bl	b6504 <__aeabi_dmul>
   b5a1e:	4642      	mov	r2, r8
   b5a20:	464b      	mov	r3, r9
   b5a22:	f000 fbb9 	bl	b6198 <__adddf3>
   b5a26:	4602      	mov	r2, r0
   b5a28:	460b      	mov	r3, r1
   b5a2a:	4630      	mov	r0, r6
   b5a2c:	4639      	mov	r1, r7
   b5a2e:	f000 fbb1 	bl	b6194 <__aeabi_dsub>
   b5a32:	4622      	mov	r2, r4
   b5a34:	462b      	mov	r3, r5
   b5a36:	f000 fbad 	bl	b6194 <__aeabi_dsub>
   b5a3a:	4602      	mov	r2, r0
   b5a3c:	460b      	mov	r3, r1
   b5a3e:	2000      	movs	r0, #0
   b5a40:	4941      	ldr	r1, [pc, #260]	; (b5b48 <__ieee754_pow+0x920>)
   b5a42:	f000 fba7 	bl	b6194 <__aeabi_dsub>
   b5a46:	9a02      	ldr	r2, [sp, #8]
   b5a48:	460b      	mov	r3, r1
   b5a4a:	4413      	add	r3, r2
   b5a4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   b5a50:	f2c0 8143 	blt.w	b5cda <__ieee754_pow+0xab2>
   b5a54:	4619      	mov	r1, r3
   b5a56:	ec53 2b18 	vmov	r2, r3, d8
   b5a5a:	f000 fd53 	bl	b6504 <__aeabi_dmul>
   b5a5e:	ec41 0b10 	vmov	d0, r0, r1
   b5a62:	e42d      	b.n	b52c0 <__ieee754_pow+0x98>
   b5a64:	f1bb 0f00 	cmp.w	fp, #0
   b5a68:	f6ff aca0 	blt.w	b53ac <__ieee754_pow+0x184>
   b5a6c:	ed9f 0b2e 	vldr	d0, [pc, #184]	; b5b28 <__ieee754_pow+0x900>
   b5a70:	e426      	b.n	b52c0 <__ieee754_pow+0x98>
   b5a72:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b5b50 <__ieee754_pow+0x928>
   b5a76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b5a7a:	4563      	cmp	r3, ip
   b5a7c:	f340 80e7 	ble.w	b5c4e <__ieee754_pow+0xa26>
   b5a80:	4b32      	ldr	r3, [pc, #200]	; (b5b4c <__ieee754_pow+0x924>)
   b5a82:	440b      	add	r3, r1
   b5a84:	4303      	orrs	r3, r0
   b5a86:	d10a      	bne.n	b5a9e <__ieee754_pow+0x876>
   b5a88:	4622      	mov	r2, r4
   b5a8a:	462b      	mov	r3, r5
   b5a8c:	f000 fb82 	bl	b6194 <__aeabi_dsub>
   b5a90:	4632      	mov	r2, r6
   b5a92:	463b      	mov	r3, r7
   b5a94:	f000 ffbc 	bl	b6a10 <__aeabi_dcmpge>
   b5a98:	2800      	cmp	r0, #0
   b5a9a:	f43f aef3 	beq.w	b5884 <__ieee754_pow+0x65c>
   b5a9e:	a324      	add	r3, pc, #144	; (adr r3, b5b30 <__ieee754_pow+0x908>)
   b5aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5aa4:	ec51 0b18 	vmov	r0, r1, d8
   b5aa8:	f000 fd2c 	bl	b6504 <__aeabi_dmul>
   b5aac:	a320      	add	r3, pc, #128	; (adr r3, b5b30 <__ieee754_pow+0x908>)
   b5aae:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5ab2:	f000 fd27 	bl	b6504 <__aeabi_dmul>
   b5ab6:	ec41 0b10 	vmov	d0, r0, r1
   b5aba:	e401      	b.n	b52c0 <__ieee754_pow+0x98>
   b5abc:	ed9f 7b1e 	vldr	d7, [pc, #120]	; b5b38 <__ieee754_pow+0x910>
   b5ac0:	eeb0 8a47 	vmov.f32	s16, s14
   b5ac4:	eef0 8a67 	vmov.f32	s17, s15
   b5ac8:	e686      	b.n	b57d8 <__ieee754_pow+0x5b0>
   b5aca:	f1bb 0f00 	cmp.w	fp, #0
   b5ace:	dacd      	bge.n	b5a6c <__ieee754_pow+0x844>
   b5ad0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b5ad4:	ee00 6a10 	vmov	s0, r6
   b5ad8:	ee00 3a90 	vmov	s1, r3
   b5adc:	f7ff bbf0 	b.w	b52c0 <__ieee754_pow+0x98>
   b5ae0:	652b82fe 	.word	0x652b82fe
   b5ae4:	3c971547 	.word	0x3c971547
   b5ae8:	00000000 	.word	0x00000000
   b5aec:	3fe62e43 	.word	0x3fe62e43
   b5af0:	fefa39ef 	.word	0xfefa39ef
   b5af4:	3fe62e42 	.word	0x3fe62e42
   b5af8:	0ca86c39 	.word	0x0ca86c39
   b5afc:	be205c61 	.word	0xbe205c61
   b5b00:	72bea4d0 	.word	0x72bea4d0
   b5b04:	3e663769 	.word	0x3e663769
   b5b08:	c5d26bf1 	.word	0xc5d26bf1
   b5b0c:	3ebbbd41 	.word	0x3ebbbd41
   b5b10:	af25de2c 	.word	0xaf25de2c
   b5b14:	3f11566a 	.word	0x3f11566a
   b5b18:	16bebd93 	.word	0x16bebd93
   b5b1c:	3f66c16c 	.word	0x3f66c16c
   b5b20:	5555553e 	.word	0x5555553e
   b5b24:	3fc55555 	.word	0x3fc55555
	...
   b5b30:	c2f8f359 	.word	0xc2f8f359
   b5b34:	01a56e1f 	.word	0x01a56e1f
   b5b38:	00000000 	.word	0x00000000
   b5b3c:	3ff00000 	.word	0x3ff00000
   b5b40:	408fffff 	.word	0x408fffff
   b5b44:	000fffff 	.word	0x000fffff
   b5b48:	3ff00000 	.word	0x3ff00000
   b5b4c:	3f6f3400 	.word	0x3f6f3400
   b5b50:	4090cbff 	.word	0x4090cbff
   b5b54:	4598      	cmp	r8, r3
   b5b56:	db85      	blt.n	b5a64 <__ieee754_pow+0x83c>
   b5b58:	4b7d      	ldr	r3, [pc, #500]	; (b5d50 <__ieee754_pow+0xb28>)
   b5b5a:	4598      	cmp	r8, r3
   b5b5c:	f73f ac22 	bgt.w	b53a4 <__ieee754_pow+0x17c>
   b5b60:	ec51 0b10 	vmov	r0, r1, d0
   b5b64:	4b7a      	ldr	r3, [pc, #488]	; (b5d50 <__ieee754_pow+0xb28>)
   b5b66:	2200      	movs	r2, #0
   b5b68:	f000 fb14 	bl	b6194 <__aeabi_dsub>
   b5b6c:	a368      	add	r3, pc, #416	; (adr r3, b5d10 <__ieee754_pow+0xae8>)
   b5b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5b72:	4604      	mov	r4, r0
   b5b74:	460d      	mov	r5, r1
   b5b76:	f000 fcc5 	bl	b6504 <__aeabi_dmul>
   b5b7a:	a367      	add	r3, pc, #412	; (adr r3, b5d18 <__ieee754_pow+0xaf0>)
   b5b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5b80:	4682      	mov	sl, r0
   b5b82:	468b      	mov	fp, r1
   b5b84:	4620      	mov	r0, r4
   b5b86:	4629      	mov	r1, r5
   b5b88:	f000 fcbc 	bl	b6504 <__aeabi_dmul>
   b5b8c:	4b71      	ldr	r3, [pc, #452]	; (b5d54 <__ieee754_pow+0xb2c>)
   b5b8e:	ec41 0b18 	vmov	d8, r0, r1
   b5b92:	2200      	movs	r2, #0
   b5b94:	4620      	mov	r0, r4
   b5b96:	4629      	mov	r1, r5
   b5b98:	f000 fcb4 	bl	b6504 <__aeabi_dmul>
   b5b9c:	4602      	mov	r2, r0
   b5b9e:	460b      	mov	r3, r1
   b5ba0:	a15f      	add	r1, pc, #380	; (adr r1, b5d20 <__ieee754_pow+0xaf8>)
   b5ba2:	e9d1 0100 	ldrd	r0, r1, [r1]
   b5ba6:	f000 faf5 	bl	b6194 <__aeabi_dsub>
   b5baa:	4622      	mov	r2, r4
   b5bac:	462b      	mov	r3, r5
   b5bae:	f000 fca9 	bl	b6504 <__aeabi_dmul>
   b5bb2:	4602      	mov	r2, r0
   b5bb4:	460b      	mov	r3, r1
   b5bb6:	2000      	movs	r0, #0
   b5bb8:	4967      	ldr	r1, [pc, #412]	; (b5d58 <__ieee754_pow+0xb30>)
   b5bba:	f000 faeb 	bl	b6194 <__aeabi_dsub>
   b5bbe:	4622      	mov	r2, r4
   b5bc0:	4680      	mov	r8, r0
   b5bc2:	4689      	mov	r9, r1
   b5bc4:	462b      	mov	r3, r5
   b5bc6:	4620      	mov	r0, r4
   b5bc8:	4629      	mov	r1, r5
   b5bca:	f000 fc9b 	bl	b6504 <__aeabi_dmul>
   b5bce:	4602      	mov	r2, r0
   b5bd0:	460b      	mov	r3, r1
   b5bd2:	4640      	mov	r0, r8
   b5bd4:	4649      	mov	r1, r9
   b5bd6:	f000 fc95 	bl	b6504 <__aeabi_dmul>
   b5bda:	a353      	add	r3, pc, #332	; (adr r3, b5d28 <__ieee754_pow+0xb00>)
   b5bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5be0:	f000 fc90 	bl	b6504 <__aeabi_dmul>
   b5be4:	4602      	mov	r2, r0
   b5be6:	460b      	mov	r3, r1
   b5be8:	ec51 0b18 	vmov	r0, r1, d8
   b5bec:	f000 fad2 	bl	b6194 <__aeabi_dsub>
   b5bf0:	4680      	mov	r8, r0
   b5bf2:	4689      	mov	r9, r1
   b5bf4:	4642      	mov	r2, r8
   b5bf6:	464b      	mov	r3, r9
   b5bf8:	4650      	mov	r0, sl
   b5bfa:	4659      	mov	r1, fp
   b5bfc:	f000 facc 	bl	b6198 <__adddf3>
   b5c00:	2000      	movs	r0, #0
   b5c02:	4652      	mov	r2, sl
   b5c04:	465b      	mov	r3, fp
   b5c06:	4604      	mov	r4, r0
   b5c08:	460d      	mov	r5, r1
   b5c0a:	e591      	b.n	b5730 <__ieee754_pow+0x508>
   b5c0c:	4622      	mov	r2, r4
   b5c0e:	462b      	mov	r3, r5
   b5c10:	4620      	mov	r0, r4
   b5c12:	4629      	mov	r1, r5
   b5c14:	f000 fc76 	bl	b6504 <__aeabi_dmul>
   b5c18:	ec41 0b10 	vmov	d0, r0, r1
   b5c1c:	f7ff bb50 	b.w	b52c0 <__ieee754_pow+0x98>
   b5c20:	494b      	ldr	r1, [pc, #300]	; (b5d50 <__ieee754_pow+0xb28>)
   b5c22:	2000      	movs	r0, #0
   b5c24:	4622      	mov	r2, r4
   b5c26:	462b      	mov	r3, r5
   b5c28:	f000 fd96 	bl	b6758 <__aeabi_ddiv>
   b5c2c:	ec41 0b10 	vmov	d0, r0, r1
   b5c30:	f7ff bb46 	b.w	b52c0 <__ieee754_pow+0x98>
   b5c34:	2b00      	cmp	r3, #0
   b5c36:	d144      	bne.n	b5cc2 <__ieee754_pow+0xa9a>
   b5c38:	f1c1 0114 	rsb	r1, r1, #20
   b5c3c:	fa4a f001 	asr.w	r0, sl, r1
   b5c40:	fa00 f101 	lsl.w	r1, r0, r1
   b5c44:	4551      	cmp	r1, sl
   b5c46:	d05a      	beq.n	b5cfe <__ieee754_pow+0xad6>
   b5c48:	9300      	str	r3, [sp, #0]
   b5c4a:	f7ff bb17 	b.w	b527c <__ieee754_pow+0x54>
   b5c4e:	4a42      	ldr	r2, [pc, #264]	; (b5d58 <__ieee754_pow+0xb30>)
   b5c50:	4293      	cmp	r3, r2
   b5c52:	dc5b      	bgt.n	b5d0c <__ieee754_pow+0xae4>
   b5c54:	e9dd 1200 	ldrd	r1, r2, [sp]
   b5c58:	9102      	str	r1, [sp, #8]
   b5c5a:	9100      	str	r1, [sp, #0]
   b5c5c:	e646      	b.n	b58ec <__ieee754_pow+0x6c4>
   b5c5e:	a334      	add	r3, pc, #208	; (adr r3, b5d30 <__ieee754_pow+0xb08>)
   b5c60:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5c64:	ec51 0b18 	vmov	r0, r1, d8
   b5c68:	f000 fc4c 	bl	b6504 <__aeabi_dmul>
   b5c6c:	a330      	add	r3, pc, #192	; (adr r3, b5d30 <__ieee754_pow+0xb08>)
   b5c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5c72:	f000 fc47 	bl	b6504 <__aeabi_dmul>
   b5c76:	ec41 0b10 	vmov	d0, r0, r1
   b5c7a:	f7ff bb21 	b.w	b52c0 <__ieee754_pow+0x98>
   b5c7e:	9b00      	ldr	r3, [sp, #0]
   b5c80:	2b01      	cmp	r3, #1
   b5c82:	f47f ab1d 	bne.w	b52c0 <__ieee754_pow+0x98>
   b5c86:	ee10 1a90 	vmov	r1, s1
   b5c8a:	ee10 2a10 	vmov	r2, s0
   b5c8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b5c92:	ec43 2b10 	vmov	d0, r2, r3
   b5c96:	f7ff bb13 	b.w	b52c0 <__ieee754_pow+0x98>
   b5c9a:	ed9f 7b27 	vldr	d7, [pc, #156]	; b5d38 <__ieee754_pow+0xb10>
   b5c9e:	eeb0 ca47 	vmov.f32	s24, s14
   b5ca2:	eef0 ca67 	vmov.f32	s25, s15
   b5ca6:	ed9f 7b26 	vldr	d7, [pc, #152]	; b5d40 <__ieee754_pow+0xb18>
   b5caa:	eeb0 da47 	vmov.f32	s26, s14
   b5cae:	eef0 da67 	vmov.f32	s27, s15
   b5cb2:	ed9f 7b25 	vldr	d7, [pc, #148]	; b5d48 <__ieee754_pow+0xb20>
   b5cb6:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   b5cba:	ec53 2b17 	vmov	r2, r3, d7
   b5cbe:	f7ff bbeb 	b.w	b5498 <__ieee754_pow+0x270>
   b5cc2:	ec45 4b10 	vmov	d0, r4, r5
   b5cc6:	9200      	str	r2, [sp, #0]
   b5cc8:	f000 f914 	bl	b5ef4 <fabs>
   b5ccc:	9a00      	ldr	r2, [sp, #0]
   b5cce:	2a00      	cmp	r2, #0
   b5cd0:	f47f ab92 	bne.w	b53f8 <__ieee754_pow+0x1d0>
   b5cd4:	9200      	str	r2, [sp, #0]
   b5cd6:	f7ff bb26 	b.w	b5326 <__ieee754_pow+0xfe>
   b5cda:	ec41 0b10 	vmov	d0, r0, r1
   b5cde:	9800      	ldr	r0, [sp, #0]
   b5ce0:	f000 f9c2 	bl	b6068 <scalbn>
   b5ce4:	ec51 0b10 	vmov	r0, r1, d0
   b5ce8:	e6b5      	b.n	b5a56 <__ieee754_pow+0x82e>
   b5cea:	f000 0001 	and.w	r0, r0, #1
   b5cee:	f1c0 0102 	rsb	r1, r0, #2
   b5cf2:	9100      	str	r1, [sp, #0]
   b5cf4:	2b00      	cmp	r3, #0
   b5cf6:	f43f aac1 	beq.w	b527c <__ieee754_pow+0x54>
   b5cfa:	f7ff bb0d 	b.w	b5318 <__ieee754_pow+0xf0>
   b5cfe:	f000 0001 	and.w	r0, r0, #1
   b5d02:	f1c0 0302 	rsb	r3, r0, #2
   b5d06:	9300      	str	r3, [sp, #0]
   b5d08:	f7ff bab8 	b.w	b527c <__ieee754_pow+0x54>
   b5d0c:	151b      	asrs	r3, r3, #20
   b5d0e:	e5bb      	b.n	b5888 <__ieee754_pow+0x660>
   b5d10:	60000000 	.word	0x60000000
   b5d14:	3ff71547 	.word	0x3ff71547
   b5d18:	f85ddf44 	.word	0xf85ddf44
   b5d1c:	3e54ae0b 	.word	0x3e54ae0b
   b5d20:	55555555 	.word	0x55555555
   b5d24:	3fd55555 	.word	0x3fd55555
   b5d28:	652b82fe 	.word	0x652b82fe
   b5d2c:	3ff71547 	.word	0x3ff71547
   b5d30:	8800759c 	.word	0x8800759c
   b5d34:	7e37e43c 	.word	0x7e37e43c
   b5d38:	40000000 	.word	0x40000000
   b5d3c:	3fe2b803 	.word	0x3fe2b803
   b5d40:	43cfd006 	.word	0x43cfd006
   b5d44:	3e4cfdeb 	.word	0x3e4cfdeb
   b5d48:	00000000 	.word	0x00000000
   b5d4c:	3ff80000 	.word	0x3ff80000
   b5d50:	3ff00000 	.word	0x3ff00000
   b5d54:	3fd00000 	.word	0x3fd00000
   b5d58:	3fe00000 	.word	0x3fe00000

000b5d5c <__ieee754_sqrt>:
   b5d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5d60:	4a63      	ldr	r2, [pc, #396]	; (b5ef0 <__ieee754_sqrt+0x194>)
   b5d62:	ec55 4b10 	vmov	r4, r5, d0
   b5d66:	43aa      	bics	r2, r5
   b5d68:	f000 809f 	beq.w	b5eaa <__ieee754_sqrt+0x14e>
   b5d6c:	2d00      	cmp	r5, #0
   b5d6e:	ee10 ca10 	vmov	ip, s0
   b5d72:	462b      	mov	r3, r5
   b5d74:	dd54      	ble.n	b5e20 <__ieee754_sqrt+0xc4>
   b5d76:	1529      	asrs	r1, r5, #20
   b5d78:	d063      	beq.n	b5e42 <__ieee754_sqrt+0xe6>
   b5d7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b5d7e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b5d82:	07c9      	lsls	r1, r1, #31
   b5d84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b5d88:	d404      	bmi.n	b5d94 <__ieee754_sqrt+0x38>
   b5d8a:	005b      	lsls	r3, r3, #1
   b5d8c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b5d90:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b5d94:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b5d98:	2600      	movs	r6, #0
   b5d9a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b5d9e:	107f      	asrs	r7, r7, #1
   b5da0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b5da4:	f04f 0e16 	mov.w	lr, #22
   b5da8:	4634      	mov	r4, r6
   b5daa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b5dae:	18a1      	adds	r1, r4, r2
   b5db0:	4299      	cmp	r1, r3
   b5db2:	dc02      	bgt.n	b5dba <__ieee754_sqrt+0x5e>
   b5db4:	1a5b      	subs	r3, r3, r1
   b5db6:	188c      	adds	r4, r1, r2
   b5db8:	4416      	add	r6, r2
   b5dba:	005b      	lsls	r3, r3, #1
   b5dbc:	f1be 0e01 	subs.w	lr, lr, #1
   b5dc0:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b5dc4:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b5dc8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b5dcc:	d1ef      	bne.n	b5dae <__ieee754_sqrt+0x52>
   b5dce:	4675      	mov	r5, lr
   b5dd0:	2020      	movs	r0, #32
   b5dd2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b5dd6:	e00a      	b.n	b5dee <__ieee754_sqrt+0x92>
   b5dd8:	d044      	beq.n	b5e64 <__ieee754_sqrt+0x108>
   b5dda:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b5dde:	3801      	subs	r0, #1
   b5de0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b5de4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b5de8:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b5dec:	d043      	beq.n	b5e76 <__ieee754_sqrt+0x11a>
   b5dee:	42a3      	cmp	r3, r4
   b5df0:	eb02 010e 	add.w	r1, r2, lr
   b5df4:	ddf0      	ble.n	b5dd8 <__ieee754_sqrt+0x7c>
   b5df6:	2900      	cmp	r1, #0
   b5df8:	eb01 0e02 	add.w	lr, r1, r2
   b5dfc:	db0a      	blt.n	b5e14 <__ieee754_sqrt+0xb8>
   b5dfe:	46a0      	mov	r8, r4
   b5e00:	1b1b      	subs	r3, r3, r4
   b5e02:	4561      	cmp	r1, ip
   b5e04:	bf88      	it	hi
   b5e06:	f103 33ff 	addhi.w	r3, r3, #4294967295
   b5e0a:	ebac 0c01 	sub.w	ip, ip, r1
   b5e0e:	4415      	add	r5, r2
   b5e10:	4644      	mov	r4, r8
   b5e12:	e7e2      	b.n	b5dda <__ieee754_sqrt+0x7e>
   b5e14:	f1be 0f00 	cmp.w	lr, #0
   b5e18:	dbf1      	blt.n	b5dfe <__ieee754_sqrt+0xa2>
   b5e1a:	f104 0801 	add.w	r8, r4, #1
   b5e1e:	e7ef      	b.n	b5e00 <__ieee754_sqrt+0xa4>
   b5e20:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b5e24:	4322      	orrs	r2, r4
   b5e26:	d038      	beq.n	b5e9a <__ieee754_sqrt+0x13e>
   b5e28:	2d00      	cmp	r5, #0
   b5e2a:	d14e      	bne.n	b5eca <__ieee754_sqrt+0x16e>
   b5e2c:	4629      	mov	r1, r5
   b5e2e:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b5e32:	3915      	subs	r1, #21
   b5e34:	4613      	mov	r3, r2
   b5e36:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b5e3a:	2a00      	cmp	r2, #0
   b5e3c:	d0f7      	beq.n	b5e2e <__ieee754_sqrt+0xd2>
   b5e3e:	02d6      	lsls	r6, r2, #11
   b5e40:	d450      	bmi.n	b5ee4 <__ieee754_sqrt+0x188>
   b5e42:	2000      	movs	r0, #0
   b5e44:	005b      	lsls	r3, r3, #1
   b5e46:	02dd      	lsls	r5, r3, #11
   b5e48:	4604      	mov	r4, r0
   b5e4a:	f100 0001 	add.w	r0, r0, #1
   b5e4e:	d5f9      	bpl.n	b5e44 <__ieee754_sqrt+0xe8>
   b5e50:	461a      	mov	r2, r3
   b5e52:	4663      	mov	r3, ip
   b5e54:	fa0c fc00 	lsl.w	ip, ip, r0
   b5e58:	f1c0 0020 	rsb	r0, r0, #32
   b5e5c:	40c3      	lsrs	r3, r0
   b5e5e:	1b09      	subs	r1, r1, r4
   b5e60:	4313      	orrs	r3, r2
   b5e62:	e78a      	b.n	b5d7a <__ieee754_sqrt+0x1e>
   b5e64:	4561      	cmp	r1, ip
   b5e66:	d8b8      	bhi.n	b5dda <__ieee754_sqrt+0x7e>
   b5e68:	2900      	cmp	r1, #0
   b5e6a:	eb01 0e02 	add.w	lr, r1, r2
   b5e6e:	dbd1      	blt.n	b5e14 <__ieee754_sqrt+0xb8>
   b5e70:	4698      	mov	r8, r3
   b5e72:	2300      	movs	r3, #0
   b5e74:	e7c9      	b.n	b5e0a <__ieee754_sqrt+0xae>
   b5e76:	ea53 030c 	orrs.w	r3, r3, ip
   b5e7a:	d110      	bne.n	b5e9e <__ieee754_sqrt+0x142>
   b5e7c:	0868      	lsrs	r0, r5, #1
   b5e7e:	1071      	asrs	r1, r6, #1
   b5e80:	07f3      	lsls	r3, r6, #31
   b5e82:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b5e86:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b5e8a:	bf48      	it	mi
   b5e8c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b5e90:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b5e94:	4602      	mov	r2, r0
   b5e96:	ec43 2b10 	vmov	d0, r2, r3
   b5e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5e9e:	1c6a      	adds	r2, r5, #1
   b5ea0:	bf16      	itet	ne
   b5ea2:	1c68      	addne	r0, r5, #1
   b5ea4:	3601      	addeq	r6, #1
   b5ea6:	0840      	lsrne	r0, r0, #1
   b5ea8:	e7e9      	b.n	b5e7e <__ieee754_sqrt+0x122>
   b5eaa:	ee10 2a10 	vmov	r2, s0
   b5eae:	ee10 0a10 	vmov	r0, s0
   b5eb2:	462b      	mov	r3, r5
   b5eb4:	4629      	mov	r1, r5
   b5eb6:	f000 fb25 	bl	b6504 <__aeabi_dmul>
   b5eba:	4622      	mov	r2, r4
   b5ebc:	462b      	mov	r3, r5
   b5ebe:	f000 f96b 	bl	b6198 <__adddf3>
   b5ec2:	ec41 0b10 	vmov	d0, r0, r1
   b5ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5eca:	ee10 2a10 	vmov	r2, s0
   b5ece:	4620      	mov	r0, r4
   b5ed0:	4629      	mov	r1, r5
   b5ed2:	f000 f95f 	bl	b6194 <__aeabi_dsub>
   b5ed6:	4602      	mov	r2, r0
   b5ed8:	460b      	mov	r3, r1
   b5eda:	f000 fc3d 	bl	b6758 <__aeabi_ddiv>
   b5ede:	ec41 0b10 	vmov	d0, r0, r1
   b5ee2:	e7da      	b.n	b5e9a <__ieee754_sqrt+0x13e>
   b5ee4:	4663      	mov	r3, ip
   b5ee6:	2020      	movs	r0, #32
   b5ee8:	f04f 34ff 	mov.w	r4, #4294967295
   b5eec:	e7b6      	b.n	b5e5c <__ieee754_sqrt+0x100>
   b5eee:	bf00      	nop
   b5ef0:	7ff00000 	.word	0x7ff00000

000b5ef4 <fabs>:
   b5ef4:	ec51 0b10 	vmov	r0, r1, d0
   b5ef8:	ee10 2a10 	vmov	r2, s0
   b5efc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b5f00:	ec43 2b10 	vmov	d0, r2, r3
   b5f04:	4770      	bx	lr
   b5f06:	bf00      	nop

000b5f08 <finite>:
   b5f08:	b082      	sub	sp, #8
   b5f0a:	ed8d 0b00 	vstr	d0, [sp]
   b5f0e:	9801      	ldr	r0, [sp, #4]
   b5f10:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   b5f14:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   b5f18:	0fc0      	lsrs	r0, r0, #31
   b5f1a:	b002      	add	sp, #8
   b5f1c:	4770      	bx	lr
   b5f1e:	bf00      	nop

000b5f20 <nan>:
   b5f20:	ed9f 0b01 	vldr	d0, [pc, #4]	; b5f28 <nan+0x8>
   b5f24:	4770      	bx	lr
   b5f26:	bf00      	nop
   b5f28:	00000000 	.word	0x00000000
   b5f2c:	7ff80000 	.word	0x7ff80000

000b5f30 <rint>:
   b5f30:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5f32:	ec53 2b10 	vmov	r2, r3, d0
   b5f36:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   b5f3a:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   b5f3e:	2913      	cmp	r1, #19
   b5f40:	ee10 0a10 	vmov	r0, s0
   b5f44:	b083      	sub	sp, #12
   b5f46:	461c      	mov	r4, r3
   b5f48:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   b5f4c:	dc3a      	bgt.n	b5fc4 <rint+0x94>
   b5f4e:	2900      	cmp	r1, #0
   b5f50:	db30      	blt.n	b5fb4 <rint+0x84>
   b5f52:	4d42      	ldr	r5, [pc, #264]	; (b605c <rint+0x12c>)
   b5f54:	fa45 fc01 	asr.w	ip, r5, r1
   b5f58:	ea03 050c 	and.w	r5, r3, ip
   b5f5c:	4315      	orrs	r5, r2
   b5f5e:	d02d      	beq.n	b5fbc <rint+0x8c>
   b5f60:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   b5f64:	4318      	orrs	r0, r3
   b5f66:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   b5f6a:	d00c      	beq.n	b5f86 <rint+0x56>
   b5f6c:	ea24 0c0c 	bic.w	ip, r4, ip
   b5f70:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   b5f74:	2913      	cmp	r1, #19
   b5f76:	fa44 f101 	asr.w	r1, r4, r1
   b5f7a:	bf0c      	ite	eq
   b5f7c:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   b5f80:	2000      	movne	r0, #0
   b5f82:	ea4c 0401 	orr.w	r4, ip, r1
   b5f86:	4936      	ldr	r1, [pc, #216]	; (b6060 <rint+0x130>)
   b5f88:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   b5f8c:	4623      	mov	r3, r4
   b5f8e:	e9de 4500 	ldrd	r4, r5, [lr]
   b5f92:	4602      	mov	r2, r0
   b5f94:	4629      	mov	r1, r5
   b5f96:	4620      	mov	r0, r4
   b5f98:	f000 f8fe 	bl	b6198 <__adddf3>
   b5f9c:	e9cd 0100 	strd	r0, r1, [sp]
   b5fa0:	e9dd 0100 	ldrd	r0, r1, [sp]
   b5fa4:	4622      	mov	r2, r4
   b5fa6:	462b      	mov	r3, r5
   b5fa8:	f000 f8f4 	bl	b6194 <__aeabi_dsub>
   b5fac:	ec41 0b10 	vmov	d0, r0, r1
   b5fb0:	b003      	add	sp, #12
   b5fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5fb4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   b5fb8:	4311      	orrs	r1, r2
   b5fba:	d124      	bne.n	b6006 <rint+0xd6>
   b5fbc:	ec43 2b10 	vmov	d0, r2, r3
   b5fc0:	b003      	add	sp, #12
   b5fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5fc4:	2933      	cmp	r1, #51	; 0x33
   b5fc6:	dd08      	ble.n	b5fda <rint+0xaa>
   b5fc8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   b5fcc:	d1f6      	bne.n	b5fbc <rint+0x8c>
   b5fce:	4619      	mov	r1, r3
   b5fd0:	f000 f8e2 	bl	b6198 <__adddf3>
   b5fd4:	ec41 0b10 	vmov	d0, r0, r1
   b5fd8:	e7f2      	b.n	b5fc0 <rint+0x90>
   b5fda:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   b5fde:	f04f 31ff 	mov.w	r1, #4294967295
   b5fe2:	fa21 f10c 	lsr.w	r1, r1, ip
   b5fe6:	420a      	tst	r2, r1
   b5fe8:	d0e8      	beq.n	b5fbc <rint+0x8c>
   b5fea:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   b5fee:	ea4f 0351 	mov.w	r3, r1, lsr #1
   b5ff2:	d0c8      	beq.n	b5f86 <rint+0x56>
   b5ff4:	ea20 0303 	bic.w	r3, r0, r3
   b5ff8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b5ffc:	fa40 fc0c 	asr.w	ip, r0, ip
   b6000:	ea43 000c 	orr.w	r0, r3, ip
   b6004:	e7bf      	b.n	b5f86 <rint+0x56>
   b6006:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b600a:	4318      	orrs	r0, r3
   b600c:	4a14      	ldr	r2, [pc, #80]	; (b6060 <rint+0x130>)
   b600e:	4243      	negs	r3, r0
   b6010:	4303      	orrs	r3, r0
   b6012:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   b6016:	0b1b      	lsrs	r3, r3, #12
   b6018:	0c62      	lsrs	r2, r4, #17
   b601a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   b601e:	0452      	lsls	r2, r2, #17
   b6020:	ea43 0702 	orr.w	r7, r3, r2
   b6024:	463b      	mov	r3, r7
   b6026:	e9de 6700 	ldrd	r6, r7, [lr]
   b602a:	ee10 2a10 	vmov	r2, s0
   b602e:	4630      	mov	r0, r6
   b6030:	4639      	mov	r1, r7
   b6032:	f000 f8b1 	bl	b6198 <__adddf3>
   b6036:	e9cd 0100 	strd	r0, r1, [sp]
   b603a:	4632      	mov	r2, r6
   b603c:	463b      	mov	r3, r7
   b603e:	e9dd 0100 	ldrd	r0, r1, [sp]
   b6042:	f000 f8a7 	bl	b6194 <__aeabi_dsub>
   b6046:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   b604a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b604e:	4602      	mov	r2, r0
   b6050:	ea41 0304 	orr.w	r3, r1, r4
   b6054:	ec43 2b10 	vmov	d0, r2, r3
   b6058:	b003      	add	sp, #12
   b605a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b605c:	000fffff 	.word	0x000fffff
   b6060:	000b6e28 	.word	0x000b6e28
   b6064:	00000000 	.word	0x00000000

000b6068 <scalbn>:
   b6068:	b538      	push	{r3, r4, r5, lr}
   b606a:	ec53 2b10 	vmov	r2, r3, d0
   b606e:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b6072:	4604      	mov	r4, r0
   b6074:	469c      	mov	ip, r3
   b6076:	bb89      	cbnz	r1, b60dc <scalbn+0x74>
   b6078:	ee10 1a10 	vmov	r1, s0
   b607c:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b6080:	ea5c 0101 	orrs.w	r1, ip, r1
   b6084:	d029      	beq.n	b60da <scalbn+0x72>
   b6086:	4619      	mov	r1, r3
   b6088:	2200      	movs	r2, #0
   b608a:	4b3d      	ldr	r3, [pc, #244]	; (b6180 <scalbn+0x118>)
   b608c:	4d3d      	ldr	r5, [pc, #244]	; (b6184 <scalbn+0x11c>)
   b608e:	ee10 0a10 	vmov	r0, s0
   b6092:	f000 fa37 	bl	b6504 <__aeabi_dmul>
   b6096:	42ac      	cmp	r4, r5
   b6098:	4602      	mov	r2, r0
   b609a:	460b      	mov	r3, r1
   b609c:	db16      	blt.n	b60cc <scalbn+0x64>
   b609e:	468c      	mov	ip, r1
   b60a0:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b60a4:	3936      	subs	r1, #54	; 0x36
   b60a6:	4421      	add	r1, r4
   b60a8:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b60ac:	4281      	cmp	r1, r0
   b60ae:	dc21      	bgt.n	b60f4 <scalbn+0x8c>
   b60b0:	2900      	cmp	r1, #0
   b60b2:	dc47      	bgt.n	b6144 <scalbn+0xdc>
   b60b4:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b60b8:	da34      	bge.n	b6124 <scalbn+0xbc>
   b60ba:	f24c 3150 	movw	r1, #50000	; 0xc350
   b60be:	428c      	cmp	r4, r1
   b60c0:	dc18      	bgt.n	b60f4 <scalbn+0x8c>
   b60c2:	2b00      	cmp	r3, #0
   b60c4:	a126      	add	r1, pc, #152	; (adr r1, b6160 <scalbn+0xf8>)
   b60c6:	e9d1 0100 	ldrd	r0, r1, [r1]
   b60ca:	db44      	blt.n	b6156 <scalbn+0xee>
   b60cc:	a324      	add	r3, pc, #144	; (adr r3, b6160 <scalbn+0xf8>)
   b60ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   b60d2:	f000 fa17 	bl	b6504 <__aeabi_dmul>
   b60d6:	ec41 0b10 	vmov	d0, r0, r1
   b60da:	bd38      	pop	{r3, r4, r5, pc}
   b60dc:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b60e0:	4281      	cmp	r1, r0
   b60e2:	d1e0      	bne.n	b60a6 <scalbn+0x3e>
   b60e4:	ee10 0a10 	vmov	r0, s0
   b60e8:	4619      	mov	r1, r3
   b60ea:	f000 f855 	bl	b6198 <__adddf3>
   b60ee:	ec41 0b10 	vmov	d0, r0, r1
   b60f2:	bd38      	pop	{r3, r4, r5, pc}
   b60f4:	2b00      	cmp	r3, #0
   b60f6:	a11c      	add	r1, pc, #112	; (adr r1, b6168 <scalbn+0x100>)
   b60f8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b60fc:	db07      	blt.n	b610e <scalbn+0xa6>
   b60fe:	a31a      	add	r3, pc, #104	; (adr r3, b6168 <scalbn+0x100>)
   b6100:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6104:	f000 f9fe 	bl	b6504 <__aeabi_dmul>
   b6108:	ec41 0b10 	vmov	d0, r0, r1
   b610c:	bd38      	pop	{r3, r4, r5, pc}
   b610e:	a118      	add	r1, pc, #96	; (adr r1, b6170 <scalbn+0x108>)
   b6110:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6114:	a314      	add	r3, pc, #80	; (adr r3, b6168 <scalbn+0x100>)
   b6116:	e9d3 2300 	ldrd	r2, r3, [r3]
   b611a:	f000 f9f3 	bl	b6504 <__aeabi_dmul>
   b611e:	ec41 0b10 	vmov	d0, r0, r1
   b6122:	e7f3      	b.n	b610c <scalbn+0xa4>
   b6124:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b6128:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b612c:	3136      	adds	r1, #54	; 0x36
   b612e:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b6132:	4610      	mov	r0, r2
   b6134:	4619      	mov	r1, r3
   b6136:	2200      	movs	r2, #0
   b6138:	4b13      	ldr	r3, [pc, #76]	; (b6188 <scalbn+0x120>)
   b613a:	f000 f9e3 	bl	b6504 <__aeabi_dmul>
   b613e:	ec41 0b10 	vmov	d0, r0, r1
   b6142:	bd38      	pop	{r3, r4, r5, pc}
   b6144:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b6148:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b614c:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b6150:	ec43 2b10 	vmov	d0, r2, r3
   b6154:	bd38      	pop	{r3, r4, r5, pc}
   b6156:	a108      	add	r1, pc, #32	; (adr r1, b6178 <scalbn+0x110>)
   b6158:	e9d1 0100 	ldrd	r0, r1, [r1]
   b615c:	e7b6      	b.n	b60cc <scalbn+0x64>
   b615e:	bf00      	nop
   b6160:	c2f8f359 	.word	0xc2f8f359
   b6164:	01a56e1f 	.word	0x01a56e1f
   b6168:	8800759c 	.word	0x8800759c
   b616c:	7e37e43c 	.word	0x7e37e43c
   b6170:	8800759c 	.word	0x8800759c
   b6174:	fe37e43c 	.word	0xfe37e43c
   b6178:	c2f8f359 	.word	0xc2f8f359
   b617c:	81a56e1f 	.word	0x81a56e1f
   b6180:	43500000 	.word	0x43500000
   b6184:	ffff3cb0 	.word	0xffff3cb0
   b6188:	3c900000 	.word	0x3c900000

000b618c <__aeabi_drsub>:
   b618c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b6190:	e002      	b.n	b6198 <__adddf3>
   b6192:	bf00      	nop

000b6194 <__aeabi_dsub>:
   b6194:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b6198 <__adddf3>:
   b6198:	b530      	push	{r4, r5, lr}
   b619a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b619e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b61a2:	ea94 0f05 	teq	r4, r5
   b61a6:	bf08      	it	eq
   b61a8:	ea90 0f02 	teqeq	r0, r2
   b61ac:	bf1f      	itttt	ne
   b61ae:	ea54 0c00 	orrsne.w	ip, r4, r0
   b61b2:	ea55 0c02 	orrsne.w	ip, r5, r2
   b61b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b61ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b61be:	f000 80e2 	beq.w	b6386 <__adddf3+0x1ee>
   b61c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b61c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b61ca:	bfb8      	it	lt
   b61cc:	426d      	neglt	r5, r5
   b61ce:	dd0c      	ble.n	b61ea <__adddf3+0x52>
   b61d0:	442c      	add	r4, r5
   b61d2:	ea80 0202 	eor.w	r2, r0, r2
   b61d6:	ea81 0303 	eor.w	r3, r1, r3
   b61da:	ea82 0000 	eor.w	r0, r2, r0
   b61de:	ea83 0101 	eor.w	r1, r3, r1
   b61e2:	ea80 0202 	eor.w	r2, r0, r2
   b61e6:	ea81 0303 	eor.w	r3, r1, r3
   b61ea:	2d36      	cmp	r5, #54	; 0x36
   b61ec:	bf88      	it	hi
   b61ee:	bd30      	pophi	{r4, r5, pc}
   b61f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b61f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b61f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b61fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6200:	d002      	beq.n	b6208 <__adddf3+0x70>
   b6202:	4240      	negs	r0, r0
   b6204:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6208:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b620c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6210:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b6214:	d002      	beq.n	b621c <__adddf3+0x84>
   b6216:	4252      	negs	r2, r2
   b6218:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b621c:	ea94 0f05 	teq	r4, r5
   b6220:	f000 80a7 	beq.w	b6372 <__adddf3+0x1da>
   b6224:	f1a4 0401 	sub.w	r4, r4, #1
   b6228:	f1d5 0e20 	rsbs	lr, r5, #32
   b622c:	db0d      	blt.n	b624a <__adddf3+0xb2>
   b622e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b6232:	fa22 f205 	lsr.w	r2, r2, r5
   b6236:	1880      	adds	r0, r0, r2
   b6238:	f141 0100 	adc.w	r1, r1, #0
   b623c:	fa03 f20e 	lsl.w	r2, r3, lr
   b6240:	1880      	adds	r0, r0, r2
   b6242:	fa43 f305 	asr.w	r3, r3, r5
   b6246:	4159      	adcs	r1, r3
   b6248:	e00e      	b.n	b6268 <__adddf3+0xd0>
   b624a:	f1a5 0520 	sub.w	r5, r5, #32
   b624e:	f10e 0e20 	add.w	lr, lr, #32
   b6252:	2a01      	cmp	r2, #1
   b6254:	fa03 fc0e 	lsl.w	ip, r3, lr
   b6258:	bf28      	it	cs
   b625a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b625e:	fa43 f305 	asr.w	r3, r3, r5
   b6262:	18c0      	adds	r0, r0, r3
   b6264:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b6268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b626c:	d507      	bpl.n	b627e <__adddf3+0xe6>
   b626e:	f04f 0e00 	mov.w	lr, #0
   b6272:	f1dc 0c00 	rsbs	ip, ip, #0
   b6276:	eb7e 0000 	sbcs.w	r0, lr, r0
   b627a:	eb6e 0101 	sbc.w	r1, lr, r1
   b627e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b6282:	d31b      	bcc.n	b62bc <__adddf3+0x124>
   b6284:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b6288:	d30c      	bcc.n	b62a4 <__adddf3+0x10c>
   b628a:	0849      	lsrs	r1, r1, #1
   b628c:	ea5f 0030 	movs.w	r0, r0, rrx
   b6290:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b6294:	f104 0401 	add.w	r4, r4, #1
   b6298:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b629c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b62a0:	f080 809a 	bcs.w	b63d8 <__adddf3+0x240>
   b62a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b62a8:	bf08      	it	eq
   b62aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b62ae:	f150 0000 	adcs.w	r0, r0, #0
   b62b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b62b6:	ea41 0105 	orr.w	r1, r1, r5
   b62ba:	bd30      	pop	{r4, r5, pc}
   b62bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b62c0:	4140      	adcs	r0, r0
   b62c2:	eb41 0101 	adc.w	r1, r1, r1
   b62c6:	3c01      	subs	r4, #1
   b62c8:	bf28      	it	cs
   b62ca:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b62ce:	d2e9      	bcs.n	b62a4 <__adddf3+0x10c>
   b62d0:	f091 0f00 	teq	r1, #0
   b62d4:	bf04      	itt	eq
   b62d6:	4601      	moveq	r1, r0
   b62d8:	2000      	moveq	r0, #0
   b62da:	fab1 f381 	clz	r3, r1
   b62de:	bf08      	it	eq
   b62e0:	3320      	addeq	r3, #32
   b62e2:	f1a3 030b 	sub.w	r3, r3, #11
   b62e6:	f1b3 0220 	subs.w	r2, r3, #32
   b62ea:	da0c      	bge.n	b6306 <__adddf3+0x16e>
   b62ec:	320c      	adds	r2, #12
   b62ee:	dd08      	ble.n	b6302 <__adddf3+0x16a>
   b62f0:	f102 0c14 	add.w	ip, r2, #20
   b62f4:	f1c2 020c 	rsb	r2, r2, #12
   b62f8:	fa01 f00c 	lsl.w	r0, r1, ip
   b62fc:	fa21 f102 	lsr.w	r1, r1, r2
   b6300:	e00c      	b.n	b631c <__adddf3+0x184>
   b6302:	f102 0214 	add.w	r2, r2, #20
   b6306:	bfd8      	it	le
   b6308:	f1c2 0c20 	rsble	ip, r2, #32
   b630c:	fa01 f102 	lsl.w	r1, r1, r2
   b6310:	fa20 fc0c 	lsr.w	ip, r0, ip
   b6314:	bfdc      	itt	le
   b6316:	ea41 010c 	orrle.w	r1, r1, ip
   b631a:	4090      	lslle	r0, r2
   b631c:	1ae4      	subs	r4, r4, r3
   b631e:	bfa2      	ittt	ge
   b6320:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b6324:	4329      	orrge	r1, r5
   b6326:	bd30      	popge	{r4, r5, pc}
   b6328:	ea6f 0404 	mvn.w	r4, r4
   b632c:	3c1f      	subs	r4, #31
   b632e:	da1c      	bge.n	b636a <__adddf3+0x1d2>
   b6330:	340c      	adds	r4, #12
   b6332:	dc0e      	bgt.n	b6352 <__adddf3+0x1ba>
   b6334:	f104 0414 	add.w	r4, r4, #20
   b6338:	f1c4 0220 	rsb	r2, r4, #32
   b633c:	fa20 f004 	lsr.w	r0, r0, r4
   b6340:	fa01 f302 	lsl.w	r3, r1, r2
   b6344:	ea40 0003 	orr.w	r0, r0, r3
   b6348:	fa21 f304 	lsr.w	r3, r1, r4
   b634c:	ea45 0103 	orr.w	r1, r5, r3
   b6350:	bd30      	pop	{r4, r5, pc}
   b6352:	f1c4 040c 	rsb	r4, r4, #12
   b6356:	f1c4 0220 	rsb	r2, r4, #32
   b635a:	fa20 f002 	lsr.w	r0, r0, r2
   b635e:	fa01 f304 	lsl.w	r3, r1, r4
   b6362:	ea40 0003 	orr.w	r0, r0, r3
   b6366:	4629      	mov	r1, r5
   b6368:	bd30      	pop	{r4, r5, pc}
   b636a:	fa21 f004 	lsr.w	r0, r1, r4
   b636e:	4629      	mov	r1, r5
   b6370:	bd30      	pop	{r4, r5, pc}
   b6372:	f094 0f00 	teq	r4, #0
   b6376:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b637a:	bf06      	itte	eq
   b637c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b6380:	3401      	addeq	r4, #1
   b6382:	3d01      	subne	r5, #1
   b6384:	e74e      	b.n	b6224 <__adddf3+0x8c>
   b6386:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b638a:	bf18      	it	ne
   b638c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6390:	d029      	beq.n	b63e6 <__adddf3+0x24e>
   b6392:	ea94 0f05 	teq	r4, r5
   b6396:	bf08      	it	eq
   b6398:	ea90 0f02 	teqeq	r0, r2
   b639c:	d005      	beq.n	b63aa <__adddf3+0x212>
   b639e:	ea54 0c00 	orrs.w	ip, r4, r0
   b63a2:	bf04      	itt	eq
   b63a4:	4619      	moveq	r1, r3
   b63a6:	4610      	moveq	r0, r2
   b63a8:	bd30      	pop	{r4, r5, pc}
   b63aa:	ea91 0f03 	teq	r1, r3
   b63ae:	bf1e      	ittt	ne
   b63b0:	2100      	movne	r1, #0
   b63b2:	2000      	movne	r0, #0
   b63b4:	bd30      	popne	{r4, r5, pc}
   b63b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b63ba:	d105      	bne.n	b63c8 <__adddf3+0x230>
   b63bc:	0040      	lsls	r0, r0, #1
   b63be:	4149      	adcs	r1, r1
   b63c0:	bf28      	it	cs
   b63c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b63c6:	bd30      	pop	{r4, r5, pc}
   b63c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b63cc:	bf3c      	itt	cc
   b63ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b63d2:	bd30      	popcc	{r4, r5, pc}
   b63d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b63d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b63dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b63e0:	f04f 0000 	mov.w	r0, #0
   b63e4:	bd30      	pop	{r4, r5, pc}
   b63e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b63ea:	bf1a      	itte	ne
   b63ec:	4619      	movne	r1, r3
   b63ee:	4610      	movne	r0, r2
   b63f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b63f4:	bf1c      	itt	ne
   b63f6:	460b      	movne	r3, r1
   b63f8:	4602      	movne	r2, r0
   b63fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b63fe:	bf06      	itte	eq
   b6400:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b6404:	ea91 0f03 	teqeq	r1, r3
   b6408:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b640c:	bd30      	pop	{r4, r5, pc}
   b640e:	bf00      	nop

000b6410 <__aeabi_ui2d>:
   b6410:	f090 0f00 	teq	r0, #0
   b6414:	bf04      	itt	eq
   b6416:	2100      	moveq	r1, #0
   b6418:	4770      	bxeq	lr
   b641a:	b530      	push	{r4, r5, lr}
   b641c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6420:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6424:	f04f 0500 	mov.w	r5, #0
   b6428:	f04f 0100 	mov.w	r1, #0
   b642c:	e750      	b.n	b62d0 <__adddf3+0x138>
   b642e:	bf00      	nop

000b6430 <__aeabi_i2d>:
   b6430:	f090 0f00 	teq	r0, #0
   b6434:	bf04      	itt	eq
   b6436:	2100      	moveq	r1, #0
   b6438:	4770      	bxeq	lr
   b643a:	b530      	push	{r4, r5, lr}
   b643c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6440:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6444:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6448:	bf48      	it	mi
   b644a:	4240      	negmi	r0, r0
   b644c:	f04f 0100 	mov.w	r1, #0
   b6450:	e73e      	b.n	b62d0 <__adddf3+0x138>
   b6452:	bf00      	nop

000b6454 <__aeabi_f2d>:
   b6454:	0042      	lsls	r2, r0, #1
   b6456:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b645a:	ea4f 0131 	mov.w	r1, r1, rrx
   b645e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b6462:	bf1f      	itttt	ne
   b6464:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b6468:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b646c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b6470:	4770      	bxne	lr
   b6472:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b6476:	bf08      	it	eq
   b6478:	4770      	bxeq	lr
   b647a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b647e:	bf04      	itt	eq
   b6480:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b6484:	4770      	bxeq	lr
   b6486:	b530      	push	{r4, r5, lr}
   b6488:	f44f 7460 	mov.w	r4, #896	; 0x380
   b648c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6490:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6494:	e71c      	b.n	b62d0 <__adddf3+0x138>
   b6496:	bf00      	nop

000b6498 <__aeabi_ul2d>:
   b6498:	ea50 0201 	orrs.w	r2, r0, r1
   b649c:	bf08      	it	eq
   b649e:	4770      	bxeq	lr
   b64a0:	b530      	push	{r4, r5, lr}
   b64a2:	f04f 0500 	mov.w	r5, #0
   b64a6:	e00a      	b.n	b64be <__aeabi_l2d+0x16>

000b64a8 <__aeabi_l2d>:
   b64a8:	ea50 0201 	orrs.w	r2, r0, r1
   b64ac:	bf08      	it	eq
   b64ae:	4770      	bxeq	lr
   b64b0:	b530      	push	{r4, r5, lr}
   b64b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b64b6:	d502      	bpl.n	b64be <__aeabi_l2d+0x16>
   b64b8:	4240      	negs	r0, r0
   b64ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b64be:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b64c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b64c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b64ca:	f43f aed8 	beq.w	b627e <__adddf3+0xe6>
   b64ce:	f04f 0203 	mov.w	r2, #3
   b64d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b64d6:	bf18      	it	ne
   b64d8:	3203      	addne	r2, #3
   b64da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b64de:	bf18      	it	ne
   b64e0:	3203      	addne	r2, #3
   b64e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b64e6:	f1c2 0320 	rsb	r3, r2, #32
   b64ea:	fa00 fc03 	lsl.w	ip, r0, r3
   b64ee:	fa20 f002 	lsr.w	r0, r0, r2
   b64f2:	fa01 fe03 	lsl.w	lr, r1, r3
   b64f6:	ea40 000e 	orr.w	r0, r0, lr
   b64fa:	fa21 f102 	lsr.w	r1, r1, r2
   b64fe:	4414      	add	r4, r2
   b6500:	e6bd      	b.n	b627e <__adddf3+0xe6>
   b6502:	bf00      	nop

000b6504 <__aeabi_dmul>:
   b6504:	b570      	push	{r4, r5, r6, lr}
   b6506:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b650a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b650e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6512:	bf1d      	ittte	ne
   b6514:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6518:	ea94 0f0c 	teqne	r4, ip
   b651c:	ea95 0f0c 	teqne	r5, ip
   b6520:	f000 f8de 	bleq	b66e0 <__aeabi_dmul+0x1dc>
   b6524:	442c      	add	r4, r5
   b6526:	ea81 0603 	eor.w	r6, r1, r3
   b652a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b652e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b6532:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b6536:	bf18      	it	ne
   b6538:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b653c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6540:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6544:	d038      	beq.n	b65b8 <__aeabi_dmul+0xb4>
   b6546:	fba0 ce02 	umull	ip, lr, r0, r2
   b654a:	f04f 0500 	mov.w	r5, #0
   b654e:	fbe1 e502 	umlal	lr, r5, r1, r2
   b6552:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b6556:	fbe0 e503 	umlal	lr, r5, r0, r3
   b655a:	f04f 0600 	mov.w	r6, #0
   b655e:	fbe1 5603 	umlal	r5, r6, r1, r3
   b6562:	f09c 0f00 	teq	ip, #0
   b6566:	bf18      	it	ne
   b6568:	f04e 0e01 	orrne.w	lr, lr, #1
   b656c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b6570:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6574:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b6578:	d204      	bcs.n	b6584 <__aeabi_dmul+0x80>
   b657a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b657e:	416d      	adcs	r5, r5
   b6580:	eb46 0606 	adc.w	r6, r6, r6
   b6584:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b6588:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b658c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b6590:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b6594:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6598:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b659c:	bf88      	it	hi
   b659e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b65a2:	d81e      	bhi.n	b65e2 <__aeabi_dmul+0xde>
   b65a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b65a8:	bf08      	it	eq
   b65aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b65ae:	f150 0000 	adcs.w	r0, r0, #0
   b65b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b65b6:	bd70      	pop	{r4, r5, r6, pc}
   b65b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b65bc:	ea46 0101 	orr.w	r1, r6, r1
   b65c0:	ea40 0002 	orr.w	r0, r0, r2
   b65c4:	ea81 0103 	eor.w	r1, r1, r3
   b65c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b65cc:	bfc2      	ittt	gt
   b65ce:	ebd4 050c 	rsbsgt	r5, r4, ip
   b65d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b65d6:	bd70      	popgt	{r4, r5, r6, pc}
   b65d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b65dc:	f04f 0e00 	mov.w	lr, #0
   b65e0:	3c01      	subs	r4, #1
   b65e2:	f300 80ab 	bgt.w	b673c <__aeabi_dmul+0x238>
   b65e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b65ea:	bfde      	ittt	le
   b65ec:	2000      	movle	r0, #0
   b65ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b65f2:	bd70      	pople	{r4, r5, r6, pc}
   b65f4:	f1c4 0400 	rsb	r4, r4, #0
   b65f8:	3c20      	subs	r4, #32
   b65fa:	da35      	bge.n	b6668 <__aeabi_dmul+0x164>
   b65fc:	340c      	adds	r4, #12
   b65fe:	dc1b      	bgt.n	b6638 <__aeabi_dmul+0x134>
   b6600:	f104 0414 	add.w	r4, r4, #20
   b6604:	f1c4 0520 	rsb	r5, r4, #32
   b6608:	fa00 f305 	lsl.w	r3, r0, r5
   b660c:	fa20 f004 	lsr.w	r0, r0, r4
   b6610:	fa01 f205 	lsl.w	r2, r1, r5
   b6614:	ea40 0002 	orr.w	r0, r0, r2
   b6618:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b661c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6624:	fa21 f604 	lsr.w	r6, r1, r4
   b6628:	eb42 0106 	adc.w	r1, r2, r6
   b662c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6630:	bf08      	it	eq
   b6632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6636:	bd70      	pop	{r4, r5, r6, pc}
   b6638:	f1c4 040c 	rsb	r4, r4, #12
   b663c:	f1c4 0520 	rsb	r5, r4, #32
   b6640:	fa00 f304 	lsl.w	r3, r0, r4
   b6644:	fa20 f005 	lsr.w	r0, r0, r5
   b6648:	fa01 f204 	lsl.w	r2, r1, r4
   b664c:	ea40 0002 	orr.w	r0, r0, r2
   b6650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6658:	f141 0100 	adc.w	r1, r1, #0
   b665c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6660:	bf08      	it	eq
   b6662:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6666:	bd70      	pop	{r4, r5, r6, pc}
   b6668:	f1c4 0520 	rsb	r5, r4, #32
   b666c:	fa00 f205 	lsl.w	r2, r0, r5
   b6670:	ea4e 0e02 	orr.w	lr, lr, r2
   b6674:	fa20 f304 	lsr.w	r3, r0, r4
   b6678:	fa01 f205 	lsl.w	r2, r1, r5
   b667c:	ea43 0302 	orr.w	r3, r3, r2
   b6680:	fa21 f004 	lsr.w	r0, r1, r4
   b6684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6688:	fa21 f204 	lsr.w	r2, r1, r4
   b668c:	ea20 0002 	bic.w	r0, r0, r2
   b6690:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b6694:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6698:	bf08      	it	eq
   b669a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b669e:	bd70      	pop	{r4, r5, r6, pc}
   b66a0:	f094 0f00 	teq	r4, #0
   b66a4:	d10f      	bne.n	b66c6 <__aeabi_dmul+0x1c2>
   b66a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b66aa:	0040      	lsls	r0, r0, #1
   b66ac:	eb41 0101 	adc.w	r1, r1, r1
   b66b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b66b4:	bf08      	it	eq
   b66b6:	3c01      	subeq	r4, #1
   b66b8:	d0f7      	beq.n	b66aa <__aeabi_dmul+0x1a6>
   b66ba:	ea41 0106 	orr.w	r1, r1, r6
   b66be:	f095 0f00 	teq	r5, #0
   b66c2:	bf18      	it	ne
   b66c4:	4770      	bxne	lr
   b66c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b66ca:	0052      	lsls	r2, r2, #1
   b66cc:	eb43 0303 	adc.w	r3, r3, r3
   b66d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b66d4:	bf08      	it	eq
   b66d6:	3d01      	subeq	r5, #1
   b66d8:	d0f7      	beq.n	b66ca <__aeabi_dmul+0x1c6>
   b66da:	ea43 0306 	orr.w	r3, r3, r6
   b66de:	4770      	bx	lr
   b66e0:	ea94 0f0c 	teq	r4, ip
   b66e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b66e8:	bf18      	it	ne
   b66ea:	ea95 0f0c 	teqne	r5, ip
   b66ee:	d00c      	beq.n	b670a <__aeabi_dmul+0x206>
   b66f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b66f4:	bf18      	it	ne
   b66f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b66fa:	d1d1      	bne.n	b66a0 <__aeabi_dmul+0x19c>
   b66fc:	ea81 0103 	eor.w	r1, r1, r3
   b6700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6704:	f04f 0000 	mov.w	r0, #0
   b6708:	bd70      	pop	{r4, r5, r6, pc}
   b670a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b670e:	bf06      	itte	eq
   b6710:	4610      	moveq	r0, r2
   b6712:	4619      	moveq	r1, r3
   b6714:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6718:	d019      	beq.n	b674e <__aeabi_dmul+0x24a>
   b671a:	ea94 0f0c 	teq	r4, ip
   b671e:	d102      	bne.n	b6726 <__aeabi_dmul+0x222>
   b6720:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b6724:	d113      	bne.n	b674e <__aeabi_dmul+0x24a>
   b6726:	ea95 0f0c 	teq	r5, ip
   b672a:	d105      	bne.n	b6738 <__aeabi_dmul+0x234>
   b672c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6730:	bf1c      	itt	ne
   b6732:	4610      	movne	r0, r2
   b6734:	4619      	movne	r1, r3
   b6736:	d10a      	bne.n	b674e <__aeabi_dmul+0x24a>
   b6738:	ea81 0103 	eor.w	r1, r1, r3
   b673c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6740:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6748:	f04f 0000 	mov.w	r0, #0
   b674c:	bd70      	pop	{r4, r5, r6, pc}
   b674e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6752:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b6756:	bd70      	pop	{r4, r5, r6, pc}

000b6758 <__aeabi_ddiv>:
   b6758:	b570      	push	{r4, r5, r6, lr}
   b675a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b675e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6762:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6766:	bf1d      	ittte	ne
   b6768:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b676c:	ea94 0f0c 	teqne	r4, ip
   b6770:	ea95 0f0c 	teqne	r5, ip
   b6774:	f000 f8a7 	bleq	b68c6 <__aeabi_ddiv+0x16e>
   b6778:	eba4 0405 	sub.w	r4, r4, r5
   b677c:	ea81 0e03 	eor.w	lr, r1, r3
   b6780:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6784:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6788:	f000 8088 	beq.w	b689c <__aeabi_ddiv+0x144>
   b678c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6790:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b6794:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b6798:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b679c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b67a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b67a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b67a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b67ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b67b0:	429d      	cmp	r5, r3
   b67b2:	bf08      	it	eq
   b67b4:	4296      	cmpeq	r6, r2
   b67b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b67ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b67be:	d202      	bcs.n	b67c6 <__aeabi_ddiv+0x6e>
   b67c0:	085b      	lsrs	r3, r3, #1
   b67c2:	ea4f 0232 	mov.w	r2, r2, rrx
   b67c6:	1ab6      	subs	r6, r6, r2
   b67c8:	eb65 0503 	sbc.w	r5, r5, r3
   b67cc:	085b      	lsrs	r3, r3, #1
   b67ce:	ea4f 0232 	mov.w	r2, r2, rrx
   b67d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b67d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b67da:	ebb6 0e02 	subs.w	lr, r6, r2
   b67de:	eb75 0e03 	sbcs.w	lr, r5, r3
   b67e2:	bf22      	ittt	cs
   b67e4:	1ab6      	subcs	r6, r6, r2
   b67e6:	4675      	movcs	r5, lr
   b67e8:	ea40 000c 	orrcs.w	r0, r0, ip
   b67ec:	085b      	lsrs	r3, r3, #1
   b67ee:	ea4f 0232 	mov.w	r2, r2, rrx
   b67f2:	ebb6 0e02 	subs.w	lr, r6, r2
   b67f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b67fa:	bf22      	ittt	cs
   b67fc:	1ab6      	subcs	r6, r6, r2
   b67fe:	4675      	movcs	r5, lr
   b6800:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b6804:	085b      	lsrs	r3, r3, #1
   b6806:	ea4f 0232 	mov.w	r2, r2, rrx
   b680a:	ebb6 0e02 	subs.w	lr, r6, r2
   b680e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6812:	bf22      	ittt	cs
   b6814:	1ab6      	subcs	r6, r6, r2
   b6816:	4675      	movcs	r5, lr
   b6818:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b681c:	085b      	lsrs	r3, r3, #1
   b681e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6822:	ebb6 0e02 	subs.w	lr, r6, r2
   b6826:	eb75 0e03 	sbcs.w	lr, r5, r3
   b682a:	bf22      	ittt	cs
   b682c:	1ab6      	subcs	r6, r6, r2
   b682e:	4675      	movcs	r5, lr
   b6830:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b6834:	ea55 0e06 	orrs.w	lr, r5, r6
   b6838:	d018      	beq.n	b686c <__aeabi_ddiv+0x114>
   b683a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b683e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b6842:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b6846:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b684a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b684e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b6852:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b6856:	d1c0      	bne.n	b67da <__aeabi_ddiv+0x82>
   b6858:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b685c:	d10b      	bne.n	b6876 <__aeabi_ddiv+0x11e>
   b685e:	ea41 0100 	orr.w	r1, r1, r0
   b6862:	f04f 0000 	mov.w	r0, #0
   b6866:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b686a:	e7b6      	b.n	b67da <__aeabi_ddiv+0x82>
   b686c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6870:	bf04      	itt	eq
   b6872:	4301      	orreq	r1, r0
   b6874:	2000      	moveq	r0, #0
   b6876:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b687a:	bf88      	it	hi
   b687c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6880:	f63f aeaf 	bhi.w	b65e2 <__aeabi_dmul+0xde>
   b6884:	ebb5 0c03 	subs.w	ip, r5, r3
   b6888:	bf04      	itt	eq
   b688a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b688e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6892:	f150 0000 	adcs.w	r0, r0, #0
   b6896:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b689a:	bd70      	pop	{r4, r5, r6, pc}
   b689c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b68a0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b68a4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b68a8:	bfc2      	ittt	gt
   b68aa:	ebd4 050c 	rsbsgt	r5, r4, ip
   b68ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b68b2:	bd70      	popgt	{r4, r5, r6, pc}
   b68b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b68b8:	f04f 0e00 	mov.w	lr, #0
   b68bc:	3c01      	subs	r4, #1
   b68be:	e690      	b.n	b65e2 <__aeabi_dmul+0xde>
   b68c0:	ea45 0e06 	orr.w	lr, r5, r6
   b68c4:	e68d      	b.n	b65e2 <__aeabi_dmul+0xde>
   b68c6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b68ca:	ea94 0f0c 	teq	r4, ip
   b68ce:	bf08      	it	eq
   b68d0:	ea95 0f0c 	teqeq	r5, ip
   b68d4:	f43f af3b 	beq.w	b674e <__aeabi_dmul+0x24a>
   b68d8:	ea94 0f0c 	teq	r4, ip
   b68dc:	d10a      	bne.n	b68f4 <__aeabi_ddiv+0x19c>
   b68de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b68e2:	f47f af34 	bne.w	b674e <__aeabi_dmul+0x24a>
   b68e6:	ea95 0f0c 	teq	r5, ip
   b68ea:	f47f af25 	bne.w	b6738 <__aeabi_dmul+0x234>
   b68ee:	4610      	mov	r0, r2
   b68f0:	4619      	mov	r1, r3
   b68f2:	e72c      	b.n	b674e <__aeabi_dmul+0x24a>
   b68f4:	ea95 0f0c 	teq	r5, ip
   b68f8:	d106      	bne.n	b6908 <__aeabi_ddiv+0x1b0>
   b68fa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b68fe:	f43f aefd 	beq.w	b66fc <__aeabi_dmul+0x1f8>
   b6902:	4610      	mov	r0, r2
   b6904:	4619      	mov	r1, r3
   b6906:	e722      	b.n	b674e <__aeabi_dmul+0x24a>
   b6908:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b690c:	bf18      	it	ne
   b690e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6912:	f47f aec5 	bne.w	b66a0 <__aeabi_dmul+0x19c>
   b6916:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b691a:	f47f af0d 	bne.w	b6738 <__aeabi_dmul+0x234>
   b691e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b6922:	f47f aeeb 	bne.w	b66fc <__aeabi_dmul+0x1f8>
   b6926:	e712      	b.n	b674e <__aeabi_dmul+0x24a>

000b6928 <__gedf2>:
   b6928:	f04f 3cff 	mov.w	ip, #4294967295
   b692c:	e006      	b.n	b693c <__cmpdf2+0x4>
   b692e:	bf00      	nop

000b6930 <__ledf2>:
   b6930:	f04f 0c01 	mov.w	ip, #1
   b6934:	e002      	b.n	b693c <__cmpdf2+0x4>
   b6936:	bf00      	nop

000b6938 <__cmpdf2>:
   b6938:	f04f 0c01 	mov.w	ip, #1
   b693c:	f84d cd04 	str.w	ip, [sp, #-4]!
   b6940:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6944:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6948:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b694c:	bf18      	it	ne
   b694e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b6952:	d01b      	beq.n	b698c <__cmpdf2+0x54>
   b6954:	b001      	add	sp, #4
   b6956:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b695a:	bf0c      	ite	eq
   b695c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b6960:	ea91 0f03 	teqne	r1, r3
   b6964:	bf02      	ittt	eq
   b6966:	ea90 0f02 	teqeq	r0, r2
   b696a:	2000      	moveq	r0, #0
   b696c:	4770      	bxeq	lr
   b696e:	f110 0f00 	cmn.w	r0, #0
   b6972:	ea91 0f03 	teq	r1, r3
   b6976:	bf58      	it	pl
   b6978:	4299      	cmppl	r1, r3
   b697a:	bf08      	it	eq
   b697c:	4290      	cmpeq	r0, r2
   b697e:	bf2c      	ite	cs
   b6980:	17d8      	asrcs	r0, r3, #31
   b6982:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b6986:	f040 0001 	orr.w	r0, r0, #1
   b698a:	4770      	bx	lr
   b698c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6994:	d102      	bne.n	b699c <__cmpdf2+0x64>
   b6996:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b699a:	d107      	bne.n	b69ac <__cmpdf2+0x74>
   b699c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b69a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b69a4:	d1d6      	bne.n	b6954 <__cmpdf2+0x1c>
   b69a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b69aa:	d0d3      	beq.n	b6954 <__cmpdf2+0x1c>
   b69ac:	f85d 0b04 	ldr.w	r0, [sp], #4
   b69b0:	4770      	bx	lr
   b69b2:	bf00      	nop

000b69b4 <__aeabi_cdrcmple>:
   b69b4:	4684      	mov	ip, r0
   b69b6:	4610      	mov	r0, r2
   b69b8:	4662      	mov	r2, ip
   b69ba:	468c      	mov	ip, r1
   b69bc:	4619      	mov	r1, r3
   b69be:	4663      	mov	r3, ip
   b69c0:	e000      	b.n	b69c4 <__aeabi_cdcmpeq>
   b69c2:	bf00      	nop

000b69c4 <__aeabi_cdcmpeq>:
   b69c4:	b501      	push	{r0, lr}
   b69c6:	f7ff ffb7 	bl	b6938 <__cmpdf2>
   b69ca:	2800      	cmp	r0, #0
   b69cc:	bf48      	it	mi
   b69ce:	f110 0f00 	cmnmi.w	r0, #0
   b69d2:	bd01      	pop	{r0, pc}

000b69d4 <__aeabi_dcmpeq>:
   b69d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b69d8:	f7ff fff4 	bl	b69c4 <__aeabi_cdcmpeq>
   b69dc:	bf0c      	ite	eq
   b69de:	2001      	moveq	r0, #1
   b69e0:	2000      	movne	r0, #0
   b69e2:	f85d fb08 	ldr.w	pc, [sp], #8
   b69e6:	bf00      	nop

000b69e8 <__aeabi_dcmplt>:
   b69e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b69ec:	f7ff ffea 	bl	b69c4 <__aeabi_cdcmpeq>
   b69f0:	bf34      	ite	cc
   b69f2:	2001      	movcc	r0, #1
   b69f4:	2000      	movcs	r0, #0
   b69f6:	f85d fb08 	ldr.w	pc, [sp], #8
   b69fa:	bf00      	nop

000b69fc <__aeabi_dcmple>:
   b69fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6a00:	f7ff ffe0 	bl	b69c4 <__aeabi_cdcmpeq>
   b6a04:	bf94      	ite	ls
   b6a06:	2001      	movls	r0, #1
   b6a08:	2000      	movhi	r0, #0
   b6a0a:	f85d fb08 	ldr.w	pc, [sp], #8
   b6a0e:	bf00      	nop

000b6a10 <__aeabi_dcmpge>:
   b6a10:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6a14:	f7ff ffce 	bl	b69b4 <__aeabi_cdrcmple>
   b6a18:	bf94      	ite	ls
   b6a1a:	2001      	movls	r0, #1
   b6a1c:	2000      	movhi	r0, #0
   b6a1e:	f85d fb08 	ldr.w	pc, [sp], #8
   b6a22:	bf00      	nop

000b6a24 <__aeabi_dcmpgt>:
   b6a24:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6a28:	f7ff ffc4 	bl	b69b4 <__aeabi_cdrcmple>
   b6a2c:	bf34      	ite	cc
   b6a2e:	2001      	movcc	r0, #1
   b6a30:	2000      	movcs	r0, #0
   b6a32:	f85d fb08 	ldr.w	pc, [sp], #8
   b6a36:	bf00      	nop

000b6a38 <__aeabi_dcmpun>:
   b6a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6a40:	d102      	bne.n	b6a48 <__aeabi_dcmpun+0x10>
   b6a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b6a46:	d10a      	bne.n	b6a5e <__aeabi_dcmpun+0x26>
   b6a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6a50:	d102      	bne.n	b6a58 <__aeabi_dcmpun+0x20>
   b6a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b6a56:	d102      	bne.n	b6a5e <__aeabi_dcmpun+0x26>
   b6a58:	f04f 0000 	mov.w	r0, #0
   b6a5c:	4770      	bx	lr
   b6a5e:	f04f 0001 	mov.w	r0, #1
   b6a62:	4770      	bx	lr

000b6a64 <__aeabi_d2f>:
   b6a64:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b6a68:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b6a6c:	bf24      	itt	cs
   b6a6e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b6a72:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b6a76:	d90d      	bls.n	b6a94 <__aeabi_d2f+0x30>
   b6a78:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b6a7c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b6a80:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b6a84:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b6a88:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b6a8c:	bf08      	it	eq
   b6a8e:	f020 0001 	biceq.w	r0, r0, #1
   b6a92:	4770      	bx	lr
   b6a94:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b6a98:	d121      	bne.n	b6ade <__aeabi_d2f+0x7a>
   b6a9a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b6a9e:	bfbc      	itt	lt
   b6aa0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b6aa4:	4770      	bxlt	lr
   b6aa6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6aaa:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b6aae:	f1c2 0218 	rsb	r2, r2, #24
   b6ab2:	f1c2 0c20 	rsb	ip, r2, #32
   b6ab6:	fa10 f30c 	lsls.w	r3, r0, ip
   b6aba:	fa20 f002 	lsr.w	r0, r0, r2
   b6abe:	bf18      	it	ne
   b6ac0:	f040 0001 	orrne.w	r0, r0, #1
   b6ac4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6ac8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b6acc:	fa03 fc0c 	lsl.w	ip, r3, ip
   b6ad0:	ea40 000c 	orr.w	r0, r0, ip
   b6ad4:	fa23 f302 	lsr.w	r3, r3, r2
   b6ad8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b6adc:	e7cc      	b.n	b6a78 <__aeabi_d2f+0x14>
   b6ade:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b6ae2:	d107      	bne.n	b6af4 <__aeabi_d2f+0x90>
   b6ae4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b6ae8:	bf1e      	ittt	ne
   b6aea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b6aee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b6af2:	4770      	bxne	lr
   b6af4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b6af8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b6afc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b6b00:	4770      	bx	lr
   b6b02:	bf00      	nop

000b6b04 <atexit>:
   b6b04:	2300      	movs	r3, #0
   b6b06:	4601      	mov	r1, r0
   b6b08:	461a      	mov	r2, r3
   b6b0a:	4618      	mov	r0, r3
   b6b0c:	f000 b84c 	b.w	b6ba8 <__register_exitproc>

000b6b10 <memcpy>:
   b6b10:	440a      	add	r2, r1
   b6b12:	4291      	cmp	r1, r2
   b6b14:	f100 33ff 	add.w	r3, r0, #4294967295
   b6b18:	d100      	bne.n	b6b1c <memcpy+0xc>
   b6b1a:	4770      	bx	lr
   b6b1c:	b510      	push	{r4, lr}
   b6b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6b22:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6b26:	4291      	cmp	r1, r2
   b6b28:	d1f9      	bne.n	b6b1e <memcpy+0xe>
   b6b2a:	bd10      	pop	{r4, pc}

000b6b2c <memset>:
   b6b2c:	4402      	add	r2, r0
   b6b2e:	4603      	mov	r3, r0
   b6b30:	4293      	cmp	r3, r2
   b6b32:	d100      	bne.n	b6b36 <memset+0xa>
   b6b34:	4770      	bx	lr
   b6b36:	f803 1b01 	strb.w	r1, [r3], #1
   b6b3a:	e7f9      	b.n	b6b30 <memset+0x4>

000b6b3c <srand>:
   b6b3c:	b538      	push	{r3, r4, r5, lr}
   b6b3e:	4b10      	ldr	r3, [pc, #64]	; (b6b80 <srand+0x44>)
   b6b40:	681d      	ldr	r5, [r3, #0]
   b6b42:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6b44:	4604      	mov	r4, r0
   b6b46:	b9b3      	cbnz	r3, b6b76 <srand+0x3a>
   b6b48:	2018      	movs	r0, #24
   b6b4a:	f7fd fd71 	bl	b4630 <malloc>
   b6b4e:	4602      	mov	r2, r0
   b6b50:	63a8      	str	r0, [r5, #56]	; 0x38
   b6b52:	b920      	cbnz	r0, b6b5e <srand+0x22>
   b6b54:	4b0b      	ldr	r3, [pc, #44]	; (b6b84 <srand+0x48>)
   b6b56:	480c      	ldr	r0, [pc, #48]	; (b6b88 <srand+0x4c>)
   b6b58:	2142      	movs	r1, #66	; 0x42
   b6b5a:	f7fd fd89 	bl	b4670 <__assert_func>
   b6b5e:	490b      	ldr	r1, [pc, #44]	; (b6b8c <srand+0x50>)
   b6b60:	4b0b      	ldr	r3, [pc, #44]	; (b6b90 <srand+0x54>)
   b6b62:	e9c0 1300 	strd	r1, r3, [r0]
   b6b66:	4b0b      	ldr	r3, [pc, #44]	; (b6b94 <srand+0x58>)
   b6b68:	6083      	str	r3, [r0, #8]
   b6b6a:	230b      	movs	r3, #11
   b6b6c:	8183      	strh	r3, [r0, #12]
   b6b6e:	2100      	movs	r1, #0
   b6b70:	2001      	movs	r0, #1
   b6b72:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6b76:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6b78:	2200      	movs	r2, #0
   b6b7a:	611c      	str	r4, [r3, #16]
   b6b7c:	615a      	str	r2, [r3, #20]
   b6b7e:	bd38      	pop	{r3, r4, r5, pc}
   b6b80:	2003e61c 	.word	0x2003e61c
   b6b84:	000b6e38 	.word	0x000b6e38
   b6b88:	000b6e4f 	.word	0x000b6e4f
   b6b8c:	abcd330e 	.word	0xabcd330e
   b6b90:	e66d1234 	.word	0xe66d1234
   b6b94:	0005deec 	.word	0x0005deec

000b6b98 <strlen>:
   b6b98:	4603      	mov	r3, r0
   b6b9a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6b9e:	2a00      	cmp	r2, #0
   b6ba0:	d1fb      	bne.n	b6b9a <strlen+0x2>
   b6ba2:	1a18      	subs	r0, r3, r0
   b6ba4:	3801      	subs	r0, #1
   b6ba6:	4770      	bx	lr

000b6ba8 <__register_exitproc>:
   b6ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6bac:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6c68 <__register_exitproc+0xc0>
   b6bb0:	4606      	mov	r6, r0
   b6bb2:	f8d8 0000 	ldr.w	r0, [r8]
   b6bb6:	461f      	mov	r7, r3
   b6bb8:	460d      	mov	r5, r1
   b6bba:	4691      	mov	r9, r2
   b6bbc:	f000 f856 	bl	b6c6c <__retarget_lock_acquire_recursive>
   b6bc0:	4b25      	ldr	r3, [pc, #148]	; (b6c58 <__register_exitproc+0xb0>)
   b6bc2:	681c      	ldr	r4, [r3, #0]
   b6bc4:	b934      	cbnz	r4, b6bd4 <__register_exitproc+0x2c>
   b6bc6:	4c25      	ldr	r4, [pc, #148]	; (b6c5c <__register_exitproc+0xb4>)
   b6bc8:	601c      	str	r4, [r3, #0]
   b6bca:	4b25      	ldr	r3, [pc, #148]	; (b6c60 <__register_exitproc+0xb8>)
   b6bcc:	b113      	cbz	r3, b6bd4 <__register_exitproc+0x2c>
   b6bce:	681b      	ldr	r3, [r3, #0]
   b6bd0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6bd4:	6863      	ldr	r3, [r4, #4]
   b6bd6:	2b1f      	cmp	r3, #31
   b6bd8:	dd07      	ble.n	b6bea <__register_exitproc+0x42>
   b6bda:	f8d8 0000 	ldr.w	r0, [r8]
   b6bde:	f000 f847 	bl	b6c70 <__retarget_lock_release_recursive>
   b6be2:	f04f 30ff 	mov.w	r0, #4294967295
   b6be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6bea:	b34e      	cbz	r6, b6c40 <__register_exitproc+0x98>
   b6bec:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6bf0:	b988      	cbnz	r0, b6c16 <__register_exitproc+0x6e>
   b6bf2:	4b1c      	ldr	r3, [pc, #112]	; (b6c64 <__register_exitproc+0xbc>)
   b6bf4:	b923      	cbnz	r3, b6c00 <__register_exitproc+0x58>
   b6bf6:	f8d8 0000 	ldr.w	r0, [r8]
   b6bfa:	f000 f838 	bl	b6c6e <__retarget_lock_release>
   b6bfe:	e7f0      	b.n	b6be2 <__register_exitproc+0x3a>
   b6c00:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6c04:	f7fd fd14 	bl	b4630 <malloc>
   b6c08:	2800      	cmp	r0, #0
   b6c0a:	d0f4      	beq.n	b6bf6 <__register_exitproc+0x4e>
   b6c0c:	2300      	movs	r3, #0
   b6c0e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6c12:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6c16:	6863      	ldr	r3, [r4, #4]
   b6c18:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6c1c:	2201      	movs	r2, #1
   b6c1e:	409a      	lsls	r2, r3
   b6c20:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6c24:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6c28:	4313      	orrs	r3, r2
   b6c2a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6c2e:	2e02      	cmp	r6, #2
   b6c30:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6c34:	bf02      	ittt	eq
   b6c36:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6c3a:	4313      	orreq	r3, r2
   b6c3c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6c40:	6863      	ldr	r3, [r4, #4]
   b6c42:	f8d8 0000 	ldr.w	r0, [r8]
   b6c46:	1c5a      	adds	r2, r3, #1
   b6c48:	3302      	adds	r3, #2
   b6c4a:	6062      	str	r2, [r4, #4]
   b6c4c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6c50:	f000 f80e 	bl	b6c70 <__retarget_lock_release_recursive>
   b6c54:	2000      	movs	r0, #0
   b6c56:	e7c6      	b.n	b6be6 <__register_exitproc+0x3e>
   b6c58:	2003e7e8 	.word	0x2003e7e8
   b6c5c:	2003e75c 	.word	0x2003e75c
   b6c60:	00000000 	.word	0x00000000
   b6c64:	000b4631 	.word	0x000b4631
   b6c68:	2003e680 	.word	0x2003e680

000b6c6c <__retarget_lock_acquire_recursive>:
   b6c6c:	4770      	bx	lr

000b6c6e <__retarget_lock_release>:
   b6c6e:	4770      	bx	lr

000b6c70 <__retarget_lock_release_recursive>:
   b6c70:	4770      	bx	lr

000b6c72 <link_code_end>:
	...

000b6c74 <dynalib_user>:
   b6c74:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b6c84:	0000 0000 504c 204f 6925 202c 6f63 636e     ....LPO %i, conc
   b6c94:	6e65 2520 2e30 6632 202c 6172 6974 206f     en %0.2f, ratio 
   b6ca4:	3025 322e 0a66 0000                         %0.2f...

000b6cac <_ZTVN5spark13EthernetClassE>:
	...
   b6cb4:	46ef 000b 46e5 000b 46db 000b 46d1 000b     .F...F...F...F..
   b6cc4:	46c5 000b 46b9 000b 4d9d 000b 4da5 000b     .F...F...M...M..
   b6cd4:	46ad 000b 46a5 000b 469b 000b 4691 000b     .F...F...F...F..
   b6ce4:	4dd5 000b 7061 0070 5925 252d 2d6d 6425     .M..app.%Y-%m-%d
   b6cf4:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b6d04:	6d69 0065                                   ime.

000b6d08 <_ZTV9IPAddress>:
	...
   b6d10:	49e5 000b 49d5 000b 49d7 000b               .I...I...I..

000b6d1c <_ZTV9USBSerial>:
	...
   b6d24:	4acb 000b 4b33 000b 4b09 000b 4755 000b     .J..3K...K..UG..
   b6d34:	4afb 000b 4acd 000b 4add 000b 4b2d 000b     .J...J...J..-K..
   b6d44:	4aed 000b 4ac5 000b                         .J...J..

000b6d4c <_ZTV11USARTSerial>:
	...
   b6d54:	4bcd 000b 4c39 000b 4c11 000b 4755 000b     .K..9L...L..UG..
   b6d64:	4be1 000b 4bfd 000b 4bef 000b 4c0b 000b     .K...K...K...L..
   b6d74:	4bcf 000b 4bd3 000b                         .K...K..

000b6d7c <_ZTV7TwoWire>:
	...
   b6d84:	4c71 000b 4cbb 000b 4c93 000b 4c73 000b     qL...L...L..sL..
   b6d94:	4c9b 000b 4ca3 000b 4cab 000b 4cb3 000b     .L...L...L...L..

000b6da4 <_ZTVN5spark9WiFiClassE>:
	...
   b6dac:	4d3f 000b 4d35 000b 4d2b 000b 4ced 000b     ?M..5M..+M...L..
   b6dbc:	4861 000b 4d1f 000b 4d9d 000b 4da5 000b     aH...M...M...M..
   b6dcc:	4d13 000b 4d0b 000b 4d01 000b 4cf7 000b     .M...M...M...L..
   b6ddc:	4dd5 000b                                   .M..

000b6de0 <_ZTVN5spark12NetworkClassE>:
	...
   b6de8:	4d5d 000b 4d67 000b 4d71 000b 4d7b 000b     ]M..gM..qM..{M..
   b6df8:	4d85 000b 4d91 000b 4d9d 000b 4da5 000b     .M...M...M...M..
   b6e08:	4dad 000b 4db9 000b 4dc1 000b 4dcb 000b     .M...M...M...M..
   b6e18:	4dd5 000b                                   .M..

000b6e1c <_ZSt7nothrow>:
	...

000b6e28 <TWO52>:
   b6e28:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   b6e38:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   b6e48:	6563 6465 6465 2f00 6e6d 2f74 6f77 6b72     ceeded./mnt/work
   b6e58:	7073 6361 2f65 6f77 6b72 7073 6361 2f65     space/workspace/
   b6e68:	4347 2d43 3031 702d 7069 6c65 6e69 2f65     GCC-10-pipeline/
   b6e78:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   b6e88:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   b6e98:	3231 5f34 3631 3630 3831 3630 3134 732f     124_1606180641/s
   b6ea8:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   b6eb8:	6c2f 6269 2f63 7473 6c64 6269 722f 6e61     /libc/stdlib/ran
   b6ec8:	2e64 0063                                   d.c.

000b6ecc <link_const_variable_data_end>:
   b6ecc:	000b42f1 	.word	0x000b42f1
   b6ed0:	000b46f9 	.word	0x000b46f9
   b6ed4:	000b4721 	.word	0x000b4721
   b6ed8:	000b4745 	.word	0x000b4745
   b6edc:	000b486d 	.word	0x000b486d
   b6ee0:	000b487d 	.word	0x000b487d
   b6ee4:	000b4891 	.word	0x000b4891
   b6ee8:	000b4d49 	.word	0x000b4d49
   b6eec:	000b4ead 	.word	0x000b4ead
